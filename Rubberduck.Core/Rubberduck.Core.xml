<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rubberduck.Core</name>
    </assembly>
    <members>
        <member name="M:Rubberduck.App.UpdateLoggingLevelOnShutdown">
            <summary>
            Ensure that log level is changed to "none" after a successful
            run of Rubberduck for first time. By default, we ship with 
            log level set to Trace (0) but once it's installed and has
            ran without problem, it should be set to None (6)
            </summary>
        </member>
        <member name="P:Rubberduck.AutoComplete.Service.SelfClosingPair.IsSymetric">
            <summary>
            True if <see cref="P:Rubberduck.AutoComplete.Service.SelfClosingPair.OpeningChar"/> is the same as <see cref="P:Rubberduck.AutoComplete.Service.SelfClosingPair.ClosingChar"/>.
            </summary>
        </member>
        <member name="M:Rubberduck.AutoComplete.Service.IShowQuickInfoCommand.Execute">
            <summary>
            WARNING! Makes an utterly annoying DING! in the VBE if the "QuickInfo" command is unavailable.
            </summary>
        </member>
        <member name="T:Rubberduck.AutoComplete.Service.SmartConcatenationHandler">
            <summary>
            Adds a line continuation when {ENTER} is pressed when inside a string literal.
            </summary>
        </member>
        <member name="P:Rubberduck.CodeAnalysis.CodeMetrics.CodeMetric.Name">
            <summary>
            The name of the metric. Used for localization purposes as well as a uniquely identifying name to disambiguate between metrics.
            </summary>
        </member>
        <member name="P:Rubberduck.CodeAnalysis.CodeMetrics.CodeMetric.Level">
            <summary>
            The aggregation level that this metric applies to.
            </summary>
        </member>
        <member name="T:Rubberduck.CodeAnalysis.CodeMetrics.ICodeMetricResult">
            <summary>
            A CodeMetricsResult. Each result is attached to a Declaration.
            Usually this declaration would be a Procedure (Function/Sub/Property).
            Some metrics are only useful on Module level, some even on Project level.
            
            Some metrics may be aggregated to obtain a metric for a "higher hierarchy level"
            </summary>
        </member>
        <member name="P:Rubberduck.CodeAnalysis.CodeMetrics.ICodeMetricResult.Declaration">
            <summary>
            The declaration that this result refers to.
            </summary>
        </member>
        <member name="P:Rubberduck.CodeAnalysis.CodeMetrics.ICodeMetricResult.Metric">
            <summary>
            The Metric kind that this result belongs to. Only results belonging to the **same** metric can be aggregated.
            </summary>
        </member>
        <member name="P:Rubberduck.CodeAnalysis.CodeMetrics.ICodeMetricResult.Value">
            <summary>
            A string representation of the value.
            </summary>
        </member>
        <member name="M:Rubberduck.Common.Hotkeys.Hotkey.GetModifierValue(System.String@)">
            <summary>
            Gets the <see cref="T:Rubberduck.Common.WinAPI.KeyModifier"/> values out of a key combination.
            </summary>
            <param name="key">The hotkey string, returned without the modifiers.</param>
        </member>
        <member name="T:Rubberduck.Common.UndocumentedAttribute">
            <summary>
            Mark a feature as undocumented.
            </summary>
            <remarks>The RubberduckWeb project may this attribute to filter viewable content.</remarks>
        </member>
        <member name="T:Rubberduck.Common.WinAPI.Kernel32">
            <summary>
            Exposes Kernel32.dll API.
            </summary>
        </member>
        <member name="M:Rubberduck.Common.WinAPI.Kernel32.GlobalAddAtom(System.String)">
            <summary>
            Adds a character string to the global atom table and returns a unique value (an atom) identifying the string.
            </summary>
            <param name="lpString">
            The null-terminated string to be added.
            The string can have a maximum size of 255 bytes.
            Strings that differ only in case are considered identical.
            The case of the first string of this name added to the table is preserved and returned by the GlobalGetAtomName function.
            </param>
            <returns>If the function succeeds, the return value is the newly created atom.</returns>
        </member>
        <member name="M:Rubberduck.Common.WinAPI.Kernel32.GlobalDeleteAtom(System.UInt16)">
            <summary>
            Decrements the reference count of a global string atom. 
            If the atom's reference count reaches zero, GlobalDeleteAtom removes the string associated with the atom from the global atom table.
            </summary>
            <param name="nAtom">The atom and character string to be deleted.</param>
            <returns>The function always returns (ATOM) 0.</returns>
        </member>
        <member name="M:Rubberduck.Common.WinAPI.Kernel32.SetLastError(System.UInt32)">
            <summary>
            Sets the last-error code for the calling thread.
            </summary>
            <param name="dwErrorCode">The last-error code for the thread.</param>
        </member>
        <member name="T:Rubberduck.Common.WinAPI.SHCore">
            <summary>
            Native functions from SHCore.dll
            </summary>
        </member>
        <member name="M:Rubberduck.Common.WinAPI.SHCore.SetProcessDpiAwareness(Rubberduck.Common.WinAPI.PROCESS_DPI_AWARENESS)">
            <summary>
            Sets the DPI awareness level of the current process.
            </summary>
            <param name="awareness">DPI awareness level.</param>
            <returns>HRESULT of S_OK, E_INVALIDARG or E_ACCESSDENIED.</returns>
            <remarks>
            Only the first DPI awareness call made by a process will have effect, subsequent calls are disregarded.
            Thus, calling this method before WPF loads will override the default WPF DPI awareness behavior.
            </remarks>
        </member>
        <member name="T:Rubberduck.Common.WinAPI.PROCESS_DPI_AWARENESS">
            <summary>
            Describes DPI awareness of a process.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.PROCESS_DPI_AWARENESS.Process_DPI_Unaware">
            <summary>
            Process is not DPI aware. 
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.PROCESS_DPI_AWARENESS.Process_System_DPI_Aware">
            <summary>
            Process is aware of the System DPI (monitor 1).
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.PROCESS_DPI_AWARENESS.Process_Per_Monitor_DPI_Aware">
            <summary>
            Process is aware of the DPI of individual monitors.
            </summary>
        </member>
        <member name="T:Rubberduck.Common.WinAPI.User32">
            <summary>
            Exposes User32.dll API.
            </summary>
        </member>
        <member name="M:Rubberduck.Common.WinAPI.User32.RegisterHotKey(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Defines a system-wide hot key.
            </summary>
            <param name="hWnd">A handle to the window that will receive WM_HOTKEY messages generated by the hot key. 
            If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.</param>
            <param name="id">The identifier of the hot key. 
            If the hWnd parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. 
            If a hot key already exists with the same hWnd and id parameters</param>
            <param name="fsModifiers">The keys that must be pressed in combination with the key specified by the uVirtKey parameter in order to generate the WM_HOTKEY message. 
            The fsModifiers parameter can be a combination of the following values.</param>
            <param name="vk">The virtual-key code of the hot key</param>
            <returns>If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Rubberduck.Common.WinAPI.User32.UnregisterHotKey(System.IntPtr,System.IntPtr)">
            <summary>
            Frees a hot key previously registered by the calling thread.
            </summary>
            <param name="hWnd">A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.</param>
            <param name="id">The identifier of the hot key to be freed.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.GWL_EXSTYLE">
            <summary>
            Sets a new extended window style.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.GWLP_HINSTANCE">
            <summary>
            Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.GWL_ID">
            <summary>
            Sets a new identifier of the child window. The window cannot be a top-level window.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.GWL_STYLE">
            <summary>
            Sets a new window style.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.GWL_USERDATA">
            <summary>
            Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.GWL_WNDPROC">
            <summary>
            Sets a new address for the window procedure. You cannot change this attribute if the window does not belong to the same process as the calling thread.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.DWLP_USER">
            <summary>
            Sets new extra information that is private to the application, such as handles or pointers.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.DWLP_MSGRESULT">
            <summary>
            Sets the return value of a message processed in the dialog box procedure.
            </summary>
        </member>
        <member name="F:Rubberduck.Common.WinAPI.WindowLongFlags.DWLP_DLGPROC">
            <summary>
            Sets the new address of the dialog box procedure.
            </summary>
        </member>
        <member name="M:Rubberduck.Navigation.CodeExplorer.CodeExplorerViewModel.ExpandToNode(Rubberduck.Navigation.CodeExplorer.CodeExplorerItemViewModel)">
            <summary>
            Works backward from the passed node and expands all parents to make it visible.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Rubberduck.Properties.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Rubberduck.Properties.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Rubberduck.Properties.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Rubberduck.Properties.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Rubberduck.Properties.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Rubberduck.Properties.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Rubberduck.Properties.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Rubberduck.Properties.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Rubberduck.Properties.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Rubberduck.Properties.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:Rubberduck.Properties.MeansImplicitUseAttribute"/> or <see cref="T:Rubberduck.Properties.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Rubberduck.Properties.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Rubberduck.Properties.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Rubberduck.Properties.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~)
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Rubberduck.Properties.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection
            </summary>
        </member>
        <member name="F:Rubberduck.Properties.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection</summary>
        </member>
        <member name="F:Rubberduck.Properties.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it</summary>
        </member>
        <member name="F:Rubberduck.Properties.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements</summary>
        </member>
        <member name="F:Rubberduck.Properties.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection</summary>
        </member>
        <member name="T:Rubberduck.Properties.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:Rubberduck.Properties.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Rubberduck.Properties.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:Rubberduck.Properties.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:Rubberduck.Properties.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:Rubberduck.Properties.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:Rubberduck.Properties.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:Rubberduck.Properties.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be
            treated as <c>ItemsControl</c>-derived type, to enable inner  items <c>DataContext</c>
            type resolve.
            </summary>
        </member>
        <member name="T:Rubberduck.Properties.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Rubberduck.Properties.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:Rubberduck.Properties.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:Rubberduck.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Rubberduck.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Rubberduck.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:Rubberduck.Refactorings.ExtractMethod.IEnumerableExt.GroupByMissing``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Func{``0,``0,``1},System.Func{``0,``0,System.Int32})">
            <summary>
            Yields an Enumeration of selector Type, 
            by checking for gaps between elements 
            using the supplied increment function to work out the next value
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="inputs"></param>
            <param name="getIncr"></param>
            <param name="selector"></param>
            <param name="comparisonFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Rubberduck.Refactorings.ExtractMethod.ExtractMethodRefactoring">
            <summary>
            A refactoring that extracts a method (procedure or function) 
            out of a selection in the active code pane and 
            replaces the selected code with a call to the extracted method.
            </summary>
        </member>
        <member name="E:Rubberduck.Refactorings.ExtractMethod.ExtractMethodRefactoring.InvalidSelection">
            <summary>
            An event that is raised when refactoring is not possible due to an invalid selection.
            </summary>
        </member>
        <member name="F:Rubberduck.Settings.AutoCompleteSettings.ConcatMaxLinesMinValue">
            <summary>
            Less than that would be useless (wouldn't concat).
            </summary>
        </member>
        <member name="F:Rubberduck.Settings.AutoCompleteSettings.ConcatMaxLinesMaxValue">
            <summary>
            /More than that would be illegal (wouldn't compile).
            </summary>
        </member>
        <member name="M:Rubberduck.Settings.CodeInspectionSetting.#ctor">
            <Summary>
            Default constructor required for XML serialization.
            </Summary>
        </member>
        <member name="M:Rubberduck.Settings.ConfigurationLoader.LoadConfiguration">
            <summary>
            Loads the configuration from Rubberduck.config xml file.
            </summary>
        </member>
        <member name="M:Rubberduck.Settings.DisplayLanguageSetting.#ctor">
            <Summary>
            Default constructor required for XML serialization.
            </Summary>
        </member>
        <member name="P:Rubberduck.Settings.HotkeySetting.Key2">
            <summary>
            For 2-step hotkeys, the 2nd key to press. Note: hidden until 2-step hotkeys are an actual thing.
            </summary>
        </member>
        <member name="M:Rubberduck.Settings.HotkeySettings.#ctor">
            <Summary>
            Default constructor required for XML serialization.
            </Summary>
        </member>
        <member name="M:Rubberduck.Settings.ToDoListSettings.#ctor">
            <Summary>
            Default constructor required for XML serialization.
            </Summary>
        </member>
        <member name="M:Rubberduck.Settings.ToDoMarker.#ctor">
            <summary>   Default constructor is required for serialization. DO NOT USE. </summary>
        </member>
        <member name="M:Rubberduck.Settings.ToDoMarker.ToString">
            <summary>   Convert this object into a string representation. Overriden for easy databinding.</summary>
            <returns>   The Text property. </returns>
        </member>
        <member name="M:Rubberduck.Settings.UnitTestSettings.#ctor">
            <Summary>
            Default constructor required for XML serialization.
            </Summary>
        </member>
        <member name="M:Rubberduck.Settings.WindowSettings.#ctor">
            <Summary>
            Default constructor required for XML serialization. Initializes all settings to false.
            </Summary>
        </member>
        <member name="T:Rubberduck.Templates.Template">
            <remarks>
            Template can be either built-in or user-defined. For a built-in template, the
            metadata should be stored in the <see cref="T:Rubberduck.Resources.Templates"/>
            resource, with specific entries, currently Name, Caption, Description and Code.
            Due to the fact that we cannot strong-type the reference to the resource entries
            the class has unit tests to validate that the crucial elements are present in the
            resource to guard against runtime errors/unexpected behavior due to missing/malformed
            entries in the resources. 
            </remarks>
        </member>
        <member name="T:Rubberduck.ToDoItems.ToDoItem">
            <summary>
            Represents a Todo comment and the necessary information to display and navigate to that comment.
            This is a binding item. Changing it's properties changes how it is displayed.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.About.AboutControl">
            <summary>
            Interaction logic for AboutControl.xaml
            </summary>
            <summary>
            AboutControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.About.AboutControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.About.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.About.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.About.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.Model">
            <summary>
            The IAddRemoveReferencesModel for the view.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ProjectsHidden">
            <summary>
            Hides the projects filter if the host does not support them. Statically set.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.BuiltInReferenceCount">
            <summary>
            The number of built-in (locked) references of the project.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.AddCommand">
            <summary>
            Adds a reference to the project.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.RemoveCommand">
            <summary>
            Removes a reference from the project and makes it "available".
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ClearSearchCommand">
            <summary>
            Clears the search textbox.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.BrowseCommand">
            <summary>
            Prompts the user to browse for a reference.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.OkCommand">
            <summary>
            Closes the dialog and indicates changes are to be saved.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.CancelCommand">
            <summary>
            Closes the dialog and indicates changes are not to be saved.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ApplyCommand">
            <summary>
            Applies any changes without closing the dialog.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.MoveUpCommand">
            <summary>
            Moves the <see cref="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.SelectedReference"/> up on the 'Priority' tab.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.MoveDownCommand">
            <summary>
            Moves the <see cref="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.SelectedReference"/> down on the 'Priority' tab.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.PinLibraryCommand">
            <summary>
            Pins the selected reference from the available list.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.PinReferenceCommand">
            <summary>
            Pins the selected reference from the referenced list.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecuteAddCommand(System.Object)">
            <summary>
            Delegate for AddCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecuteRemoveCommand(System.Object)">
            <summary>
            Delegate for RemoveCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecuteClearSearchCommand(System.Object)">
            <summary>
            Delegate for ClearSearchCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecuteBrowseCommand(System.Object)">
            <summary>
            Delegate for BrowseCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecuteApplyCommand(System.Object)">
            <summary>
            Delegate for ApplyCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecuteMoveUpCommand(System.Object)">
            <summary>
            Delegate for MoveUpCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecuteMoveDownCommand(System.Object)">
            <summary>
            Delegate for MoveDownCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecutePinLibraryCommand(System.Object)">
            <summary>
            Delegate for PinLibraryCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ExecutePinReferenceCommand(System.Object)">
            <summary>
            Delegate for PinReferenceCommand.
            </summary>
            <param name="parameter">Ignored</param>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.ProjectReferences">
            <summary>
            Ordered collection of the project's currently selected references.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.AvailableReferences">
            <summary>
            Collection of references not currently selected for the project, filtered by the current filter.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.SelectedFilter">
            <summary>
            The currently selected filter. Should be a member of ReferenceFilter.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.Filter(Rubberduck.AddRemoveReferences.ReferenceModel)">
            <summary>
            Applies selected filter and any search term to CollectionViewSource.
            </summary>
            <param name="reference">The ReferenceModel to test.</param>
            <returns>Returns true if the passed reference is included in the filtered result.</returns>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.Search">
            <summary>
            Search term for filtering AvailableReferences.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.CurrentSelection">
            <summary>
            The currently selected Reference in the focused list.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.SelectedReference">
            <summary>
            The currently selected Reference for the project.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.SelectedLibrary">
            <summary>
            The currently selected available (not included in the project) Reference.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.IsProjectDirty">
            <summary>
            Indicated whether any changes were made to the project's references.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesViewModel.EvaluateProjectDirty">
            <summary>
            Tests to see if any changes have been made to the project and sets IsProjectDirty to the appropriate value.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesWindow">
            <summary>
            Interaction logic for AddRemoveReferencesWindow.xaml
            </summary>
            <summary>
            AddRemoveReferencesWindow
            </summary>
        </member>
        <member name="M:Rubberduck.UI.AddRemoveReferences.AddRemoveReferencesWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.BindableSelectedItemBehavior">
            <summary>
            http://stackoverflow.com/a/5118406/1188513
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.BusyIndicator">
            <summary>
            Interaction logic for BusyIndicator.xaml
            </summary>
            <summary>
            BusyIndicator
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Controls.BusyIndicator.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.EmptyUIRefresh">
            <summary>
            Interaction logic for Refresh.xaml
            </summary>
            <summary>
            EmptyUIRefresh
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Controls.EmptyUIRefresh.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.GroupingGrid">
            <summary>
            GroupingGrid
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Controls.GroupingGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.LinkButton">
            <summary>
            Interaction logic for LinkButton.xaml
            </summary>
            <summary>
            LinkButton
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Controls.LinkButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.MenuItemGroup">
            <summary>
            Thanks to @Patrick at http://stackoverflow.com/a/3652980/1188513
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.NumberPicker">
            <summary>
            Interaction logic for NumberPicker.xaml
            </summary>
            <summary>
            NumberPicker
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Controls.NumberPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.SearchResultPresenterInstanceManager">
            <summary>
            A "disposable singleton" factory that creates/returns the same instance to all clients.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Controls.SearchResultWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Controls.SearchResultWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Controls.SearchResultWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Controls.SearchView">
            <summary>
            Interaction logic for SearchView.xaml
            </summary>
            <summary>
            SearchView
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Controls.SearchView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.CodeExplorer.CodeExplorerControl">
            <summary>
            Interaction logic for CodeExplorerControl.xaml
            </summary>
            <summary>
            CodeExplorerControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.CodeExplorer.CodeExplorerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.CodeExplorer.CodeExplorerWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.CodeExplorer.CodeExplorerWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.CodeExplorer.CodeExplorerWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.CodeMetrics.CodeMetricsControl">
            <summary>
            Interaction logic for CodeMetricsControl.xaml
            </summary>
            <summary>
            CodeMetricsControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.CodeMetrics.CodeMetricsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.CodeMetrics.CodeMetricsWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.CodeMetrics.CodeMetricsWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.CodeMetrics.CodeMetricsWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.AboutCommand">
            <summary>
            A command that displays the About window.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.CodeExplorerCommand">
            <summary>
            A command that displays the Code Explorer window.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.FindAllImplementationsCommand">
            <summary>
            A command that finds all implementations of a specified method, or of the active interface module.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.FindAllReferencesCommand">
            <summary>
            A command that locates all references to a specified identifier, or of the active code module.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.FindSymbolCommand">
            <summary>
            A command that lets user search for and navigate to any identifier.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.FormDesignerFindAllReferencesCommand">
            <summary>
            A command that locates all references to the active form designer component.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.InspectionResultsCommand">
            <summary>
            A command that runs all active code inspections for the active VBAProject.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Command.InspectionResultsCommand.OnExecute(System.Object)">
            <summary>
            Runs code inspections 
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Rubberduck.UI.Command.MenuItems.CommandBars.IContextFormatter.Format(Rubberduck.VBEditor.SafeComWrappers.Abstract.ICodePane,Rubberduck.Parsing.Symbols.Declaration)">
            <summary>
            Determines the formatting of the contextual selection caption when a codepane is active.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Command.MenuItems.CommandBars.IContextFormatter.Format(Rubberduck.Parsing.Symbols.Declaration,System.Boolean)">
            <summary>
            Determines the formatting of the contextual selection caption when a codepane is not active.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Command.MenuItems.CommandMenuItemBase.EvaluateCanExecute(Rubberduck.Parsing.VBA.RubberduckParserState)">
            <summary>
            Evaluates current parser state to determine whether command can be executed.
            </summary>
            <param name="state">The current parser state.</param>
            <returns>Returns <c>true</c> if command can be executed.</returns>
            <remarks>Returns <c>true</c> if not overridden.</remarks>
        </member>
        <member name="T:Rubberduck.UI.Command.NavigateCommand">
            <summary>
            A command that navigates to a specified selection, using a <see cref="T:Rubberduck.Interaction.Navigation.NavigateCodeEventArgs"/> parameter.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.RegexAssistantCommand">
            <summary>
            A command that displays the RegexAssistantDialog
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.RunAllTestsCommand">
            <summary>
            A command that runs all Rubberduck unit tests in the VBE.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.SettingsCommand">
            <summary>
            A command that displays the Options dialog.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Command.ToDoExplorerCommand">
            <summary>
            A command that displays the To-Do explorer window.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.FindSymbol.FindSymbolControl">
            <summary>
            Interaction logic for FindSymbolControl.xaml
            </summary>
            <summary>
            FindSymbolControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.FindSymbol.FindSymbolControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.FindSymbol.FindSymbolDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.FindSymbol.FindSymbolDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.FindSymbol.FindSymbolDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.IDockableUserControl.ClassId">
            <summary>
            Gets a string containing the GUID with which the class is registered.
            </summary>
        </member>
        <member name="P:Rubberduck.UI.IDockableUserControl.Caption">
            <summary>
            Gets a string containing the caption of the toolwindow.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Inspections.InspectionResultsControl">
            <summary>
            Interaction logic for InspectionResultsControl.xaml
            </summary>
            <summary>
            InspectionResultsControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Inspections.InspectionResultsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Rubberduck.UI.Inspections.InspectionResultsViewModel.IsRefreshing">
            <summary>
            Gets/sets a flag indicating whether the parser state changes are a result of our RefreshCommand.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Inspections.InspectionResultsWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Inspections.InspectionResultsWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Inspections.InspectionResultsWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Refactorings.AssignedByValParameterQuickFixDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.AssignedByValParameterQuickFixDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.AssignedByValParameterQuickFixDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Refactorings.EncapsulateField.EncapsulateFieldDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.EncapsulateField.EncapsulateFieldDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.EncapsulateField.EncapsulateFieldDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Refactorings.EncapsulateField.EncapsulateFieldView">
            <summary>
            Interaction logic for EncapsulateFieldView.xaml
            </summary>
            <summary>
            EncapsulateFieldView
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.EncapsulateField.EncapsulateFieldView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Refactorings.ExtractInterfaceDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ExtractInterfaceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ExtractInterfaceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Refactorings.ExtractInterfaceView">
            <summary>
            Interaction logic for ExtractInterfaceView.xaml
            </summary>
            <summary>
            ExtractInterfaceView
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ExtractInterfaceView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Refactorings.ExtractMethodDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ExtractMethodDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ExtractMethodDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Refactorings.RemoveParameters.RemoveParametersDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.RemoveParameters.RemoveParametersDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.RemoveParameters.RemoveParametersDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Refactorings.RemoveParameters.RemoveParametersView">
            <summary>
            RemoveParametersView
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.RemoveParameters.RemoveParametersView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Refactorings.Rename.RenameDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.Rename.RenameDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.Rename.RenameDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Refactorings.Rename.RenameView">
            <summary>
            RenameView
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.Rename.RenameView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.#ctor(System.Windows.UIElement,System.Windows.Size,System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of DragVisualAdorner.
            </summary>
            <param name="adornedElement">The element being adorned.</param>
            <param name="size">The size of the adorner.</param>
            <param name="brush">A brush to with which to paint the adorner.</param>
        </member>
        <member name="P:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.OffsetLeft">
            <summary>
            Gets/sets the horizontal offset of the adorner.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.SetOffsets(System.Double,System.Double)">
            <summary>
            Updates the location of the adorner.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="P:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.OffsetTop">
            <summary>
            Gets/sets the vertical offset of the adorner.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Override.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.GetVisualChild(System.Int32)">
            <summary>
            Override.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rubberduck.UI.Refactorings.ReorderParameters.DragAdorner.VisualChildrenCount">
            <summary>
            Override. Always returns 1.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Refactorings.ReorderParameters.ReorderParametersDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.ReorderParametersDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.ReorderParametersDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Refactorings.ReorderParameters.ReorderParametersView">
            <summary>
            ReorderParametersView
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Refactorings.ReorderParameters.ReorderParametersView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.RegexAssistant.RegexAssistant">
            <summary>
            RegexAssistant
            </summary>
        </member>
        <member name="M:Rubberduck.UI.RegexAssistant.RegexAssistant.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.RegexAssistant.RegexAssistantDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.RegexAssistant.RegexAssistantDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.RegexAssistant.RegexAssistantDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.AddRemoveReferencesUserSettings">
            <summary>
            Interaction logic for AddRemoveReferencesUserSettings.xaml
            </summary>
            <summary>
            AddRemoveReferencesUserSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.AddRemoveReferencesUserSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.AutoCompleteSettings">
            <summary>
            Interaction logic for AutoCompleteSettings.xaml
            </summary>
            <summary>
            AutoCompleteSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.AutoCompleteSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.GeneralSettings">
            <summary>
            Interaction logic for GeneralSettings.xaml
            </summary>
            <summary>
            GeneralSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.GeneralSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.IndenterSettings">
            <summary>
            Interaction logic for IndenterSettings.xaml
            </summary>
            <summary>
            IndenterSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.IndenterSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.InspectionSettings">
            <summary>
            Interaction logic for InspectionSettings.xaml
            </summary>
            <summary>
            InspectionSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.InspectionSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.SettingsControl">
            <summary>
            Interaction logic for SettingsControl.xaml
            </summary>
            <summary>
            SettingsControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.SettingsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Settings.SettingsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.SettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Settings.SettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.TodoSettings">
            <summary>
            Interaction logic for TodoSettings.xaml
            </summary>
            <summary>
            TodoSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.TodoSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.UnitTestSettings">
            <summary>
            Interaction logic for UnitTestSettings.xaml
            </summary>
            <summary>
            UnitTestSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.UnitTestSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.Settings.WindowSettings">
            <summary>
            Interaction logic for WindowSettings.xaml
            </summary>
            <summary>
            WindowSettings
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Settings.WindowSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.SimpleListControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.SimpleListControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.SimpleListControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.Splash.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.Splash.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.Splash.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.ToDoItems.ToDoExplorerControl">
            <summary>
            Interaction logic for ToDoExplorerControl.xaml
            </summary>
            <summary>
            ToDoExplorerControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.ToDoItems.ToDoExplorerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rubberduck.UI.ToDoItems.ToDoExplorerDockablePresenter">
            <summary>
            Presenter for the to-do items explorer.
            </summary>
        </member>
        <member name="F:Rubberduck.UI.ToDoItems.ToDoExplorerWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.ToDoItems.ToDoExplorerWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.ToDoItems.ToDoExplorerWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.UnitTesting.Commands.AddTestMethodCommand">
            <summary>
            A command that adds a new test method stub to the active code pane.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.UnitTesting.Commands.AddTestMethodExpectedErrorCommand">
            <summary>
            A command that adds a new test method stub to the active code pane.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.UnitTesting.Commands.AddTestModuleCommand">
            <summary>
            A command that adds a new test module to the active VBAProject.
            </summary>
        </member>
        <member name="T:Rubberduck.UI.UnitTesting.TestExplorerControl">
            <summary>
            Interaction logic for TestExplorerControl.xaml
            </summary>
            <summary>
            TestExplorerControl
            </summary>
        </member>
        <member name="M:Rubberduck.UI.UnitTesting.TestExplorerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Rubberduck.UI.UnitTesting.TestExplorerWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rubberduck.UI.UnitTesting.TestExplorerWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rubberduck.UI.UnitTesting.TestExplorerWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rubberduck.VersionCheck.VersionCheck.#ctor(System.Version)">
            <param name="version">That would be the version of the assembly for the <c>_Extension</c> class.</param>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
