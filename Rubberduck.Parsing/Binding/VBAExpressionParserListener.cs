//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAExpressionParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Binding {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="VBAExpressionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IVBAExpressionParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.optionCompareArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionCompareArgument([NotNull] VBAExpressionParser.OptionCompareArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.optionCompareArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionCompareArgument([NotNull] VBAExpressionParser.OptionCompareArgumentContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>powOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowOp([NotNull] VBAExpressionParser.PowOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>powOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowOp([NotNull] VBAExpressionParser.PowOpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>intDivOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDivOp([NotNull] VBAExpressionParser.IntDivOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intDivOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDivOp([NotNull] VBAExpressionParser.IntDivOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typeSuffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeSuffix([NotNull] VBAExpressionParser.TypeSuffixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typeSuffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeSuffix([NotNull] VBAExpressionParser.TypeSuffixContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] VBAExpressionParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] VBAExpressionParser.ArgumentListContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>lExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLExpr([NotNull] VBAExpressionParser.LExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLExpr([NotNull] VBAExpressionParser.LExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>multOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultOp([NotNull] VBAExpressionParser.MultOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultOp([NotNull] VBAExpressionParser.MultOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementKeyword([NotNull] VBAExpressionParser.StatementKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementKeyword([NotNull] VBAExpressionParser.StatementKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.booleanLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteralIdentifier([NotNull] VBAExpressionParser.BooleanLiteralIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.booleanLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteralIdentifier([NotNull] VBAExpressionParser.BooleanLiteralIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalAndOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndOp([NotNull] VBAExpressionParser.LogicalAndOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalAndOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndOp([NotNull] VBAExpressionParser.LogicalAndOpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalOrOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrOp([NotNull] VBAExpressionParser.LogicalOrOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalOrOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrOp([NotNull] VBAExpressionParser.LogicalOrOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.parenthesizedExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] VBAExpressionParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.parenthesizedExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] VBAExpressionParser.ParenthesizedExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedTypeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedTypeIdentifier([NotNull] VBAExpressionParser.ReservedTypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedTypeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedTypeIdentifier([NotNull] VBAExpressionParser.ReservedTypeIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalEqvOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalEqvOp([NotNull] VBAExpressionParser.LogicalEqvOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalEqvOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalEqvOp([NotNull] VBAExpressionParser.LogicalEqvOpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpr([NotNull] VBAExpressionParser.ParenthesizedExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpr([NotNull] VBAExpressionParser.ParenthesizedExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.operatorIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorIdentifier([NotNull] VBAExpressionParser.OperatorIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.operatorIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorIdentifier([NotNull] VBAExpressionParser.OperatorIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.memberAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccessExpression([NotNull] VBAExpressionParser.MemberAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.memberAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccessExpression([NotNull] VBAExpressionParser.MemberAccessExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedProcedureName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedProcedureName([NotNull] VBAExpressionParser.ReservedProcedureNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedProcedureName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedProcedureName([NotNull] VBAExpressionParser.ReservedProcedureNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.indexExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexExpression([NotNull] VBAExpressionParser.IndexExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.indexExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexExpression([NotNull] VBAExpressionParser.IndexExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMinusOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusOp([NotNull] VBAExpressionParser.UnaryMinusOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMinusOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusOp([NotNull] VBAExpressionParser.UnaryMinusOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.untypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUntypedName([NotNull] VBAExpressionParser.UntypedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.untypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUntypedName([NotNull] VBAExpressionParser.UntypedNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedUntypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedUntypedName([NotNull] VBAExpressionParser.ReservedUntypedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedUntypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedUntypedName([NotNull] VBAExpressionParser.ReservedUntypedNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.positionalArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPositionalArgument([NotNull] VBAExpressionParser.PositionalArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.positionalArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPositionalArgument([NotNull] VBAExpressionParser.PositionalArgumentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.newExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExpression([NotNull] VBAExpressionParser.NewExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.newExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExpression([NotNull] VBAExpressionParser.NewExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>typeOfIsExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeOfIsExpr([NotNull] VBAExpressionParser.TypeOfIsExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeOfIsExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeOfIsExpr([NotNull] VBAExpressionParser.TypeOfIsExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>concatOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcatOp([NotNull] VBAExpressionParser.ConcatOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>concatOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcatOp([NotNull] VBAExpressionParser.ConcatOpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>instanceExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceExpr([NotNull] VBAExpressionParser.InstanceExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>instanceExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceExpr([NotNull] VBAExpressionParser.InstanceExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.dictionaryAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictionaryAccessExpression([NotNull] VBAExpressionParser.DictionaryAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.dictionaryAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictionaryAccessExpression([NotNull] VBAExpressionParser.DictionaryAccessExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typeOfIsExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeOfIsExpression([NotNull] VBAExpressionParser.TypeOfIsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typeOfIsExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeOfIsExpression([NotNull] VBAExpressionParser.TypeOfIsExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.remKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRemKeyword([NotNull] VBAExpressionParser.RemKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.remKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRemKeyword([NotNull] VBAExpressionParser.RemKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.variantLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariantLiteralIdentifier([NotNull] VBAExpressionParser.VariantLiteralIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.variantLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariantLiteralIdentifier([NotNull] VBAExpressionParser.VariantLiteralIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>modOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModOp([NotNull] VBAExpressionParser.ModOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>modOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModOp([NotNull] VBAExpressionParser.ModOpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>indexExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexExpr([NotNull] VBAExpressionParser.IndexExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>indexExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexExpr([NotNull] VBAExpressionParser.IndexExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.procedurePointerExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedurePointerExpression([NotNull] VBAExpressionParser.ProcedurePointerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.procedurePointerExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedurePointerExpression([NotNull] VBAExpressionParser.ProcedurePointerExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>relationalOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalOp([NotNull] VBAExpressionParser.RelationalOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>relationalOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalOp([NotNull] VBAExpressionParser.RelationalOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.objectLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectLiteralIdentifier([NotNull] VBAExpressionParser.ObjectLiteralIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.objectLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectLiteralIdentifier([NotNull] VBAExpressionParser.ObjectLiteralIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] VBAExpressionParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] VBAExpressionParser.NameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.withDictionaryAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithDictionaryAccessExpression([NotNull] VBAExpressionParser.WithDictionaryAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.withDictionaryAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithDictionaryAccessExpression([NotNull] VBAExpressionParser.WithDictionaryAccessExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>withExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithExpr([NotNull] VBAExpressionParser.WithExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>withExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithExpr([NotNull] VBAExpressionParser.WithExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.positionalOrNamedArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPositionalOrNamedArgumentList([NotNull] VBAExpressionParser.PositionalOrNamedArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.positionalOrNamedArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPositionalOrNamedArgumentList([NotNull] VBAExpressionParser.PositionalOrNamedArgumentListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypedName([NotNull] VBAExpressionParser.TypedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypedName([NotNull] VBAExpressionParser.TypedNameContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>newExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExpr([NotNull] VBAExpressionParser.NewExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExpr([NotNull] VBAExpressionParser.NewExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.namedArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedArgumentList([NotNull] VBAExpressionParser.NamedArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.namedArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedArgumentList([NotNull] VBAExpressionParser.NamedArgumentListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.addressOfExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddressOfExpression([NotNull] VBAExpressionParser.AddressOfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.addressOfExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddressOfExpression([NotNull] VBAExpressionParser.AddressOfExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedTypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedTypedName([NotNull] VBAExpressionParser.ReservedTypedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedTypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedTypedName([NotNull] VBAExpressionParser.ReservedTypedNameContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalImpOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalImpOp([NotNull] VBAExpressionParser.LogicalImpOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalImpOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalImpOp([NotNull] VBAExpressionParser.LogicalImpOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.literalIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralIdentifier([NotNull] VBAExpressionParser.LiteralIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.literalIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralIdentifier([NotNull] VBAExpressionParser.LiteralIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.builtInType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBuiltInType([NotNull] VBAExpressionParser.BuiltInTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.builtInType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBuiltInType([NotNull] VBAExpressionParser.BuiltInTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpr([NotNull] VBAExpressionParser.LiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpr([NotNull] VBAExpressionParser.LiteralExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.requiredPositionalArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRequiredPositionalArgument([NotNull] VBAExpressionParser.RequiredPositionalArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.requiredPositionalArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRequiredPositionalArgument([NotNull] VBAExpressionParser.RequiredPositionalArgumentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.simpleNameExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleNameExpression([NotNull] VBAExpressionParser.SimpleNameExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.simpleNameExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleNameExpression([NotNull] VBAExpressionParser.SimpleNameExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccessExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccessExpr([NotNull] VBAExpressionParser.MemberAccessExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccessExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccessExpr([NotNull] VBAExpressionParser.MemberAccessExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.markerKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMarkerKeyword([NotNull] VBAExpressionParser.MarkerKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.markerKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMarkerKeyword([NotNull] VBAExpressionParser.MarkerKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typedNameValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypedNameValue([NotNull] VBAExpressionParser.TypedNameValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typedNameValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypedNameValue([NotNull] VBAExpressionParser.TypedNameValueContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.instanceExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceExpression([NotNull] VBAExpressionParser.InstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.instanceExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceExpression([NotNull] VBAExpressionParser.InstanceExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.unrestrictedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnrestrictedName([NotNull] VBAExpressionParser.UnrestrictedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.unrestrictedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnrestrictedName([NotNull] VBAExpressionParser.UnrestrictedNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.namedArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedArgument([NotNull] VBAExpressionParser.NamedArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.namedArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedArgument([NotNull] VBAExpressionParser.NamedArgumentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.definedTypeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefinedTypeExpression([NotNull] VBAExpressionParser.DefinedTypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.definedTypeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefinedTypeExpression([NotNull] VBAExpressionParser.DefinedTypeExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalNotOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalNotOp([NotNull] VBAExpressionParser.LogicalNotOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalNotOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalNotOp([NotNull] VBAExpressionParser.LogicalNotOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeExpression([NotNull] VBAExpressionParser.TypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeExpression([NotNull] VBAExpressionParser.TypeExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.uncategorizedKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUncategorizedKeyword([NotNull] VBAExpressionParser.UncategorizedKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.uncategorizedKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUncategorizedKeyword([NotNull] VBAExpressionParser.UncategorizedKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.whiteSpace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhiteSpace([NotNull] VBAExpressionParser.WhiteSpaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.whiteSpace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhiteSpace([NotNull] VBAExpressionParser.WhiteSpaceContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.constantExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpression([NotNull] VBAExpressionParser.ConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.constantExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpression([NotNull] VBAExpressionParser.ConstantExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.specialForm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSpecialForm([NotNull] VBAExpressionParser.SpecialFormContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.specialForm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSpecialForm([NotNull] VBAExpressionParser.SpecialFormContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>addOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOp([NotNull] VBAExpressionParser.AddOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOp([NotNull] VBAExpressionParser.AddOpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>simpleNameExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleNameExpr([NotNull] VBAExpressionParser.SimpleNameExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleNameExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleNameExpr([NotNull] VBAExpressionParser.SimpleNameExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStartRule([NotNull] VBAExpressionParser.StartRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStartRule([NotNull] VBAExpressionParser.StartRuleContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedName([NotNull] VBAExpressionParser.ReservedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedName([NotNull] VBAExpressionParser.ReservedNameContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalXorOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalXorOp([NotNull] VBAExpressionParser.LogicalXorOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalXorOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalXorOp([NotNull] VBAExpressionParser.LogicalXorOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.argumentExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentExpression([NotNull] VBAExpressionParser.ArgumentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.argumentExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentExpression([NotNull] VBAExpressionParser.ArgumentExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.callStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallStmt([NotNull] VBAExpressionParser.CallStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.callStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallStmt([NotNull] VBAExpressionParser.CallStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedIdentifier([NotNull] VBAExpressionParser.ReservedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedIdentifier([NotNull] VBAExpressionParser.ReservedIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.withExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithExpression([NotNull] VBAExpressionParser.WithExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.withExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithExpression([NotNull] VBAExpressionParser.WithExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.withMemberAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithMemberAccessExpression([NotNull] VBAExpressionParser.WithMemberAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.withMemberAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithMemberAccessExpression([NotNull] VBAExpressionParser.WithMemberAccessExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.literalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] VBAExpressionParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.literalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] VBAExpressionParser.LiteralExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>dictionaryAccessExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictionaryAccessExpr([NotNull] VBAExpressionParser.DictionaryAccessExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dictionaryAccessExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictionaryAccessExpr([NotNull] VBAExpressionParser.DictionaryAccessExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedIdentifierName([NotNull] VBAExpressionParser.ReservedIdentifierNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedIdentifierName([NotNull] VBAExpressionParser.ReservedIdentifierNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.numberLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberLiteral([NotNull] VBAExpressionParser.NumberLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.numberLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberLiteral([NotNull] VBAExpressionParser.NumberLiteralContext context);
}
} // namespace Rubberduck.Parsing.Binding
