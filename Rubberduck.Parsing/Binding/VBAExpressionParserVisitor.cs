//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAExpressionParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Binding {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="VBAExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IVBAExpressionParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.optionCompareArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOptionCompareArgument([NotNull] VBAExpressionParser.OptionCompareArgumentContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>powOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPowOp([NotNull] VBAExpressionParser.PowOpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>intDivOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntDivOp([NotNull] VBAExpressionParser.IntDivOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.typeSuffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeSuffix([NotNull] VBAExpressionParser.TypeSuffixContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] VBAExpressionParser.ArgumentListContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>lExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLExpr([NotNull] VBAExpressionParser.LExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>multOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultOp([NotNull] VBAExpressionParser.MultOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementKeyword([NotNull] VBAExpressionParser.StatementKeywordContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.booleanLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanLiteralIdentifier([NotNull] VBAExpressionParser.BooleanLiteralIdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalAndOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAndOp([NotNull] VBAExpressionParser.LogicalAndOpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalOrOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOrOp([NotNull] VBAExpressionParser.LogicalOrOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.parenthesizedExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] VBAExpressionParser.ParenthesizedExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.reservedTypeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedTypeIdentifier([NotNull] VBAExpressionParser.ReservedTypeIdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalEqvOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalEqvOp([NotNull] VBAExpressionParser.LogicalEqvOpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesizedExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpr([NotNull] VBAExpressionParser.ParenthesizedExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.operatorIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperatorIdentifier([NotNull] VBAExpressionParser.OperatorIdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.memberAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAccessExpression([NotNull] VBAExpressionParser.MemberAccessExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.reservedProcedureName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedProcedureName([NotNull] VBAExpressionParser.ReservedProcedureNameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.indexExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexExpression([NotNull] VBAExpressionParser.IndexExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>unaryMinusOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryMinusOp([NotNull] VBAExpressionParser.UnaryMinusOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.untypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUntypedName([NotNull] VBAExpressionParser.UntypedNameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.reservedUntypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedUntypedName([NotNull] VBAExpressionParser.ReservedUntypedNameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.positionalArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPositionalArgument([NotNull] VBAExpressionParser.PositionalArgumentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.newExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewExpression([NotNull] VBAExpressionParser.NewExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>typeOfIsExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeOfIsExpr([NotNull] VBAExpressionParser.TypeOfIsExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>concatOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcatOp([NotNull] VBAExpressionParser.ConcatOpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>instanceExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInstanceExpr([NotNull] VBAExpressionParser.InstanceExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.dictionaryAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDictionaryAccessExpression([NotNull] VBAExpressionParser.DictionaryAccessExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.typeOfIsExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeOfIsExpression([NotNull] VBAExpressionParser.TypeOfIsExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.remKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRemKeyword([NotNull] VBAExpressionParser.RemKeywordContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.variantLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariantLiteralIdentifier([NotNull] VBAExpressionParser.VariantLiteralIdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>modOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModOp([NotNull] VBAExpressionParser.ModOpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>indexExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexExpr([NotNull] VBAExpressionParser.IndexExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.procedurePointerExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcedurePointerExpression([NotNull] VBAExpressionParser.ProcedurePointerExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>relationalOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalOp([NotNull] VBAExpressionParser.RelationalOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.objectLiteralIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectLiteralIdentifier([NotNull] VBAExpressionParser.ObjectLiteralIdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitName([NotNull] VBAExpressionParser.NameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.withDictionaryAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWithDictionaryAccessExpression([NotNull] VBAExpressionParser.WithDictionaryAccessExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>withExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWithExpr([NotNull] VBAExpressionParser.WithExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.positionalOrNamedArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPositionalOrNamedArgumentList([NotNull] VBAExpressionParser.PositionalOrNamedArgumentListContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.typedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypedName([NotNull] VBAExpressionParser.TypedNameContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>newExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewExpr([NotNull] VBAExpressionParser.NewExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.namedArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamedArgumentList([NotNull] VBAExpressionParser.NamedArgumentListContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.addressOfExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddressOfExpression([NotNull] VBAExpressionParser.AddressOfExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.reservedTypedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedTypedName([NotNull] VBAExpressionParser.ReservedTypedNameContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalImpOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalImpOp([NotNull] VBAExpressionParser.LogicalImpOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.literalIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralIdentifier([NotNull] VBAExpressionParser.LiteralIdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.builtInType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBuiltInType([NotNull] VBAExpressionParser.BuiltInTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpr([NotNull] VBAExpressionParser.LiteralExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.requiredPositionalArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRequiredPositionalArgument([NotNull] VBAExpressionParser.RequiredPositionalArgumentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.simpleNameExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleNameExpression([NotNull] VBAExpressionParser.SimpleNameExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>memberAccessExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAccessExpr([NotNull] VBAExpressionParser.MemberAccessExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.markerKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMarkerKeyword([NotNull] VBAExpressionParser.MarkerKeywordContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.typedNameValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypedNameValue([NotNull] VBAExpressionParser.TypedNameValueContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.instanceExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInstanceExpression([NotNull] VBAExpressionParser.InstanceExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.unrestrictedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnrestrictedName([NotNull] VBAExpressionParser.UnrestrictedNameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.namedArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamedArgument([NotNull] VBAExpressionParser.NamedArgumentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.definedTypeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefinedTypeExpression([NotNull] VBAExpressionParser.DefinedTypeExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalNotOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalNotOp([NotNull] VBAExpressionParser.LogicalNotOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.typeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeExpression([NotNull] VBAExpressionParser.TypeExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.uncategorizedKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUncategorizedKeyword([NotNull] VBAExpressionParser.UncategorizedKeywordContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.whiteSpace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhiteSpace([NotNull] VBAExpressionParser.WhiteSpaceContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.constantExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] VBAExpressionParser.ConstantExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.specialForm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSpecialForm([NotNull] VBAExpressionParser.SpecialFormContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>addOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddOp([NotNull] VBAExpressionParser.AddOpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>simpleNameExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleNameExpr([NotNull] VBAExpressionParser.SimpleNameExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStartRule([NotNull] VBAExpressionParser.StartRuleContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.reservedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedName([NotNull] VBAExpressionParser.ReservedNameContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalXorOp</c>
	/// labeled alternative in <see cref="VBAExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalXorOp([NotNull] VBAExpressionParser.LogicalXorOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.argumentExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentExpression([NotNull] VBAExpressionParser.ArgumentExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.callStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCallStmt([NotNull] VBAExpressionParser.CallStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedIdentifier([NotNull] VBAExpressionParser.ReservedIdentifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.withExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWithExpression([NotNull] VBAExpressionParser.WithExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.withMemberAccessExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWithMemberAccessExpression([NotNull] VBAExpressionParser.WithMemberAccessExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.literalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpression([NotNull] VBAExpressionParser.LiteralExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>dictionaryAccessExpr</c>
	/// labeled alternative in <see cref="VBAExpressionParser.lExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDictionaryAccessExpr([NotNull] VBAExpressionParser.DictionaryAccessExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedIdentifierName([NotNull] VBAExpressionParser.ReservedIdentifierNameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="VBAExpressionParser.numberLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberLiteral([NotNull] VBAExpressionParser.NumberLiteralContext context);
}
} // namespace Rubberduck.Parsing.Binding
