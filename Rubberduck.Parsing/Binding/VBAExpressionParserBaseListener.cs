//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAExpressionParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Binding {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IVBAExpressionParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAExpressionParserBaseListener : IVBAExpressionParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.optionCompareArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOptionCompareArgument([NotNull] VBAExpressionParser.OptionCompareArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.optionCompareArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOptionCompareArgument([NotNull] VBAExpressionParser.OptionCompareArgumentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.powOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPowOp([NotNull] VBAExpressionParser.PowOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.powOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPowOp([NotNull] VBAExpressionParser.PowOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.intDivOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntDivOp([NotNull] VBAExpressionParser.IntDivOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.intDivOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntDivOp([NotNull] VBAExpressionParser.IntDivOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typeSuffix"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeSuffix([NotNull] VBAExpressionParser.TypeSuffixContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typeSuffix"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeSuffix([NotNull] VBAExpressionParser.TypeSuffixContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] VBAExpressionParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] VBAExpressionParser.ArgumentListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.lExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLExpr([NotNull] VBAExpressionParser.LExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.lExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLExpr([NotNull] VBAExpressionParser.LExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.multOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultOp([NotNull] VBAExpressionParser.MultOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.multOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultOp([NotNull] VBAExpressionParser.MultOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.statementKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementKeyword([NotNull] VBAExpressionParser.StatementKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.statementKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementKeyword([NotNull] VBAExpressionParser.StatementKeywordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.booleanLiteralIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanLiteralIdentifier([NotNull] VBAExpressionParser.BooleanLiteralIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.booleanLiteralIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanLiteralIdentifier([NotNull] VBAExpressionParser.BooleanLiteralIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.logicalAndOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAndOp([NotNull] VBAExpressionParser.LogicalAndOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.logicalAndOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAndOp([NotNull] VBAExpressionParser.LogicalAndOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.logicalOrOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOrOp([NotNull] VBAExpressionParser.LogicalOrOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.logicalOrOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOrOp([NotNull] VBAExpressionParser.LogicalOrOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.parenthesizedExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedExpression([NotNull] VBAExpressionParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.parenthesizedExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedExpression([NotNull] VBAExpressionParser.ParenthesizedExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedTypeIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedTypeIdentifier([NotNull] VBAExpressionParser.ReservedTypeIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedTypeIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedTypeIdentifier([NotNull] VBAExpressionParser.ReservedTypeIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.logicalEqvOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalEqvOp([NotNull] VBAExpressionParser.LogicalEqvOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.logicalEqvOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalEqvOp([NotNull] VBAExpressionParser.LogicalEqvOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.parenthesizedExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedExpr([NotNull] VBAExpressionParser.ParenthesizedExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.parenthesizedExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedExpr([NotNull] VBAExpressionParser.ParenthesizedExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.operatorIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperatorIdentifier([NotNull] VBAExpressionParser.OperatorIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.operatorIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperatorIdentifier([NotNull] VBAExpressionParser.OperatorIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.memberAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAccessExpression([NotNull] VBAExpressionParser.MemberAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.memberAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAccessExpression([NotNull] VBAExpressionParser.MemberAccessExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedProcedureName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedProcedureName([NotNull] VBAExpressionParser.ReservedProcedureNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedProcedureName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedProcedureName([NotNull] VBAExpressionParser.ReservedProcedureNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.indexExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexExpression([NotNull] VBAExpressionParser.IndexExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.indexExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexExpression([NotNull] VBAExpressionParser.IndexExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.unaryMinusOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryMinusOp([NotNull] VBAExpressionParser.UnaryMinusOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.unaryMinusOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryMinusOp([NotNull] VBAExpressionParser.UnaryMinusOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.untypedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUntypedName([NotNull] VBAExpressionParser.UntypedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.untypedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUntypedName([NotNull] VBAExpressionParser.UntypedNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedUntypedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedUntypedName([NotNull] VBAExpressionParser.ReservedUntypedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedUntypedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedUntypedName([NotNull] VBAExpressionParser.ReservedUntypedNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.positionalArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPositionalArgument([NotNull] VBAExpressionParser.PositionalArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.positionalArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPositionalArgument([NotNull] VBAExpressionParser.PositionalArgumentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.newExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewExpression([NotNull] VBAExpressionParser.NewExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.newExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewExpression([NotNull] VBAExpressionParser.NewExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typeOfIsExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeOfIsExpr([NotNull] VBAExpressionParser.TypeOfIsExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typeOfIsExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeOfIsExpr([NotNull] VBAExpressionParser.TypeOfIsExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.concatOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConcatOp([NotNull] VBAExpressionParser.ConcatOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.concatOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConcatOp([NotNull] VBAExpressionParser.ConcatOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.instanceExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInstanceExpr([NotNull] VBAExpressionParser.InstanceExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.instanceExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInstanceExpr([NotNull] VBAExpressionParser.InstanceExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.dictionaryAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDictionaryAccessExpression([NotNull] VBAExpressionParser.DictionaryAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.dictionaryAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDictionaryAccessExpression([NotNull] VBAExpressionParser.DictionaryAccessExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typeOfIsExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeOfIsExpression([NotNull] VBAExpressionParser.TypeOfIsExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typeOfIsExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeOfIsExpression([NotNull] VBAExpressionParser.TypeOfIsExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.remKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRemKeyword([NotNull] VBAExpressionParser.RemKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.remKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRemKeyword([NotNull] VBAExpressionParser.RemKeywordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.variantLiteralIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariantLiteralIdentifier([NotNull] VBAExpressionParser.VariantLiteralIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.variantLiteralIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariantLiteralIdentifier([NotNull] VBAExpressionParser.VariantLiteralIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.modOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModOp([NotNull] VBAExpressionParser.ModOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.modOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModOp([NotNull] VBAExpressionParser.ModOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.indexExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexExpr([NotNull] VBAExpressionParser.IndexExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.indexExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexExpr([NotNull] VBAExpressionParser.IndexExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.procedurePointerExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcedurePointerExpression([NotNull] VBAExpressionParser.ProcedurePointerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.procedurePointerExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcedurePointerExpression([NotNull] VBAExpressionParser.ProcedurePointerExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.relationalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalOp([NotNull] VBAExpressionParser.RelationalOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.relationalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalOp([NotNull] VBAExpressionParser.RelationalOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.objectLiteralIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectLiteralIdentifier([NotNull] VBAExpressionParser.ObjectLiteralIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.objectLiteralIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectLiteralIdentifier([NotNull] VBAExpressionParser.ObjectLiteralIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterName([NotNull] VBAExpressionParser.NameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitName([NotNull] VBAExpressionParser.NameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.withDictionaryAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithDictionaryAccessExpression([NotNull] VBAExpressionParser.WithDictionaryAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.withDictionaryAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithDictionaryAccessExpression([NotNull] VBAExpressionParser.WithDictionaryAccessExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.withExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithExpr([NotNull] VBAExpressionParser.WithExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.withExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithExpr([NotNull] VBAExpressionParser.WithExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.positionalOrNamedArgumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPositionalOrNamedArgumentList([NotNull] VBAExpressionParser.PositionalOrNamedArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.positionalOrNamedArgumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPositionalOrNamedArgumentList([NotNull] VBAExpressionParser.PositionalOrNamedArgumentListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypedName([NotNull] VBAExpressionParser.TypedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypedName([NotNull] VBAExpressionParser.TypedNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.newExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewExpr([NotNull] VBAExpressionParser.NewExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.newExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewExpr([NotNull] VBAExpressionParser.NewExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.namedArgumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamedArgumentList([NotNull] VBAExpressionParser.NamedArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.namedArgumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamedArgumentList([NotNull] VBAExpressionParser.NamedArgumentListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.addressOfExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddressOfExpression([NotNull] VBAExpressionParser.AddressOfExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.addressOfExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddressOfExpression([NotNull] VBAExpressionParser.AddressOfExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedTypedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedTypedName([NotNull] VBAExpressionParser.ReservedTypedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedTypedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedTypedName([NotNull] VBAExpressionParser.ReservedTypedNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.logicalImpOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalImpOp([NotNull] VBAExpressionParser.LogicalImpOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.logicalImpOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalImpOp([NotNull] VBAExpressionParser.LogicalImpOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.literalIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralIdentifier([NotNull] VBAExpressionParser.LiteralIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.literalIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralIdentifier([NotNull] VBAExpressionParser.LiteralIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.builtInType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBuiltInType([NotNull] VBAExpressionParser.BuiltInTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.builtInType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBuiltInType([NotNull] VBAExpressionParser.BuiltInTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.literalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpr([NotNull] VBAExpressionParser.LiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.literalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpr([NotNull] VBAExpressionParser.LiteralExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.requiredPositionalArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRequiredPositionalArgument([NotNull] VBAExpressionParser.RequiredPositionalArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.requiredPositionalArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRequiredPositionalArgument([NotNull] VBAExpressionParser.RequiredPositionalArgumentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.simpleNameExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleNameExpression([NotNull] VBAExpressionParser.SimpleNameExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.simpleNameExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleNameExpression([NotNull] VBAExpressionParser.SimpleNameExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.memberAccessExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAccessExpr([NotNull] VBAExpressionParser.MemberAccessExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.memberAccessExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAccessExpr([NotNull] VBAExpressionParser.MemberAccessExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.markerKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMarkerKeyword([NotNull] VBAExpressionParser.MarkerKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.markerKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMarkerKeyword([NotNull] VBAExpressionParser.MarkerKeywordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typedNameValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypedNameValue([NotNull] VBAExpressionParser.TypedNameValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typedNameValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypedNameValue([NotNull] VBAExpressionParser.TypedNameValueContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.instanceExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInstanceExpression([NotNull] VBAExpressionParser.InstanceExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.instanceExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInstanceExpression([NotNull] VBAExpressionParser.InstanceExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.unrestrictedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnrestrictedName([NotNull] VBAExpressionParser.UnrestrictedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.unrestrictedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnrestrictedName([NotNull] VBAExpressionParser.UnrestrictedNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.namedArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamedArgument([NotNull] VBAExpressionParser.NamedArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.namedArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamedArgument([NotNull] VBAExpressionParser.NamedArgumentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.definedTypeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefinedTypeExpression([NotNull] VBAExpressionParser.DefinedTypeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.definedTypeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefinedTypeExpression([NotNull] VBAExpressionParser.DefinedTypeExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.logicalNotOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalNotOp([NotNull] VBAExpressionParser.LogicalNotOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.logicalNotOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalNotOp([NotNull] VBAExpressionParser.LogicalNotOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.typeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeExpression([NotNull] VBAExpressionParser.TypeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.typeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeExpression([NotNull] VBAExpressionParser.TypeExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.uncategorizedKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUncategorizedKeyword([NotNull] VBAExpressionParser.UncategorizedKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.uncategorizedKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUncategorizedKeyword([NotNull] VBAExpressionParser.UncategorizedKeywordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.whiteSpace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhiteSpace([NotNull] VBAExpressionParser.WhiteSpaceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.whiteSpace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhiteSpace([NotNull] VBAExpressionParser.WhiteSpaceContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.constantExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantExpression([NotNull] VBAExpressionParser.ConstantExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.constantExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantExpression([NotNull] VBAExpressionParser.ConstantExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.specialForm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSpecialForm([NotNull] VBAExpressionParser.SpecialFormContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.specialForm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSpecialForm([NotNull] VBAExpressionParser.SpecialFormContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.addOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddOp([NotNull] VBAExpressionParser.AddOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.addOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddOp([NotNull] VBAExpressionParser.AddOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.simpleNameExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleNameExpr([NotNull] VBAExpressionParser.SimpleNameExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.simpleNameExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleNameExpr([NotNull] VBAExpressionParser.SimpleNameExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStartRule([NotNull] VBAExpressionParser.StartRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStartRule([NotNull] VBAExpressionParser.StartRuleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedName([NotNull] VBAExpressionParser.ReservedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedName([NotNull] VBAExpressionParser.ReservedNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.logicalXorOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalXorOp([NotNull] VBAExpressionParser.LogicalXorOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.logicalXorOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalXorOp([NotNull] VBAExpressionParser.LogicalXorOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.argumentExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentExpression([NotNull] VBAExpressionParser.ArgumentExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.argumentExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentExpression([NotNull] VBAExpressionParser.ArgumentExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.callStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallStmt([NotNull] VBAExpressionParser.CallStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.callStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallStmt([NotNull] VBAExpressionParser.CallStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedIdentifier([NotNull] VBAExpressionParser.ReservedIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedIdentifier([NotNull] VBAExpressionParser.ReservedIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.withExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithExpression([NotNull] VBAExpressionParser.WithExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.withExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithExpression([NotNull] VBAExpressionParser.WithExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.withMemberAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithMemberAccessExpression([NotNull] VBAExpressionParser.WithMemberAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.withMemberAccessExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithMemberAccessExpression([NotNull] VBAExpressionParser.WithMemberAccessExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.literalExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpression([NotNull] VBAExpressionParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.literalExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpression([NotNull] VBAExpressionParser.LiteralExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.dictionaryAccessExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDictionaryAccessExpr([NotNull] VBAExpressionParser.DictionaryAccessExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.dictionaryAccessExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDictionaryAccessExpr([NotNull] VBAExpressionParser.DictionaryAccessExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifierName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedIdentifierName([NotNull] VBAExpressionParser.ReservedIdentifierNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.reservedIdentifierName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedIdentifierName([NotNull] VBAExpressionParser.ReservedIdentifierNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAExpressionParser.numberLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberLiteral([NotNull] VBAExpressionParser.NumberLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAExpressionParser.numberLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberLiteral([NotNull] VBAExpressionParser.NumberLiteralContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Rubberduck.Parsing.Binding
