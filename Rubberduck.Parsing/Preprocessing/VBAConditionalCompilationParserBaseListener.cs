//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\hosch\Documents\Visual Studio 2015\Projects\Rubberduck\Rubberduck.Parsing\Preprocessing\VBAConditionalCompilationParser.g4 by ANTLR 4.3

// Unreachable code detected

using Antlr4.Runtime.Misc;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Preprocessing {
    using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
    using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IVBAConditionalCompilationParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAConditionalCompilationParserBaseListener : IVBAConditionalCompilationParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcBlock([NotNull] VBAConditionalCompilationParser.CcBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcBlock([NotNull] VBAConditionalCompilationParser.CcBlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.typeHint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeHint([NotNull] VBAConditionalCompilationParser.TypeHintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.typeHint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeHint([NotNull] VBAConditionalCompilationParser.TypeHintContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHashIf([NotNull] VBAConditionalCompilationParser.HashIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHashIf([NotNull] VBAConditionalCompilationParser.HashIfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] VBAConditionalCompilationParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] VBAConditionalCompilationParser.LiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashConst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHashConst([NotNull] VBAConditionalCompilationParser.HashConstContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashConst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHashConst([NotNull] VBAConditionalCompilationParser.HashConstContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.statementKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementKeyword([NotNull] VBAConditionalCompilationParser.StatementKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.statementKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementKeyword([NotNull] VBAConditionalCompilationParser.StatementKeywordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForeignName([NotNull] VBAConditionalCompilationParser.ForeignNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForeignName([NotNull] VBAConditionalCompilationParser.ForeignNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunctionName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntrinsicFunctionName([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunctionName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntrinsicFunctionName([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.markerKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMarkerKeyword([NotNull] VBAConditionalCompilationParser.MarkerKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.markerKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMarkerKeyword([NotNull] VBAConditionalCompilationParser.MarkerKeywordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyword([NotNull] VBAConditionalCompilationParser.KeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyword([NotNull] VBAConditionalCompilationParser.KeywordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEndIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcEndIf([NotNull] VBAConditionalCompilationParser.CcEndIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEndIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcEndIf([NotNull] VBAConditionalCompilationParser.CcEndIfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.nameValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNameValue([NotNull] VBAConditionalCompilationParser.NameValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.nameValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNameValue([NotNull] VBAConditionalCompilationParser.NameValueContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEol"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcEol([NotNull] VBAConditionalCompilationParser.CcEolContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEol"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcEol([NotNull] VBAConditionalCompilationParser.CcEolContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIfBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcIfBlock([NotNull] VBAConditionalCompilationParser.CcIfBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIfBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcIfBlock([NotNull] VBAConditionalCompilationParser.CcIfBlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntrinsicFunction([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntrinsicFunction([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForeignIdentifier([NotNull] VBAConditionalCompilationParser.ForeignIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForeignIdentifier([NotNull] VBAConditionalCompilationParser.ForeignIdentifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHashElse([NotNull] VBAConditionalCompilationParser.HashElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHashElse([NotNull] VBAConditionalCompilationParser.HashElseContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashEndIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHashEndIf([NotNull] VBAConditionalCompilationParser.HashEndIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashEndIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHashEndIf([NotNull] VBAConditionalCompilationParser.HashEndIfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcExpression([NotNull] VBAConditionalCompilationParser.CcExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcExpression([NotNull] VBAConditionalCompilationParser.CcExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIfBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcElseIfBlock([NotNull] VBAConditionalCompilationParser.CcElseIfBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIfBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcElseIfBlock([NotNull] VBAConditionalCompilationParser.CcElseIfBlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompilationUnit([NotNull] VBAConditionalCompilationParser.CompilationUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompilationUnit([NotNull] VBAConditionalCompilationParser.CompilationUnitContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcIf([NotNull] VBAConditionalCompilationParser.CcIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcIf([NotNull] VBAConditionalCompilationParser.CcIfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcElseIf([NotNull] VBAConditionalCompilationParser.CcElseIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcElseIf([NotNull] VBAConditionalCompilationParser.CcElseIfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcElseBlock([NotNull] VBAConditionalCompilationParser.CcElseBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcElseBlock([NotNull] VBAConditionalCompilationParser.CcElseBlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterName([NotNull] VBAConditionalCompilationParser.NameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitName([NotNull] VBAConditionalCompilationParser.NameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccVarLhs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcVarLhs([NotNull] VBAConditionalCompilationParser.CcVarLhsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccVarLhs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcVarLhs([NotNull] VBAConditionalCompilationParser.CcVarLhsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcElse([NotNull] VBAConditionalCompilationParser.CcElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcElse([NotNull] VBAConditionalCompilationParser.CcElseContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.comment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComment([NotNull] VBAConditionalCompilationParser.CommentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.comment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComment([NotNull] VBAConditionalCompilationParser.CommentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElseIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHashElseIf([NotNull] VBAConditionalCompilationParser.HashElseIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElseIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHashElseIf([NotNull] VBAConditionalCompilationParser.HashElseIfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.physicalLine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPhysicalLine([NotNull] VBAConditionalCompilationParser.PhysicalLineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.physicalLine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPhysicalLine([NotNull] VBAConditionalCompilationParser.PhysicalLineContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccConst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCcConst([NotNull] VBAConditionalCompilationParser.CcConstContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccConst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCcConst([NotNull] VBAConditionalCompilationParser.CcConstContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Rubberduck.Parsing
