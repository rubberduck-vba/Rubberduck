//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\hosch\Documents\Visual Studio 2015\Projects\Rubberduck\Rubberduck.Parsing\Preprocessing\VBADate.g4 by ANTLR 4.3

// Unreachable code detected

using Antlr4.Runtime.Misc;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Preprocessing {
    using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
    using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IVBADateListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBADateBaseListener : IVBADateListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.dateValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateValue([NotNull] VBADateParser.DateValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.dateValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateValue([NotNull] VBADateParser.DateValueContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.dateSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateSeparator([NotNull] VBADateParser.DateSeparatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.dateSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateSeparator([NotNull] VBADateParser.DateSeparatorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.englishMonthAbbreviation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnglishMonthAbbreviation([NotNull] VBADateParser.EnglishMonthAbbreviationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.englishMonthAbbreviation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnglishMonthAbbreviation([NotNull] VBADateParser.EnglishMonthAbbreviationContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.dateOrTime"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateOrTime([NotNull] VBADateParser.DateOrTimeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.dateOrTime"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateOrTime([NotNull] VBADateParser.DateOrTimeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.englishMonthName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnglishMonthName([NotNull] VBADateParser.EnglishMonthNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.englishMonthName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnglishMonthName([NotNull] VBADateParser.EnglishMonthNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.monthName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMonthName([NotNull] VBADateParser.MonthNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.monthName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMonthName([NotNull] VBADateParser.MonthNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.timeSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTimeSeparator([NotNull] VBADateParser.TimeSeparatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.timeSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTimeSeparator([NotNull] VBADateParser.TimeSeparatorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.timeValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTimeValue([NotNull] VBADateParser.TimeValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.timeValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTimeValue([NotNull] VBADateParser.TimeValueContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompilationUnit([NotNull] VBADateParser.CompilationUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompilationUnit([NotNull] VBADateParser.CompilationUnitContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.dateValuePart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateValuePart([NotNull] VBADateParser.DateValuePartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.dateValuePart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateValuePart([NotNull] VBADateParser.DateValuePartContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.timeValuePart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTimeValuePart([NotNull] VBADateParser.TimeValuePartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.timeValuePart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTimeValuePart([NotNull] VBADateParser.TimeValuePartContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.dateLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateLiteral([NotNull] VBADateParser.DateLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.dateLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateLiteral([NotNull] VBADateParser.DateLiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBADateParser.dateValueNumber"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateValueNumber([NotNull] VBADateParser.DateValueNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBADateParser.dateValueNumber"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateValueNumber([NotNull] VBADateParser.DateValueNumberContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Rubberduck.Parsing
