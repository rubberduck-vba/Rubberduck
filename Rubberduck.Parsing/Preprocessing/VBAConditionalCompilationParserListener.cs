//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\hosch\Documents\Visual Studio 2015\Projects\Rubberduck\Rubberduck.Parsing\Preprocessing\VBAConditionalCompilationParser.g4 by ANTLR 4.3

// Unreachable code detected

using Antlr4.Runtime.Misc;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Preprocessing {
    using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;

    /// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="VBAConditionalCompilationParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IVBAConditionalCompilationParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcBlock([NotNull] VBAConditionalCompilationParser.CcBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcBlock([NotNull] VBAConditionalCompilationParser.CcBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.typeHint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeHint([NotNull] VBAConditionalCompilationParser.TypeHintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.typeHint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeHint([NotNull] VBAConditionalCompilationParser.TypeHintContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHashIf([NotNull] VBAConditionalCompilationParser.HashIfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHashIf([NotNull] VBAConditionalCompilationParser.HashIfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] VBAConditionalCompilationParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] VBAConditionalCompilationParser.LiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashConst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHashConst([NotNull] VBAConditionalCompilationParser.HashConstContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashConst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHashConst([NotNull] VBAConditionalCompilationParser.HashConstContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementKeyword([NotNull] VBAConditionalCompilationParser.StatementKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementKeyword([NotNull] VBAConditionalCompilationParser.StatementKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForeignName([NotNull] VBAConditionalCompilationParser.ForeignNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForeignName([NotNull] VBAConditionalCompilationParser.ForeignNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunctionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntrinsicFunctionName([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunctionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntrinsicFunctionName([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.markerKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMarkerKeyword([NotNull] VBAConditionalCompilationParser.MarkerKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.markerKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMarkerKeyword([NotNull] VBAConditionalCompilationParser.MarkerKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] VBAConditionalCompilationParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] VBAConditionalCompilationParser.KeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEndIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcEndIf([NotNull] VBAConditionalCompilationParser.CcEndIfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEndIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcEndIf([NotNull] VBAConditionalCompilationParser.CcEndIfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.nameValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNameValue([NotNull] VBAConditionalCompilationParser.NameValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.nameValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNameValue([NotNull] VBAConditionalCompilationParser.NameValueContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcEol([NotNull] VBAConditionalCompilationParser.CcEolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccEol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcEol([NotNull] VBAConditionalCompilationParser.CcEolContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcIfBlock([NotNull] VBAConditionalCompilationParser.CcIfBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcIfBlock([NotNull] VBAConditionalCompilationParser.CcIfBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntrinsicFunction([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.intrinsicFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntrinsicFunction([NotNull] VBAConditionalCompilationParser.IntrinsicFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForeignIdentifier([NotNull] VBAConditionalCompilationParser.ForeignIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.foreignIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForeignIdentifier([NotNull] VBAConditionalCompilationParser.ForeignIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHashElse([NotNull] VBAConditionalCompilationParser.HashElseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHashElse([NotNull] VBAConditionalCompilationParser.HashElseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashEndIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHashEndIf([NotNull] VBAConditionalCompilationParser.HashEndIfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashEndIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHashEndIf([NotNull] VBAConditionalCompilationParser.HashEndIfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcExpression([NotNull] VBAConditionalCompilationParser.CcExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcExpression([NotNull] VBAConditionalCompilationParser.CcExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcElseIfBlock([NotNull] VBAConditionalCompilationParser.CcElseIfBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcElseIfBlock([NotNull] VBAConditionalCompilationParser.CcElseIfBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.compilationUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompilationUnit([NotNull] VBAConditionalCompilationParser.CompilationUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.compilationUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompilationUnit([NotNull] VBAConditionalCompilationParser.CompilationUnitContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcIf([NotNull] VBAConditionalCompilationParser.CcIfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcIf([NotNull] VBAConditionalCompilationParser.CcIfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcElseIf([NotNull] VBAConditionalCompilationParser.CcElseIfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcElseIf([NotNull] VBAConditionalCompilationParser.CcElseIfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcElseBlock([NotNull] VBAConditionalCompilationParser.CcElseBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcElseBlock([NotNull] VBAConditionalCompilationParser.CcElseBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] VBAConditionalCompilationParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] VBAConditionalCompilationParser.NameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccVarLhs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcVarLhs([NotNull] VBAConditionalCompilationParser.CcVarLhsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccVarLhs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcVarLhs([NotNull] VBAConditionalCompilationParser.CcVarLhsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcElse([NotNull] VBAConditionalCompilationParser.CcElseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcElse([NotNull] VBAConditionalCompilationParser.CcElseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] VBAConditionalCompilationParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] VBAConditionalCompilationParser.CommentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElseIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHashElseIf([NotNull] VBAConditionalCompilationParser.HashElseIfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.hashElseIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHashElseIf([NotNull] VBAConditionalCompilationParser.HashElseIfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.physicalLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPhysicalLine([NotNull] VBAConditionalCompilationParser.PhysicalLineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.physicalLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPhysicalLine([NotNull] VBAConditionalCompilationParser.PhysicalLineContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAConditionalCompilationParser.ccConst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCcConst([NotNull] VBAConditionalCompilationParser.CcConstContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAConditionalCompilationParser.ccConst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCcConst([NotNull] VBAConditionalCompilationParser.CcConstContext context);
}
} // namespace Rubberduck.Parsing
