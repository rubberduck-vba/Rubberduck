//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=156, ELSEIF=88, CBYTE=5, CLOSE=65, STATIC=180, MINUS=212, OPTION_EXPLICIT=149, 
		L_SQUARE_BRACKET=223, DOEVENTS=21, HASHENDIF=222, DATELITERAL=230, ERROR=102, 
		NOTHING=141, EACH=86, SUB=184, STOP=182, LPAREN=210, MID=136, CVERR=19, 
		AS=55, END_PROPERTY=93, AT=45, DATABASE=67, GOSUB=115, CSNG=15, HASHCONST=218, 
		POW=216, DOLLAR=47, PROPERTY_LET=159, THEN=187, XOR=202, EXIT_FOR=105, 
		DEFINT=75, HASHIF=219, UNLOCK=192, CALL=62, LOCK_READ=131, SET=176, LOCK_READ_WRITE=133, 
		ABS=1, LSET=134, RAISEEVENT=165, MIDBTYPESUFFIX=32, SEEK=174, LONG=125, 
		CBOOL=4, LIB=128, DIM=83, APPEND=54, OPEN=146, DIV=204, PROPERTY_SET=160, 
		CDBL=8, PERCENT=46, END_SELECT=94, STRING=183, HASHELSEIF=220, SGN=37, 
		REM=169, TO=188, DEFDBL=73, BYVAL=59, FRIEND=110, LOOP=126, CLASS=64, 
		DO=84, VARIANT=194, END_WITH=97, DEFBOOL=70, OPTIONAL=147, ADDRESSOF=50, 
		CONST=66, RSET=173, INTEGER=123, CDEC=9, ATTRIBUTE=53, OUTPUT=153, FOR=111, 
		PTRSAFE=161, EQ=206, BOOLEAN=58, CIRCLE=11, END_FUNCTION=91, DEFSNG=80, 
		DEFBYTE=71, NOT=140, CINT=10, END=98, PRESERVE=155, ON_LOCAL_ERROR=145, 
		FLOATLITERAL=228, HASHELSE=221, BINARY=57, LENB=28, RETURN=172, EXCLAMATIONPOINT=42, 
		NEXT=138, GLOBAL=114, INPUTB=24, IDENTIFIER=236, WS=234, EMPTY=89, CURRENCY=17, 
		CCUR=6, MOD=137, WITHEVENTS=200, COLON=40, DEFLNGLNG=77, STEP=181, OPTION_BASE=148, 
		GT=208, PUT=163, WITH=199, CSTR=16, LOCK_WRITE=132, LINE_CONTINUATION=237, 
		TYPEOF=191, DEFVAR=82, DEFLNG=76, UBOUND=38, FALSE=109, ERRORCHAR=238, 
		UNDERSCORE=233, INTEGERLITERAL=229, END_IF=92, LOCK=124, TEXT=186, SINGLEQUOTE=232, 
		MULT=213, SEMICOLON=41, BYTE=61, HEXLITERAL=227, ELSE=87, IF=117, TYPE=190, 
		AMPERSAND=48, DEFLNGPTR=78, ENUM=99, DEFOBJ=79, IN=120, OPTION=34, DOT=43, 
		EXIT_DO=104, GUIDLITERAL=235, IS=122, EQV=100, WEND=196, FUNCTION=112, 
		HASH=44, CASE=63, GEQ=207, GET=113, PUBLIC=162, ON_ERROR=144, EXIT=22, 
		MIDB=31, END_ENUM=90, GOTO=116, INTDIV=205, LONGPTR=30, WIDTH=198, BEGIN=56, 
		EXIT_SUB=108, ASSIGN=203, WRITE=201, DOUBLE=85, EXIT_PROPERTY=107, COMMA=39, 
		RANDOM=164, PROPERTY_GET=158, SELECT=175, PRIVATE=157, ERASE=101, TAB=185, 
		BYREF=60, VERSION=195, NEQ=214, END_TYPE=96, NEW=139, ARRAY=3, INPUT=121, 
		SINGLE=178, ALIAS=51, SPC=179, LT=211, RESET=170, END_SUB=95, EVENT=103, 
		READ_WRITE=167, OPTION_COMPARE=150, ME=135, SCALE=36, CDATE=7, MIDTYPESUFFIX=33, 
		NULL=142, NEWLINE=231, TRUE=189, RPAREN=217, IMP=118, STRINGLITERAL=225, 
		OCTLITERAL=226, READ=166, DATE=68, LIKE=129, AND=52, OPTION_PRIVATE_MODULE=151, 
		CLNGLNG=13, PLUS=215, ANY=2, RESUME=171, INT=25, SHARED=177, EXIT_FUNCTION=106, 
		PSET=35, ACCESS=49, LINE_INPUT=130, ON=143, OR=152, PARAMARRAY=154, LBOUND=26, 
		R_SQUARE_BRACKET=224, IMPLEMENTS=119, UNTIL=193, DEBUG=20, DEFCUR=74, 
		CLNGPTR=14, LONGLONG=29, DECLARE=69, DEFDATE=72, FIX=23, LEN=27, REDIM=168, 
		LEQ=209, DEFSTR=81, LET=127, WHILE=197, CVAR=18, CLNG=12, COLLECTION=239, 
		DELETESETTING=240, LOAD=241, RMDIR=242, SENDKEYS=243, SETATTR=244, RESUME_NEXT=245, 
		ENDIF=246;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "CBOOL", "CBYTE", "CCUR", "CDATE", 
		"CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", "CLNGPTR", "CSNG", 
		"CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", "EXIT", "FIX", 
		"INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", "MIDB", 
		"MIDBTYPESUFFIX", "MIDTYPESUFFIX", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", 
		"','", "':'", "';'", "'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPEND", "AS", "BEGIN", 
		"BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CLASS", 
		"CLOSE", "CONST", "DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", 
		"DEFDATE", "DEFDBL", "DEFCUR", "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", 
		"DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", "DIM", "DO", "DOUBLE", "EACH", 
		"ELSE", "ELSEIF", "EMPTY", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
		"END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENUM", "EQV", 
		"ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", 
		"EXIT_SUB", "FALSE", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
		"GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "LOCK", 
		"LONG", "LOOP", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", 
		"LOCK_READ_WRITE", "LSET", "ME", "MID", "MOD", "NEXT", "NEW", "NOT", "NOTHING", 
		"NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", "READ", 
		"READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RSET", "SEEK", 
		"SELECT", "SET", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", 
		"STRING", "SUB", "TAB", "TEXT", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", 
		"WITHEVENTS", "WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", 
		"LEQ", "'('", "'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "HASHCONST", 
		"HASHIF", "HASHELSEIF", "HASHELSE", "HASHENDIF", "'['", "']'", "STRINGLITERAL", 
		"OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", "DATELITERAL", 
		"NEWLINE", "'''", "'_'", "WS", "GUIDLITERAL", "IDENTIFIER", "LINE_CONTINUATION", 
		"ERRORCHAR", "COLLECTION", "DELETESETTING", "LOAD", "RMDIR", "SENDKEYS", 
		"SETATTR", "RESUME_NEXT", "ENDIF"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_attributeStmt = 11, RULE_attributeName = 12, 
		RULE_attributeValue = 13, RULE_block = 14, RULE_blockStmt = 15, RULE_closeStmt = 16, 
		RULE_constStmt = 17, RULE_constSubStmt = 18, RULE_declareStmt = 19, RULE_deftypeStmt = 20, 
		RULE_doLoopStmt = 21, RULE_enumerationStmt = 22, RULE_enumerationStmt_Constant = 23, 
		RULE_eraseStmt = 24, RULE_errorStmt = 25, RULE_eventStmt = 26, RULE_exitStmt = 27, 
		RULE_forEachStmt = 28, RULE_forNextStmt = 29, RULE_functionStmt = 30, 
		RULE_functionName = 31, RULE_getStmt = 32, RULE_goSubStmt = 33, RULE_goToStmt = 34, 
		RULE_ifThenElseStmt = 35, RULE_ifBlockStmt = 36, RULE_ifConditionStmt = 37, 
		RULE_ifElseIfBlockStmt = 38, RULE_ifElseBlockStmt = 39, RULE_implementsStmt = 40, 
		RULE_inputStmt = 41, RULE_letStmt = 42, RULE_lineInputStmt = 43, RULE_lockStmt = 44, 
		RULE_lsetStmt = 45, RULE_midStmt = 46, RULE_onErrorStmt = 47, RULE_onGoToStmt = 48, 
		RULE_onGoSubStmt = 49, RULE_openStmt = 50, RULE_outputList = 51, RULE_outputList_Expression = 52, 
		RULE_printStmt = 53, RULE_propertyGetStmt = 54, RULE_propertySetStmt = 55, 
		RULE_propertyLetStmt = 56, RULE_putStmt = 57, RULE_raiseEventStmt = 58, 
		RULE_redimStmt = 59, RULE_redimSubStmt = 60, RULE_resetStmt = 61, RULE_resumeStmt = 62, 
		RULE_returnStmt = 63, RULE_rsetStmt = 64, RULE_stopStmt = 65, RULE_seekStmt = 66, 
		RULE_selectCaseStmt = 67, RULE_sC_Selection = 68, RULE_sC_Case = 69, RULE_sC_Cond = 70, 
		RULE_setStmt = 71, RULE_subStmt = 72, RULE_subroutineName = 73, RULE_typeStmt = 74, 
		RULE_typeStmt_Element = 75, RULE_unlockStmt = 76, RULE_valueStmt = 77, 
		RULE_typeOfIsExpression = 78, RULE_variableStmt = 79, RULE_variableListStmt = 80, 
		RULE_variableSubStmt = 81, RULE_whileWendStmt = 82, RULE_widthStmt = 83, 
		RULE_withStmt = 84, RULE_withStmtExpression = 85, RULE_writeStmt = 86, 
		RULE_fileNumber = 87, RULE_explicitCallStmt = 88, RULE_explicitCallStmtExpression = 89, 
		RULE_implicitCallStmt_InBlock = 90, RULE_iCS_B_MemberProcedureCall = 91, 
		RULE_iCS_B_ProcedureCall = 92, RULE_implicitCallStmt_InStmt = 93, RULE_iCS_S_VariableOrProcedureCall = 94, 
		RULE_iCS_S_ProcedureOrArrayCall = 95, RULE_iCS_S_VariableOrProcedureCallUnrestricted = 96, 
		RULE_iCS_S_ProcedureOrArrayCallUnrestricted = 97, RULE_iCS_S_MembersCall = 98, 
		RULE_iCS_S_MemberCall = 99, RULE_iCS_S_DictionaryCall = 100, RULE_argsCall = 101, 
		RULE_argCall = 102, RULE_dictionaryCallStmt = 103, RULE_argList = 104, 
		RULE_arg = 105, RULE_argDefaultValue = 106, RULE_subscripts = 107, RULE_subscript = 108, 
		RULE_unrestrictedIdentifier = 109, RULE_identifier = 110, RULE_asTypeClause = 111, 
		RULE_baseType = 112, RULE_comparisonOperator = 113, RULE_complexType = 114, 
		RULE_fieldLength = 115, RULE_letterrange = 116, RULE_lineLabel = 117, 
		RULE_literal = 118, RULE_numberLiteral = 119, RULE_type = 120, RULE_typeHint = 121, 
		RULE_visibility = 122, RULE_keyword = 123, RULE_markerKeyword = 124, RULE_statementKeyword = 125, 
		RULE_endOfLine = 126, RULE_endOfStatement = 127, RULE_commentOrAnnotation = 128, 
		RULE_remComment = 129, RULE_comment = 130, RULE_commentBody = 131, RULE_annotationList = 132, 
		RULE_annotation = 133, RULE_annotationName = 134, RULE_annotationArgList = 135, 
		RULE_annotationArg = 136, RULE_whiteSpace = 137;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "attributeStmt", "attributeName", "attributeValue", 
		"block", "blockStmt", "closeStmt", "constStmt", "constSubStmt", "declareStmt", 
		"deftypeStmt", "doLoopStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "forEachStmt", "forNextStmt", 
		"functionStmt", "functionName", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "letStmt", "lineInputStmt", "lockStmt", 
		"lsetStmt", "midStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", 
		"outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
		"propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rsetStmt", "stopStmt", 
		"seekStmt", "selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "setStmt", 
		"subStmt", "subroutineName", "typeStmt", "typeStmt_Element", "unlockStmt", 
		"valueStmt", "typeOfIsExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "withStmtExpression", 
		"writeStmt", "fileNumber", "explicitCallStmt", "explicitCallStmtExpression", 
		"implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", 
		"implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
		"iCS_S_VariableOrProcedureCallUnrestricted", "iCS_S_ProcedureOrArrayCallUnrestricted", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "unrestrictedIdentifier", "identifier", "asTypeClause", 
		"baseType", "comparisonOperator", "complexType", "fieldLength", "letterrange", 
		"lineLabel", "literal", "numberLiteral", "type", "typeHint", "visibility", 
		"keyword", "markerKeyword", "statementKeyword", "endOfLine", "endOfStatement", 
		"commentOrAnnotation", "remComment", "comment", "commentBody", "annotationList", 
		"annotation", "annotationName", "annotationArgList", "annotationArg", 
		"whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 278; whiteSpace();
				}
				break;
			}
			State = 281; endOfStatement();
			State = 285;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 282; moduleHeader();
				State = 283; endOfStatement();
				}
				break;
			}
			State = 288;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 287; moduleConfig();
				}
				break;
			}
			State = 290; endOfStatement();
			State = 292;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 291; moduleAttributes();
				}
				break;
			}
			State = 294; endOfStatement();
			State = 296;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 295; moduleDeclarations();
				}
				break;
			}
			State = 298; endOfStatement();
			State = 300;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 299; moduleBody();
				}
				break;
			}
			State = 302; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(VERSION);
			State = 305; whiteSpace();
			State = 306; numberLiteral();
			State = 308;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 307; whiteSpace();
				}
				break;
			}
			State = 311;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 310; Match(CLASS);
				}
				break;
			}
			State = 313; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(BEGIN);
			State = 323;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 316; whiteSpace();
				State = 317; Match(GUIDLITERAL);
				State = 318; whiteSpace();
				State = 319; unrestrictedIdentifier();
				State = 321;
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 320; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 325; endOfStatement();
			State = 327;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 326; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 329;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 331; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; unrestrictedIdentifier();
			State = 337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 334; whiteSpace();
				}
				}
				State = 339;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 340; Match(EQ);
			State = 344;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 341; whiteSpace();
					}
					} 
				}
				State = 346;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			State = 347; valueStmt(0);
			State = 350;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 348; Match(COLON);
				State = 349; numberLiteral();
				}
				break;
			}
			State = 352; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 354; attributeStmt();
					State = 355; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 359;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; moduleDeclarationsElement();
			State = 367;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 362; endOfStatement();
					State = 363; moduleDeclarationsElement();
					}
					} 
				}
				State = 369;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 370; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 382;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; Match(OPTION_BASE);
				State = 373; whiteSpace();
				State = 374; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 376; Match(OPTION_COMPARE);
				State = 377; whiteSpace();
				State = 378;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 380; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 381; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 392;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; declareStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; enumerationStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 386; eventStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 387; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 388; implementsStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 389; variableStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 390; moduleOption();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 391; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; moduleBodyElement();
			State = 400;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 395; endOfStatement();
					State = 396; moduleBodyElement();
					}
					} 
				}
				State = 402;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			State = 403; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 410;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 408; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 409; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AttributeValueContext> attributeValue() {
			return GetRuleContexts<AttributeValueContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeValueContext attributeValue(int i) {
			return GetRuleContext<AttributeValueContext>(i);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(ATTRIBUTE);
			State = 413; whiteSpace();
			State = 414; attributeName();
			State = 416;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 415; whiteSpace();
				}
			}

			State = 418; Match(EQ);
			State = 420;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 419; whiteSpace();
				}
				break;
			}
			State = 422; attributeValue();
			State = 433;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 424;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 423; whiteSpace();
						}
					}

					State = 426; Match(COMMA);
					State = 428;
					switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						State = 427; whiteSpace();
						}
						break;
					}
					State = 430; attributeValue();
					}
					} 
				}
				State = 435;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; implicitCallStmt_InStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_attributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; blockStmt();
			State = 446;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 441; endOfStatement();
					State = 442; blockStmt();
					}
					} 
				}
				State = 448;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			State = 449; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_blockStmt);
		try {
			State = 497;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451; lineLabel();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 453; closeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 454; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 455; deftypeStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 456; doLoopStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 457; eraseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 458; errorStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 459; exitStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 460; explicitCallStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 461; forEachStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 462; forNextStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 463; getStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 464; goSubStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 465; goToStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 466; ifThenElseStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 467; implementsStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 468; inputStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 469; letStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 470; lineInputStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 471; lockStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 472; lsetStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 473; midStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 474; onErrorStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 475; onGoToStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 476; onGoSubStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 477; openStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 478; printStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 479; putStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 480; raiseEventStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 481; redimStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 482; resetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 483; resumeStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 484; returnStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 485; rsetStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 486; seekStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 487; selectCaseStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 488; setStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 489; stopStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 490; unlockStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 491; variableStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 492; whileWendStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 493; widthStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 494; withStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 495; writeStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 496; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(CLOSE);
			State = 515;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 500; whiteSpace();
				State = 501; fileNumber();
				State = 512;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 503;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 502; whiteSpace();
							}
						}

						State = 505; Match(COMMA);
						State = 507;
						switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
						case 1:
							{
							State = 506; whiteSpace();
							}
							break;
						}
						State = 509; fileNumber();
						}
						} 
					}
					State = 514;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 517; visibility();
				State = 518; whiteSpace();
				}
			}

			State = 522; Match(CONST);
			State = 523; whiteSpace();
			State = 524; constSubStmt();
			State = 535;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 526;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 525; whiteSpace();
						}
					}

					State = 528; Match(COMMA);
					State = 530;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 529; whiteSpace();
						}
					}

					State = 532; constSubStmt();
					}
					} 
				}
				State = 537;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; identifier();
			State = 540;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 539; typeHint();
				}
			}

			State = 545;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 542; whiteSpace();
				State = 543; asTypeClause();
				}
				break;
			}
			State = 548;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 547; whiteSpace();
				}
			}

			State = 550; Match(EQ);
			State = 552;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 551; whiteSpace();
				}
				break;
			}
			State = 554; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 556; visibility();
				State = 557; whiteSpace();
				}
			}

			State = 561; Match(DECLARE);
			State = 562; whiteSpace();
			State = 565;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 563; Match(PTRSAFE);
				State = 564; whiteSpace();
				}
			}

			State = 572;
			switch (_input.La(1)) {
			case FUNCTION:
				{
				{
				State = 567; Match(FUNCTION);
				State = 569;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
					{
					State = 568; typeHint();
					}
				}

				}
				}
				break;
			case SUB:
				{
				State = 571; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 574; whiteSpace();
			State = 575; identifier();
			State = 577;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 576; typeHint();
				}
			}

			State = 579; whiteSpace();
			State = 580; Match(LIB);
			State = 581; whiteSpace();
			State = 582; Match(STRINGLITERAL);
			State = 588;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 583; whiteSpace();
				State = 584; Match(ALIAS);
				State = 585; whiteSpace();
				State = 586; Match(STRINGLITERAL);
				}
				break;
			}
			State = 594;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 591;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 590; whiteSpace();
					}
				}

				State = 593; argList();
				}
				break;
			}
			State = 599;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 596; whiteSpace();
				State = 597; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (DEFBOOL - 70)) | (1L << (DEFBYTE - 70)) | (1L << (DEFDATE - 70)) | (1L << (DEFDBL - 70)) | (1L << (DEFCUR - 70)) | (1L << (DEFINT - 70)) | (1L << (DEFLNG - 70)) | (1L << (DEFLNGLNG - 70)) | (1L << (DEFLNGPTR - 70)) | (1L << (DEFOBJ - 70)) | (1L << (DEFSNG - 70)) | (1L << (DEFSTR - 70)) | (1L << (DEFVAR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 602; whiteSpace();
			State = 603; letterrange();
			State = 614;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 605;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 604; whiteSpace();
						}
					}

					State = 607; Match(COMMA);
					State = 609;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 608; whiteSpace();
						}
					}

					State = 611; letterrange();
					}
					} 
				}
				State = 616;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_doLoopStmt);
		int _la;
		try {
			State = 646;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617; Match(DO);
				State = 618; endOfStatement();
				State = 620;
				switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					State = 619; block();
					}
					break;
				}
				State = 622; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624; Match(DO);
				State = 625; whiteSpace();
				State = 626;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 627; whiteSpace();
				State = 628; valueStmt(0);
				State = 629; endOfStatement();
				State = 631;
				switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					State = 630; block();
					}
					break;
				}
				State = 633; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 635; Match(DO);
				State = 636; endOfStatement();
				State = 638;
				switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					State = 637; block();
					}
					break;
				}
				State = 640; Match(LOOP);
				State = 641; whiteSpace();
				State = 642;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 643; whiteSpace();
				State = 644; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 648; visibility();
				State = 649; whiteSpace();
				}
			}

			State = 653; Match(ENUM);
			State = 654; whiteSpace();
			State = 655; identifier();
			State = 656; endOfStatement();
			State = 660;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) {
				{
				{
				State = 657; enumerationStmt_Constant();
				}
				}
				State = 662;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 663; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665; identifier();
			State = 674;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 667;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 666; whiteSpace();
					}
				}

				State = 669; Match(EQ);
				State = 671;
				switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					State = 670; whiteSpace();
					}
					break;
				}
				State = 673; valueStmt(0);
				}
				break;
			}
			State = 676; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(ERASE);
			State = 679; whiteSpace();
			State = 680; valueStmt(0);
			State = 691;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 682;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 681; whiteSpace();
						}
					}

					State = 684; Match(COMMA);
					State = 686;
					switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
					case 1:
						{
						State = 685; whiteSpace();
						}
						break;
					}
					State = 688; valueStmt(0);
					}
					} 
				}
				State = 693;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; Match(ERROR);
			State = 695; whiteSpace();
			State = 696; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 698; visibility();
				State = 699; whiteSpace();
				}
			}

			State = 703; Match(EVENT);
			State = 704; whiteSpace();
			State = 705; identifier();
			State = 707;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 706; whiteSpace();
				}
			}

			State = 709; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			_la = _input.La(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EXIT_DO - 104)) | (1L << (EXIT_FOR - 104)) | (1L << (EXIT_FUNCTION - 104)) | (1L << (EXIT_PROPERTY - 104)) | (1L << (EXIT_SUB - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_forEachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; Match(FOR);
			State = 714; whiteSpace();
			State = 715; Match(EACH);
			State = 716; whiteSpace();
			State = 717; valueStmt(0);
			State = 718; whiteSpace();
			State = 719; Match(IN);
			State = 720; whiteSpace();
			State = 721; valueStmt(0);
			State = 722; endOfStatement();
			State = 724;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 723; block();
				}
				break;
			}
			State = 726; Match(NEXT);
			State = 730;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 727; whiteSpace();
				State = 728; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(FOR);
			State = 733; whiteSpace();
			State = 734; valueStmt(0);
			State = 736;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 735; whiteSpace();
				}
			}

			State = 738; Match(EQ);
			State = 740;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 739; whiteSpace();
				}
				break;
			}
			State = 742; valueStmt(0);
			State = 743; whiteSpace();
			State = 744; Match(TO);
			State = 745; whiteSpace();
			State = 746; valueStmt(0);
			State = 752;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 747; whiteSpace();
				State = 748; Match(STEP);
				State = 749; whiteSpace();
				State = 750; valueStmt(0);
				}
				break;
			}
			State = 754; endOfStatement();
			State = 756;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 755; block();
				}
				break;
			}
			State = 758; Match(NEXT);
			State = 762;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 759; whiteSpace();
				State = 760; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 764; visibility();
				State = 765; whiteSpace();
				}
			}

			State = 771;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 769; Match(STATIC);
				State = 770; whiteSpace();
				}
			}

			State = 773; Match(FUNCTION);
			State = 775;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 774; whiteSpace();
				}
			}

			State = 777; functionName();
			State = 779;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 778; typeHint();
				}
				break;
			}
			State = 785;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 782;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 781; whiteSpace();
					}
				}

				State = 784; argList();
				}
				break;
			}
			State = 791;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 788;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 787; whiteSpace();
					}
				}

				State = 790; asTypeClause();
				}
				break;
			}
			State = 793; endOfStatement();
			State = 795;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)) | (1L << (ENDIF - 192)))) != 0)) {
				{
				State = 794; block();
				}
			}

			State = 797; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801; Match(GET);
			State = 802; whiteSpace();
			State = 803; fileNumber();
			State = 805;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 804; whiteSpace();
				}
			}

			State = 807; Match(COMMA);
			State = 809;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 808; whiteSpace();
				}
				break;
			}
			State = 812;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 811; valueStmt(0);
				}
				break;
			}
			State = 815;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 814; whiteSpace();
				}
			}

			State = 817; Match(COMMA);
			State = 819;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 818; whiteSpace();
				}
				break;
			}
			State = 821; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(GOSUB);
			State = 824; whiteSpace();
			State = 825; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827; Match(GOTO);
			State = 828; whiteSpace();
			State = 829; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 857;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 831; Match(IF);
				State = 832; whiteSpace();
				State = 833; ifConditionStmt();
				State = 834; whiteSpace();
				State = 835; Match(THEN);
				State = 836; whiteSpace();
				State = 837; blockStmt();
				State = 843;
				switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
				case 1:
					{
					State = 838; whiteSpace();
					State = 839; Match(ELSE);
					State = 840; whiteSpace();
					State = 841; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 845; ifBlockStmt();
				State = 849;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 846; ifElseIfBlockStmt();
					}
					}
					State = 851;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 853;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 852; ifElseBlockStmt();
					}
				}

				State = 855; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_ifBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859; Match(IF);
			State = 860; whiteSpace();
			State = 861; ifConditionStmt();
			State = 862; whiteSpace();
			State = 863; Match(THEN);
			State = 864; endOfStatement();
			State = 866;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 865; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_ifElseIfBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870; Match(ELSEIF);
			State = 871; whiteSpace();
			State = 872; ifConditionStmt();
			State = 873; whiteSpace();
			State = 874; Match(THEN);
			State = 875; endOfStatement();
			State = 877;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 876; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_ifElseBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879; Match(ELSE);
			State = 880; endOfStatement();
			State = 882;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 881; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884; Match(IMPLEMENTS);
			State = 885; whiteSpace();
			State = 886; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 888; Match(INPUT);
			State = 889; whiteSpace();
			State = 890; fileNumber();
			State = 899;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 892;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 891; whiteSpace();
						}
					}

					State = 894; Match(COMMA);
					State = 896;
					switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
					case 1:
						{
						State = 895; whiteSpace();
						}
						break;
					}
					State = 898; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 901;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 903; Match(LET);
				State = 904; whiteSpace();
				}
				break;
			}
			State = 907; valueStmt(0);
			State = 909;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 908; whiteSpace();
				}
			}

			State = 911; Match(EQ);
			State = 913;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 912; whiteSpace();
				}
				break;
			}
			State = 915; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917; Match(LINE_INPUT);
			State = 918; whiteSpace();
			State = 919; fileNumber();
			State = 921;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 920; whiteSpace();
				}
			}

			State = 923; Match(COMMA);
			State = 925;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 924; whiteSpace();
				}
				break;
			}
			State = 927; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; Match(LOCK);
			State = 930; whiteSpace();
			State = 931; valueStmt(0);
			State = 947;
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 933;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 932; whiteSpace();
					}
				}

				State = 935; Match(COMMA);
				State = 937;
				switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					State = 936; whiteSpace();
					}
					break;
				}
				State = 939; valueStmt(0);
				State = 945;
				switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					State = 940; whiteSpace();
					State = 941; Match(TO);
					State = 942; whiteSpace();
					State = 943; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949; Match(LSET);
			State = 950; whiteSpace();
			State = 951; valueStmt(0);
			State = 953;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 952; whiteSpace();
				}
			}

			State = 955; Match(EQ);
			State = 957;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 956; whiteSpace();
				}
				break;
			}
			State = 959; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961; Match(MID);
			State = 963;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 962; whiteSpace();
				}
			}

			State = 965; Match(LPAREN);
			State = 967;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 966; whiteSpace();
				}
				break;
			}
			State = 969; argsCall();
			State = 971;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 970; whiteSpace();
				}
			}

			State = 973; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 976; whiteSpace();
			State = 985;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 977; Match(GOTO);
				State = 978; whiteSpace();
				State = 979; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 981; Match(RESUME);
				State = 982; whiteSpace();
				State = 983; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 987; Match(ON);
			State = 988; whiteSpace();
			State = 989; valueStmt(0);
			State = 990; whiteSpace();
			State = 991; Match(GOTO);
			State = 992; whiteSpace();
			State = 993; valueStmt(0);
			State = 1004;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,113,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 995;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 994; whiteSpace();
						}
					}

					State = 997; Match(COMMA);
					State = 999;
					switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
					case 1:
						{
						State = 998; whiteSpace();
						}
						break;
					}
					State = 1001; valueStmt(0);
					}
					} 
				}
				State = 1006;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,113,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007; Match(ON);
			State = 1008; whiteSpace();
			State = 1009; valueStmt(0);
			State = 1010; whiteSpace();
			State = 1011; Match(GOSUB);
			State = 1012; whiteSpace();
			State = 1013; valueStmt(0);
			State = 1024;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,116,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1015;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1014; whiteSpace();
						}
					}

					State = 1017; Match(COMMA);
					State = 1019;
					switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
					case 1:
						{
						State = 1018; whiteSpace();
						}
						break;
					}
					State = 1021; valueStmt(0);
					}
					} 
				}
				State = 1026;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,116,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027; Match(OPEN);
			State = 1028; whiteSpace();
			State = 1029; valueStmt(0);
			State = 1030; whiteSpace();
			State = 1031; Match(FOR);
			State = 1032; whiteSpace();
			State = 1033;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (INPUT - 121)) | (1L << (OUTPUT - 121)) | (1L << (RANDOM - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1039;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				State = 1034; whiteSpace();
				State = 1035; Match(ACCESS);
				State = 1036; whiteSpace();
				State = 1037;
				_la = _input.La(1);
				if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & ((1L << (READ - 166)) | (1L << (READ_WRITE - 166)) | (1L << (WRITE - 166)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1044;
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				State = 1041; whiteSpace();
				State = 1042;
				_la = _input.La(1);
				if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LOCK_READ - 131)) | (1L << (LOCK_WRITE - 131)) | (1L << (LOCK_READ_WRITE - 131)) | (1L << (SHARED - 131)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1046; whiteSpace();
			State = 1047; Match(AS);
			State = 1048; whiteSpace();
			State = 1049; fileNumber();
			State = 1061;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1050; whiteSpace();
				State = 1051; Match(LEN);
				State = 1053;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1052; whiteSpace();
					}
				}

				State = 1055; Match(EQ);
				State = 1057;
				switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					State = 1056; whiteSpace();
					}
					break;
				}
				State = 1059; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1096;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063; outputList_Expression();
				State = 1076;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,125,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1065;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1064; whiteSpace();
							}
						}

						State = 1067;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1069;
						switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
						case 1:
							{
							State = 1068; whiteSpace();
							}
							break;
						}
						State = 1072;
						switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
						case 1:
							{
							State = 1071; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1078;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,125,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1080;
				switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					State = 1079; outputList_Expression();
					}
					break;
				}
				State = 1092;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1083;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1082; whiteSpace();
							}
						}

						State = 1085;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1087;
						switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
						case 1:
							{
							State = 1086; whiteSpace();
							}
							break;
						}
						State = 1090;
						switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
						case 1:
							{
							State = 1089; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1094;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,130,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_outputList_Expression);
		int _la;
		try {
			State = 1115;
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1098; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1099;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1113;
				switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					State = 1101;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1100; whiteSpace();
						}
					}

					State = 1103; Match(LPAREN);
					State = 1105;
					switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
					case 1:
						{
						State = 1104; whiteSpace();
						}
						break;
					}
					State = 1107; argsCall();
					State = 1109;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1108; whiteSpace();
						}
					}

					State = 1111; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(PRINT);
			State = 1118; whiteSpace();
			State = 1119; fileNumber();
			State = 1121;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1120; whiteSpace();
				}
			}

			State = 1123; Match(COMMA);
			State = 1128;
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				State = 1125;
				switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					State = 1124; whiteSpace();
					}
					break;
				}
				State = 1127; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1130; visibility();
				State = 1131; whiteSpace();
				}
			}

			State = 1137;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1135; Match(STATIC);
				State = 1136; whiteSpace();
				}
			}

			State = 1139; Match(PROPERTY_GET);
			State = 1140; whiteSpace();
			State = 1141; functionName();
			State = 1143;
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 1142; typeHint();
				}
				break;
			}
			State = 1149;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1146;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1145; whiteSpace();
					}
				}

				State = 1148; argList();
				}
				break;
			}
			State = 1154;
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				State = 1151; whiteSpace();
				State = 1152; asTypeClause();
				}
				break;
			}
			State = 1156; endOfStatement();
			State = 1158;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)) | (1L << (ENDIF - 192)))) != 0)) {
				{
				State = 1157; block();
				}
			}

			State = 1160; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1162; visibility();
				State = 1163; whiteSpace();
				}
			}

			State = 1169;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1167; Match(STATIC);
				State = 1168; whiteSpace();
				}
			}

			State = 1171; Match(PROPERTY_SET);
			State = 1172; whiteSpace();
			State = 1173; subroutineName();
			State = 1178;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1175;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1174; whiteSpace();
					}
				}

				State = 1177; argList();
				}
				break;
			}
			State = 1180; endOfStatement();
			State = 1182;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)) | (1L << (ENDIF - 192)))) != 0)) {
				{
				State = 1181; block();
				}
			}

			State = 1184; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1189;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1186; visibility();
				State = 1187; whiteSpace();
				}
			}

			State = 1193;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1191; Match(STATIC);
				State = 1192; whiteSpace();
				}
			}

			State = 1195; Match(PROPERTY_LET);
			State = 1196; whiteSpace();
			State = 1197; subroutineName();
			State = 1202;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1199;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1198; whiteSpace();
					}
				}

				State = 1201; argList();
				}
				break;
			}
			State = 1204; endOfStatement();
			State = 1206;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)) | (1L << (ENDIF - 192)))) != 0)) {
				{
				State = 1205; block();
				}
			}

			State = 1208; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; Match(PUT);
			State = 1211; whiteSpace();
			State = 1212; fileNumber();
			State = 1214;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1213; whiteSpace();
				}
			}

			State = 1216; Match(COMMA);
			State = 1218;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 1217; whiteSpace();
				}
				break;
			}
			State = 1221;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1220; valueStmt(0);
				}
				break;
			}
			State = 1224;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1223; whiteSpace();
				}
			}

			State = 1226; Match(COMMA);
			State = 1228;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 1227; whiteSpace();
				}
				break;
			}
			State = 1230; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232; Match(RAISEEVENT);
			State = 1233; whiteSpace();
			State = 1234; identifier();
			State = 1249;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1236;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1235; whiteSpace();
					}
				}

				State = 1238; Match(LPAREN);
				State = 1240;
				switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					State = 1239; whiteSpace();
					}
					break;
				}
				State = 1246;
				switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					State = 1242; argsCall();
					State = 1244;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1243; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1248; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; Match(REDIM);
			State = 1252; whiteSpace();
			State = 1255;
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				State = 1253; Match(PRESERVE);
				State = 1254; whiteSpace();
				}
				break;
			}
			State = 1257; redimSubStmt();
			State = 1268;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,170,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1259;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1258; whiteSpace();
						}
					}

					State = 1261; Match(COMMA);
					State = 1263;
					switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
					case 1:
						{
						State = 1262; whiteSpace();
						}
						break;
					}
					State = 1265; redimSubStmt();
					}
					} 
				}
				State = 1270;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; implicitCallStmt_InStmt();
			State = 1273;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1272; whiteSpace();
				}
			}

			State = 1275; Match(LPAREN);
			State = 1277;
			switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				State = 1276; whiteSpace();
				}
				break;
			}
			State = 1279; subscripts();
			State = 1281;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1280; whiteSpace();
				}
			}

			State = 1283; Match(RPAREN);
			State = 1287;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				State = 1284; whiteSpace();
				State = 1285; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1291; Match(RESUME);
			State = 1297;
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1292; whiteSpace();
				State = 1295;
				switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					State = 1293; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1294; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301; Match(RSET);
			State = 1302; whiteSpace();
			State = 1303; valueStmt(0);
			State = 1305;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1304; whiteSpace();
				}
			}

			State = 1307; Match(EQ);
			State = 1309;
			switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				State = 1308; whiteSpace();
				}
				break;
			}
			State = 1311; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315; Match(SEEK);
			State = 1316; whiteSpace();
			State = 1317; fileNumber();
			State = 1319;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1318; whiteSpace();
				}
			}

			State = 1321; Match(COMMA);
			State = 1323;
			switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				State = 1322; whiteSpace();
				}
				break;
			}
			State = 1325; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327; Match(SELECT);
			State = 1328; whiteSpace();
			State = 1329; Match(CASE);
			State = 1330; whiteSpace();
			State = 1331; valueStmt(0);
			State = 1332; endOfStatement();
			State = 1336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1333; sC_Case();
				}
				}
				State = 1338;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1339; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_SelectionContext : ParserRuleContext {
		public SC_SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Selection; } }
	 
		public SC_SelectionContext() { }
		public virtual void CopyFrom(SC_SelectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_SelectionContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_SelectionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_SelectionContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_SelectionContext sC_Selection() {
		SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_sC_Selection);
		int _la;
		try {
			State = 1358;
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1341; Match(IS);
				State = 1343;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1342; whiteSpace();
					}
				}

				State = 1345; comparisonOperator();
				State = 1347;
				switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					State = 1346; whiteSpace();
					}
					break;
				}
				State = 1349; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1351; valueStmt(0);
				State = 1352; whiteSpace();
				State = 1353; Match(TO);
				State = 1354; whiteSpace();
				State = 1355; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1357; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_sC_Case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360; Match(CASE);
			State = 1361; whiteSpace();
			State = 1362; sC_Cond();
			State = 1363; endOfStatement();
			State = 1365;
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1364; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondSelectionContext : SC_CondContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<SC_SelectionContext> sC_Selection() {
			return GetRuleContexts<SC_SelectionContext>();
		}
		public SC_SelectionContext sC_Selection(int i) {
			return GetRuleContext<SC_SelectionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1382;
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1367; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondSelectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1368; sC_Selection();
				State = 1379;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,188,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1370;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1369; whiteSpace();
							}
						}

						State = 1372; Match(COMMA);
						State = 1374;
						switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
						case 1:
							{
							State = 1373; whiteSpace();
							}
							break;
						}
						State = 1376; sC_Selection();
						}
						} 
					}
					State = 1381;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,188,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1384; Match(SET);
			State = 1385; whiteSpace();
			State = 1386; valueStmt(0);
			State = 1388;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1387; whiteSpace();
				}
			}

			State = 1390; Match(EQ);
			State = 1392;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1391; whiteSpace();
				}
				break;
			}
			State = 1394; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1396; visibility();
				State = 1397; whiteSpace();
				}
			}

			State = 1403;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1401; Match(STATIC);
				State = 1402; whiteSpace();
				}
			}

			State = 1405; Match(SUB);
			State = 1407;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1406; whiteSpace();
				}
			}

			State = 1409; subroutineName();
			State = 1414;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1411;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1410; whiteSpace();
					}
				}

				State = 1413; argList();
				}
				break;
			}
			State = 1416; endOfStatement();
			State = 1418;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)) | (1L << (ENDIF - 192)))) != 0)) {
				{
				State = 1417; block();
				}
			}

			State = 1420; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1427;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1424; visibility();
				State = 1425; whiteSpace();
				}
			}

			State = 1429; Match(TYPE);
			State = 1430; whiteSpace();
			State = 1431; identifier();
			State = 1432; endOfStatement();
			State = 1436;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) {
				{
				{
				State = 1433; typeStmt_Element();
				}
				}
				State = 1438;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1439; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441; identifier();
			State = 1456;
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				State = 1443;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1442; whiteSpace();
					}
				}

				State = 1445; Match(LPAREN);
				State = 1450;
				switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					State = 1447;
					switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
					case 1:
						{
						State = 1446; whiteSpace();
						}
						break;
					}
					State = 1449; subscripts();
					}
					break;
				}
				State = 1453;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1452; whiteSpace();
					}
				}

				State = 1455; Match(RPAREN);
				}
				break;
			}
			State = 1461;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1458; whiteSpace();
				State = 1459; asTypeClause();
				}
				break;
			}
			State = 1463; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465; Match(UNLOCK);
			State = 1466; whiteSpace();
			State = 1467; fileNumber();
			State = 1483;
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 1469;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1468; whiteSpace();
					}
				}

				State = 1471; Match(COMMA);
				State = 1473;
				switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					State = 1472; whiteSpace();
					}
					break;
				}
				State = 1475; valueStmt(0);
				State = 1481;
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1476; whiteSpace();
					State = 1477; Match(TO);
					State = 1478; whiteSpace();
					State = 1479; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfIsExpressionContext typeOfIsExpression() {
			return GetRuleContext<TypeOfIsExpressionContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530;
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1486; Match(NEW);
				State = 1488;
				switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					State = 1487; whiteSpace();
					}
					break;
				}
				State = 1490; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1491; Match(ADDRESSOF);
				State = 1493;
				switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					State = 1492; whiteSpace();
					}
					break;
				}
				State = 1495; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1496; unrestrictedIdentifier();
				State = 1498;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1497; whiteSpace();
					}
				}

				State = 1500; Match(ASSIGN);
				State = 1502;
				switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					State = 1501; whiteSpace();
					}
					break;
				}
				State = 1504; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1506; Match(MINUS);
				State = 1508;
				switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
				case 1:
					{
					State = 1507; whiteSpace();
					}
					break;
				}
				State = 1510; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1511; Match(NOT);
				State = 1513;
				switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					State = 1512; whiteSpace();
					}
					break;
				}
				State = 1515; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1516; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1517; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1518; Match(LPAREN);
				State = 1520;
				switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					State = 1519; whiteSpace();
					}
					break;
				}
				State = 1522; valueStmt(0);
				State = 1524;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1523; whiteSpace();
					}
				}

				State = 1526; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1528; typeOfIsExpression();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1529; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1642;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,244,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1640;
					switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1532;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1534;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1533; whiteSpace();
							}
						}

						State = 1536; Match(POW);
						State = 1538;
						switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
						case 1:
							{
							State = 1537; whiteSpace();
							}
							break;
						}
						State = 1540; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1541;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1543;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1542; whiteSpace();
							}
						}

						State = 1545;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1547;
						switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
						case 1:
							{
							State = 1546; whiteSpace();
							}
							break;
						}
						State = 1549; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1550;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1552;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1551; whiteSpace();
							}
						}

						State = 1554; Match(INTDIV);
						State = 1556;
						switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
						case 1:
							{
							State = 1555; whiteSpace();
							}
							break;
						}
						State = 1558; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1559;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1561;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1560; whiteSpace();
							}
						}

						State = 1563; Match(MOD);
						State = 1565;
						switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
						case 1:
							{
							State = 1564; whiteSpace();
							}
							break;
						}
						State = 1567; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1568;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1570;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1569; whiteSpace();
							}
						}

						State = 1572;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1574;
						switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
						case 1:
							{
							State = 1573; whiteSpace();
							}
							break;
						}
						State = 1576; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1577;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1579;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1578; whiteSpace();
							}
						}

						State = 1581; Match(AMPERSAND);
						State = 1583;
						switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
						case 1:
							{
							State = 1582; whiteSpace();
							}
							break;
						}
						State = 1585; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1586;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1588;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1587; whiteSpace();
							}
						}

						State = 1590;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (EQ - 206)) | (1L << (GEQ - 206)) | (1L << (GT - 206)) | (1L << (LEQ - 206)) | (1L << (LT - 206)) | (1L << (NEQ - 206)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1592;
						switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
						case 1:
							{
							State = 1591; whiteSpace();
							}
							break;
						}
						State = 1594; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1595;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1597;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1596; whiteSpace();
							}
						}

						State = 1599; Match(AND);
						State = 1601;
						switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
						case 1:
							{
							State = 1600; whiteSpace();
							}
							break;
						}
						State = 1603; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1604;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1606;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1605; whiteSpace();
							}
						}

						State = 1608; Match(OR);
						State = 1610;
						switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
						case 1:
							{
							State = 1609; whiteSpace();
							}
							break;
						}
						State = 1612; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1613;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1615;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1614; whiteSpace();
							}
						}

						State = 1617; Match(XOR);
						State = 1619;
						switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
						case 1:
							{
							State = 1618; whiteSpace();
							}
							break;
						}
						State = 1621; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1622;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1624;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1623; whiteSpace();
							}
						}

						State = 1626; Match(EQV);
						State = 1628;
						switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
						case 1:
							{
							State = 1627; whiteSpace();
							}
							break;
						}
						State = 1630; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1631;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1633;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1632; whiteSpace();
							}
						}

						State = 1635; Match(IMP);
						State = 1637;
						switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
						case 1:
							{
							State = 1636; whiteSpace();
							}
							break;
						}
						State = 1639; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 1644;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,244,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeOfIsExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfIsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfIsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeOfIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeOfIsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfIsExpressionContext typeOfIsExpression() {
		TypeOfIsExpressionContext _localctx = new TypeOfIsExpressionContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_typeOfIsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645; Match(TYPEOF);
			State = 1646; whiteSpace();
			State = 1647; valueStmt(0);
			State = 1653;
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				State = 1648; whiteSpace();
				State = 1649; Match(IS);
				State = 1650; whiteSpace();
				State = 1651; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1655; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1656; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1657; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1660; whiteSpace();
			State = 1663;
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 1661; Match(WITHEVENTS);
				State = 1662; whiteSpace();
				}
				break;
			}
			State = 1665; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667; variableSubStmt();
			State = 1678;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,250,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1669;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1668; whiteSpace();
						}
					}

					State = 1671; Match(COMMA);
					State = 1673;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1672; whiteSpace();
						}
					}

					State = 1675; variableSubStmt();
					}
					} 
				}
				State = 1680;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,250,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681; identifier();
			State = 1699;
			switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				State = 1683;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1682; whiteSpace();
					}
				}

				State = 1685; Match(LPAREN);
				State = 1687;
				switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					State = 1686; whiteSpace();
					}
					break;
				}
				State = 1693;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)) | (1L << (ENDIF - 192)))) != 0)) {
					{
					State = 1689; subscripts();
					State = 1691;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1690; whiteSpace();
						}
					}

					}
				}

				State = 1695; Match(RPAREN);
				State = 1697;
				switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					State = 1696; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 1702;
			switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				State = 1701; typeHint();
				}
				break;
			}
			State = 1707;
			switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				State = 1704; whiteSpace();
				State = 1705; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709; Match(WHILE);
			State = 1710; whiteSpace();
			State = 1711; valueStmt(0);
			State = 1712; endOfStatement();
			State = 1714;
			switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				State = 1713; block();
				}
				break;
			}
			State = 1716; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1718; Match(WIDTH);
			State = 1719; whiteSpace();
			State = 1720; fileNumber();
			State = 1722;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1721; whiteSpace();
				}
			}

			State = 1724; Match(COMMA);
			State = 1726;
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				State = 1725; whiteSpace();
				}
				break;
			}
			State = 1728; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WithStmtExpressionContext withStmtExpression() {
			return GetRuleContext<WithStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_withStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1730; Match(WITH);
			State = 1731; whiteSpace();
			State = 1732; withStmtExpression();
			State = 1733; endOfStatement();
			State = 1735;
			switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				State = 1734; block();
				}
				break;
			}
			State = 1737; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WithStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmtExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmtExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmtExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtExpressionContext withStmtExpression() {
		WithStmtExpressionContext _localctx = new WithStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_withStmtExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1739; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1741; Match(WRITE);
			State = 1742; whiteSpace();
			State = 1743; fileNumber();
			State = 1745;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1744; whiteSpace();
				}
			}

			State = 1747; Match(COMMA);
			State = 1752;
			switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				State = 1749;
				switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					State = 1748; whiteSpace();
					}
					break;
				}
				State = 1751; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			_la = _input.La(1);
			if (_la==HASH) {
				{
				State = 1754; Match(HASH);
				}
			}

			State = 1757; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
			return GetRuleContext<ExplicitCallStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_explicitCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1759; Match(CALL);
			State = 1760; whiteSpace();
			State = 1761; explicitCallStmtExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtExpressionContext : ParserRuleContext {
		public ExplicitCallStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmtExpression; } }
	 
		public ExplicitCallStmtExpressionContext() { }
		public virtual void CopyFrom(ExplicitCallStmtExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ECS_MemberCallContext : ExplicitCallStmtExpressionContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_MemberCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ECS_ProcedureCallContext : ExplicitCallStmtExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
		ExplicitCallStmtExpressionContext _localctx = new ExplicitCallStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_explicitCallStmtExpression);
		int _la;
		try {
			int _alt;
			State = 1829;
			switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
			case 1:
				_localctx = new ECS_MemberCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1764;
				switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					State = 1763; implicitCallStmt_InStmt();
					}
					break;
				}
				State = 1766; Match(DOT);
				State = 1767; identifier();
				State = 1769;
				switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					State = 1768; typeHint();
					}
					break;
				}
				State = 1784;
				switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					State = 1772;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1771; whiteSpace();
						}
					}

					State = 1774; Match(LPAREN);
					State = 1776;
					switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
					case 1:
						{
						State = 1775; whiteSpace();
						}
						break;
					}
					State = 1778; argsCall();
					State = 1780;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1779; whiteSpace();
						}
					}

					State = 1782; Match(RPAREN);
					}
					break;
				}
				State = 1795;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,274,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1787;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1786; whiteSpace();
							}
						}

						State = 1789; Match(LPAREN);
						State = 1790; subscripts();
						State = 1791; Match(RPAREN);
						}
						} 
					}
					State = 1797;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,274,_ctx);
				}
				}
				break;

			case 2:
				_localctx = new ECS_ProcedureCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1798; identifier();
				State = 1800;
				switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					State = 1799; typeHint();
					}
					break;
				}
				State = 1815;
				switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					State = 1803;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1802; whiteSpace();
						}
					}

					State = 1805; Match(LPAREN);
					State = 1807;
					switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
					case 1:
						{
						State = 1806; whiteSpace();
						}
						break;
					}
					State = 1809; argsCall();
					State = 1811;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1810; whiteSpace();
						}
					}

					State = 1813; Match(RPAREN);
					}
					break;
				}
				State = 1826;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,281,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1818;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1817; whiteSpace();
							}
						}

						State = 1820; Match(LPAREN);
						State = 1821; subscripts();
						State = 1822; Match(RPAREN);
						}
						} 
					}
					State = 1828;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,281,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_implicitCallStmt_InBlock);
		try {
			State = 1833;
			switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1831; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1832; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				State = 1835; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 1839;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1838; whiteSpace();
				}
			}

			State = 1841; Match(DOT);
			State = 1843;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1842; whiteSpace();
				}
			}

			State = 1845; unrestrictedIdentifier();
			State = 1847;
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				State = 1846; typeHint();
				}
				break;
			}
			State = 1852;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 1849; whiteSpace();
				State = 1850; argsCall();
				}
				break;
			}
			State = 1858;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 1855;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1854; whiteSpace();
					}
				}

				State = 1857; dictionaryCallStmt();
				}
				break;
			}
			State = 1869;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,292,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1861;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1860; whiteSpace();
						}
					}

					State = 1863; Match(LPAREN);
					State = 1864; subscripts();
					State = 1865; Match(RPAREN);
					}
					} 
				}
				State = 1871;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,292,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872; identifier();
			State = 1876;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				State = 1873; whiteSpace();
				State = 1874; argsCall();
				}
				break;
			}
			State = 1887;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,295,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1879;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1878; whiteSpace();
						}
					}

					State = 1881; Match(LPAREN);
					State = 1882; subscripts();
					State = 1883; Match(RPAREN);
					}
					} 
				}
				State = 1889;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,295,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_implicitCallStmt_InStmt);
		try {
			State = 1894;
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1890; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1891; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1892; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1893; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896; identifier();
			State = 1898;
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1897; typeHint();
				}
				break;
			}
			State = 1904;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 1901;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1900; whiteSpace();
					}
				}

				State = 1903; dictionaryCallStmt();
				}
				break;
			}
			State = 1915;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1907;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1906; whiteSpace();
						}
					}

					State = 1909; Match(LPAREN);
					State = 1910; subscripts();
					State = 1911; Match(RPAREN);
					}
					} 
				}
				State = 1917;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1920;
			switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				State = 1918; identifier();
				}
				break;

			case 2:
				{
				State = 1919; baseType();
				}
				break;
			}
			State = 1923;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 1922; typeHint();
				}
			}

			State = 1926;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1925; whiteSpace();
				}
			}

			State = 1928; Match(LPAREN);
			State = 1930;
			switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				State = 1929; whiteSpace();
				}
				break;
			}
			State = 1936;
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				State = 1932; argsCall();
				State = 1934;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1933; whiteSpace();
					}
				}

				}
				break;
			}
			State = 1938; Match(RPAREN);
			State = 1943;
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				State = 1940;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1939; whiteSpace();
					}
				}

				State = 1942; dictionaryCallStmt();
				}
				break;
			}
			State = 1954;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1946;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1945; whiteSpace();
						}
					}

					State = 1948; Match(LPAREN);
					State = 1949; subscripts();
					State = 1950; Match(RPAREN);
					}
					} 
				}
				State = 1956;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallUnrestrictedContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
		ICS_S_VariableOrProcedureCallUnrestrictedContext _localctx = new ICS_S_VariableOrProcedureCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_iCS_S_VariableOrProcedureCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1957; unrestrictedIdentifier();
			State = 1959;
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 1958; typeHint();
				}
				break;
			}
			State = 1965;
			switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				State = 1962;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1961; whiteSpace();
					}
				}

				State = 1964; dictionaryCallStmt();
				}
				break;
			}
			State = 1976;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1968;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1967; whiteSpace();
						}
					}

					State = 1970; Match(LPAREN);
					State = 1971; subscripts();
					State = 1972; Match(RPAREN);
					}
					} 
				}
				State = 1978;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallUnrestrictedContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
		ICS_S_ProcedureOrArrayCallUnrestrictedContext _localctx = new ICS_S_ProcedureOrArrayCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_iCS_S_ProcedureOrArrayCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981;
			switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				State = 1979; unrestrictedIdentifier();
				}
				break;

			case 2:
				{
				State = 1980; baseType();
				}
				break;
			}
			State = 1984;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 1983; typeHint();
				}
			}

			State = 1987;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1986; whiteSpace();
				}
			}

			State = 1989; Match(LPAREN);
			State = 1991;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				State = 1990; whiteSpace();
				}
				break;
			}
			State = 1997;
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 1993; argsCall();
				State = 1995;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1994; whiteSpace();
					}
				}

				}
				break;
			}
			State = 1999; Match(RPAREN);
			State = 2004;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				State = 2001;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2000; whiteSpace();
					}
				}

				State = 2003; dictionaryCallStmt();
				}
				break;
			}
			State = 2015;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,326,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2007;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2006; whiteSpace();
						}
					}

					State = 2009; Match(LPAREN);
					State = 2010; subscripts();
					State = 2011; Match(RPAREN);
					}
					} 
				}
				State = 2017;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,326,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				State = 2018; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2019; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2026;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2022; iCS_S_MemberCall();
					State = 2024;
					switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
					case 1:
						{
						State = 2023; whiteSpace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2028;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,329,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2034;
			switch ( Interpreter.AdaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				State = 2031;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2030; whiteSpace();
					}
				}

				State = 2033; dictionaryCallStmt();
				}
				break;
			}
			State = 2045;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,333,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2037;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2036; whiteSpace();
						}
					}

					State = 2039; Match(LPAREN);
					State = 2040; subscripts();
					State = 2041; Match(RPAREN);
					}
					} 
				}
				State = 2047;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,333,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallUnrestrictedContext>(0);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallUnrestrictedContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048;
			_la = _input.La(1);
			if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2050;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2049; whiteSpace();
				}
			}

			State = 2054;
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 2052; iCS_S_VariableOrProcedureCallUnrestricted();
				}
				break;

			case 2:
				{
				State = 2053; iCS_S_ProcedureOrArrayCallUnrestricted();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2056; whiteSpace();
				}
			}

			State = 2059; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,340,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2062;
					switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
					case 1:
						{
						State = 2061; argCall();
						}
						break;
					}
					State = 2065;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2064; whiteSpace();
						}
					}

					State = 2067;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2069;
					switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
					case 1:
						{
						State = 2068; whiteSpace();
						}
						break;
					}
					}
					} 
				}
				State = 2075;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,340,_ctx);
			}
			State = 2076; argCall();
			State = 2089;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,344,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2078;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2077; whiteSpace();
						}
					}

					State = 2080;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2082;
					switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
					case 1:
						{
						State = 2081; whiteSpace();
						}
						break;
					}
					State = 2085;
					switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
					case 1:
						{
						State = 2084; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2091;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,344,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093;
			switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				State = 2092; Match(LPAREN);
				}
				break;
			}
			State = 2097;
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 2095;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2096; whiteSpace();
				}
				break;
			}
			State = 2100;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 2099; Match(RPAREN);
				}
			}

			State = 2102; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2104; Match(EXCLAMATIONPOINT);
			State = 2106;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2105; whiteSpace();
				}
			}

			State = 2108; unrestrictedIdentifier();
			State = 2110;
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				State = 2109; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2112; Match(LPAREN);
			State = 2130;
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 2114;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2113; whiteSpace();
					}
				}

				State = 2116; arg();
				State = 2127;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2118;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2117; whiteSpace();
							}
						}

						State = 2120; Match(COMMA);
						State = 2122;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2121; whiteSpace();
							}
						}

						State = 2124; arg();
						}
						} 
					}
					State = 2129;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
				}
				}
				break;
			}
			State = 2133;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2132; whiteSpace();
				}
			}

			State = 2135; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139;
			switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				State = 2137; Match(OPTIONAL);
				State = 2138; whiteSpace();
				}
				break;
			}
			State = 2143;
			switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				State = 2141;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2142; whiteSpace();
				}
				break;
			}
			State = 2147;
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				State = 2145; Match(PARAMARRAY);
				State = 2146; whiteSpace();
				}
				break;
			}
			State = 2149; unrestrictedIdentifier();
			State = 2151;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2150; typeHint();
				}
			}

			State = 2161;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				State = 2154;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2153; whiteSpace();
					}
				}

				State = 2156; Match(LPAREN);
				State = 2158;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2157; whiteSpace();
					}
				}

				State = 2160; Match(RPAREN);
				}
				break;
			}
			State = 2167;
			switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				State = 2164;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2163; whiteSpace();
					}
				}

				State = 2166; asTypeClause();
				}
				break;
			}
			State = 2173;
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				State = 2170;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2169; whiteSpace();
					}
				}

				State = 2172; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2175; Match(EQ);
			State = 2177;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2176; whiteSpace();
				}
				break;
			}
			State = 2179; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2181; subscript();
			State = 2192;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2183;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2182; whiteSpace();
						}
					}

					State = 2185; Match(COMMA);
					State = 2187;
					switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						State = 2186; whiteSpace();
						}
						break;
					}
					State = 2189; subscript();
					}
					} 
				}
				State = 2194;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2200;
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				State = 2195; valueStmt(0);
				State = 2196; whiteSpace();
				State = 2197; Match(TO);
				State = 2198; whiteSpace();
				}
				break;
			}
			State = 2202; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public MarkerKeywordContext markerKeyword() {
			return GetRuleContext<MarkerKeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_unrestrictedIdentifier);
		try {
			State = 2207;
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2204; identifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2205; statementKeyword();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2206; markerKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_identifier);
		try {
			State = 2211;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2209; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END_IF:
			case END_SELECT:
			case END_WITH:
			case EQV:
			case ERROR:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON_ERROR:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2210; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2213; Match(AS);
			State = 2215;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2214; whiteSpace();
				}
			}

			State = 2219;
			switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				State = 2217; Match(NEW);
				State = 2218; whiteSpace();
				}
				break;
			}
			State = 2221; type();
			State = 2226;
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2223;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2222; whiteSpace();
					}
				}

				State = 2225; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DATE - 68)) | (1L << (DOUBLE - 68)) | (1L << (INTEGER - 68)) | (1L << (LONG - 68)))) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (SINGLE - 178)) | (1L << (STRING - 178)) | (1L << (VARIANT - 178)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2230;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (EQ - 206)) | (1L << (GEQ - 206)) | (1L << (GT - 206)) | (1L << (LEQ - 206)) | (1L << (LT - 206)) | (1L << (NEQ - 206)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> DOT() { return GetTokens(VBAParser.DOT); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> EXCLAMATIONPOINT() { return GetTokens(VBAParser.EXCLAMATIONPOINT); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT(int i) {
			return GetToken(VBAParser.EXCLAMATIONPOINT, i);
		}
		public ITerminalNode DOT(int i) {
			return GetToken(VBAParser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232; identifier();
			State = 2237;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,378,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2233;
					_la = _input.La(1);
					if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2234; identifier();
					}
					} 
				}
				State = 2239;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,378,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240; Match(MULT);
			State = 2242;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2241; whiteSpace();
				}
			}

			State = 2246;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2244; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END_IF:
			case END_SELECT:
			case END_WITH:
			case EQV:
			case ERROR:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON_ERROR:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				{
				State = 2245; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248; identifier();
			State = 2257;
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2250;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2249; whiteSpace();
					}
				}

				State = 2252; Match(MINUS);
				State = 2254;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2253; whiteSpace();
					}
				}

				State = 2256; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2261;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END_IF:
			case END_SELECT:
			case END_WITH:
			case EQV:
			case ERROR:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON_ERROR:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				{
				State = 2259; identifier();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2260; numberLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2263; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_literal);
		try {
			State = 2273;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2265; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2266; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2267; Match(STRINGLITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2268; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2269; Match(FALSE);
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2270; Match(NOTHING);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2271; Match(NULL);
				}
				break;
			case EMPTY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2272; Match(EMPTY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275;
			_la = _input.La(1);
			if ( !(((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OCTLITERAL - 226)) | (1L << (HEXLITERAL - 226)) | (1L << (FLOATLITERAL - 226)) | (1L << (INTEGERLITERAL - 226)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2279;
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 2277; baseType();
				}
				break;

			case 2:
				{
				State = 2278; complexType();
				}
				break;
			}
			State = 2289;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2282;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2281; whiteSpace();
					}
				}

				State = 2284; Match(LPAREN);
				State = 2286;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2285; whiteSpace();
					}
				}

				State = 2288; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2291;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293;
			_la = _input.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode MIDTYPESUFFIX() { return GetToken(VBAParser.MIDTYPESUFFIX, 0); }
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode MIDBTYPESUFFIX() { return GetToken(VBAParser.MIDBTYPESUFFIX, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode RESUME_NEXT() { return GetToken(VBAParser.RESUME_NEXT, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2295;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerKeywordContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public MarkerKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkerKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkerKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerKeywordContext markerKeyword() {
		MarkerKeywordContext _localctx = new MarkerKeywordContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_markerKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode ENDIF() { return GetToken(VBAParser.ENDIF, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2299;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << OPTION) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CLOSE - 65)) | (1L << (CONST - 65)) | (1L << (DECLARE - 65)) | (1L << (DEFBOOL - 65)) | (1L << (DEFBYTE - 65)) | (1L << (DEFDATE - 65)) | (1L << (DEFDBL - 65)) | (1L << (DEFCUR - 65)) | (1L << (DEFINT - 65)) | (1L << (DEFLNG - 65)) | (1L << (DEFLNGLNG - 65)) | (1L << (DEFLNGPTR - 65)) | (1L << (DEFOBJ - 65)) | (1L << (DEFSNG - 65)) | (1L << (DEFSTR - 65)) | (1L << (DEFVAR - 65)) | (1L << (DIM - 65)) | (1L << (DO - 65)) | (1L << (ELSE - 65)) | (1L << (ELSEIF - 65)) | (1L << (END - 65)) | (1L << (ENUM - 65)) | (1L << (ERASE - 65)) | (1L << (EVENT - 65)) | (1L << (FRIEND - 65)) | (1L << (FOR - 65)) | (1L << (FUNCTION - 65)) | (1L << (GET - 65)) | (1L << (GLOBAL - 65)) | (1L << (GOSUB - 65)) | (1L << (GOTO - 65)) | (1L << (IF - 65)) | (1L << (IMPLEMENTS - 65)) | (1L << (INPUT - 65)) | (1L << (LOCK - 65)) | (1L << (LOOP - 65)) | (1L << (LET - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (LSET - 134)) | (1L << (NEXT - 134)) | (1L << (ON - 134)) | (1L << (OPEN - 134)) | (1L << (PRINT - 134)) | (1L << (PRIVATE - 134)) | (1L << (PUBLIC - 134)) | (1L << (PUT - 134)) | (1L << (RAISEEVENT - 134)) | (1L << (REDIM - 134)) | (1L << (RESUME - 134)) | (1L << (RETURN - 134)) | (1L << (RSET - 134)) | (1L << (SEEK - 134)) | (1L << (SELECT - 134)) | (1L << (SET - 134)) | (1L << (STATIC - 134)) | (1L << (STOP - 134)) | (1L << (SUB - 134)) | (1L << (TYPE - 134)) | (1L << (UNLOCK - 134)) | (1L << (WEND - 134)) | (1L << (WHILE - 134)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (WITH - 199)) | (1L << (WRITE - 199)) | (1L << (ENDIF - 199)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public CommentOrAnnotationContext commentOrAnnotation() {
			return GetRuleContext<CommentOrAnnotationContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_endOfLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2301; whiteSpace();
				}
			}

			State = 2305;
			_la = _input.La(1);
			if (_la==REM || _la==SINGLEQUOTE) {
				{
				State = 2304; commentOrAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			State = 2329;
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2323;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2319;
						switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
						case 1:
							{
							{
							State = 2307; endOfLine();
							State = 2308; Match(NEWLINE);
							State = 2310;
							switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
							case 1:
								{
								State = 2309; whiteSpace();
								}
								break;
							}
							}
							}
							break;

						case 2:
							{
							{
							State = 2313;
							_la = _input.La(1);
							if (_la==WS || _la==LINE_CONTINUATION) {
								{
								State = 2312; whiteSpace();
								}
							}

							State = 2315; Match(COLON);
							State = 2317;
							switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
							case 1:
								{
								State = 2316; whiteSpace();
								}
								break;
							}
							}
							}
							break;
						}
						}
						} 
					}
					State = 2325;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2326; endOfLine();
				State = 2327; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentOrAnnotationContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public CommentOrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentOrAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentOrAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentOrAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentOrAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentOrAnnotationContext commentOrAnnotation() {
		CommentOrAnnotationContext _localctx = new CommentOrAnnotationContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_commentOrAnnotation);
		try {
			State = 2334;
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2331; annotationList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2332; comment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2333; remComment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2336; Match(REM);
			State = 2338;
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				State = 2337; whiteSpace();
				}
				break;
			}
			State = 2340; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2342; Match(SINGLEQUOTE);
			State = 2343; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public CommentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBodyContext commentBody() {
		CommentBodyContext _localctx = new CommentBodyContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_commentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << COMMA) | (1L << COLON) | (1L << SEMICOLON) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_ENUM - 64)) | (1L << (END_FUNCTION - 64)) | (1L << (END_IF - 64)) | (1L << (END_PROPERTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_SUB - 64)) | (1L << (END_TYPE - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OPTION_BASE - 128)) | (1L << (OPTION_EXPLICIT - 128)) | (1L << (OPTION_COMPARE - 128)) | (1L << (OPTION_PRIVATE_MODULE - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (ASSIGN - 192)) | (1L << (DIV - 192)) | (1L << (INTDIV - 192)) | (1L << (EQ - 192)) | (1L << (GEQ - 192)) | (1L << (GT - 192)) | (1L << (LEQ - 192)) | (1L << (LPAREN - 192)) | (1L << (LT - 192)) | (1L << (MINUS - 192)) | (1L << (MULT - 192)) | (1L << (NEQ - 192)) | (1L << (PLUS - 192)) | (1L << (POW - 192)) | (1L << (RPAREN - 192)) | (1L << (HASHCONST - 192)) | (1L << (HASHIF - 192)) | (1L << (HASHELSEIF - 192)) | (1L << (HASHELSE - 192)) | (1L << (HASHENDIF - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (R_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (SINGLEQUOTE - 192)) | (1L << (UNDERSCORE - 192)) | (1L << (WS - 192)) | (1L << (GUIDLITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (ERRORCHAR - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)) | (1L << (ENDIF - 192)))) != 0)) {
				{
				State = 2347;
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 2345; Match(LINE_CONTINUATION);
					}
					break;

				case 2:
					{
					State = 2346;
					_la = _input.La(1);
					if ( _la <= 0 || (_la==NEWLINE) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				}
				State = 2351;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> AT() { return GetTokens(VBAParser.AT); }
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode AT(int i) {
			return GetToken(VBAParser.AT, i);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2352; Match(SINGLEQUOTE);
			State = 2358;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2353; Match(AT);
				State = 2354; annotation();
				State = 2356;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2355; whiteSpace();
					}
				}

				}
				}
				State = 2360;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2362; annotationName();
			State = 2364;
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2363; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2420;
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2368; whiteSpace();
				State = 2369; annotationArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2371; whiteSpace();
				State = 2372; annotationArg();
				State = 2381;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2374;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2373; whiteSpace();
							}
						}

						State = 2376; Match(COMMA);
						State = 2378;
						switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
						case 1:
							{
							State = 2377; whiteSpace();
							}
							break;
						}
						State = 2380; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2383;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,407,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2386;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2385; whiteSpace();
					}
				}

				State = 2388; Match(LPAREN);
				State = 2390;
				switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					State = 2389; whiteSpace();
					}
					break;
				}
				State = 2392; annotationArg();
				State = 2394;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2393; whiteSpace();
					}
				}

				State = 2396; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2399;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2398; whiteSpace();
					}
				}

				State = 2401; Match(LPAREN);
				State = 2402; annotationArg();
				State = 2411;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2404;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2403; whiteSpace();
							}
						}

						State = 2406; Match(COMMA);
						State = 2408;
						switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
						case 1:
							{
							State = 2407; whiteSpace();
							}
							break;
						}
						State = 2410; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2413;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,414,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2416;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2415; whiteSpace();
					}
				}

				State = 2418; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_annotationArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2422; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2424;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2427;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,417,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 77: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 9);

		case 5: return Precpred(_ctx, 8);

		case 6: return Precpred(_ctx, 7);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xF8\x980\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x3\x2\x3\x2\x3\x3"+
		"\x5\x3\x11A\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x120\n\x3\x3\x3\x5\x3\x123"+
		"\n\x3\x3\x3\x3\x3\x5\x3\x127\n\x3\x3\x3\x3\x3\x5\x3\x12B\n\x3\x3\x3\x3"+
		"\x3\x5\x3\x12F\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x137\n\x4"+
		"\x3\x4\x5\x4\x13A\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x5\x5\x144\n\x5\x5\x5\x146\n\x5\x3\x5\x3\x5\x6\x5\x14A\n\x5\r\x5\xE\x5"+
		"\x14B\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x152\n\x6\f\x6\xE\x6\x155\v\x6\x3\x6"+
		"\x3\x6\a\x6\x159\n\x6\f\x6\xE\x6\x15C\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x161"+
		"\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x6\a\x168\n\a\r\a\xE\a\x169\x3\b\x3\b"+
		"\x3\b\x3\b\a\b\x170\n\b\f\b\xE\b\x173\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x181\n\t\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n\x18B\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x191\n\v\f\v\xE"+
		"\v\x194\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x19D\n\f\x3\r\x3\r"+
		"\x3\r\x3\r\x5\r\x1A3\n\r\x3\r\x3\r\x5\r\x1A7\n\r\x3\r\x3\r\x5\r\x1AB\n"+
		"\r\x3\r\x3\r\x5\r\x1AF\n\r\x3\r\a\r\x1B2\n\r\f\r\xE\r\x1B5\v\r\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x1BF\n\x10\f\x10\xE"+
		"\x10\x1C2\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\x1F4\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x1FA\n\x12\x3\x12"+
		"\x3\x12\x5\x12\x1FE\n\x12\x3\x12\a\x12\x201\n\x12\f\x12\xE\x12\x204\v"+
		"\x12\x5\x12\x206\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\x20B\n\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x5\x13\x211\n\x13\x3\x13\x3\x13\x5\x13\x215\n\x13\x3"+
		"\x13\a\x13\x218\n\x13\f\x13\xE\x13\x21B\v\x13\x3\x14\x3\x14\x5\x14\x21F"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x224\n\x14\x3\x14\x5\x14\x227\n\x14"+
		"\x3\x14\x3\x14\x5\x14\x22B\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x232\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x238\n\x15\x3\x15\x3"+
		"\x15\x5\x15\x23C\n\x15\x3\x15\x5\x15\x23F\n\x15\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x244\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x5\x15\x24F\n\x15\x3\x15\x5\x15\x252\n\x15\x3\x15\x5\x15\x255"+
		"\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\x25A\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x5\x16\x260\n\x16\x3\x16\x3\x16\x5\x16\x264\n\x16\x3\x16\a\x16\x267"+
		"\n\x16\f\x16\xE\x16\x26A\v\x16\x3\x17\x3\x17\x3\x17\x5\x17\x26F\n\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\x27A\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x281\n\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x289\n\x17\x3\x18\x3\x18\x3"+
		"\x18\x5\x18\x28E\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x295\n"+
		"\x18\f\x18\xE\x18\x298\v\x18\x3\x18\x3\x18\x3\x19\x3\x19\x5\x19\x29E\n"+
		"\x19\x3\x19\x3\x19\x5\x19\x2A2\n\x19\x3\x19\x5\x19\x2A5\n\x19\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2AD\n\x1A\x3\x1A\x3\x1A\x5\x1A"+
		"\x2B1\n\x1A\x3\x1A\a\x1A\x2B4\n\x1A\f\x1A\xE\x1A\x2B7\v\x1A\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2C0\n\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x2C6\n\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5"+
		"\x1E\x2D7\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2DD\n\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x2E3\n\x1F\x3\x1F\x3\x1F\x5\x1F\x2E7\n\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5"+
		"\x1F\x2F3\n\x1F\x3\x1F\x3\x1F\x5\x1F\x2F7\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x2FD\n\x1F\x3 \x3 \x3 \x5 \x302\n \x3 \x3 \x5 \x306\n \x3"+
		" \x3 \x5 \x30A\n \x3 \x3 \x5 \x30E\n \x3 \x5 \x311\n \x3 \x5 \x314\n "+
		"\x3 \x5 \x317\n \x3 \x5 \x31A\n \x3 \x3 \x5 \x31E\n \x3 \x3 \x3!\x3!\x3"+
		"\"\x3\"\x3\"\x3\"\x5\"\x328\n\"\x3\"\x3\"\x5\"\x32C\n\"\x3\"\x5\"\x32F"+
		"\n\"\x3\"\x5\"\x332\n\"\x3\"\x3\"\x5\"\x336\n\"\x3\"\x3\"\x3#\x3#\x3#"+
		"\x3#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5"+
		"%\x34E\n%\x3%\x3%\a%\x352\n%\f%\xE%\x355\v%\x3%\x5%\x358\n%\x3%\x3%\x5"+
		"%\x35C\n%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x365\n&\x3\'\x3\'\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x5(\x370\n(\x3)\x3)\x3)\x5)\x375\n)\x3*\x3*\x3*\x3*"+
		"\x3+\x3+\x3+\x3+\x5+\x37F\n+\x3+\x3+\x5+\x383\n+\x3+\x6+\x386\n+\r+\xE"+
		"+\x387\x3,\x3,\x5,\x38C\n,\x3,\x3,\x5,\x390\n,\x3,\x3,\x5,\x394\n,\x3"+
		",\x3,\x3-\x3-\x3-\x3-\x5-\x39C\n-\x3-\x3-\x5-\x3A0\n-\x3-\x3-\x3.\x3."+
		"\x3.\x3.\x5.\x3A8\n.\x3.\x3.\x5.\x3AC\n.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x3B4"+
		"\n.\x5.\x3B6\n.\x3/\x3/\x3/\x3/\x5/\x3BC\n/\x3/\x3/\x5/\x3C0\n/\x3/\x3"+
		"/\x3\x30\x3\x30\x5\x30\x3C6\n\x30\x3\x30\x3\x30\x5\x30\x3CA\n\x30\x3\x30"+
		"\x3\x30\x5\x30\x3CE\n\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x3DC\n\x31\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x3E6\n\x32\x3\x32\x3"+
		"\x32\x5\x32\x3EA\n\x32\x3\x32\a\x32\x3ED\n\x32\f\x32\xE\x32\x3F0\v\x32"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x3FA\n"+
		"\x33\x3\x33\x3\x33\x5\x33\x3FE\n\x33\x3\x33\a\x33\x401\n\x33\f\x33\xE"+
		"\x33\x404\v\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x412\n\x34\x3\x34\x3\x34\x3\x34\x5"+
		"\x34\x417\n\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34"+
		"\x420\n\x34\x3\x34\x3\x34\x5\x34\x424\n\x34\x3\x34\x3\x34\x5\x34\x428"+
		"\n\x34\x3\x35\x3\x35\x5\x35\x42C\n\x35\x3\x35\x3\x35\x5\x35\x430\n\x35"+
		"\x3\x35\x5\x35\x433\n\x35\a\x35\x435\n\x35\f\x35\xE\x35\x438\v\x35\x3"+
		"\x35\x5\x35\x43B\n\x35\x3\x35\x5\x35\x43E\n\x35\x3\x35\x3\x35\x5\x35\x442"+
		"\n\x35\x3\x35\x5\x35\x445\n\x35\x6\x35\x447\n\x35\r\x35\xE\x35\x448\x5"+
		"\x35\x44B\n\x35\x3\x36\x3\x36\x3\x36\x5\x36\x450\n\x36\x3\x36\x3\x36\x5"+
		"\x36\x454\n\x36\x3\x36\x3\x36\x5\x36\x458\n\x36\x3\x36\x3\x36\x5\x36\x45C"+
		"\n\x36\x5\x36\x45E\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x464\n\x37"+
		"\x3\x37\x3\x37\x5\x37\x468\n\x37\x3\x37\x5\x37\x46B\n\x37\x3\x38\x3\x38"+
		"\x3\x38\x5\x38\x470\n\x38\x3\x38\x3\x38\x5\x38\x474\n\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x5\x38\x47A\n\x38\x3\x38\x5\x38\x47D\n\x38\x3\x38\x5\x38"+
		"\x480\n\x38\x3\x38\x3\x38\x3\x38\x5\x38\x485\n\x38\x3\x38\x3\x38\x5\x38"+
		"\x489\n\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x5\x39\x490\n\x39\x3\x39"+
		"\x3\x39\x5\x39\x494\n\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x49A\n\x39"+
		"\x3\x39\x5\x39\x49D\n\x39\x3\x39\x3\x39\x5\x39\x4A1\n\x39\x3\x39\x3\x39"+
		"\x3:\x3:\x3:\x5:\x4A8\n:\x3:\x3:\x5:\x4AC\n:\x3:\x3:\x3:\x3:\x5:\x4B2"+
		"\n:\x3:\x5:\x4B5\n:\x3:\x3:\x5:\x4B9\n:\x3:\x3:\x3;\x3;\x3;\x3;\x5;\x4C1"+
		"\n;\x3;\x3;\x5;\x4C5\n;\x3;\x5;\x4C8\n;\x3;\x5;\x4CB\n;\x3;\x3;\x5;\x4CF"+
		"\n;\x3;\x3;\x3<\x3<\x3<\x3<\x5<\x4D7\n<\x3<\x3<\x5<\x4DB\n<\x3<\x3<\x5"+
		"<\x4DF\n<\x5<\x4E1\n<\x3<\x5<\x4E4\n<\x3=\x3=\x3=\x3=\x5=\x4EA\n=\x3="+
		"\x3=\x5=\x4EE\n=\x3=\x3=\x5=\x4F2\n=\x3=\a=\x4F5\n=\f=\xE=\x4F8\v=\x3"+
		">\x3>\x5>\x4FC\n>\x3>\x3>\x5>\x500\n>\x3>\x3>\x5>\x504\n>\x3>\x3>\x3>"+
		"\x3>\x5>\x50A\n>\x3?\x3?\x3@\x3@\x3@\x3@\x5@\x512\n@\x5@\x514\n@\x3\x41"+
		"\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x51C\n\x42\x3\x42\x3\x42\x5"+
		"\x42\x520\n\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x5\x44\x52A\n\x44\x3\x44\x3\x44\x5\x44\x52E\n\x44\x3\x44\x3\x44\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\a\x45\x539\n\x45\f\x45\xE\x45"+
		"\x53C\v\x45\x3\x45\x3\x45\x3\x46\x3\x46\x5\x46\x542\n\x46\x3\x46\x3\x46"+
		"\x5\x46\x546\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x5\x46\x551\n\x46\x3G\x3G\x3G\x3G\x3G\x5G\x558\nG\x3H\x3H"+
		"\x3H\x5H\x55D\nH\x3H\x3H\x5H\x561\nH\x3H\aH\x564\nH\fH\xEH\x567\vH\x5"+
		"H\x569\nH\x3I\x3I\x3I\x3I\x5I\x56F\nI\x3I\x3I\x5I\x573\nI\x3I\x3I\x3J"+
		"\x3J\x3J\x5J\x57A\nJ\x3J\x3J\x5J\x57E\nJ\x3J\x3J\x5J\x582\nJ\x3J\x3J\x5"+
		"J\x586\nJ\x3J\x5J\x589\nJ\x3J\x3J\x5J\x58D\nJ\x3J\x3J\x3K\x3K\x3L\x3L"+
		"\x3L\x5L\x596\nL\x3L\x3L\x3L\x3L\x3L\aL\x59D\nL\fL\xEL\x5A0\vL\x3L\x3"+
		"L\x3M\x3M\x5M\x5A6\nM\x3M\x3M\x5M\x5AA\nM\x3M\x5M\x5AD\nM\x3M\x5M\x5B0"+
		"\nM\x3M\x5M\x5B3\nM\x3M\x3M\x3M\x5M\x5B8\nM\x3M\x3M\x3N\x3N\x3N\x3N\x5"+
		"N\x5C0\nN\x3N\x3N\x5N\x5C4\nN\x3N\x3N\x3N\x3N\x3N\x3N\x5N\x5CC\nN\x5N"+
		"\x5CE\nN\x3O\x3O\x3O\x5O\x5D3\nO\x3O\x3O\x3O\x5O\x5D8\nO\x3O\x3O\x3O\x5"+
		"O\x5DD\nO\x3O\x3O\x5O\x5E1\nO\x3O\x3O\x3O\x3O\x5O\x5E7\nO\x3O\x3O\x3O"+
		"\x5O\x5EC\nO\x3O\x3O\x3O\x3O\x3O\x5O\x5F3\nO\x3O\x3O\x5O\x5F7\nO\x3O\x3"+
		"O\x3O\x3O\x5O\x5FD\nO\x3O\x3O\x5O\x601\nO\x3O\x3O\x5O\x605\nO\x3O\x3O"+
		"\x3O\x5O\x60A\nO\x3O\x3O\x5O\x60E\nO\x3O\x3O\x3O\x5O\x613\nO\x3O\x3O\x5"+
		"O\x617\nO\x3O\x3O\x3O\x5O\x61C\nO\x3O\x3O\x5O\x620\nO\x3O\x3O\x3O\x5O"+
		"\x625\nO\x3O\x3O\x5O\x629\nO\x3O\x3O\x3O\x5O\x62E\nO\x3O\x3O\x5O\x632"+
		"\nO\x3O\x3O\x3O\x5O\x637\nO\x3O\x3O\x5O\x63B\nO\x3O\x3O\x3O\x5O\x640\n"+
		"O\x3O\x3O\x5O\x644\nO\x3O\x3O\x3O\x5O\x649\nO\x3O\x3O\x5O\x64D\nO\x3O"+
		"\x3O\x3O\x5O\x652\nO\x3O\x3O\x5O\x656\nO\x3O\x3O\x3O\x5O\x65B\nO\x3O\x3"+
		"O\x5O\x65F\nO\x3O\x3O\x3O\x5O\x664\nO\x3O\x3O\x5O\x668\nO\x3O\aO\x66B"+
		"\nO\fO\xEO\x66E\vO\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x678\nP\x3Q\x3"+
		"Q\x3Q\x5Q\x67D\nQ\x3Q\x3Q\x3Q\x5Q\x682\nQ\x3Q\x3Q\x3R\x3R\x5R\x688\nR"+
		"\x3R\x3R\x5R\x68C\nR\x3R\aR\x68F\nR\fR\xER\x692\vR\x3S\x3S\x5S\x696\n"+
		"S\x3S\x3S\x5S\x69A\nS\x3S\x3S\x5S\x69E\nS\x5S\x6A0\nS\x3S\x3S\x5S\x6A4"+
		"\nS\x5S\x6A6\nS\x3S\x5S\x6A9\nS\x3S\x3S\x3S\x5S\x6AE\nS\x3T\x3T\x3T\x3"+
		"T\x3T\x5T\x6B5\nT\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x6BD\nU\x3U\x3U\x5U\x6C1"+
		"\nU\x3U\x3U\x3V\x3V\x3V\x3V\x3V\x5V\x6CA\nV\x3V\x3V\x3W\x3W\x3X\x3X\x3"+
		"X\x3X\x5X\x6D4\nX\x3X\x3X\x5X\x6D8\nX\x3X\x5X\x6DB\nX\x3Y\x5Y\x6DE\nY"+
		"\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x3[\x5[\x6E7\n[\x3[\x3[\x3[\x5[\x6EC\n[\x3[\x5"+
		"[\x6EF\n[\x3[\x3[\x5[\x6F3\n[\x3[\x3[\x5[\x6F7\n[\x3[\x3[\x5[\x6FB\n["+
		"\x3[\x5[\x6FE\n[\x3[\x3[\x3[\x3[\a[\x704\n[\f[\xE[\x707\v[\x3[\x3[\x5"+
		"[\x70B\n[\x3[\x5[\x70E\n[\x3[\x3[\x5[\x712\n[\x3[\x3[\x5[\x716\n[\x3["+
		"\x3[\x5[\x71A\n[\x3[\x5[\x71D\n[\x3[\x3[\x3[\x3[\a[\x723\n[\f[\xE[\x726"+
		"\v[\x5[\x728\n[\x3\\\x3\\\x5\\\x72C\n\\\x3]\x5]\x72F\n]\x3]\x5]\x732\n"+
		"]\x3]\x3]\x5]\x736\n]\x3]\x3]\x5]\x73A\n]\x3]\x3]\x3]\x5]\x73F\n]\x3]"+
		"\x5]\x742\n]\x3]\x5]\x745\n]\x3]\x5]\x748\n]\x3]\x3]\x3]\x3]\a]\x74E\n"+
		"]\f]\xE]\x751\v]\x3^\x3^\x3^\x3^\x5^\x757\n^\x3^\x5^\x75A\n^\x3^\x3^\x3"+
		"^\x3^\a^\x760\n^\f^\xE^\x763\v^\x3_\x3_\x3_\x3_\x5_\x769\n_\x3`\x3`\x5"+
		"`\x76D\n`\x3`\x5`\x770\n`\x3`\x5`\x773\n`\x3`\x5`\x776\n`\x3`\x3`\x3`"+
		"\x3`\a`\x77C\n`\f`\xE`\x77F\v`\x3\x61\x3\x61\x5\x61\x783\n\x61\x3\x61"+
		"\x5\x61\x786\n\x61\x3\x61\x5\x61\x789\n\x61\x3\x61\x3\x61\x5\x61\x78D"+
		"\n\x61\x3\x61\x3\x61\x5\x61\x791\n\x61\x5\x61\x793\n\x61\x3\x61\x3\x61"+
		"\x5\x61\x797\n\x61\x3\x61\x5\x61\x79A\n\x61\x3\x61\x5\x61\x79D\n\x61\x3"+
		"\x61\x3\x61\x3\x61\x3\x61\a\x61\x7A3\n\x61\f\x61\xE\x61\x7A6\v\x61\x3"+
		"\x62\x3\x62\x5\x62\x7AA\n\x62\x3\x62\x5\x62\x7AD\n\x62\x3\x62\x5\x62\x7B0"+
		"\n\x62\x3\x62\x5\x62\x7B3\n\x62\x3\x62\x3\x62\x3\x62\x3\x62\a\x62\x7B9"+
		"\n\x62\f\x62\xE\x62\x7BC\v\x62\x3\x63\x3\x63\x5\x63\x7C0\n\x63\x3\x63"+
		"\x5\x63\x7C3\n\x63\x3\x63\x5\x63\x7C6\n\x63\x3\x63\x3\x63\x5\x63\x7CA"+
		"\n\x63\x3\x63\x3\x63\x5\x63\x7CE\n\x63\x5\x63\x7D0\n\x63\x3\x63\x3\x63"+
		"\x5\x63\x7D4\n\x63\x3\x63\x5\x63\x7D7\n\x63\x3\x63\x5\x63\x7DA\n\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\a\x63\x7E0\n\x63\f\x63\xE\x63\x7E3\v\x63\x3"+
		"\x64\x3\x64\x5\x64\x7E7\n\x64\x3\x64\x3\x64\x5\x64\x7EB\n\x64\x6\x64\x7ED"+
		"\n\x64\r\x64\xE\x64\x7EE\x3\x64\x5\x64\x7F2\n\x64\x3\x64\x5\x64\x7F5\n"+
		"\x64\x3\x64\x5\x64\x7F8\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\a\x64\x7FE\n"+
		"\x64\f\x64\xE\x64\x801\v\x64\x3\x65\x3\x65\x5\x65\x805\n\x65\x3\x65\x3"+
		"\x65\x5\x65\x809\n\x65\x3\x66\x5\x66\x80C\n\x66\x3\x66\x3\x66\x3g\x5g"+
		"\x811\ng\x3g\x5g\x814\ng\x3g\x3g\x5g\x818\ng\ag\x81A\ng\fg\xEg\x81D\v"+
		"g\x3g\x3g\x5g\x821\ng\x3g\x3g\x5g\x825\ng\x3g\x5g\x828\ng\ag\x82A\ng\f"+
		"g\xEg\x82D\vg\x3h\x5h\x830\nh\x3h\x3h\x5h\x834\nh\x3h\x5h\x837\nh\x3h"+
		"\x3h\x3i\x3i\x5i\x83D\ni\x3i\x3i\x5i\x841\ni\x3j\x3j\x5j\x845\nj\x3j\x3"+
		"j\x5j\x849\nj\x3j\x3j\x5j\x84D\nj\x3j\aj\x850\nj\fj\xEj\x853\vj\x5j\x855"+
		"\nj\x3j\x5j\x858\nj\x3j\x3j\x3k\x3k\x5k\x85E\nk\x3k\x3k\x5k\x862\nk\x3"+
		"k\x3k\x5k\x866\nk\x3k\x3k\x5k\x86A\nk\x3k\x5k\x86D\nk\x3k\x3k\x5k\x871"+
		"\nk\x3k\x5k\x874\nk\x3k\x5k\x877\nk\x3k\x5k\x87A\nk\x3k\x5k\x87D\nk\x3"+
		"k\x5k\x880\nk\x3l\x3l\x5l\x884\nl\x3l\x3l\x3m\x3m\x5m\x88A\nm\x3m\x3m"+
		"\x5m\x88E\nm\x3m\am\x891\nm\fm\xEm\x894\vm\x3n\x3n\x3n\x3n\x3n\x5n\x89B"+
		"\nn\x3n\x3n\x3o\x3o\x3o\x5o\x8A2\no\x3p\x3p\x5p\x8A6\np\x3q\x3q\x5q\x8AA"+
		"\nq\x3q\x3q\x5q\x8AE\nq\x3q\x3q\x5q\x8B2\nq\x3q\x5q\x8B5\nq\x3r\x3r\x3"+
		"s\x3s\x3t\x3t\x3t\at\x8BE\nt\ft\xEt\x8C1\vt\x3u\x3u\x5u\x8C5\nu\x3u\x3"+
		"u\x5u\x8C9\nu\x3v\x3v\x5v\x8CD\nv\x3v\x3v\x5v\x8D1\nv\x3v\x5v\x8D4\nv"+
		"\x3w\x3w\x5w\x8D8\nw\x3w\x3w\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x5x\x8E4"+
		"\nx\x3y\x3y\x3z\x3z\x5z\x8EA\nz\x3z\x5z\x8ED\nz\x3z\x3z\x5z\x8F1\nz\x3"+
		"z\x5z\x8F4\nz\x3{\x3{\x3|\x3|\x3}\x3}\x3~\x3~\x3\x7F\x3\x7F\x3\x80\x5"+
		"\x80\x901\n\x80\x3\x80\x5\x80\x904\n\x80\x3\x81\x3\x81\x3\x81\x5\x81\x909"+
		"\n\x81\x3\x81\x5\x81\x90C\n\x81\x3\x81\x3\x81\x5\x81\x910\n\x81\x5\x81"+
		"\x912\n\x81\a\x81\x914\n\x81\f\x81\xE\x81\x917\v\x81\x3\x81\x3\x81\x3"+
		"\x81\x5\x81\x91C\n\x81\x3\x82\x3\x82\x3\x82\x5\x82\x921\n\x82\x3\x83\x3"+
		"\x83\x5\x83\x925\n\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85"+
		"\a\x85\x92E\n\x85\f\x85\xE\x85\x931\v\x85\x3\x86\x3\x86\x3\x86\x3\x86"+
		"\x5\x86\x937\n\x86\x6\x86\x939\n\x86\r\x86\xE\x86\x93A\x3\x87\x3\x87\x5"+
		"\x87\x93F\n\x87\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89"+
		"\x5\x89\x949\n\x89\x3\x89\x3\x89\x5\x89\x94D\n\x89\x3\x89\x6\x89\x950"+
		"\n\x89\r\x89\xE\x89\x951\x3\x89\x5\x89\x955\n\x89\x3\x89\x3\x89\x5\x89"+
		"\x959\n\x89\x3\x89\x3\x89\x5\x89\x95D\n\x89\x3\x89\x3\x89\x3\x89\x5\x89"+
		"\x962\n\x89\x3\x89\x3\x89\x3\x89\x5\x89\x967\n\x89\x3\x89\x3\x89\x5\x89"+
		"\x96B\n\x89\x3\x89\x6\x89\x96E\n\x89\r\x89\xE\x89\x96F\x3\x89\x5\x89\x973"+
		"\n\x89\x3\x89\x3\x89\x5\x89\x977\n\x89\x3\x8A\x3\x8A\x3\x8B\x6\x8B\x97C"+
		"\n\x8B\r\x8B\xE\x8B\x97D\x3\x8B\x2\x2\x3\x9C\x8C\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2"+
		"\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x2"+
		"\x1A\x5\x2;;\x45\x45\xBC\xBC\x3\x2HT\x4\x2\xC3\xC3\xC7\xC7\x3\x2jn\x3"+
		"\x2\x92\x93\a\x2\x38\x38;;{{\x9B\x9B\xA6\xA6\x4\x2\xA8\xA9\xCB\xCB\x4"+
		"\x2\x85\x87\xB3\xB3\x4\x2))++\x4\x2\xB5\xB5\xBB\xBB\x4\x2\xCE\xCE\xD7"+
		"\xD7\x4\x2\xD6\xD6\xD9\xD9\a\x2||\x83\x83\xD0\xD3\xD5\xD5\xD8\xD8\x3\x2"+
		",-\x4\x2=>\x9C\x9C\x3\x2=>\r\x2\x13\x13\x1F <<??\x46\x46WW}}\x7F\x7F\xB4"+
		"\xB4\xB9\xB9\xC4\xC4\x3\x2\xE4\xE7\x5\x2,,.\x32\xDA\xDA\x6\x2pptt\x9F"+
		"\x9F\xA4\xA4&\x2\x3\x17\x19#%(\x33\x38:?\x42\x42\x45\x46WW^^``\x63\x63"+
		"\x66\x66hhjoxxzz|}\x7F\x7F\x82\x87\x89\x8B\x8D\x90\x92\x92\x95\x95\x9A"+
		"\x9D\xA6\xA6\xA8\xA9\xAB\xAC\xB3\xB5\xB7\xB7\xB9\xB9\xBB\xBF\xC1\xC1\xC3"+
		"\xC5\xC8\xC8\xCA\xCC\xF1\xF7\"\x2\x18\x18$$@\x41\x43\x44GVYZ\x64\x65g"+
		"giipwyy{{~~\x80\x81\x88\x88\x8C\x8C\x91\x91\x94\x94\x9E\x9F\xA4\xA5\xA7"+
		"\xA7\xAA\xAA\xAD\xB2\xB6\xB6\xB8\xB8\xBA\xBA\xC0\xC0\xC2\xC2\xC6\xC7\xC9"+
		"\xC9\xCB\xCB\xF8\xF8\x3\x2\xE9\xE9\x4\x2\xEC\xEC\xEF\xEF\xAF0\x2\x116"+
		"\x3\x2\x2\x2\x4\x119\x3\x2\x2\x2\x6\x132\x3\x2\x2\x2\b\x13D\x3\x2\x2\x2"+
		"\n\x14F\x3\x2\x2\x2\f\x167\x3\x2\x2\x2\xE\x16B\x3\x2\x2\x2\x10\x180\x3"+
		"\x2\x2\x2\x12\x18A\x3\x2\x2\x2\x14\x18C\x3\x2\x2\x2\x16\x19C\x3\x2\x2"+
		"\x2\x18\x19E\x3\x2\x2\x2\x1A\x1B6\x3\x2\x2\x2\x1C\x1B8\x3\x2\x2\x2\x1E"+
		"\x1BA\x3\x2\x2\x2 \x1F3\x3\x2\x2\x2\"\x1F5\x3\x2\x2\x2$\x20A\x3\x2\x2"+
		"\x2&\x21C\x3\x2\x2\x2(\x231\x3\x2\x2\x2*\x25B\x3\x2\x2\x2,\x288\x3\x2"+
		"\x2\x2.\x28D\x3\x2\x2\x2\x30\x29B\x3\x2\x2\x2\x32\x2A8\x3\x2\x2\x2\x34"+
		"\x2B8\x3\x2\x2\x2\x36\x2BF\x3\x2\x2\x2\x38\x2C9\x3\x2\x2\x2:\x2CB\x3\x2"+
		"\x2\x2<\x2DE\x3\x2\x2\x2>\x301\x3\x2\x2\x2@\x321\x3\x2\x2\x2\x42\x323"+
		"\x3\x2\x2\x2\x44\x339\x3\x2\x2\x2\x46\x33D\x3\x2\x2\x2H\x35B\x3\x2\x2"+
		"\x2J\x35D\x3\x2\x2\x2L\x366\x3\x2\x2\x2N\x368\x3\x2\x2\x2P\x371\x3\x2"+
		"\x2\x2R\x376\x3\x2\x2\x2T\x37A\x3\x2\x2\x2V\x38B\x3\x2\x2\x2X\x397\x3"+
		"\x2\x2\x2Z\x3A3\x3\x2\x2\x2\\\x3B7\x3\x2\x2\x2^\x3C3\x3\x2\x2\x2`\x3D1"+
		"\x3\x2\x2\x2\x62\x3DD\x3\x2\x2\x2\x64\x3F1\x3\x2\x2\x2\x66\x405\x3\x2"+
		"\x2\x2h\x44A\x3\x2\x2\x2j\x45D\x3\x2\x2\x2l\x45F\x3\x2\x2\x2n\x46F\x3"+
		"\x2\x2\x2p\x48F\x3\x2\x2\x2r\x4A7\x3\x2\x2\x2t\x4BC\x3\x2\x2\x2v\x4D2"+
		"\x3\x2\x2\x2x\x4E5\x3\x2\x2\x2z\x4F9\x3\x2\x2\x2|\x50B\x3\x2\x2\x2~\x50D"+
		"\x3\x2\x2\x2\x80\x515\x3\x2\x2\x2\x82\x517\x3\x2\x2\x2\x84\x523\x3\x2"+
		"\x2\x2\x86\x525\x3\x2\x2\x2\x88\x531\x3\x2\x2\x2\x8A\x550\x3\x2\x2\x2"+
		"\x8C\x552\x3\x2\x2\x2\x8E\x568\x3\x2\x2\x2\x90\x56A\x3\x2\x2\x2\x92\x579"+
		"\x3\x2\x2\x2\x94\x590\x3\x2\x2\x2\x96\x595\x3\x2\x2\x2\x98\x5A3\x3\x2"+
		"\x2\x2\x9A\x5BB\x3\x2\x2\x2\x9C\x5FC\x3\x2\x2\x2\x9E\x66F\x3\x2\x2\x2"+
		"\xA0\x67C\x3\x2\x2\x2\xA2\x685\x3\x2\x2\x2\xA4\x693\x3\x2\x2\x2\xA6\x6AF"+
		"\x3\x2\x2\x2\xA8\x6B8\x3\x2\x2\x2\xAA\x6C4\x3\x2\x2\x2\xAC\x6CD\x3\x2"+
		"\x2\x2\xAE\x6CF\x3\x2\x2\x2\xB0\x6DD\x3\x2\x2\x2\xB2\x6E1\x3\x2\x2\x2"+
		"\xB4\x727\x3\x2\x2\x2\xB6\x72B\x3\x2\x2\x2\xB8\x72E\x3\x2\x2\x2\xBA\x752"+
		"\x3\x2\x2\x2\xBC\x768\x3\x2\x2\x2\xBE\x76A\x3\x2\x2\x2\xC0\x782\x3\x2"+
		"\x2\x2\xC2\x7A7\x3\x2\x2\x2\xC4\x7BF\x3\x2\x2\x2\xC6\x7E6\x3\x2\x2\x2"+
		"\xC8\x802\x3\x2\x2\x2\xCA\x80B\x3\x2\x2\x2\xCC\x81B\x3\x2\x2\x2\xCE\x82F"+
		"\x3\x2\x2\x2\xD0\x83A\x3\x2\x2\x2\xD2\x842\x3\x2\x2\x2\xD4\x85D\x3\x2"+
		"\x2\x2\xD6\x881\x3\x2\x2\x2\xD8\x887\x3\x2\x2\x2\xDA\x89A\x3\x2\x2\x2"+
		"\xDC\x8A1\x3\x2\x2\x2\xDE\x8A5\x3\x2\x2\x2\xE0\x8A7\x3\x2\x2\x2\xE2\x8B6"+
		"\x3\x2\x2\x2\xE4\x8B8\x3\x2\x2\x2\xE6\x8BA\x3\x2\x2\x2\xE8\x8C2\x3\x2"+
		"\x2\x2\xEA\x8CA\x3\x2\x2\x2\xEC\x8D7\x3\x2\x2\x2\xEE\x8E3\x3\x2\x2\x2"+
		"\xF0\x8E5\x3\x2\x2\x2\xF2\x8E9\x3\x2\x2\x2\xF4\x8F5\x3\x2\x2\x2\xF6\x8F7"+
		"\x3\x2\x2\x2\xF8\x8F9\x3\x2\x2\x2\xFA\x8FB\x3\x2\x2\x2\xFC\x8FD\x3\x2"+
		"\x2\x2\xFE\x900\x3\x2\x2\x2\x100\x91B\x3\x2\x2\x2\x102\x920\x3\x2\x2\x2"+
		"\x104\x922\x3\x2\x2\x2\x106\x928\x3\x2\x2\x2\x108\x92F\x3\x2\x2\x2\x10A"+
		"\x932\x3\x2\x2\x2\x10C\x93C\x3\x2\x2\x2\x10E\x940\x3\x2\x2\x2\x110\x976"+
		"\x3\x2\x2\x2\x112\x978\x3\x2\x2\x2\x114\x97B\x3\x2\x2\x2\x116\x117\x5"+
		"\x4\x3\x2\x117\x3\x3\x2\x2\x2\x118\x11A\x5\x114\x8B\x2\x119\x118\x3\x2"+
		"\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11F\x5\x100\x81"+
		"\x2\x11C\x11D\x5\x6\x4\x2\x11D\x11E\x5\x100\x81\x2\x11E\x120\x3\x2\x2"+
		"\x2\x11F\x11C\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x3\x2\x2\x2"+
		"\x121\x123\x5\b\x5\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123"+
		"\x124\x3\x2\x2\x2\x124\x126\x5\x100\x81\x2\x125\x127\x5\f\a\x2\x126\x125"+
		"\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x12A\x5"+
		"\x100\x81\x2\x129\x12B\x5\xE\b\x2\x12A\x129\x3\x2\x2\x2\x12A\x12B\x3\x2"+
		"\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12E\x5\x100\x81\x2\x12D\x12F\x5\x14"+
		"\v\x2\x12E\x12D\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2"+
		"\x130\x131\x5\x100\x81\x2\x131\x5\x3\x2\x2\x2\x132\x133\a\xC5\x2\x2\x133"+
		"\x134\x5\x114\x8B\x2\x134\x136\x5\xF0y\x2\x135\x137\x5\x114\x8B\x2\x136"+
		"\x135\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x139\x3\x2\x2\x2\x138\x13A"+
		"\a\x42\x2\x2\x139\x138\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\x3"+
		"\x2\x2\x2\x13B\x13C\x5\x100\x81\x2\x13C\a\x3\x2\x2\x2\x13D\x145\a:\x2"+
		"\x2\x13E\x13F\x5\x114\x8B\x2\x13F\x140\a\xED\x2\x2\x140\x141\x5\x114\x8B"+
		"\x2\x141\x143\x5\xDCo\x2\x142\x144\x5\x114\x8B\x2\x143\x142\x3\x2\x2\x2"+
		"\x143\x144\x3\x2\x2\x2\x144\x146\x3\x2\x2\x2\x145\x13E\x3\x2\x2\x2\x145"+
		"\x146\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x149\x5\x100\x81\x2\x148"+
		"\x14A\x5\n\x6\x2\x149\x148\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x149"+
		"\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\a\x64"+
		"\x2\x2\x14E\t\x3\x2\x2\x2\x14F\x153\x5\xDCo\x2\x150\x152\x5\x114\x8B\x2"+
		"\x151\x150\x3\x2\x2\x2\x152\x155\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x153"+
		"\x154\x3\x2\x2\x2\x154\x156\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x156\x15A"+
		"\a\xD0\x2\x2\x157\x159\x5\x114\x8B\x2\x158\x157\x3\x2\x2\x2\x159\x15C"+
		"\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15D\x3"+
		"\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15D\x160\x5\x9CO\x2\x15E\x15F\a*\x2\x2"+
		"\x15F\x161\x5\xF0y\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161"+
		"\x162\x3\x2\x2\x2\x162\x163\x5\x100\x81\x2\x163\v\x3\x2\x2\x2\x164\x165"+
		"\x5\x18\r\x2\x165\x166\x5\x100\x81\x2\x166\x168\x3\x2\x2\x2\x167\x164"+
		"\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x169\x16A\x3"+
		"\x2\x2\x2\x16A\r\x3\x2\x2\x2\x16B\x171\x5\x12\n\x2\x16C\x16D\x5\x100\x81"+
		"\x2\x16D\x16E\x5\x12\n\x2\x16E\x170\x3\x2\x2\x2\x16F\x16C\x3\x2\x2\x2"+
		"\x170\x173\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172"+
		"\x174\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2\x174\x175\x5\x100\x81\x2\x175"+
		"\xF\x3\x2\x2\x2\x176\x177\a\x96\x2\x2\x177\x178\x5\x114\x8B\x2\x178\x179"+
		"\x5\xF0y\x2\x179\x181\x3\x2\x2\x2\x17A\x17B\a\x98\x2\x2\x17B\x17C\x5\x114"+
		"\x8B\x2\x17C\x17D\t\x2\x2\x2\x17D\x181\x3\x2\x2\x2\x17E\x181\a\x97\x2"+
		"\x2\x17F\x181\a\x99\x2\x2\x180\x176\x3\x2\x2\x2\x180\x17A\x3\x2\x2\x2"+
		"\x180\x17E\x3\x2\x2\x2\x180\x17F\x3\x2\x2\x2\x181\x11\x3\x2\x2\x2\x182"+
		"\x18B\x5(\x15\x2\x183\x18B\x5.\x18\x2\x184\x18B\x5\x36\x1C\x2\x185\x18B"+
		"\x5$\x13\x2\x186\x18B\x5R*\x2\x187\x18B\x5\xA0Q\x2\x188\x18B\x5\x10\t"+
		"\x2\x189\x18B\x5\x96L\x2\x18A\x182\x3\x2\x2\x2\x18A\x183\x3\x2\x2\x2\x18A"+
		"\x184\x3\x2\x2\x2\x18A\x185\x3\x2\x2\x2\x18A\x186\x3\x2\x2\x2\x18A\x187"+
		"\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18A\x189\x3\x2\x2\x2\x18B\x13\x3\x2"+
		"\x2\x2\x18C\x192\x5\x16\f\x2\x18D\x18E\x5\x100\x81\x2\x18E\x18F\x5\x16"+
		"\f\x2\x18F\x191\x3\x2\x2\x2\x190\x18D\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2"+
		"\x192\x190\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x195\x3\x2\x2\x2\x194"+
		"\x192\x3\x2\x2\x2\x195\x196\x5\x100\x81\x2\x196\x15\x3\x2\x2\x2\x197\x19D"+
		"\x5> \x2\x198\x19D\x5n\x38\x2\x199\x19D\x5p\x39\x2\x19A\x19D\x5r:\x2\x19B"+
		"\x19D\x5\x92J\x2\x19C\x197\x3\x2\x2\x2\x19C\x198\x3\x2\x2\x2\x19C\x199"+
		"\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19B\x3\x2\x2\x2\x19D\x17\x3\x2"+
		"\x2\x2\x19E\x19F\a\x37\x2\x2\x19F\x1A0\x5\x114\x8B\x2\x1A0\x1A2\x5\x1A"+
		"\xE\x2\x1A1\x1A3\x5\x114\x8B\x2\x1A2\x1A1\x3\x2\x2\x2\x1A2\x1A3\x3\x2"+
		"\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A6\a\xD0\x2\x2\x1A5\x1A7\x5\x114\x8B"+
		"\x2\x1A6\x1A5\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2"+
		"\x1A8\x1B3\x5\x1C\xF\x2\x1A9\x1AB\x5\x114\x8B\x2\x1AA\x1A9\x3\x2\x2\x2"+
		"\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AE\a)\x2\x2\x1AD\x1AF"+
		"\x5\x114\x8B\x2\x1AE\x1AD\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B0"+
		"\x3\x2\x2\x2\x1B0\x1B2\x5\x1C\xF\x2\x1B1\x1AA\x3\x2\x2\x2\x1B2\x1B5\x3"+
		"\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4\x19\x3\x2\x2"+
		"\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1B7\x5\xBC_\x2\x1B7\x1B\x3\x2\x2\x2\x1B8"+
		"\x1B9\x5\x9CO\x2\x1B9\x1D\x3\x2\x2\x2\x1BA\x1C0\x5 \x11\x2\x1BB\x1BC\x5"+
		"\x100\x81\x2\x1BC\x1BD\x5 \x11\x2\x1BD\x1BF\x3\x2\x2\x2\x1BE\x1BB\x3\x2"+
		"\x2\x2\x1BF\x1C2\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2"+
		"\x2\x1C1\x1C3\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C4\x5\x100\x81"+
		"\x2\x1C4\x1F\x3\x2\x2\x2\x1C5\x1F4\x5\xECw\x2\x1C6\x1F4\x5\x18\r\x2\x1C7"+
		"\x1F4\x5\"\x12\x2\x1C8\x1F4\x5$\x13\x2\x1C9\x1F4\x5*\x16\x2\x1CA\x1F4"+
		"\x5,\x17\x2\x1CB\x1F4\x5\x32\x1A\x2\x1CC\x1F4\x5\x34\x1B\x2\x1CD\x1F4"+
		"\x5\x38\x1D\x2\x1CE\x1F4\x5\xB2Z\x2\x1CF\x1F4\x5:\x1E\x2\x1D0\x1F4\x5"+
		"<\x1F\x2\x1D1\x1F4\x5\x42\"\x2\x1D2\x1F4\x5\x44#\x2\x1D3\x1F4\x5\x46$"+
		"\x2\x1D4\x1F4\x5H%\x2\x1D5\x1F4\x5R*\x2\x1D6\x1F4\x5T+\x2\x1D7\x1F4\x5"+
		"V,\x2\x1D8\x1F4\x5X-\x2\x1D9\x1F4\x5Z.\x2\x1DA\x1F4\x5\\/\x2\x1DB\x1F4"+
		"\x5^\x30\x2\x1DC\x1F4\x5`\x31\x2\x1DD\x1F4\x5\x62\x32\x2\x1DE\x1F4\x5"+
		"\x64\x33\x2\x1DF\x1F4\x5\x66\x34\x2\x1E0\x1F4\x5l\x37\x2\x1E1\x1F4\x5"+
		"t;\x2\x1E2\x1F4\x5v<\x2\x1E3\x1F4\x5x=\x2\x1E4\x1F4\x5|?\x2\x1E5\x1F4"+
		"\x5~@\x2\x1E6\x1F4\x5\x80\x41\x2\x1E7\x1F4\x5\x82\x42\x2\x1E8\x1F4\x5"+
		"\x86\x44\x2\x1E9\x1F4\x5\x88\x45\x2\x1EA\x1F4\x5\x90I\x2\x1EB\x1F4\x5"+
		"\x84\x43\x2\x1EC\x1F4\x5\x9AN\x2\x1ED\x1F4\x5\xA0Q\x2\x1EE\x1F4\x5\xA6"+
		"T\x2\x1EF\x1F4\x5\xA8U\x2\x1F0\x1F4\x5\xAAV\x2\x1F1\x1F4\x5\xAEX\x2\x1F2"+
		"\x1F4\x5\xB6\\\x2\x1F3\x1C5\x3\x2\x2\x2\x1F3\x1C6\x3\x2\x2\x2\x1F3\x1C7"+
		"\x3\x2\x2\x2\x1F3\x1C8\x3\x2\x2\x2\x1F3\x1C9\x3\x2\x2\x2\x1F3\x1CA\x3"+
		"\x2\x2\x2\x1F3\x1CB\x3\x2\x2\x2\x1F3\x1CC\x3\x2\x2\x2\x1F3\x1CD\x3\x2"+
		"\x2\x2\x1F3\x1CE\x3\x2\x2\x2\x1F3\x1CF\x3\x2\x2\x2\x1F3\x1D0\x3\x2\x2"+
		"\x2\x1F3\x1D1\x3\x2\x2\x2\x1F3\x1D2\x3\x2\x2\x2\x1F3\x1D3\x3\x2\x2\x2"+
		"\x1F3\x1D4\x3\x2\x2\x2\x1F3\x1D5\x3\x2\x2\x2\x1F3\x1D6\x3\x2\x2\x2\x1F3"+
		"\x1D7\x3\x2\x2\x2\x1F3\x1D8\x3\x2\x2\x2\x1F3\x1D9\x3\x2\x2\x2\x1F3\x1DA"+
		"\x3\x2\x2\x2\x1F3\x1DB\x3\x2\x2\x2\x1F3\x1DC\x3\x2\x2\x2\x1F3\x1DD\x3"+
		"\x2\x2\x2\x1F3\x1DE\x3\x2\x2\x2\x1F3\x1DF\x3\x2\x2\x2\x1F3\x1E0\x3\x2"+
		"\x2\x2\x1F3\x1E1\x3\x2\x2\x2\x1F3\x1E2\x3\x2\x2\x2\x1F3\x1E3\x3\x2\x2"+
		"\x2\x1F3\x1E4\x3\x2\x2\x2\x1F3\x1E5\x3\x2\x2\x2\x1F3\x1E6\x3\x2\x2\x2"+
		"\x1F3\x1E7\x3\x2\x2\x2\x1F3\x1E8\x3\x2\x2\x2\x1F3\x1E9\x3\x2\x2\x2\x1F3"+
		"\x1EA\x3\x2\x2\x2\x1F3\x1EB\x3\x2\x2\x2\x1F3\x1EC\x3\x2\x2\x2\x1F3\x1ED"+
		"\x3\x2\x2\x2\x1F3\x1EE\x3\x2\x2\x2\x1F3\x1EF\x3\x2\x2\x2\x1F3\x1F0\x3"+
		"\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F2\x3\x2\x2\x2\x1F4!\x3\x2\x2\x2"+
		"\x1F5\x205\a\x43\x2\x2\x1F6\x1F7\x5\x114\x8B\x2\x1F7\x202\x5\xB0Y\x2\x1F8"+
		"\x1FA\x5\x114\x8B\x2\x1F9\x1F8\x3\x2\x2\x2\x1F9\x1FA\x3\x2\x2\x2\x1FA"+
		"\x1FB\x3\x2\x2\x2\x1FB\x1FD\a)\x2\x2\x1FC\x1FE\x5\x114\x8B\x2\x1FD\x1FC"+
		"\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x201\x5"+
		"\xB0Y\x2\x200\x1F9\x3\x2\x2\x2\x201\x204\x3\x2\x2\x2\x202\x200\x3\x2\x2"+
		"\x2\x202\x203\x3\x2\x2\x2\x203\x206\x3\x2\x2\x2\x204\x202\x3\x2\x2\x2"+
		"\x205\x1F6\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206#\x3\x2\x2\x2\x207\x208"+
		"\x5\xF6|\x2\x208\x209\x5\x114\x8B\x2\x209\x20B\x3\x2\x2\x2\x20A\x207\x3"+
		"\x2\x2\x2\x20A\x20B\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\a\x44"+
		"\x2\x2\x20D\x20E\x5\x114\x8B\x2\x20E\x219\x5&\x14\x2\x20F\x211\x5\x114"+
		"\x8B\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x212\x3\x2\x2"+
		"\x2\x212\x214\a)\x2\x2\x213\x215\x5\x114\x8B\x2\x214\x213\x3\x2\x2\x2"+
		"\x214\x215\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x218\x5&\x14\x2\x217"+
		"\x210\x3\x2\x2\x2\x218\x21B\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x219\x21A"+
		"\x3\x2\x2\x2\x21A%\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21C\x21E\x5\xDE"+
		"p\x2\x21D\x21F\x5\xF4{\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2"+
		"\x21F\x223\x3\x2\x2\x2\x220\x221\x5\x114\x8B\x2\x221\x222\x5\xE0q\x2\x222"+
		"\x224\x3\x2\x2\x2\x223\x220\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x226"+
		"\x3\x2\x2\x2\x225\x227\x5\x114\x8B\x2\x226\x225\x3\x2\x2\x2\x226\x227"+
		"\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x22A\a\xD0\x2\x2\x229\x22B\x5"+
		"\x114\x8B\x2\x22A\x229\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x22C\x3"+
		"\x2\x2\x2\x22C\x22D\x5\x9CO\x2\x22D\'\x3\x2\x2\x2\x22E\x22F\x5\xF6|\x2"+
		"\x22F\x230\x5\x114\x8B\x2\x230\x232\x3\x2\x2\x2\x231\x22E\x3\x2\x2\x2"+
		"\x231\x232\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x234\aG\x2\x2\x234\x237"+
		"\x5\x114\x8B\x2\x235\x236\a\xA3\x2\x2\x236\x238\x5\x114\x8B\x2\x237\x235"+
		"\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x23E\x3\x2\x2\x2\x239\x23B\ar"+
		"\x2\x2\x23A\x23C\x5\xF4{\x2\x23B\x23A\x3\x2\x2\x2\x23B\x23C\x3\x2\x2\x2"+
		"\x23C\x23F\x3\x2\x2\x2\x23D\x23F\a\xBA\x2\x2\x23E\x239\x3\x2\x2\x2\x23E"+
		"\x23D\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x241\x5\x114\x8B\x2\x241"+
		"\x243\x5\xDEp\x2\x242\x244\x5\xF4{\x2\x243\x242\x3\x2\x2\x2\x243\x244"+
		"\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x246\x5\x114\x8B\x2\x246\x247"+
		"\a\x82\x2\x2\x247\x248\x5\x114\x8B\x2\x248\x24E\a\xE3\x2\x2\x249\x24A"+
		"\x5\x114\x8B\x2\x24A\x24B\a\x35\x2\x2\x24B\x24C\x5\x114\x8B\x2\x24C\x24D"+
		"\a\xE3\x2\x2\x24D\x24F\x3\x2\x2\x2\x24E\x249\x3\x2\x2\x2\x24E\x24F\x3"+
		"\x2\x2\x2\x24F\x254\x3\x2\x2\x2\x250\x252\x5\x114\x8B\x2\x251\x250\x3"+
		"\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x255\x5\xD2"+
		"j\x2\x254\x251\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x255\x259\x3\x2\x2\x2"+
		"\x256\x257\x5\x114\x8B\x2\x257\x258\x5\xE0q\x2\x258\x25A\x3\x2\x2\x2\x259"+
		"\x256\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A)\x3\x2\x2\x2\x25B\x25C\t"+
		"\x3\x2\x2\x25C\x25D\x5\x114\x8B\x2\x25D\x268\x5\xEAv\x2\x25E\x260\x5\x114"+
		"\x8B\x2\x25F\x25E\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x261\x3\x2\x2"+
		"\x2\x261\x263\a)\x2\x2\x262\x264\x5\x114\x8B\x2\x263\x262\x3\x2\x2\x2"+
		"\x263\x264\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x267\x5\xEAv\x2\x266"+
		"\x25F\x3\x2\x2\x2\x267\x26A\x3\x2\x2\x2\x268\x266\x3\x2\x2\x2\x268\x269"+
		"\x3\x2\x2\x2\x269+\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26B\x26C\aV\x2\x2"+
		"\x26C\x26E\x5\x100\x81\x2\x26D\x26F\x5\x1E\x10\x2\x26E\x26D\x3\x2\x2\x2"+
		"\x26E\x26F\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x271\a\x80\x2\x2\x271"+
		"\x289\x3\x2\x2\x2\x272\x273\aV\x2\x2\x273\x274\x5\x114\x8B\x2\x274\x275"+
		"\t\x4\x2\x2\x275\x276\x5\x114\x8B\x2\x276\x277\x5\x9CO\x2\x277\x279\x5"+
		"\x100\x81\x2\x278\x27A\x5\x1E\x10\x2\x279\x278\x3\x2\x2\x2\x279\x27A\x3"+
		"\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27C\a\x80\x2\x2\x27C\x289\x3\x2"+
		"\x2\x2\x27D\x27E\aV\x2\x2\x27E\x280\x5\x100\x81\x2\x27F\x281\x5\x1E\x10"+
		"\x2\x280\x27F\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2"+
		"\x282\x283\a\x80\x2\x2\x283\x284\x5\x114\x8B\x2\x284\x285\t\x4\x2\x2\x285"+
		"\x286\x5\x114\x8B\x2\x286\x287\x5\x9CO\x2\x287\x289\x3\x2\x2\x2\x288\x26B"+
		"\x3\x2\x2\x2\x288\x272\x3\x2\x2\x2\x288\x27D\x3\x2\x2\x2\x289-\x3\x2\x2"+
		"\x2\x28A\x28B\x5\xF6|\x2\x28B\x28C\x5\x114\x8B\x2\x28C\x28E\x3\x2\x2\x2"+
		"\x28D\x28A\x3\x2\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F"+
		"\x290\a\x65\x2\x2\x290\x291\x5\x114\x8B\x2\x291\x292\x5\xDEp\x2\x292\x296"+
		"\x5\x100\x81\x2\x293\x295\x5\x30\x19\x2\x294\x293\x3\x2\x2\x2\x295\x298"+
		"\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x299\x3"+
		"\x2\x2\x2\x298\x296\x3\x2\x2\x2\x299\x29A\a\\\x2\x2\x29A/\x3\x2\x2\x2"+
		"\x29B\x2A4\x5\xDEp\x2\x29C\x29E\x5\x114\x8B\x2\x29D\x29C\x3\x2\x2\x2\x29D"+
		"\x29E\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A1\a\xD0\x2\x2\x2A0\x2A2"+
		"\x5\x114\x8B\x2\x2A1\x2A0\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A3"+
		"\x3\x2\x2\x2\x2A3\x2A5\x5\x9CO\x2\x2A4\x29D\x3\x2\x2\x2\x2A4\x2A5\x3\x2"+
		"\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A7\x5\x100\x81\x2\x2A7\x31\x3\x2\x2"+
		"\x2\x2A8\x2A9\ag\x2\x2\x2A9\x2AA\x5\x114\x8B\x2\x2AA\x2B5\x5\x9CO\x2\x2AB"+
		"\x2AD\x5\x114\x8B\x2\x2AC\x2AB\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD"+
		"\x2AE\x3\x2\x2\x2\x2AE\x2B0\a)\x2\x2\x2AF\x2B1\x5\x114\x8B\x2\x2B0\x2AF"+
		"\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2\x2B4\x5"+
		"\x9CO\x2\x2B3\x2AC\x3\x2\x2\x2\x2B4\x2B7\x3\x2\x2\x2\x2B5\x2B3\x3\x2\x2"+
		"\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x33\x3\x2\x2\x2\x2B7\x2B5\x3\x2\x2\x2\x2B8"+
		"\x2B9\ah\x2\x2\x2B9\x2BA\x5\x114\x8B\x2\x2BA\x2BB\x5\x9CO\x2\x2BB\x35"+
		"\x3\x2\x2\x2\x2BC\x2BD\x5\xF6|\x2\x2BD\x2BE\x5\x114\x8B\x2\x2BE\x2C0\x3"+
		"\x2\x2\x2\x2BF\x2BC\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\x3\x2"+
		"\x2\x2\x2C1\x2C2\ai\x2\x2\x2C2\x2C3\x5\x114\x8B\x2\x2C3\x2C5\x5\xDEp\x2"+
		"\x2C4\x2C6\x5\x114\x8B\x2\x2C5\x2C4\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2"+
		"\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8\x5\xD2j\x2\x2C8\x37\x3\x2\x2\x2\x2C9"+
		"\x2CA\t\x5\x2\x2\x2CA\x39\x3\x2\x2\x2\x2CB\x2CC\aq\x2\x2\x2CC\x2CD\x5"+
		"\x114\x8B\x2\x2CD\x2CE\aX\x2\x2\x2CE\x2CF\x5\x114\x8B\x2\x2CF\x2D0\x5"+
		"\x9CO\x2\x2D0\x2D1\x5\x114\x8B\x2\x2D1\x2D2\az\x2\x2\x2D2\x2D3\x5\x114"+
		"\x8B\x2\x2D3\x2D4\x5\x9CO\x2\x2D4\x2D6\x5\x100\x81\x2\x2D5\x2D7\x5\x1E"+
		"\x10\x2\x2D6\x2D5\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2"+
		"\x2\x2D8\x2DC\a\x8C\x2\x2\x2D9\x2DA\x5\x114\x8B\x2\x2DA\x2DB\x5\x9CO\x2"+
		"\x2DB\x2DD\x3\x2\x2\x2\x2DC\x2D9\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD"+
		";\x3\x2\x2\x2\x2DE\x2DF\aq\x2\x2\x2DF\x2E0\x5\x114\x8B\x2\x2E0\x2E2\x5"+
		"\x9CO\x2\x2E1\x2E3\x5\x114\x8B\x2\x2E2\x2E1\x3\x2\x2\x2\x2E2\x2E3\x3\x2"+
		"\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E6\a\xD0\x2\x2\x2E5\x2E7\x5\x114\x8B"+
		"\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2"+
		"\x2E8\x2E9\x5\x9CO\x2\x2E9\x2EA\x5\x114\x8B\x2\x2EA\x2EB\a\xBE\x2\x2\x2EB"+
		"\x2EC\x5\x114\x8B\x2\x2EC\x2F2\x5\x9CO\x2\x2ED\x2EE\x5\x114\x8B\x2\x2EE"+
		"\x2EF\a\xB7\x2\x2\x2EF\x2F0\x5\x114\x8B\x2\x2F0\x2F1\x5\x9CO\x2\x2F1\x2F3"+
		"\x3\x2\x2\x2\x2F2\x2ED\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F4\x3"+
		"\x2\x2\x2\x2F4\x2F6\x5\x100\x81\x2\x2F5\x2F7\x5\x1E\x10\x2\x2F6\x2F5\x3"+
		"\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2FC\a\x8C"+
		"\x2\x2\x2F9\x2FA\x5\x114\x8B\x2\x2FA\x2FB\x5\x9CO\x2\x2FB\x2FD\x3\x2\x2"+
		"\x2\x2FC\x2F9\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD=\x3\x2\x2\x2\x2FE"+
		"\x2FF\x5\xF6|\x2\x2FF\x300\x5\x114\x8B\x2\x300\x302\x3\x2\x2\x2\x301\x2FE"+
		"\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302\x305\x3\x2\x2\x2\x303\x304\a\xB6"+
		"\x2\x2\x304\x306\x5\x114\x8B\x2\x305\x303\x3\x2\x2\x2\x305\x306\x3\x2"+
		"\x2\x2\x306\x307\x3\x2\x2\x2\x307\x309\ar\x2\x2\x308\x30A\x5\x114\x8B"+
		"\x2\x309\x308\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2"+
		"\x30B\x30D\x5@!\x2\x30C\x30E\x5\xF4{\x2\x30D\x30C\x3\x2\x2\x2\x30D\x30E"+
		"\x3\x2\x2\x2\x30E\x313\x3\x2\x2\x2\x30F\x311\x5\x114\x8B\x2\x310\x30F"+
		"\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x312\x3\x2\x2\x2\x312\x314\x5"+
		"\xD2j\x2\x313\x310\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x319\x3\x2\x2"+
		"\x2\x315\x317\x5\x114\x8B\x2\x316\x315\x3\x2\x2\x2\x316\x317\x3\x2\x2"+
		"\x2\x317\x318\x3\x2\x2\x2\x318\x31A\x5\xE0q\x2\x319\x316\x3\x2\x2\x2\x319"+
		"\x31A\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x31D\x5\x100\x81\x2\x31C"+
		"\x31E\x5\x1E\x10\x2\x31D\x31C\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x31F"+
		"\x3\x2\x2\x2\x31F\x320\a]\x2\x2\x320?\x3\x2\x2\x2\x321\x322\x5\xDEp\x2"+
		"\x322\x41\x3\x2\x2\x2\x323\x324\as\x2\x2\x324\x325\x5\x114\x8B\x2\x325"+
		"\x327\x5\xB0Y\x2\x326\x328\x5\x114\x8B\x2\x327\x326\x3\x2\x2\x2\x327\x328"+
		"\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32B\a)\x2\x2\x32A\x32C\x5\x114"+
		"\x8B\x2\x32B\x32A\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32E\x3\x2\x2"+
		"\x2\x32D\x32F\x5\x9CO\x2\x32E\x32D\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F"+
		"\x331\x3\x2\x2\x2\x330\x332\x5\x114\x8B\x2\x331\x330\x3\x2\x2\x2\x331"+
		"\x332\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x335\a)\x2\x2\x334\x336\x5"+
		"\x114\x8B\x2\x335\x334\x3\x2\x2\x2\x335\x336\x3\x2\x2\x2\x336\x337\x3"+
		"\x2\x2\x2\x337\x338\x5\x9CO\x2\x338\x43\x3\x2\x2\x2\x339\x33A\au\x2\x2"+
		"\x33A\x33B\x5\x114\x8B\x2\x33B\x33C\x5\x9CO\x2\x33C\x45\x3\x2\x2\x2\x33D"+
		"\x33E\av\x2\x2\x33E\x33F\x5\x114\x8B\x2\x33F\x340\x5\x9CO\x2\x340G\x3"+
		"\x2\x2\x2\x341\x342\aw\x2\x2\x342\x343\x5\x114\x8B\x2\x343\x344\x5L\'"+
		"\x2\x344\x345\x5\x114\x8B\x2\x345\x346\a\xBD\x2\x2\x346\x347\x5\x114\x8B"+
		"\x2\x347\x34D\x5 \x11\x2\x348\x349\x5\x114\x8B\x2\x349\x34A\aY\x2\x2\x34A"+
		"\x34B\x5\x114\x8B\x2\x34B\x34C\x5 \x11\x2\x34C\x34E\x3\x2\x2\x2\x34D\x348"+
		"\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x35C\x3\x2\x2\x2\x34F\x353\x5"+
		"J&\x2\x350\x352\x5N(\x2\x351\x350\x3\x2\x2\x2\x352\x355\x3\x2\x2\x2\x353"+
		"\x351\x3\x2\x2\x2\x353\x354\x3\x2\x2\x2\x354\x357\x3\x2\x2\x2\x355\x353"+
		"\x3\x2\x2\x2\x356\x358\x5P)\x2\x357\x356\x3\x2\x2\x2\x357\x358\x3\x2\x2"+
		"\x2\x358\x359\x3\x2\x2\x2\x359\x35A\a^\x2\x2\x35A\x35C\x3\x2\x2\x2\x35B"+
		"\x341\x3\x2\x2\x2\x35B\x34F\x3\x2\x2\x2\x35CI\x3\x2\x2\x2\x35D\x35E\a"+
		"w\x2\x2\x35E\x35F\x5\x114\x8B\x2\x35F\x360\x5L\'\x2\x360\x361\x5\x114"+
		"\x8B\x2\x361\x362\a\xBD\x2\x2\x362\x364\x5\x100\x81\x2\x363\x365\x5\x1E"+
		"\x10\x2\x364\x363\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2\x365K\x3\x2\x2\x2"+
		"\x366\x367\x5\x9CO\x2\x367M\x3\x2\x2\x2\x368\x369\aZ\x2\x2\x369\x36A\x5"+
		"\x114\x8B\x2\x36A\x36B\x5L\'\x2\x36B\x36C\x5\x114\x8B\x2\x36C\x36D\a\xBD"+
		"\x2\x2\x36D\x36F\x5\x100\x81\x2\x36E\x370\x5\x1E\x10\x2\x36F\x36E\x3\x2"+
		"\x2\x2\x36F\x370\x3\x2\x2\x2\x370O\x3\x2\x2\x2\x371\x372\aY\x2\x2\x372"+
		"\x374\x5\x100\x81\x2\x373\x375\x5\x1E\x10\x2\x374\x373\x3\x2\x2\x2\x374"+
		"\x375\x3\x2\x2\x2\x375Q\x3\x2\x2\x2\x376\x377\ay\x2\x2\x377\x378\x5\x114"+
		"\x8B\x2\x378\x379\x5\x9CO\x2\x379S\x3\x2\x2\x2\x37A\x37B\a{\x2\x2\x37B"+
		"\x37C\x5\x114\x8B\x2\x37C\x385\x5\xB0Y\x2\x37D\x37F\x5\x114\x8B\x2\x37E"+
		"\x37D\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x382"+
		"\a)\x2\x2\x381\x383\x5\x114\x8B\x2\x382\x381\x3\x2\x2\x2\x382\x383\x3"+
		"\x2\x2\x2\x383\x384\x3\x2\x2\x2\x384\x386\x5\x9CO\x2\x385\x37E\x3\x2\x2"+
		"\x2\x386\x387\x3\x2\x2\x2\x387\x385\x3\x2\x2\x2\x387\x388\x3\x2\x2\x2"+
		"\x388U\x3\x2\x2\x2\x389\x38A\a\x81\x2\x2\x38A\x38C\x5\x114\x8B\x2\x38B"+
		"\x389\x3\x2\x2\x2\x38B\x38C\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x38F"+
		"\x5\x9CO\x2\x38E\x390\x5\x114\x8B\x2\x38F\x38E\x3\x2\x2\x2\x38F\x390\x3"+
		"\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x393\a\xD0\x2\x2\x392\x394\x5\x114"+
		"\x8B\x2\x393\x392\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394\x395\x3\x2\x2"+
		"\x2\x395\x396\x5\x9CO\x2\x396W\x3\x2\x2\x2\x397\x398\a\x84\x2\x2\x398"+
		"\x399\x5\x114\x8B\x2\x399\x39B\x5\xB0Y\x2\x39A\x39C\x5\x114\x8B\x2\x39B"+
		"\x39A\x3\x2\x2\x2\x39B\x39C\x3\x2\x2\x2\x39C\x39D\x3\x2\x2\x2\x39D\x39F"+
		"\a)\x2\x2\x39E\x3A0\x5\x114\x8B\x2\x39F\x39E\x3\x2\x2\x2\x39F\x3A0\x3"+
		"\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A2\x5\x9CO\x2\x3A2Y\x3\x2\x2\x2"+
		"\x3A3\x3A4\a~\x2\x2\x3A4\x3A5\x5\x114\x8B\x2\x3A5\x3B5\x5\x9CO\x2\x3A6"+
		"\x3A8\x5\x114\x8B\x2\x3A7\x3A6\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8"+
		"\x3A9\x3\x2\x2\x2\x3A9\x3AB\a)\x2\x2\x3AA\x3AC\x5\x114\x8B\x2\x3AB\x3AA"+
		"\x3\x2\x2\x2\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3B3\x5"+
		"\x9CO\x2\x3AE\x3AF\x5\x114\x8B\x2\x3AF\x3B0\a\xBE\x2\x2\x3B0\x3B1\x5\x114"+
		"\x8B\x2\x3B1\x3B2\x5\x9CO\x2\x3B2\x3B4\x3\x2\x2\x2\x3B3\x3AE\x3\x2\x2"+
		"\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4\x3B6\x3\x2\x2\x2\x3B5\x3A7\x3\x2\x2\x2"+
		"\x3B5\x3B6\x3\x2\x2\x2\x3B6[\x3\x2\x2\x2\x3B7\x3B8\a\x88\x2\x2\x3B8\x3B9"+
		"\x5\x114\x8B\x2\x3B9\x3BB\x5\x9CO\x2\x3BA\x3BC\x5\x114\x8B\x2\x3BB\x3BA"+
		"\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BD\x3\x2\x2\x2\x3BD\x3BF\a\xD0"+
		"\x2\x2\x3BE\x3C0\x5\x114\x8B\x2\x3BF\x3BE\x3\x2\x2\x2\x3BF\x3C0\x3\x2"+
		"\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C2\x5\x9CO\x2\x3C2]\x3\x2\x2\x2\x3C3"+
		"\x3C5\a\x8A\x2\x2\x3C4\x3C6\x5\x114\x8B\x2\x3C5\x3C4\x3\x2\x2\x2\x3C5"+
		"\x3C6\x3\x2\x2\x2\x3C6\x3C7\x3\x2\x2\x2\x3C7\x3C9\a\xD4\x2\x2\x3C8\x3CA"+
		"\x5\x114\x8B\x2\x3C9\x3C8\x3\x2\x2\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA\x3CB"+
		"\x3\x2\x2\x2\x3CB\x3CD\x5\xCCg\x2\x3CC\x3CE\x5\x114\x8B\x2\x3CD\x3CC\x3"+
		"\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3D0\a\xDB"+
		"\x2\x2\x3D0_\x3\x2\x2\x2\x3D1\x3D2\t\x6\x2\x2\x3D2\x3DB\x5\x114\x8B\x2"+
		"\x3D3\x3D4\av\x2\x2\x3D4\x3D5\x5\x114\x8B\x2\x3D5\x3D6\x5\x9CO\x2\x3D6"+
		"\x3DC\x3\x2\x2\x2\x3D7\x3D8\a\xAD\x2\x2\x3D8\x3D9\x5\x114\x8B\x2\x3D9"+
		"\x3DA\a\x8C\x2\x2\x3DA\x3DC\x3\x2\x2\x2\x3DB\x3D3\x3\x2\x2\x2\x3DB\x3D7"+
		"\x3\x2\x2\x2\x3DC\x61\x3\x2\x2\x2\x3DD\x3DE\a\x91\x2\x2\x3DE\x3DF\x5\x114"+
		"\x8B\x2\x3DF\x3E0\x5\x9CO\x2\x3E0\x3E1\x5\x114\x8B\x2\x3E1\x3E2\av\x2"+
		"\x2\x3E2\x3E3\x5\x114\x8B\x2\x3E3\x3EE\x5\x9CO\x2\x3E4\x3E6\x5\x114\x8B"+
		"\x2\x3E5\x3E4\x3\x2\x2\x2\x3E5\x3E6\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2"+
		"\x3E7\x3E9\a)\x2\x2\x3E8\x3EA\x5\x114\x8B\x2\x3E9\x3E8\x3\x2\x2\x2\x3E9"+
		"\x3EA\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3ED\x5\x9CO\x2\x3EC\x3E5"+
		"\x3\x2\x2\x2\x3ED\x3F0\x3\x2\x2\x2\x3EE\x3EC\x3\x2\x2\x2\x3EE\x3EF\x3"+
		"\x2\x2\x2\x3EF\x63\x3\x2\x2\x2\x3F0\x3EE\x3\x2\x2\x2\x3F1\x3F2\a\x91\x2"+
		"\x2\x3F2\x3F3\x5\x114\x8B\x2\x3F3\x3F4\x5\x9CO\x2\x3F4\x3F5\x5\x114\x8B"+
		"\x2\x3F5\x3F6\au\x2\x2\x3F6\x3F7\x5\x114\x8B\x2\x3F7\x402\x5\x9CO\x2\x3F8"+
		"\x3FA\x5\x114\x8B\x2\x3F9\x3F8\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2\x3FA"+
		"\x3FB\x3\x2\x2\x2\x3FB\x3FD\a)\x2\x2\x3FC\x3FE\x5\x114\x8B\x2\x3FD\x3FC"+
		"\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x401\x5"+
		"\x9CO\x2\x400\x3F9\x3\x2\x2\x2\x401\x404\x3\x2\x2\x2\x402\x400\x3\x2\x2"+
		"\x2\x402\x403\x3\x2\x2\x2\x403\x65\x3\x2\x2\x2\x404\x402\x3\x2\x2\x2\x405"+
		"\x406\a\x94\x2\x2\x406\x407\x5\x114\x8B\x2\x407\x408\x5\x9CO\x2\x408\x409"+
		"\x5\x114\x8B\x2\x409\x40A\aq\x2\x2\x40A\x40B\x5\x114\x8B\x2\x40B\x411"+
		"\t\a\x2\x2\x40C\x40D\x5\x114\x8B\x2\x40D\x40E\a\x33\x2\x2\x40E\x40F\x5"+
		"\x114\x8B\x2\x40F\x410\t\b\x2\x2\x410\x412\x3\x2\x2\x2\x411\x40C\x3\x2"+
		"\x2\x2\x411\x412\x3\x2\x2\x2\x412\x416\x3\x2\x2\x2\x413\x414\x5\x114\x8B"+
		"\x2\x414\x415\t\t\x2\x2\x415\x417\x3\x2\x2\x2\x416\x413\x3\x2\x2\x2\x416"+
		"\x417\x3\x2\x2\x2\x417\x418\x3\x2\x2\x2\x418\x419\x5\x114\x8B\x2\x419"+
		"\x41A\a\x39\x2\x2\x41A\x41B\x5\x114\x8B\x2\x41B\x427\x5\xB0Y\x2\x41C\x41D"+
		"\x5\x114\x8B\x2\x41D\x41F\a\x1D\x2\x2\x41E\x420\x5\x114\x8B\x2\x41F\x41E"+
		"\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x423\a\xD0"+
		"\x2\x2\x422\x424\x5\x114\x8B\x2\x423\x422\x3\x2\x2\x2\x423\x424\x3\x2"+
		"\x2\x2\x424\x425\x3\x2\x2\x2\x425\x426\x5\x9CO\x2\x426\x428\x3\x2\x2\x2"+
		"\x427\x41C\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428g\x3\x2\x2\x2\x429\x436"+
		"\x5j\x36\x2\x42A\x42C\x5\x114\x8B\x2\x42B\x42A\x3\x2\x2\x2\x42B\x42C\x3"+
		"\x2\x2\x2\x42C\x42D\x3\x2\x2\x2\x42D\x42F\t\n\x2\x2\x42E\x430\x5\x114"+
		"\x8B\x2\x42F\x42E\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2\x430\x432\x3\x2\x2"+
		"\x2\x431\x433\x5j\x36\x2\x432\x431\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2\x433"+
		"\x435\x3\x2\x2\x2\x434\x42B\x3\x2\x2\x2\x435\x438\x3\x2\x2\x2\x436\x434"+
		"\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437\x44B\x3\x2\x2\x2\x438\x436\x3"+
		"\x2\x2\x2\x439\x43B\x5j\x36\x2\x43A\x439\x3\x2\x2\x2\x43A\x43B\x3\x2\x2"+
		"\x2\x43B\x446\x3\x2\x2\x2\x43C\x43E\x5\x114\x8B\x2\x43D\x43C\x3\x2\x2"+
		"\x2\x43D\x43E\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x441\t\n\x2\x2\x440"+
		"\x442\x5\x114\x8B\x2\x441\x440\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442"+
		"\x444\x3\x2\x2\x2\x443\x445\x5j\x36\x2\x444\x443\x3\x2\x2\x2\x444\x445"+
		"\x3\x2\x2\x2\x445\x447\x3\x2\x2\x2\x446\x43D\x3\x2\x2\x2\x447\x448\x3"+
		"\x2\x2\x2\x448\x446\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44B\x3\x2"+
		"\x2\x2\x44A\x429\x3\x2\x2\x2\x44A\x43A\x3\x2\x2\x2\x44Bi\x3\x2\x2\x2\x44C"+
		"\x45E\x5\x9CO\x2\x44D\x45B\t\v\x2\x2\x44E\x450\x5\x114\x8B\x2\x44F\x44E"+
		"\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x453\a\xD4"+
		"\x2\x2\x452\x454\x5\x114\x8B\x2\x453\x452\x3\x2\x2\x2\x453\x454\x3\x2"+
		"\x2\x2\x454\x455\x3\x2\x2\x2\x455\x457\x5\xCCg\x2\x456\x458\x5\x114\x8B"+
		"\x2\x457\x456\x3\x2\x2\x2\x457\x458\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2"+
		"\x459\x45A\a\xDB\x2\x2\x45A\x45C\x3\x2\x2\x2\x45B\x44F\x3\x2\x2\x2\x45B"+
		"\x45C\x3\x2\x2\x2\x45C\x45E\x3\x2\x2\x2\x45D\x44C\x3\x2\x2\x2\x45D\x44D"+
		"\x3\x2\x2\x2\x45Ek\x3\x2\x2\x2\x45F\x460\a\x9E\x2\x2\x460\x461\x5\x114"+
		"\x8B\x2\x461\x463\x5\xB0Y\x2\x462\x464\x5\x114\x8B\x2\x463\x462\x3\x2"+
		"\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2\x465\x46A\a)\x2\x2"+
		"\x466\x468\x5\x114\x8B\x2\x467\x466\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2"+
		"\x468\x469\x3\x2\x2\x2\x469\x46B\x5h\x35\x2\x46A\x467\x3\x2\x2\x2\x46A"+
		"\x46B\x3\x2\x2\x2\x46Bm\x3\x2\x2\x2\x46C\x46D\x5\xF6|\x2\x46D\x46E\x5"+
		"\x114\x8B\x2\x46E\x470\x3\x2\x2\x2\x46F\x46C\x3\x2\x2\x2\x46F\x470\x3"+
		"\x2\x2\x2\x470\x473\x3\x2\x2\x2\x471\x472\a\xB6\x2\x2\x472\x474\x5\x114"+
		"\x8B\x2\x473\x471\x3\x2\x2\x2\x473\x474\x3\x2\x2\x2\x474\x475\x3\x2\x2"+
		"\x2\x475\x476\a\xA0\x2\x2\x476\x477\x5\x114\x8B\x2\x477\x479\x5@!\x2\x478"+
		"\x47A\x5\xF4{\x2\x479\x478\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47F"+
		"\x3\x2\x2\x2\x47B\x47D\x5\x114\x8B\x2\x47C\x47B\x3\x2\x2\x2\x47C\x47D"+
		"\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2\x47E\x480\x5\xD2j\x2\x47F\x47C\x3\x2"+
		"\x2\x2\x47F\x480\x3\x2\x2\x2\x480\x484\x3\x2\x2\x2\x481\x482\x5\x114\x8B"+
		"\x2\x482\x483\x5\xE0q\x2\x483\x485\x3\x2\x2\x2\x484\x481\x3\x2\x2\x2\x484"+
		"\x485\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486\x488\x5\x100\x81\x2\x487"+
		"\x489\x5\x1E\x10\x2\x488\x487\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48A"+
		"\x3\x2\x2\x2\x48A\x48B\a_\x2\x2\x48Bo\x3\x2\x2\x2\x48C\x48D\x5\xF6|\x2"+
		"\x48D\x48E\x5\x114\x8B\x2\x48E\x490\x3\x2\x2\x2\x48F\x48C\x3\x2\x2\x2"+
		"\x48F\x490\x3\x2\x2\x2\x490\x493\x3\x2\x2\x2\x491\x492\a\xB6\x2\x2\x492"+
		"\x494\x5\x114\x8B\x2\x493\x491\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494"+
		"\x495\x3\x2\x2\x2\x495\x496\a\xA2\x2\x2\x496\x497\x5\x114\x8B\x2\x497"+
		"\x49C\x5\x94K\x2\x498\x49A\x5\x114\x8B\x2\x499\x498\x3\x2\x2\x2\x499\x49A"+
		"\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x49D\x5\xD2j\x2\x49C\x499\x3\x2"+
		"\x2\x2\x49C\x49D\x3\x2\x2\x2\x49D\x49E\x3\x2\x2\x2\x49E\x4A0\x5\x100\x81"+
		"\x2\x49F\x4A1\x5\x1E\x10\x2\x4A0\x49F\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2"+
		"\x4A1\x4A2\x3\x2\x2\x2\x4A2\x4A3\a_\x2\x2\x4A3q\x3\x2\x2\x2\x4A4\x4A5"+
		"\x5\xF6|\x2\x4A5\x4A6\x5\x114\x8B\x2\x4A6\x4A8\x3\x2\x2\x2\x4A7\x4A4\x3"+
		"\x2\x2\x2\x4A7\x4A8\x3\x2\x2\x2\x4A8\x4AB\x3\x2\x2\x2\x4A9\x4AA\a\xB6"+
		"\x2\x2\x4AA\x4AC\x5\x114\x8B\x2\x4AB\x4A9\x3\x2\x2\x2\x4AB\x4AC\x3\x2"+
		"\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD\x4AE\a\xA1\x2\x2\x4AE\x4AF\x5\x114\x8B"+
		"\x2\x4AF\x4B4\x5\x94K\x2\x4B0\x4B2\x5\x114\x8B\x2\x4B1\x4B0\x3\x2\x2\x2"+
		"\x4B1\x4B2\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2\x4B3\x4B5\x5\xD2j\x2\x4B4"+
		"\x4B1\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B8"+
		"\x5\x100\x81\x2\x4B7\x4B9\x5\x1E\x10\x2\x4B8\x4B7\x3\x2\x2\x2\x4B8\x4B9"+
		"\x3\x2\x2\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x4BB\a_\x2\x2\x4BBs\x3\x2\x2\x2"+
		"\x4BC\x4BD\a\xA5\x2\x2\x4BD\x4BE\x5\x114\x8B\x2\x4BE\x4C0\x5\xB0Y\x2\x4BF"+
		"\x4C1\x5\x114\x8B\x2\x4C0\x4BF\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2\x2\x4C1"+
		"\x4C2\x3\x2\x2\x2\x4C2\x4C4\a)\x2\x2\x4C3\x4C5\x5\x114\x8B\x2\x4C4\x4C3"+
		"\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4C7\x3\x2\x2\x2\x4C6\x4C8\x5"+
		"\x9CO\x2\x4C7\x4C6\x3\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4CA\x3\x2\x2"+
		"\x2\x4C9\x4CB\x5\x114\x8B\x2\x4CA\x4C9\x3\x2\x2\x2\x4CA\x4CB\x3\x2\x2"+
		"\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4CE\a)\x2\x2\x4CD\x4CF\x5\x114\x8B\x2"+
		"\x4CE\x4CD\x3\x2\x2\x2\x4CE\x4CF\x3\x2\x2\x2\x4CF\x4D0\x3\x2\x2\x2\x4D0"+
		"\x4D1\x5\x9CO\x2\x4D1u\x3\x2\x2\x2\x4D2\x4D3\a\xA7\x2\x2\x4D3\x4D4\x5"+
		"\x114\x8B\x2\x4D4\x4E3\x5\xDEp\x2\x4D5\x4D7\x5\x114\x8B\x2\x4D6\x4D5\x3"+
		"\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8\x4DA\a\xD4"+
		"\x2\x2\x4D9\x4DB\x5\x114\x8B\x2\x4DA\x4D9\x3\x2\x2\x2\x4DA\x4DB\x3\x2"+
		"\x2\x2\x4DB\x4E0\x3\x2\x2\x2\x4DC\x4DE\x5\xCCg\x2\x4DD\x4DF\x5\x114\x8B"+
		"\x2\x4DE\x4DD\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E1\x3\x2\x2\x2"+
		"\x4E0\x4DC\x3\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4E2\x3\x2\x2\x2\x4E2"+
		"\x4E4\a\xDB\x2\x2\x4E3\x4D6\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4w\x3"+
		"\x2\x2\x2\x4E5\x4E6\a\xAA\x2\x2\x4E6\x4E9\x5\x114\x8B\x2\x4E7\x4E8\a\x9D"+
		"\x2\x2\x4E8\x4EA\x5\x114\x8B\x2\x4E9\x4E7\x3\x2\x2\x2\x4E9\x4EA\x3\x2"+
		"\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4F6\x5z>\x2\x4EC\x4EE\x5\x114\x8B\x2"+
		"\x4ED\x4EC\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF"+
		"\x4F1\a)\x2\x2\x4F0\x4F2\x5\x114\x8B\x2\x4F1\x4F0\x3\x2\x2\x2\x4F1\x4F2"+
		"\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3\x4F5\x5z>\x2\x4F4\x4ED\x3\x2\x2"+
		"\x2\x4F5\x4F8\x3\x2\x2\x2\x4F6\x4F4\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2"+
		"\x4F7y\x3\x2\x2\x2\x4F8\x4F6\x3\x2\x2\x2\x4F9\x4FB\x5\xBC_\x2\x4FA\x4FC"+
		"\x5\x114\x8B\x2\x4FB\x4FA\x3\x2\x2\x2\x4FB\x4FC\x3\x2\x2\x2\x4FC\x4FD"+
		"\x3\x2\x2\x2\x4FD\x4FF\a\xD4\x2\x2\x4FE\x500\x5\x114\x8B\x2\x4FF\x4FE"+
		"\x3\x2\x2\x2\x4FF\x500\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x503\x5"+
		"\xD8m\x2\x502\x504\x5\x114\x8B\x2\x503\x502\x3\x2\x2\x2\x503\x504\x3\x2"+
		"\x2\x2\x504\x505\x3\x2\x2\x2\x505\x509\a\xDB\x2\x2\x506\x507\x5\x114\x8B"+
		"\x2\x507\x508\x5\xE0q\x2\x508\x50A\x3\x2\x2\x2\x509\x506\x3\x2\x2\x2\x509"+
		"\x50A\x3\x2\x2\x2\x50A{\x3\x2\x2\x2\x50B\x50C\a\xAC\x2\x2\x50C}\x3\x2"+
		"\x2\x2\x50D\x513\a\xAD\x2\x2\x50E\x511\x5\x114\x8B\x2\x50F\x512\a\x8C"+
		"\x2\x2\x510\x512\x5\x9CO\x2\x511\x50F\x3\x2\x2\x2\x511\x510\x3\x2\x2\x2"+
		"\x512\x514\x3\x2\x2\x2\x513\x50E\x3\x2\x2\x2\x513\x514\x3\x2\x2\x2\x514"+
		"\x7F\x3\x2\x2\x2\x515\x516\a\xAE\x2\x2\x516\x81\x3\x2\x2\x2\x517\x518"+
		"\a\xAF\x2\x2\x518\x519\x5\x114\x8B\x2\x519\x51B\x5\x9CO\x2\x51A\x51C\x5"+
		"\x114\x8B\x2\x51B\x51A\x3\x2\x2\x2\x51B\x51C\x3\x2\x2\x2\x51C\x51D\x3"+
		"\x2\x2\x2\x51D\x51F\a\xD0\x2\x2\x51E\x520\x5\x114\x8B\x2\x51F\x51E\x3"+
		"\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x521\x3\x2\x2\x2\x521\x522\x5\x9C"+
		"O\x2\x522\x83\x3\x2\x2\x2\x523\x524\a\xB8\x2\x2\x524\x85\x3\x2\x2\x2\x525"+
		"\x526\a\xB0\x2\x2\x526\x527\x5\x114\x8B\x2\x527\x529\x5\xB0Y\x2\x528\x52A"+
		"\x5\x114\x8B\x2\x529\x528\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52B"+
		"\x3\x2\x2\x2\x52B\x52D\a)\x2\x2\x52C\x52E\x5\x114\x8B\x2\x52D\x52C\x3"+
		"\x2\x2\x2\x52D\x52E\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x530\x5\x9C"+
		"O\x2\x530\x87\x3\x2\x2\x2\x531\x532\a\xB1\x2\x2\x532\x533\x5\x114\x8B"+
		"\x2\x533\x534\a\x41\x2\x2\x534\x535\x5\x114\x8B\x2\x535\x536\x5\x9CO\x2"+
		"\x536\x53A\x5\x100\x81\x2\x537\x539\x5\x8CG\x2\x538\x537\x3\x2\x2\x2\x539"+
		"\x53C\x3\x2\x2\x2\x53A\x538\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53D"+
		"\x3\x2\x2\x2\x53C\x53A\x3\x2\x2\x2\x53D\x53E\a`\x2\x2\x53E\x89\x3\x2\x2"+
		"\x2\x53F\x541\a|\x2\x2\x540\x542\x5\x114\x8B\x2\x541\x540\x3\x2\x2\x2"+
		"\x541\x542\x3\x2\x2\x2\x542\x543\x3\x2\x2\x2\x543\x545\x5\xE4s\x2\x544"+
		"\x546\x5\x114\x8B\x2\x545\x544\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546"+
		"\x547\x3\x2\x2\x2\x547\x548\x5\x9CO\x2\x548\x551\x3\x2\x2\x2\x549\x54A"+
		"\x5\x9CO\x2\x54A\x54B\x5\x114\x8B\x2\x54B\x54C\a\xBE\x2\x2\x54C\x54D\x5"+
		"\x114\x8B\x2\x54D\x54E\x5\x9CO\x2\x54E\x551\x3\x2\x2\x2\x54F\x551\x5\x9C"+
		"O\x2\x550\x53F\x3\x2\x2\x2\x550\x549\x3\x2\x2\x2\x550\x54F\x3\x2\x2\x2"+
		"\x551\x8B\x3\x2\x2\x2\x552\x553\a\x41\x2\x2\x553\x554\x5\x114\x8B\x2\x554"+
		"\x555\x5\x8EH\x2\x555\x557\x5\x100\x81\x2\x556\x558\x5\x1E\x10\x2\x557"+
		"\x556\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558\x8D\x3\x2\x2\x2\x559\x569"+
		"\aY\x2\x2\x55A\x565\x5\x8A\x46\x2\x55B\x55D\x5\x114\x8B\x2\x55C\x55B\x3"+
		"\x2\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x560\a)\x2"+
		"\x2\x55F\x561\x5\x114\x8B\x2\x560\x55F\x3\x2\x2\x2\x560\x561\x3\x2\x2"+
		"\x2\x561\x562\x3\x2\x2\x2\x562\x564\x5\x8A\x46\x2\x563\x55C\x3\x2\x2\x2"+
		"\x564\x567\x3\x2\x2\x2\x565\x563\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2\x566"+
		"\x569\x3\x2\x2\x2\x567\x565\x3\x2\x2\x2\x568\x559\x3\x2\x2\x2\x568\x55A"+
		"\x3\x2\x2\x2\x569\x8F\x3\x2\x2\x2\x56A\x56B\a\xB2\x2\x2\x56B\x56C\x5\x114"+
		"\x8B\x2\x56C\x56E\x5\x9CO\x2\x56D\x56F\x5\x114\x8B\x2\x56E\x56D\x3\x2"+
		"\x2\x2\x56E\x56F\x3\x2\x2\x2\x56F\x570\x3\x2\x2\x2\x570\x572\a\xD0\x2"+
		"\x2\x571\x573\x5\x114\x8B\x2\x572\x571\x3\x2\x2\x2\x572\x573\x3\x2\x2"+
		"\x2\x573\x574\x3\x2\x2\x2\x574\x575\x5\x9CO\x2\x575\x91\x3\x2\x2\x2\x576"+
		"\x577\x5\xF6|\x2\x577\x578\x5\x114\x8B\x2\x578\x57A\x3\x2\x2\x2\x579\x576"+
		"\x3\x2\x2\x2\x579\x57A\x3\x2\x2\x2\x57A\x57D\x3\x2\x2\x2\x57B\x57C\a\xB6"+
		"\x2\x2\x57C\x57E\x5\x114\x8B\x2\x57D\x57B\x3\x2\x2\x2\x57D\x57E\x3\x2"+
		"\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x581\a\xBA\x2\x2\x580\x582\x5\x114\x8B"+
		"\x2\x581\x580\x3\x2\x2\x2\x581\x582\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2"+
		"\x583\x588\x5\x94K\x2\x584\x586\x5\x114\x8B\x2\x585\x584\x3\x2\x2\x2\x585"+
		"\x586\x3\x2\x2\x2\x586\x587\x3\x2\x2\x2\x587\x589\x5\xD2j\x2\x588\x585"+
		"\x3\x2\x2\x2\x588\x589\x3\x2\x2\x2\x589\x58A\x3\x2\x2\x2\x58A\x58C\x5"+
		"\x100\x81\x2\x58B\x58D\x5\x1E\x10\x2\x58C\x58B\x3\x2\x2\x2\x58C\x58D\x3"+
		"\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x58F\a\x61\x2\x2\x58F\x93\x3\x2\x2"+
		"\x2\x590\x591\x5\xDEp\x2\x591\x95\x3\x2\x2\x2\x592\x593\x5\xF6|\x2\x593"+
		"\x594\x5\x114\x8B\x2\x594\x596\x3\x2\x2\x2\x595\x592\x3\x2\x2\x2\x595"+
		"\x596\x3\x2\x2\x2\x596\x597\x3\x2\x2\x2\x597\x598\a\xC0\x2\x2\x598\x599"+
		"\x5\x114\x8B\x2\x599\x59A\x5\xDEp\x2\x59A\x59E\x5\x100\x81\x2\x59B\x59D"+
		"\x5\x98M\x2\x59C\x59B\x3\x2\x2\x2\x59D\x5A0\x3\x2\x2\x2\x59E\x59C\x3\x2"+
		"\x2\x2\x59E\x59F\x3\x2\x2\x2\x59F\x5A1\x3\x2\x2\x2\x5A0\x59E\x3\x2\x2"+
		"\x2\x5A1\x5A2\a\x62\x2\x2\x5A2\x97\x3\x2\x2\x2\x5A3\x5B2\x5\xDEp\x2\x5A4"+
		"\x5A6\x5\x114\x8B\x2\x5A5\x5A4\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2\x2\x5A6"+
		"\x5A7\x3\x2\x2\x2\x5A7\x5AC\a\xD4\x2\x2\x5A8\x5AA\x5\x114\x8B\x2\x5A9"+
		"\x5A8\x3\x2\x2\x2\x5A9\x5AA\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2\x5AB\x5AD"+
		"\x5\xD8m\x2\x5AC\x5A9\x3\x2\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AF\x3\x2"+
		"\x2\x2\x5AE\x5B0\x5\x114\x8B\x2\x5AF\x5AE\x3\x2\x2\x2\x5AF\x5B0\x3\x2"+
		"\x2\x2\x5B0\x5B1\x3\x2\x2\x2\x5B1\x5B3\a\xDB\x2\x2\x5B2\x5A5\x3\x2\x2"+
		"\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\x5B7\x3\x2\x2\x2\x5B4\x5B5\x5\x114\x8B"+
		"\x2\x5B5\x5B6\x5\xE0q\x2\x5B6\x5B8\x3\x2\x2\x2\x5B7\x5B4\x3\x2\x2\x2\x5B7"+
		"\x5B8\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9\x5BA\x5\x100\x81\x2\x5BA"+
		"\x99\x3\x2\x2\x2\x5BB\x5BC\a\xC2\x2\x2\x5BC\x5BD\x5\x114\x8B\x2\x5BD\x5CD"+
		"\x5\xB0Y\x2\x5BE\x5C0\x5\x114\x8B\x2\x5BF\x5BE\x3\x2\x2\x2\x5BF\x5C0\x3"+
		"\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C3\a)\x2\x2\x5C2\x5C4\x5\x114\x8B"+
		"\x2\x5C3\x5C2\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2"+
		"\x5C5\x5CB\x5\x9CO\x2\x5C6\x5C7\x5\x114\x8B\x2\x5C7\x5C8\a\xBE\x2\x2\x5C8"+
		"\x5C9\x5\x114\x8B\x2\x5C9\x5CA\x5\x9CO\x2\x5CA\x5CC\x3\x2\x2\x2\x5CB\x5C6"+
		"\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5CE\x3\x2\x2\x2\x5CD\x5BF\x3"+
		"\x2\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\x9B\x3\x2\x2\x2\x5CF\x5D0\bO\x1\x2"+
		"\x5D0\x5D2\a\x8D\x2\x2\x5D1\x5D3\x5\x114\x8B\x2\x5D2\x5D1\x3\x2\x2\x2"+
		"\x5D2\x5D3\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5FD\x5\x9CO\x15\x5D5"+
		"\x5D7\a\x34\x2\x2\x5D6\x5D8\x5\x114\x8B\x2\x5D7\x5D6\x3\x2\x2\x2\x5D7"+
		"\x5D8\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x5FD\x5\x9CO\x12\x5DA\x5DC"+
		"\x5\xDCo\x2\x5DB\x5DD\x5\x114\x8B\x2\x5DC\x5DB\x3\x2\x2\x2\x5DC\x5DD\x3"+
		"\x2\x2\x2\x5DD\x5DE\x3\x2\x2\x2\x5DE\x5E0\a\xCD\x2\x2\x5DF\x5E1\x5\x114"+
		"\x8B\x2\x5E0\x5DF\x3\x2\x2\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2"+
		"\x2\x5E2\x5E3\x5\x9CO\x11\x5E3\x5FD\x3\x2\x2\x2\x5E4\x5E6\a\xD6\x2\x2"+
		"\x5E5\x5E7\x5\x114\x8B\x2\x5E6\x5E5\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2"+
		"\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5FD\x5\x9CO\xF\x5E9\x5EB\a\x8E\x2\x2\x5EA"+
		"\x5EC\x5\x114\x8B\x2\x5EB\x5EA\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2\x2\x5EC"+
		"\x5ED\x3\x2\x2\x2\x5ED\x5FD\x5\x9CO\b\x5EE\x5FD\x5\xEEx\x2\x5EF\x5FD\x5"+
		"\xBC_\x2\x5F0\x5F2\a\xD4\x2\x2\x5F1\x5F3\x5\x114\x8B\x2\x5F2\x5F1\x3\x2"+
		"\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F6\x5\x9CO\x2"+
		"\x5F5\x5F7\x5\x114\x8B\x2\x5F6\x5F5\x3\x2\x2\x2\x5F6\x5F7\x3\x2\x2\x2"+
		"\x5F7\x5F8\x3\x2\x2\x2\x5F8\x5F9\a\xDB\x2\x2\x5F9\x5FD\x3\x2\x2\x2\x5FA"+
		"\x5FD\x5\x9EP\x2\x5FB\x5FD\x5^\x30\x2\x5FC\x5CF\x3\x2\x2\x2\x5FC\x5D5"+
		"\x3\x2\x2\x2\x5FC\x5DA\x3\x2\x2\x2\x5FC\x5E4\x3\x2\x2\x2\x5FC\x5E9\x3"+
		"\x2\x2\x2\x5FC\x5EE\x3\x2\x2\x2\x5FC\x5EF\x3\x2\x2\x2\x5FC\x5F0\x3\x2"+
		"\x2\x2\x5FC\x5FA\x3\x2\x2\x2\x5FC\x5FB\x3\x2\x2\x2\x5FD\x66C\x3\x2\x2"+
		"\x2\x5FE\x600\f\x10\x2\x2\x5FF\x601\x5\x114\x8B\x2\x600\x5FF\x3\x2\x2"+
		"\x2\x600\x601\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2\x602\x604\a\xDA\x2\x2"+
		"\x603\x605\x5\x114\x8B\x2\x604\x603\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2"+
		"\x605\x606\x3\x2\x2\x2\x606\x66B\x5\x9CO\x11\x607\x609\f\xE\x2\x2\x608"+
		"\x60A\x5\x114\x8B\x2\x609\x608\x3\x2\x2\x2\x609\x60A\x3\x2\x2\x2\x60A"+
		"\x60B\x3\x2\x2\x2\x60B\x60D\t\f\x2\x2\x60C\x60E\x5\x114\x8B\x2\x60D\x60C"+
		"\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x66B\x5"+
		"\x9CO\xF\x610\x612\f\r\x2\x2\x611\x613\x5\x114\x8B\x2\x612\x611\x3\x2"+
		"\x2\x2\x612\x613\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2\x614\x616\a\xCF\x2"+
		"\x2\x615\x617\x5\x114\x8B\x2\x616\x615\x3\x2\x2\x2\x616\x617\x3\x2\x2"+
		"\x2\x617\x618\x3\x2\x2\x2\x618\x66B\x5\x9CO\xE\x619\x61B\f\f\x2\x2\x61A"+
		"\x61C\x5\x114\x8B\x2\x61B\x61A\x3\x2\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C"+
		"\x61D\x3\x2\x2\x2\x61D\x61F\a\x8B\x2\x2\x61E\x620\x5\x114\x8B\x2\x61F"+
		"\x61E\x3\x2\x2\x2\x61F\x620\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\x66B"+
		"\x5\x9CO\r\x622\x624\f\v\x2\x2\x623\x625\x5\x114\x8B\x2\x624\x623\x3\x2"+
		"\x2\x2\x624\x625\x3\x2\x2\x2\x625\x626\x3\x2\x2\x2\x626\x628\t\r\x2\x2"+
		"\x627\x629\x5\x114\x8B\x2\x628\x627\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2"+
		"\x629\x62A\x3\x2\x2\x2\x62A\x66B\x5\x9CO\f\x62B\x62D\f\n\x2\x2\x62C\x62E"+
		"\x5\x114\x8B\x2\x62D\x62C\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x62F"+
		"\x3\x2\x2\x2\x62F\x631\a\x32\x2\x2\x630\x632\x5\x114\x8B\x2\x631\x630"+
		"\x3\x2\x2\x2\x631\x632\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633\x66B\x5"+
		"\x9CO\v\x634\x636\f\t\x2\x2\x635\x637\x5\x114\x8B\x2\x636\x635\x3\x2\x2"+
		"\x2\x636\x637\x3\x2\x2\x2\x637\x638\x3\x2\x2\x2\x638\x63A\t\xE\x2\x2\x639"+
		"\x63B\x5\x114\x8B\x2\x63A\x639\x3\x2\x2\x2\x63A\x63B\x3\x2\x2\x2\x63B"+
		"\x63C\x3\x2\x2\x2\x63C\x66B\x5\x9CO\n\x63D\x63F\f\a\x2\x2\x63E\x640\x5"+
		"\x114\x8B\x2\x63F\x63E\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2\x640\x641\x3"+
		"\x2\x2\x2\x641\x643\a\x36\x2\x2\x642\x644\x5\x114\x8B\x2\x643\x642\x3"+
		"\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2\x645\x66B\x5\x9C"+
		"O\b\x646\x648\f\x6\x2\x2\x647\x649\x5\x114\x8B\x2\x648\x647\x3\x2\x2\x2"+
		"\x648\x649\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64C\a\x9A\x2\x2\x64B"+
		"\x64D\x5\x114\x8B\x2\x64C\x64B\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2\x64D"+
		"\x64E\x3\x2\x2\x2\x64E\x66B\x5\x9CO\a\x64F\x651\f\x5\x2\x2\x650\x652\x5"+
		"\x114\x8B\x2\x651\x650\x3\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x653\x3"+
		"\x2\x2\x2\x653\x655\a\xCC\x2\x2\x654\x656\x5\x114\x8B\x2\x655\x654\x3"+
		"\x2\x2\x2\x655\x656\x3\x2\x2\x2\x656\x657\x3\x2\x2\x2\x657\x66B\x5\x9C"+
		"O\x6\x658\x65A\f\x4\x2\x2\x659\x65B\x5\x114\x8B\x2\x65A\x659\x3\x2\x2"+
		"\x2\x65A\x65B\x3\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65E\a\x66\x2\x2"+
		"\x65D\x65F\x5\x114\x8B\x2\x65E\x65D\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2"+
		"\x65F\x660\x3\x2\x2\x2\x660\x66B\x5\x9CO\x5\x661\x663\f\x3\x2\x2\x662"+
		"\x664\x5\x114\x8B\x2\x663\x662\x3\x2\x2\x2\x663\x664\x3\x2\x2\x2\x664"+
		"\x665\x3\x2\x2\x2\x665\x667\ax\x2\x2\x666\x668\x5\x114\x8B\x2\x667\x666"+
		"\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66B\x5"+
		"\x9CO\x4\x66A\x5FE\x3\x2\x2\x2\x66A\x607\x3\x2\x2\x2\x66A\x610\x3\x2\x2"+
		"\x2\x66A\x619\x3\x2\x2\x2\x66A\x622\x3\x2\x2\x2\x66A\x62B\x3\x2\x2\x2"+
		"\x66A\x634\x3\x2\x2\x2\x66A\x63D\x3\x2\x2\x2\x66A\x646\x3\x2\x2\x2\x66A"+
		"\x64F\x3\x2\x2\x2\x66A\x658\x3\x2\x2\x2\x66A\x661\x3\x2\x2\x2\x66B\x66E"+
		"\x3\x2\x2\x2\x66C\x66A\x3\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x9D\x3\x2"+
		"\x2\x2\x66E\x66C\x3\x2\x2\x2\x66F\x670\a\xC1\x2\x2\x670\x671\x5\x114\x8B"+
		"\x2\x671\x677\x5\x9CO\x2\x672\x673\x5\x114\x8B\x2\x673\x674\a|\x2\x2\x674"+
		"\x675\x5\x114\x8B\x2\x675\x676\x5\xF2z\x2\x676\x678\x3\x2\x2\x2\x677\x672"+
		"\x3\x2\x2\x2\x677\x678\x3\x2\x2\x2\x678\x9F\x3\x2\x2\x2\x679\x67D\aU\x2"+
		"\x2\x67A\x67D\a\xB6\x2\x2\x67B\x67D\x5\xF6|\x2\x67C\x679\x3\x2\x2\x2\x67C"+
		"\x67A\x3\x2\x2\x2\x67C\x67B\x3\x2\x2\x2\x67D\x67E\x3\x2\x2\x2\x67E\x681"+
		"\x5\x114\x8B\x2\x67F\x680\a\xCA\x2\x2\x680\x682\x5\x114\x8B\x2\x681\x67F"+
		"\x3\x2\x2\x2\x681\x682\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683\x684\x5"+
		"\xA2R\x2\x684\xA1\x3\x2\x2\x2\x685\x690\x5\xA4S\x2\x686\x688\x5\x114\x8B"+
		"\x2\x687\x686\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688\x689\x3\x2\x2\x2"+
		"\x689\x68B\a)\x2\x2\x68A\x68C\x5\x114\x8B\x2\x68B\x68A\x3\x2\x2\x2\x68B"+
		"\x68C\x3\x2\x2\x2\x68C\x68D\x3\x2\x2\x2\x68D\x68F\x5\xA4S\x2\x68E\x687"+
		"\x3\x2\x2\x2\x68F\x692\x3\x2\x2\x2\x690\x68E\x3\x2\x2\x2\x690\x691\x3"+
		"\x2\x2\x2\x691\xA3\x3\x2\x2\x2\x692\x690\x3\x2\x2\x2\x693\x6A5\x5\xDE"+
		"p\x2\x694\x696\x5\x114\x8B\x2\x695\x694\x3\x2\x2\x2\x695\x696\x3\x2\x2"+
		"\x2\x696\x697\x3\x2\x2\x2\x697\x699\a\xD4\x2\x2\x698\x69A\x5\x114\x8B"+
		"\x2\x699\x698\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69F\x3\x2\x2\x2"+
		"\x69B\x69D\x5\xD8m\x2\x69C\x69E\x5\x114\x8B\x2\x69D\x69C\x3\x2\x2\x2\x69D"+
		"\x69E\x3\x2\x2\x2\x69E\x6A0\x3\x2\x2\x2\x69F\x69B\x3\x2\x2\x2\x69F\x6A0"+
		"\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A3\a\xDB\x2\x2\x6A2\x6A4\x5"+
		"\x114\x8B\x2\x6A3\x6A2\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A6\x3"+
		"\x2\x2\x2\x6A5\x695\x3\x2\x2\x2\x6A5\x6A6\x3\x2\x2\x2\x6A6\x6A8\x3\x2"+
		"\x2\x2\x6A7\x6A9\x5\xF4{\x2\x6A8\x6A7\x3\x2\x2\x2\x6A8\x6A9\x3\x2\x2\x2"+
		"\x6A9\x6AD\x3\x2\x2\x2\x6AA\x6AB\x5\x114\x8B\x2\x6AB\x6AC\x5\xE0q\x2\x6AC"+
		"\x6AE\x3\x2\x2\x2\x6AD\x6AA\x3\x2\x2\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE\xA5"+
		"\x3\x2\x2\x2\x6AF\x6B0\a\xC7\x2\x2\x6B0\x6B1\x5\x114\x8B\x2\x6B1\x6B2"+
		"\x5\x9CO\x2\x6B2\x6B4\x5\x100\x81\x2\x6B3\x6B5\x5\x1E\x10\x2\x6B4\x6B3"+
		"\x3\x2\x2\x2\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B6\x3\x2\x2\x2\x6B6\x6B7\a\xC6"+
		"\x2\x2\x6B7\xA7\x3\x2\x2\x2\x6B8\x6B9\a\xC8\x2\x2\x6B9\x6BA\x5\x114\x8B"+
		"\x2\x6BA\x6BC\x5\xB0Y\x2\x6BB\x6BD\x5\x114\x8B\x2\x6BC\x6BB\x3\x2\x2\x2"+
		"\x6BC\x6BD\x3\x2\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6C0\a)\x2\x2\x6BF\x6C1"+
		"\x5\x114\x8B\x2\x6C0\x6BF\x3\x2\x2\x2\x6C0\x6C1\x3\x2\x2\x2\x6C1\x6C2"+
		"\x3\x2\x2\x2\x6C2\x6C3\x5\x9CO\x2\x6C3\xA9\x3\x2\x2\x2\x6C4\x6C5\a\xC9"+
		"\x2\x2\x6C5\x6C6\x5\x114\x8B\x2\x6C6\x6C7\x5\xACW\x2\x6C7\x6C9\x5\x100"+
		"\x81\x2\x6C8\x6CA\x5\x1E\x10\x2\x6C9\x6C8\x3\x2\x2\x2\x6C9\x6CA\x3\x2"+
		"\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CC\a\x63\x2\x2\x6CC\xAB\x3\x2\x2\x2"+
		"\x6CD\x6CE\x5\x9CO\x2\x6CE\xAD\x3\x2\x2\x2\x6CF\x6D0\a\xCB\x2\x2\x6D0"+
		"\x6D1\x5\x114\x8B\x2\x6D1\x6D3\x5\xB0Y\x2\x6D2\x6D4\x5\x114\x8B\x2\x6D3"+
		"\x6D2\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6DA"+
		"\a)\x2\x2\x6D6\x6D8\x5\x114\x8B\x2\x6D7\x6D6\x3\x2\x2\x2\x6D7\x6D8\x3"+
		"\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x6DB\x5h\x35\x2\x6DA\x6D7\x3\x2\x2"+
		"\x2\x6DA\x6DB\x3\x2\x2\x2\x6DB\xAF\x3\x2\x2\x2\x6DC\x6DE\a.\x2\x2\x6DD"+
		"\x6DC\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E0"+
		"\x5\x9CO\x2\x6E0\xB1\x3\x2\x2\x2\x6E1\x6E2\a@\x2\x2\x6E2\x6E3\x5\x114"+
		"\x8B\x2\x6E3\x6E4\x5\xB4[\x2\x6E4\xB3\x3\x2\x2\x2\x6E5\x6E7\x5\xBC_\x2"+
		"\x6E6\x6E5\x3\x2\x2\x2\x6E6\x6E7\x3\x2\x2\x2\x6E7\x6E8\x3\x2\x2\x2\x6E8"+
		"\x6E9\a-\x2\x2\x6E9\x6EB\x5\xDEp\x2\x6EA\x6EC\x5\xF4{\x2\x6EB\x6EA\x3"+
		"\x2\x2\x2\x6EB\x6EC\x3\x2\x2\x2\x6EC\x6FA\x3\x2\x2\x2\x6ED\x6EF\x5\x114"+
		"\x8B\x2\x6EE\x6ED\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2"+
		"\x2\x6F0\x6F2\a\xD4\x2\x2\x6F1\x6F3\x5\x114\x8B\x2\x6F2\x6F1\x3\x2\x2"+
		"\x2\x6F2\x6F3\x3\x2\x2\x2\x6F3\x6F4\x3\x2\x2\x2\x6F4\x6F6\x5\xCCg\x2\x6F5"+
		"\x6F7\x5\x114\x8B\x2\x6F6\x6F5\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7"+
		"\x6F8\x3\x2\x2\x2\x6F8\x6F9\a\xDB\x2\x2\x6F9\x6FB\x3\x2\x2\x2\x6FA\x6EE"+
		"\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x705\x3\x2\x2\x2\x6FC\x6FE\x5"+
		"\x114\x8B\x2\x6FD\x6FC\x3\x2\x2\x2\x6FD\x6FE\x3\x2\x2\x2\x6FE\x6FF\x3"+
		"\x2\x2\x2\x6FF\x700\a\xD4\x2\x2\x700\x701\x5\xD8m\x2\x701\x702\a\xDB\x2"+
		"\x2\x702\x704\x3\x2\x2\x2\x703\x6FD\x3\x2\x2\x2\x704\x707\x3\x2\x2\x2"+
		"\x705\x703\x3\x2\x2\x2\x705\x706\x3\x2\x2\x2\x706\x728\x3\x2\x2\x2\x707"+
		"\x705\x3\x2\x2\x2\x708\x70A\x5\xDEp\x2\x709\x70B\x5\xF4{\x2\x70A\x709"+
		"\x3\x2\x2\x2\x70A\x70B\x3\x2\x2\x2\x70B\x719\x3\x2\x2\x2\x70C\x70E\x5"+
		"\x114\x8B\x2\x70D\x70C\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x3"+
		"\x2\x2\x2\x70F\x711\a\xD4\x2\x2\x710\x712\x5\x114\x8B\x2\x711\x710\x3"+
		"\x2\x2\x2\x711\x712\x3\x2\x2\x2\x712\x713\x3\x2\x2\x2\x713\x715\x5\xCC"+
		"g\x2\x714\x716\x5\x114\x8B\x2\x715\x714\x3\x2\x2\x2\x715\x716\x3\x2\x2"+
		"\x2\x716\x717\x3\x2\x2\x2\x717\x718\a\xDB\x2\x2\x718\x71A\x3\x2\x2\x2"+
		"\x719\x70D\x3\x2\x2\x2\x719\x71A\x3\x2\x2\x2\x71A\x724\x3\x2\x2\x2\x71B"+
		"\x71D\x5\x114\x8B\x2\x71C\x71B\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D"+
		"\x71E\x3\x2\x2\x2\x71E\x71F\a\xD4\x2\x2\x71F\x720\x5\xD8m\x2\x720\x721"+
		"\a\xDB\x2\x2\x721\x723\x3\x2\x2\x2\x722\x71C\x3\x2\x2\x2\x723\x726\x3"+
		"\x2\x2\x2\x724\x722\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x728\x3\x2"+
		"\x2\x2\x726\x724\x3\x2\x2\x2\x727\x6E6\x3\x2\x2\x2\x727\x708\x3\x2\x2"+
		"\x2\x728\xB5\x3\x2\x2\x2\x729\x72C\x5\xB8]\x2\x72A\x72C\x5\xBA^\x2\x72B"+
		"\x729\x3\x2\x2\x2\x72B\x72A\x3\x2\x2\x2\x72C\xB7\x3\x2\x2\x2\x72D\x72F"+
		"\x5\xBC_\x2\x72E\x72D\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x731\x3\x2"+
		"\x2\x2\x730\x732\x5\x114\x8B\x2\x731\x730\x3\x2\x2\x2\x731\x732\x3\x2"+
		"\x2\x2\x732\x733\x3\x2\x2\x2\x733\x735\a-\x2\x2\x734\x736\x5\x114\x8B"+
		"\x2\x735\x734\x3\x2\x2\x2\x735\x736\x3\x2\x2\x2\x736\x737\x3\x2\x2\x2"+
		"\x737\x739\x5\xDCo\x2\x738\x73A\x5\xF4{\x2\x739\x738\x3\x2\x2\x2\x739"+
		"\x73A\x3\x2\x2\x2\x73A\x73E\x3\x2\x2\x2\x73B\x73C\x5\x114\x8B\x2\x73C"+
		"\x73D\x5\xCCg\x2\x73D\x73F\x3\x2\x2\x2\x73E\x73B\x3\x2\x2\x2\x73E\x73F"+
		"\x3\x2\x2\x2\x73F\x744\x3\x2\x2\x2\x740\x742\x5\x114\x8B\x2\x741\x740"+
		"\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743\x745\x5"+
		"\xD0i\x2\x744\x741\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x74F\x3\x2\x2"+
		"\x2\x746\x748\x5\x114\x8B\x2\x747\x746\x3\x2\x2\x2\x747\x748\x3\x2\x2"+
		"\x2\x748\x749\x3\x2\x2\x2\x749\x74A\a\xD4\x2\x2\x74A\x74B\x5\xD8m\x2\x74B"+
		"\x74C\a\xDB\x2\x2\x74C\x74E\x3\x2\x2\x2\x74D\x747\x3\x2\x2\x2\x74E\x751"+
		"\x3\x2\x2\x2\x74F\x74D\x3\x2\x2\x2\x74F\x750\x3\x2\x2\x2\x750\xB9\x3\x2"+
		"\x2\x2\x751\x74F\x3\x2\x2\x2\x752\x756\x5\xDEp\x2\x753\x754\x5\x114\x8B"+
		"\x2\x754\x755\x5\xCCg\x2\x755\x757\x3\x2\x2\x2\x756\x753\x3\x2\x2\x2\x756"+
		"\x757\x3\x2\x2\x2\x757\x761\x3\x2\x2\x2\x758\x75A\x5\x114\x8B\x2\x759"+
		"\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75C"+
		"\a\xD4\x2\x2\x75C\x75D\x5\xD8m\x2\x75D\x75E\a\xDB\x2\x2\x75E\x760\x3\x2"+
		"\x2\x2\x75F\x759\x3\x2\x2\x2\x760\x763\x3\x2\x2\x2\x761\x75F\x3\x2\x2"+
		"\x2\x761\x762\x3\x2\x2\x2\x762\xBB\x3\x2\x2\x2\x763\x761\x3\x2\x2\x2\x764"+
		"\x769\x5\xC6\x64\x2\x765\x769\x5\xBE`\x2\x766\x769\x5\xC0\x61\x2\x767"+
		"\x769\x5\xCA\x66\x2\x768\x764\x3\x2\x2\x2\x768\x765\x3\x2\x2\x2\x768\x766"+
		"\x3\x2\x2\x2\x768\x767\x3\x2\x2\x2\x769\xBD\x3\x2\x2\x2\x76A\x76C\x5\xDE"+
		"p\x2\x76B\x76D\x5\xF4{\x2\x76C\x76B\x3\x2\x2\x2\x76C\x76D\x3\x2\x2\x2"+
		"\x76D\x772\x3\x2\x2\x2\x76E\x770\x5\x114\x8B\x2\x76F\x76E\x3\x2\x2\x2"+
		"\x76F\x770\x3\x2\x2\x2\x770\x771\x3\x2\x2\x2\x771\x773\x5\xD0i\x2\x772"+
		"\x76F\x3\x2\x2\x2\x772\x773\x3\x2\x2\x2\x773\x77D\x3\x2\x2\x2\x774\x776"+
		"\x5\x114\x8B\x2\x775\x774\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x777"+
		"\x3\x2\x2\x2\x777\x778\a\xD4\x2\x2\x778\x779\x5\xD8m\x2\x779\x77A\a\xDB"+
		"\x2\x2\x77A\x77C\x3\x2\x2\x2\x77B\x775\x3\x2\x2\x2\x77C\x77F\x3\x2\x2"+
		"\x2\x77D\x77B\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\xBF\x3\x2\x2\x2\x77F"+
		"\x77D\x3\x2\x2\x2\x780\x783\x5\xDEp\x2\x781\x783\x5\xE2r\x2\x782\x780"+
		"\x3\x2\x2\x2\x782\x781\x3\x2\x2\x2\x783\x785\x3\x2\x2\x2\x784\x786\x5"+
		"\xF4{\x2\x785\x784\x3\x2\x2\x2\x785\x786\x3\x2\x2\x2\x786\x788\x3\x2\x2"+
		"\x2\x787\x789\x5\x114\x8B\x2\x788\x787\x3\x2\x2\x2\x788\x789\x3\x2\x2"+
		"\x2\x789\x78A\x3\x2\x2\x2\x78A\x78C\a\xD4\x2\x2\x78B\x78D\x5\x114\x8B"+
		"\x2\x78C\x78B\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x792\x3\x2\x2\x2"+
		"\x78E\x790\x5\xCCg\x2\x78F\x791\x5\x114\x8B\x2\x790\x78F\x3\x2\x2\x2\x790"+
		"\x791\x3\x2\x2\x2\x791\x793\x3\x2\x2\x2\x792\x78E\x3\x2\x2\x2\x792\x793"+
		"\x3\x2\x2\x2\x793\x794\x3\x2\x2\x2\x794\x799\a\xDB\x2\x2\x795\x797\x5"+
		"\x114\x8B\x2\x796\x795\x3\x2\x2\x2\x796\x797\x3\x2\x2\x2\x797\x798\x3"+
		"\x2\x2\x2\x798\x79A\x5\xD0i\x2\x799\x796\x3\x2\x2\x2\x799\x79A\x3\x2\x2"+
		"\x2\x79A\x7A4\x3\x2\x2\x2\x79B\x79D\x5\x114\x8B\x2\x79C\x79B\x3\x2\x2"+
		"\x2\x79C\x79D\x3\x2\x2\x2\x79D\x79E\x3\x2\x2\x2\x79E\x79F\a\xD4\x2\x2"+
		"\x79F\x7A0\x5\xD8m\x2\x7A0\x7A1\a\xDB\x2\x2\x7A1\x7A3\x3\x2\x2\x2\x7A2"+
		"\x79C\x3\x2\x2\x2\x7A3\x7A6\x3\x2\x2\x2\x7A4\x7A2\x3\x2\x2\x2\x7A4\x7A5"+
		"\x3\x2\x2\x2\x7A5\xC1\x3\x2\x2\x2\x7A6\x7A4\x3\x2\x2\x2\x7A7\x7A9\x5\xDC"+
		"o\x2\x7A8\x7AA\x5\xF4{\x2\x7A9\x7A8\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2"+
		"\x7AA\x7AF\x3\x2\x2\x2\x7AB\x7AD\x5\x114\x8B\x2\x7AC\x7AB\x3\x2\x2\x2"+
		"\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE\x7B0\x5\xD0i\x2\x7AF"+
		"\x7AC\x3\x2\x2\x2\x7AF\x7B0\x3\x2\x2\x2\x7B0\x7BA\x3\x2\x2\x2\x7B1\x7B3"+
		"\x5\x114\x8B\x2\x7B2\x7B1\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B4"+
		"\x3\x2\x2\x2\x7B4\x7B5\a\xD4\x2\x2\x7B5\x7B6\x5\xD8m\x2\x7B6\x7B7\a\xDB"+
		"\x2\x2\x7B7\x7B9\x3\x2\x2\x2\x7B8\x7B2\x3\x2\x2\x2\x7B9\x7BC\x3\x2\x2"+
		"\x2\x7BA\x7B8\x3\x2\x2\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB\xC3\x3\x2\x2\x2\x7BC"+
		"\x7BA\x3\x2\x2\x2\x7BD\x7C0\x5\xDCo\x2\x7BE\x7C0\x5\xE2r\x2\x7BF\x7BD"+
		"\x3\x2\x2\x2\x7BF\x7BE\x3\x2\x2\x2\x7C0\x7C2\x3\x2\x2\x2\x7C1\x7C3\x5"+
		"\xF4{\x2\x7C2\x7C1\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2\x7C3\x7C5\x3\x2\x2"+
		"\x2\x7C4\x7C6\x5\x114\x8B\x2\x7C5\x7C4\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2"+
		"\x2\x7C6\x7C7\x3\x2\x2\x2\x7C7\x7C9\a\xD4\x2\x2\x7C8\x7CA\x5\x114\x8B"+
		"\x2\x7C9\x7C8\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CF\x3\x2\x2\x2"+
		"\x7CB\x7CD\x5\xCCg\x2\x7CC\x7CE\x5\x114\x8B\x2\x7CD\x7CC\x3\x2\x2\x2\x7CD"+
		"\x7CE\x3\x2\x2\x2\x7CE\x7D0\x3\x2\x2\x2\x7CF\x7CB\x3\x2\x2\x2\x7CF\x7D0"+
		"\x3\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1\x7D6\a\xDB\x2\x2\x7D2\x7D4\x5"+
		"\x114\x8B\x2\x7D3\x7D2\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D5\x3"+
		"\x2\x2\x2\x7D5\x7D7\x5\xD0i\x2\x7D6\x7D3\x3\x2\x2\x2\x7D6\x7D7\x3\x2\x2"+
		"\x2\x7D7\x7E1\x3\x2\x2\x2\x7D8\x7DA\x5\x114\x8B\x2\x7D9\x7D8\x3\x2\x2"+
		"\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7DB\x3\x2\x2\x2\x7DB\x7DC\a\xD4\x2\x2"+
		"\x7DC\x7DD\x5\xD8m\x2\x7DD\x7DE\a\xDB\x2\x2\x7DE\x7E0\x3\x2\x2\x2\x7DF"+
		"\x7D9\x3\x2\x2\x2\x7E0\x7E3\x3\x2\x2\x2\x7E1\x7DF\x3\x2\x2\x2\x7E1\x7E2"+
		"\x3\x2\x2\x2\x7E2\xC5\x3\x2\x2\x2\x7E3\x7E1\x3\x2\x2\x2\x7E4\x7E7\x5\xBE"+
		"`\x2\x7E5\x7E7\x5\xC0\x61\x2\x7E6\x7E4\x3\x2\x2\x2\x7E6\x7E5\x3\x2\x2"+
		"\x2\x7E6\x7E7\x3\x2\x2\x2\x7E7\x7EC\x3\x2\x2\x2\x7E8\x7EA\x5\xC8\x65\x2"+
		"\x7E9\x7EB\x5\x114\x8B\x2\x7EA\x7E9\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2\x2"+
		"\x7EB\x7ED\x3\x2\x2\x2\x7EC\x7E8\x3\x2\x2\x2\x7ED\x7EE\x3\x2\x2\x2\x7EE"+
		"\x7EC\x3\x2\x2\x2\x7EE\x7EF\x3\x2\x2\x2\x7EF\x7F4\x3\x2\x2\x2\x7F0\x7F2"+
		"\x5\x114\x8B\x2\x7F1\x7F0\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x7F3"+
		"\x3\x2\x2\x2\x7F3\x7F5\x5\xD0i\x2\x7F4\x7F1\x3\x2\x2\x2\x7F4\x7F5\x3\x2"+
		"\x2\x2\x7F5\x7FF\x3\x2\x2\x2\x7F6\x7F8\x5\x114\x8B\x2\x7F7\x7F6\x3\x2"+
		"\x2\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8\x7F9\x3\x2\x2\x2\x7F9\x7FA\a\xD4\x2"+
		"\x2\x7FA\x7FB\x5\xD8m\x2\x7FB\x7FC\a\xDB\x2\x2\x7FC\x7FE\x3\x2\x2\x2\x7FD"+
		"\x7F7\x3\x2\x2\x2\x7FE\x801\x3\x2\x2\x2\x7FF\x7FD\x3\x2\x2\x2\x7FF\x800"+
		"\x3\x2\x2\x2\x800\xC7\x3\x2\x2\x2\x801\x7FF\x3\x2\x2\x2\x802\x804\t\xF"+
		"\x2\x2\x803\x805\x5\x114\x8B\x2\x804\x803\x3\x2\x2\x2\x804\x805\x3\x2"+
		"\x2\x2\x805\x808\x3\x2\x2\x2\x806\x809\x5\xC2\x62\x2\x807\x809\x5\xC4"+
		"\x63\x2\x808\x806\x3\x2\x2\x2\x808\x807\x3\x2\x2\x2\x809\xC9\x3\x2\x2"+
		"\x2\x80A\x80C\x5\x114\x8B\x2\x80B\x80A\x3\x2\x2\x2\x80B\x80C\x3\x2\x2"+
		"\x2\x80C\x80D\x3\x2\x2\x2\x80D\x80E\x5\xD0i\x2\x80E\xCB\x3\x2\x2\x2\x80F"+
		"\x811\x5\xCEh\x2\x810\x80F\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x813"+
		"\x3\x2\x2\x2\x812\x814\x5\x114\x8B\x2\x813\x812\x3\x2\x2\x2\x813\x814"+
		"\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815\x817\t\n\x2\x2\x816\x818\x5\x114"+
		"\x8B\x2\x817\x816\x3\x2\x2\x2\x817\x818\x3\x2\x2\x2\x818\x81A\x3\x2\x2"+
		"\x2\x819\x810\x3\x2\x2\x2\x81A\x81D\x3\x2\x2\x2\x81B\x819\x3\x2\x2\x2"+
		"\x81B\x81C\x3\x2\x2\x2\x81C\x81E\x3\x2\x2\x2\x81D\x81B\x3\x2\x2\x2\x81E"+
		"\x82B\x5\xCEh\x2\x81F\x821\x5\x114\x8B\x2\x820\x81F\x3\x2\x2\x2\x820\x821"+
		"\x3\x2\x2\x2\x821\x822\x3\x2\x2\x2\x822\x824\t\n\x2\x2\x823\x825\x5\x114"+
		"\x8B\x2\x824\x823\x3\x2\x2\x2\x824\x825\x3\x2\x2\x2\x825\x827\x3\x2\x2"+
		"\x2\x826\x828\x5\xCEh\x2\x827\x826\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828"+
		"\x82A\x3\x2\x2\x2\x829\x820\x3\x2\x2\x2\x82A\x82D\x3\x2\x2\x2\x82B\x829"+
		"\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\xCD\x3\x2\x2\x2\x82D\x82B\x3\x2"+
		"\x2\x2\x82E\x830\a\xD4\x2\x2\x82F\x82E\x3\x2\x2\x2\x82F\x830\x3\x2\x2"+
		"\x2\x830\x833\x3\x2\x2\x2\x831\x832\t\x10\x2\x2\x832\x834\x5\x114\x8B"+
		"\x2\x833\x831\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2\x834\x836\x3\x2\x2\x2"+
		"\x835\x837\a\xDB\x2\x2\x836\x835\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2\x837"+
		"\x838\x3\x2\x2\x2\x838\x839\x5\x9CO\x2\x839\xCF\x3\x2\x2\x2\x83A\x83C"+
		"\a,\x2\x2\x83B\x83D\x5\x114\x8B\x2\x83C\x83B\x3\x2\x2\x2\x83C\x83D\x3"+
		"\x2\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x840\x5\xDCo\x2\x83F\x841\x5\xF4"+
		"{\x2\x840\x83F\x3\x2\x2\x2\x840\x841\x3\x2\x2\x2\x841\xD1\x3\x2\x2\x2"+
		"\x842\x854\a\xD4\x2\x2\x843\x845\x5\x114\x8B\x2\x844\x843\x3\x2\x2\x2"+
		"\x844\x845\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x851\x5\xD4k\x2\x847"+
		"\x849\x5\x114\x8B\x2\x848\x847\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2\x849"+
		"\x84A\x3\x2\x2\x2\x84A\x84C\a)\x2\x2\x84B\x84D\x5\x114\x8B\x2\x84C\x84B"+
		"\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84E\x3\x2\x2\x2\x84E\x850\x5"+
		"\xD4k\x2\x84F\x848\x3\x2\x2\x2\x850\x853\x3\x2\x2\x2\x851\x84F\x3\x2\x2"+
		"\x2\x851\x852\x3\x2\x2\x2\x852\x855\x3\x2\x2\x2\x853\x851\x3\x2\x2\x2"+
		"\x854\x844\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\x857\x3\x2\x2\x2\x856"+
		"\x858\x5\x114\x8B\x2\x857\x856\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858"+
		"\x859\x3\x2\x2\x2\x859\x85A\a\xDB\x2\x2\x85A\xD3\x3\x2\x2\x2\x85B\x85C"+
		"\a\x95\x2\x2\x85C\x85E\x5\x114\x8B\x2\x85D\x85B\x3\x2\x2\x2\x85D\x85E"+
		"\x3\x2\x2\x2\x85E\x861\x3\x2\x2\x2\x85F\x860\t\x11\x2\x2\x860\x862\x5"+
		"\x114\x8B\x2\x861\x85F\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2\x862\x865\x3"+
		"\x2\x2\x2\x863\x864\a\x9C\x2\x2\x864\x866\x5\x114\x8B\x2\x865\x863\x3"+
		"\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x867\x3\x2\x2\x2\x867\x869\x5\xDC"+
		"o\x2\x868\x86A\x5\xF4{\x2\x869\x868\x3\x2\x2\x2\x869\x86A\x3\x2\x2\x2"+
		"\x86A\x873\x3\x2\x2\x2\x86B\x86D\x5\x114\x8B\x2\x86C\x86B\x3\x2\x2\x2"+
		"\x86C\x86D\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E\x870\a\xD4\x2\x2\x86F"+
		"\x871\x5\x114\x8B\x2\x870\x86F\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871"+
		"\x872\x3\x2\x2\x2\x872\x874\a\xDB\x2\x2\x873\x86C\x3\x2\x2\x2\x873\x874"+
		"\x3\x2\x2\x2\x874\x879\x3\x2\x2\x2\x875\x877\x5\x114\x8B\x2\x876\x875"+
		"\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\x87A\x5"+
		"\xE0q\x2\x879\x876\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\x87F\x3\x2\x2"+
		"\x2\x87B\x87D\x5\x114\x8B\x2\x87C\x87B\x3\x2\x2\x2\x87C\x87D\x3\x2\x2"+
		"\x2\x87D\x87E\x3\x2\x2\x2\x87E\x880\x5\xD6l\x2\x87F\x87C\x3\x2\x2\x2\x87F"+
		"\x880\x3\x2\x2\x2\x880\xD5\x3\x2\x2\x2\x881\x883\a\xD0\x2\x2\x882\x884"+
		"\x5\x114\x8B\x2\x883\x882\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884\x885"+
		"\x3\x2\x2\x2\x885\x886\x5\x9CO\x2\x886\xD7\x3\x2\x2\x2\x887\x892\x5\xDA"+
		"n\x2\x888\x88A\x5\x114\x8B\x2\x889\x888\x3\x2\x2\x2\x889\x88A\x3\x2\x2"+
		"\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88D\a)\x2\x2\x88C\x88E\x5\x114\x8B\x2"+
		"\x88D\x88C\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x88F\x3\x2\x2\x2\x88F"+
		"\x891\x5\xDAn\x2\x890\x889\x3\x2\x2\x2\x891\x894\x3\x2\x2\x2\x892\x890"+
		"\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\xD9\x3\x2\x2\x2\x894\x892\x3\x2"+
		"\x2\x2\x895\x896\x5\x9CO\x2\x896\x897\x5\x114\x8B\x2\x897\x898\a\xBE\x2"+
		"\x2\x898\x899\x5\x114\x8B\x2\x899\x89B\x3\x2\x2\x2\x89A\x895\x3\x2\x2"+
		"\x2\x89A\x89B\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2\x89C\x89D\x5\x9CO\x2\x89D"+
		"\xDB\x3\x2\x2\x2\x89E\x8A2\x5\xDEp\x2\x89F\x8A2\x5\xFC\x7F\x2\x8A0\x8A2"+
		"\x5\xFA~\x2\x8A1\x89E\x3\x2\x2\x2\x8A1\x89F\x3\x2\x2\x2\x8A1\x8A0\x3\x2"+
		"\x2\x2\x8A2\xDD\x3\x2\x2\x2\x8A3\x8A6\a\xEE\x2\x2\x8A4\x8A6\x5\xF8}\x2"+
		"\x8A5\x8A3\x3\x2\x2\x2\x8A5\x8A4\x3\x2\x2\x2\x8A6\xDF\x3\x2\x2\x2\x8A7"+
		"\x8A9\a\x39\x2\x2\x8A8\x8AA\x5\x114\x8B\x2\x8A9\x8A8\x3\x2\x2\x2\x8A9"+
		"\x8AA\x3\x2\x2\x2\x8AA\x8AD\x3\x2\x2\x2\x8AB\x8AC\a\x8D\x2\x2\x8AC\x8AE"+
		"\x5\x114\x8B\x2\x8AD\x8AB\x3\x2\x2\x2\x8AD\x8AE\x3\x2\x2\x2\x8AE\x8AF"+
		"\x3\x2\x2\x2\x8AF\x8B4\x5\xF2z\x2\x8B0\x8B2\x5\x114\x8B\x2\x8B1\x8B0\x3"+
		"\x2\x2\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8B5\x5\xE8"+
		"u\x2\x8B4\x8B1\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\xE1\x3\x2\x2\x2"+
		"\x8B6\x8B7\t\x12\x2\x2\x8B7\xE3\x3\x2\x2\x2\x8B8\x8B9\t\xE\x2\x2\x8B9"+
		"\xE5\x3\x2\x2\x2\x8BA\x8BF\x5\xDEp\x2\x8BB\x8BC\t\xF\x2\x2\x8BC\x8BE\x5"+
		"\xDEp\x2\x8BD\x8BB\x3\x2\x2\x2\x8BE\x8C1\x3\x2\x2\x2\x8BF\x8BD\x3\x2\x2"+
		"\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\xE7\x3\x2\x2\x2\x8C1\x8BF\x3\x2\x2\x2\x8C2"+
		"\x8C4\a\xD7\x2\x2\x8C3\x8C5\x5\x114\x8B\x2\x8C4\x8C3\x3\x2\x2\x2\x8C4"+
		"\x8C5\x3\x2\x2\x2\x8C5\x8C8\x3\x2\x2\x2\x8C6\x8C9\x5\xF0y\x2\x8C7\x8C9"+
		"\x5\xDEp\x2\x8C8\x8C6\x3\x2\x2\x2\x8C8\x8C7\x3\x2\x2\x2\x8C9\xE9\x3\x2"+
		"\x2\x2\x8CA\x8D3\x5\xDEp\x2\x8CB\x8CD\x5\x114\x8B\x2\x8CC\x8CB\x3\x2\x2"+
		"\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8D0\a\xD6\x2\x2"+
		"\x8CF\x8D1\x5\x114\x8B\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0\x8D1\x3\x2\x2\x2"+
		"\x8D1\x8D2\x3\x2\x2\x2\x8D2\x8D4\x5\xDEp\x2\x8D3\x8CC\x3\x2\x2\x2\x8D3"+
		"\x8D4\x3\x2\x2\x2\x8D4\xEB\x3\x2\x2\x2\x8D5\x8D8\x5\xDEp\x2\x8D6\x8D8"+
		"\x5\xF0y\x2\x8D7\x8D5\x3\x2\x2\x2\x8D7\x8D6\x3\x2\x2\x2\x8D8\x8D9\x3\x2"+
		"\x2\x2\x8D9\x8DA\a*\x2\x2\x8DA\xED\x3\x2\x2\x2\x8DB\x8E4\x5\xF0y\x2\x8DC"+
		"\x8E4\a\xE8\x2\x2\x8DD\x8E4\a\xE3\x2\x2\x8DE\x8E4\a\xBF\x2\x2\x8DF\x8E4"+
		"\ao\x2\x2\x8E0\x8E4\a\x8F\x2\x2\x8E1\x8E4\a\x90\x2\x2\x8E2\x8E4\a[\x2"+
		"\x2\x8E3\x8DB\x3\x2\x2\x2\x8E3\x8DC\x3\x2\x2\x2\x8E3\x8DD\x3\x2\x2\x2"+
		"\x8E3\x8DE\x3\x2\x2\x2\x8E3\x8DF\x3\x2\x2\x2\x8E3\x8E0\x3\x2\x2\x2\x8E3"+
		"\x8E1\x3\x2\x2\x2\x8E3\x8E2\x3\x2\x2\x2\x8E4\xEF\x3\x2\x2\x2\x8E5\x8E6"+
		"\t\x13\x2\x2\x8E6\xF1\x3\x2\x2\x2\x8E7\x8EA\x5\xE2r\x2\x8E8\x8EA\x5\xE6"+
		"t\x2\x8E9\x8E7\x3\x2\x2\x2\x8E9\x8E8\x3\x2\x2\x2\x8EA\x8F3\x3\x2\x2\x2"+
		"\x8EB\x8ED\x5\x114\x8B\x2\x8EC\x8EB\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2"+
		"\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8F0\a\xD4\x2\x2\x8EF\x8F1\x5\x114\x8B\x2"+
		"\x8F0\x8EF\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2"+
		"\x8F4\a\xDB\x2\x2\x8F3\x8EC\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2\x2\x8F4\xF3"+
		"\x3\x2\x2\x2\x8F5\x8F6\t\x14\x2\x2\x8F6\xF5\x3\x2\x2\x2\x8F7\x8F8\t\x15"+
		"\x2\x2\x8F8\xF7\x3\x2\x2\x2\x8F9\x8FA\t\x16\x2\x2\x8FA\xF9\x3\x2\x2\x2"+
		"\x8FB\x8FC\a\x39\x2\x2\x8FC\xFB\x3\x2\x2\x2\x8FD\x8FE\t\x17\x2\x2\x8FE"+
		"\xFD\x3\x2\x2\x2\x8FF\x901\x5\x114\x8B\x2\x900\x8FF\x3\x2\x2\x2\x900\x901"+
		"\x3\x2\x2\x2\x901\x903\x3\x2\x2\x2\x902\x904\x5\x102\x82\x2\x903\x902"+
		"\x3\x2\x2\x2\x903\x904\x3\x2\x2\x2\x904\xFF\x3\x2\x2\x2\x905\x906\x5\xFE"+
		"\x80\x2\x906\x908\a\xE9\x2\x2\x907\x909\x5\x114\x8B\x2\x908\x907\x3\x2"+
		"\x2\x2\x908\x909\x3\x2\x2\x2\x909\x912\x3\x2\x2\x2\x90A\x90C\x5\x114\x8B"+
		"\x2\x90B\x90A\x3\x2\x2\x2\x90B\x90C\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2"+
		"\x90D\x90F\a*\x2\x2\x90E\x910\x5\x114\x8B\x2\x90F\x90E\x3\x2\x2\x2\x90F"+
		"\x910\x3\x2\x2\x2\x910\x912\x3\x2\x2\x2\x911\x905\x3\x2\x2\x2\x911\x90B"+
		"\x3\x2\x2\x2\x912\x914\x3\x2\x2\x2\x913\x911\x3\x2\x2\x2\x914\x917\x3"+
		"\x2\x2\x2\x915\x913\x3\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916\x91C\x3\x2"+
		"\x2\x2\x917\x915\x3\x2\x2\x2\x918\x919\x5\xFE\x80\x2\x919\x91A\a\x2\x2"+
		"\x3\x91A\x91C\x3\x2\x2\x2\x91B\x915\x3\x2\x2\x2\x91B\x918\x3\x2\x2\x2"+
		"\x91C\x101\x3\x2\x2\x2\x91D\x921\x5\x10A\x86\x2\x91E\x921\x5\x106\x84"+
		"\x2\x91F\x921\x5\x104\x83\x2\x920\x91D\x3\x2\x2\x2\x920\x91E\x3\x2\x2"+
		"\x2\x920\x91F\x3\x2\x2\x2\x921\x103\x3\x2\x2\x2\x922\x924\a\xAB\x2\x2"+
		"\x923\x925\x5\x114\x8B\x2\x924\x923\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2"+
		"\x925\x926\x3\x2\x2\x2\x926\x927\x5\x108\x85\x2\x927\x105\x3\x2\x2\x2"+
		"\x928\x929\a\xEA\x2\x2\x929\x92A\x5\x108\x85\x2\x92A\x107\x3\x2\x2\x2"+
		"\x92B\x92E\a\xEF\x2\x2\x92C\x92E\n\x18\x2\x2\x92D\x92B\x3\x2\x2\x2\x92D"+
		"\x92C\x3\x2\x2\x2\x92E\x931\x3\x2\x2\x2\x92F\x92D\x3\x2\x2\x2\x92F\x930"+
		"\x3\x2\x2\x2\x930\x109\x3\x2\x2\x2\x931\x92F\x3\x2\x2\x2\x932\x938\a\xEA"+
		"\x2\x2\x933\x934\a/\x2\x2\x934\x936\x5\x10C\x87\x2\x935\x937\x5\x114\x8B"+
		"\x2\x936\x935\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937\x939\x3\x2\x2\x2"+
		"\x938\x933\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2\x93A\x938\x3\x2\x2\x2\x93A"+
		"\x93B\x3\x2\x2\x2\x93B\x10B\x3\x2\x2\x2\x93C\x93E\x5\x10E\x88\x2\x93D"+
		"\x93F\x5\x110\x89\x2\x93E\x93D\x3\x2\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F"+
		"\x10D\x3\x2\x2\x2\x940\x941\x5\xDCo\x2\x941\x10F\x3\x2\x2\x2\x942\x943"+
		"\x5\x114\x8B\x2\x943\x944\x5\x112\x8A\x2\x944\x977\x3\x2\x2\x2\x945\x946"+
		"\x5\x114\x8B\x2\x946\x94F\x5\x112\x8A\x2\x947\x949\x5\x114\x8B\x2\x948"+
		"\x947\x3\x2\x2\x2\x948\x949\x3\x2\x2\x2\x949\x94A\x3\x2\x2\x2\x94A\x94C"+
		"\a)\x2\x2\x94B\x94D\x5\x114\x8B\x2\x94C\x94B\x3\x2\x2\x2\x94C\x94D\x3"+
		"\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E\x950\x5\x112\x8A\x2\x94F\x948\x3"+
		"\x2\x2\x2\x950\x951\x3\x2\x2\x2\x951\x94F\x3\x2\x2\x2\x951\x952\x3\x2"+
		"\x2\x2\x952\x977\x3\x2\x2\x2\x953\x955\x5\x114\x8B\x2\x954\x953\x3\x2"+
		"\x2\x2\x954\x955\x3\x2\x2\x2\x955\x956\x3\x2\x2\x2\x956\x958\a\xD4\x2"+
		"\x2\x957\x959\x5\x114\x8B\x2\x958\x957\x3\x2\x2\x2\x958\x959\x3\x2\x2"+
		"\x2\x959\x95A\x3\x2\x2\x2\x95A\x95C\x5\x112\x8A\x2\x95B\x95D\x5\x114\x8B"+
		"\x2\x95C\x95B\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x95E\x3\x2\x2\x2"+
		"\x95E\x95F\a\xDB\x2\x2\x95F\x977\x3\x2\x2\x2\x960\x962\x5\x114\x8B\x2"+
		"\x961\x960\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\x963\x3\x2\x2\x2\x963"+
		"\x964\a\xD4\x2\x2\x964\x96D\x5\x112\x8A\x2\x965\x967\x5\x114\x8B\x2\x966"+
		"\x965\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967\x968\x3\x2\x2\x2\x968\x96A"+
		"\a)\x2\x2\x969\x96B\x5\x114\x8B\x2\x96A\x969\x3\x2\x2\x2\x96A\x96B\x3"+
		"\x2\x2\x2\x96B\x96C\x3\x2\x2\x2\x96C\x96E\x5\x112\x8A\x2\x96D\x966\x3"+
		"\x2\x2\x2\x96E\x96F\x3\x2\x2\x2\x96F\x96D\x3\x2\x2\x2\x96F\x970\x3\x2"+
		"\x2\x2\x970\x972\x3\x2\x2\x2\x971\x973\x5\x114\x8B\x2\x972\x971\x3\x2"+
		"\x2\x2\x972\x973\x3\x2\x2\x2\x973\x974\x3\x2\x2\x2\x974\x975\a\xDB\x2"+
		"\x2\x975\x977\x3\x2\x2\x2\x976\x942\x3\x2\x2\x2\x976\x945\x3\x2\x2\x2"+
		"\x976\x954\x3\x2\x2\x2\x976\x961\x3\x2\x2\x2\x977\x111\x3\x2\x2\x2\x978"+
		"\x979\x5\x9CO\x2\x979\x113\x3\x2\x2\x2\x97A\x97C\t\x19\x2\x2\x97B\x97A"+
		"\x3\x2\x2\x2\x97C\x97D\x3\x2\x2\x2\x97D\x97B\x3\x2\x2\x2\x97D\x97E\x3"+
		"\x2\x2\x2\x97E\x115\x3\x2\x2\x2\x1A4\x119\x11F\x122\x126\x12A\x12E\x136"+
		"\x139\x143\x145\x14B\x153\x15A\x160\x169\x171\x180\x18A\x192\x19C\x1A2"+
		"\x1A6\x1AA\x1AE\x1B3\x1C0\x1F3\x1F9\x1FD\x202\x205\x20A\x210\x214\x219"+
		"\x21E\x223\x226\x22A\x231\x237\x23B\x23E\x243\x24E\x251\x254\x259\x25F"+
		"\x263\x268\x26E\x279\x280\x288\x28D\x296\x29D\x2A1\x2A4\x2AC\x2B0\x2B5"+
		"\x2BF\x2C5\x2D6\x2DC\x2E2\x2E6\x2F2\x2F6\x2FC\x301\x305\x309\x30D\x310"+
		"\x313\x316\x319\x31D\x327\x32B\x32E\x331\x335\x34D\x353\x357\x35B\x364"+
		"\x36F\x374\x37E\x382\x387\x38B\x38F\x393\x39B\x39F\x3A7\x3AB\x3B3\x3B5"+
		"\x3BB\x3BF\x3C5\x3C9\x3CD\x3DB\x3E5\x3E9\x3EE\x3F9\x3FD\x402\x411\x416"+
		"\x41F\x423\x427\x42B\x42F\x432\x436\x43A\x43D\x441\x444\x448\x44A\x44F"+
		"\x453\x457\x45B\x45D\x463\x467\x46A\x46F\x473\x479\x47C\x47F\x484\x488"+
		"\x48F\x493\x499\x49C\x4A0\x4A7\x4AB\x4B1\x4B4\x4B8\x4C0\x4C4\x4C7\x4CA"+
		"\x4CE\x4D6\x4DA\x4DE\x4E0\x4E3\x4E9\x4ED\x4F1\x4F6\x4FB\x4FF\x503\x509"+
		"\x511\x513\x51B\x51F\x529\x52D\x53A\x541\x545\x550\x557\x55C\x560\x565"+
		"\x568\x56E\x572\x579\x57D\x581\x585\x588\x58C\x595\x59E\x5A5\x5A9\x5AC"+
		"\x5AF\x5B2\x5B7\x5BF\x5C3\x5CB\x5CD\x5D2\x5D7\x5DC\x5E0\x5E6\x5EB\x5F2"+
		"\x5F6\x5FC\x600\x604\x609\x60D\x612\x616\x61B\x61F\x624\x628\x62D\x631"+
		"\x636\x63A\x63F\x643\x648\x64C\x651\x655\x65A\x65E\x663\x667\x66A\x66C"+
		"\x677\x67C\x681\x687\x68B\x690\x695\x699\x69D\x69F\x6A3\x6A5\x6A8\x6AD"+
		"\x6B4\x6BC\x6C0\x6C9\x6D3\x6D7\x6DA\x6DD\x6E6\x6EB\x6EE\x6F2\x6F6\x6FA"+
		"\x6FD\x705\x70A\x70D\x711\x715\x719\x71C\x724\x727\x72B\x72E\x731\x735"+
		"\x739\x73E\x741\x744\x747\x74F\x756\x759\x761\x768\x76C\x76F\x772\x775"+
		"\x77D\x782\x785\x788\x78C\x790\x792\x796\x799\x79C\x7A4\x7A9\x7AC\x7AF"+
		"\x7B2\x7BA\x7BF\x7C2\x7C5\x7C9\x7CD\x7CF\x7D3\x7D6\x7D9\x7E1\x7E6\x7EA"+
		"\x7EE\x7F1\x7F4\x7F7\x7FF\x804\x808\x80B\x810\x813\x817\x81B\x820\x824"+
		"\x827\x82B\x82F\x833\x836\x83C\x840\x844\x848\x84C\x851\x854\x857\x85D"+
		"\x861\x865\x869\x86C\x870\x873\x876\x879\x87C\x87F\x883\x889\x88D\x892"+
		"\x89A\x8A1\x8A5\x8A9\x8AD\x8B1\x8B4\x8BF\x8C4\x8C8\x8CC\x8D0\x8D3\x8D7"+
		"\x8E3\x8E9\x8EC\x8F0\x8F3\x900\x903\x908\x90B\x90F\x911\x915\x91B\x920"+
		"\x924\x92D\x92F\x936\x93A\x93E\x948\x94C\x951\x954\x958\x95C\x961\x966"+
		"\x96A\x96F\x972\x976\x97D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
