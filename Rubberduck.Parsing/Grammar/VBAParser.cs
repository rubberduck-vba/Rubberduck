//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Mathieu\Documents\GitHub\Rubberduck\Rubberduck.Parsing\Grammar\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=158, ELSEIF=88, CBYTE=7, CLOSE=65, STATIC=182, MINUS=214, OPTION_EXPLICIT=151, 
		L_SQUARE_BRACKET=220, DOEVENTS=23, DATELITERAL=227, ERROR=102, NOTHING=142, 
		EACH=86, SUB=186, STOP=184, LPAREN=212, MID=136, CVERR=21, AS=55, END_PROPERTY=93, 
		AT=45, DATABASE=67, GOSUB=115, CSNG=17, POW=218, DOLLAR=47, PROPERTY_LET=161, 
		THEN=189, XOR=204, EXIT_FOR=105, DEFINT=75, UNLOCK=194, CALL=62, LOCK_READ=131, 
		SET=178, BF=5, LOCK_READ_WRITE=133, ABS=1, LSET=134, RAISEEVENT=167, SEEK=176, 
		LONG=125, CBOOL=6, LIB=128, DIM=83, APPEND=54, OPEN=148, DIV=206, PROPERTY_SET=162, 
		CDBL=10, PERCENT=46, END_SELECT=94, STRING=185, SGN=37, REM=171, TO=190, 
		DEFDBL=73, BYVAL=59, FRIEND=110, LOOP=126, CLASS=64, DO=84, VARIANT=196, 
		END_WITH=97, DEFBOOL=70, OPTIONAL=149, ADDRESSOF=50, CONST=66, RSET=175, 
		INTEGER=123, CDEC=11, ATTRIBUTE=53, OUTPUT=155, FOR=111, PTRSAFE=163, 
		EQ=208, BOOLEAN=58, CIRCLE=13, NAME=138, END_FUNCTION=91, DEFSNG=80, DEFBYTE=71, 
		NOT=141, CINT=12, END=98, PRESERVE=157, ON_LOCAL_ERROR=147, FLOATLITERAL=225, 
		BINARY=57, B_CHAR=4, LENB=30, RETURN=174, EXCLAMATIONPOINT=42, NEXT=139, 
		GLOBAL=114, INPUTB=26, IDENTIFIER=233, WS=231, EMPTY=89, CURRENCY=19, 
		CCUR=8, MOD=137, WITHEVENTS=202, COLON=40, DEFLNGLNG=77, STEP=183, OPTION_BASE=150, 
		GT=210, PUT=165, WITH=201, CSTR=18, LOCK_WRITE=132, LINE_CONTINUATION=234, 
		TYPEOF=193, DEFVAR=82, DEFLNG=76, UBOUND=38, FALSE=109, ERRORCHAR=235, 
		UNDERSCORE=230, INTEGERLITERAL=226, END_IF=92, LOCK=124, TEXT=188, SINGLEQUOTE=229, 
		MULT=215, SEMICOLON=41, BYTE=61, HEXLITERAL=224, ELSE=87, IF=117, TYPE=192, 
		AMPERSAND=48, DEFLNGPTR=78, ENUM=99, DEFOBJ=79, IN=120, OPTION=34, DOT=43, 
		EXIT_DO=104, GUIDLITERAL=232, IS=122, EQV=100, WEND=198, FUNCTION=112, 
		HASH=44, CASE=63, GEQ=209, GET=113, PUBLIC=164, ON_ERROR=146, EXIT=24, 
		MIDB=33, END_ENUM=90, GOTO=116, INTDIV=207, LONGPTR=32, WIDTH=200, BEGIN=56, 
		EXIT_SUB=108, ASSIGN=205, WRITE=203, DOUBLE=85, EXIT_PROPERTY=107, COMMA=39, 
		RANDOM=166, PROPERTY_GET=160, SELECT=177, PRIVATE=159, ERASE=101, TAB=187, 
		BYREF=60, VERSION=197, NEQ=216, END_TYPE=96, NEW=140, ARRAY=3, INPUT=121, 
		SINGLE=180, ALIAS=51, SPC=181, LT=213, RESET=172, END_SUB=95, EVENT=103, 
		READ_WRITE=169, OPTION_COMPARE=152, ME=135, SCALE=36, CDATE=9, NULL=143, 
		NEWLINE=228, TRUE=191, RPAREN=219, OBJECT=144, IMP=118, STRINGLITERAL=222, 
		OCTLITERAL=223, READ=168, DATE=68, LIKE=129, AND=52, OPTION_PRIVATE_MODULE=153, 
		CLNGLNG=15, PLUS=217, ANY=2, RESUME=173, INT=27, SHARED=179, EXIT_FUNCTION=106, 
		PSET=35, ACCESS=49, LINE_INPUT=130, ON=145, OR=154, PARAMARRAY=156, LBOUND=28, 
		R_SQUARE_BRACKET=221, IMPLEMENTS=119, UNTIL=195, DEBUG=22, DEFCUR=74, 
		CLNGPTR=16, LONGLONG=31, DECLARE=69, DEFDATE=72, FIX=25, LEN=29, REDIM=170, 
		LEQ=211, DEFSTR=81, LET=127, WHILE=199, CVAR=20, CLNG=14;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "B_CHAR", "BF", "CBOOL", "CBYTE", 
		"CCUR", "CDATE", "CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", 
		"CLNGPTR", "CSNG", "CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", 
		"EXIT", "FIX", "INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", 
		"MIDB", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", "','", "':'", "';'", 
		"'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", "ACCESS", "ADDRESSOF", 
		"ALIAS", "AND", "ATTRIBUTE", "APPEND", "AS", "BEGIN", "BINARY", "BOOLEAN", 
		"BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CLASS", "CLOSE", "CONST", "DATABASE", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFCUR", 
		"DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "EMPTY", "END_ENUM", 
		"END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", "END_TYPE", 
		"END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", 
		"EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FRIEND", 
		"FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", 
		"IN", "INPUT", "IS", "INTEGER", "LOCK", "LONG", "LOOP", "LET", "LIB", 
		"LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", 
		"ME", "MID", "MOD", "NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", "OBJECT", 
		"ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", "READ", 
		"READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RSET", "SEEK", 
		"SELECT", "SET", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", 
		"STRING", "SUB", "TAB", "TEXT", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", 
		"WITHEVENTS", "WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", 
		"LEQ", "'('", "'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "'['", 
		"']'", "STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", 
		"DATELITERAL", "NEWLINE", "'''", "'_'", "WS", "GUIDLITERAL", "IDENTIFIER", 
		"LINE_CONTINUATION", "ERRORCHAR"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_attributeStmt = 6, 
		RULE_attributeName = 7, RULE_attributeValue = 8, RULE_moduleDeclarations = 9, 
		RULE_moduleOption = 10, RULE_moduleDeclarationsElement = 11, RULE_moduleBody = 12, 
		RULE_moduleBodyElement = 13, RULE_block = 14, RULE_blockStmt = 15, RULE_mainBlockStmt = 16, 
		RULE_fileStmt = 17, RULE_openStmt = 18, RULE_pathName = 19, RULE_modeClause = 20, 
		RULE_fileMode = 21, RULE_accessClause = 22, RULE_access = 23, RULE_lock = 24, 
		RULE_lenClause = 25, RULE_recLength = 26, RULE_fileNumber = 27, RULE_markedFileNumber = 28, 
		RULE_unmarkedFileNumber = 29, RULE_closeStmt = 30, RULE_resetStmt = 31, 
		RULE_fileNumberList = 32, RULE_seekStmt = 33, RULE_position = 34, RULE_lockStmt = 35, 
		RULE_recordRange = 36, RULE_startRecordNumber = 37, RULE_endRecordNumber = 38, 
		RULE_unlockStmt = 39, RULE_lineInputStmt = 40, RULE_variableName = 41, 
		RULE_widthStmt = 42, RULE_lineWidth = 43, RULE_debugPrintStmt = 44, RULE_debugPrint = 45, 
		RULE_debugModule = 46, RULE_debugPrintSub = 47, RULE_printStmt = 48, RULE_outputList = 49, 
		RULE_outputItem = 50, RULE_outputClause = 51, RULE_charPosition = 52, 
		RULE_outputExpression = 53, RULE_spcClause = 54, RULE_spcNumber = 55, 
		RULE_tabClause = 56, RULE_tabNumberClause = 57, RULE_tabNumber = 58, RULE_writeStmt = 59, 
		RULE_inputStmt = 60, RULE_inputList = 61, RULE_inputVariable = 62, RULE_putStmt = 63, 
		RULE_recordNumber = 64, RULE_data = 65, RULE_getStmt = 66, RULE_variable = 67, 
		RULE_constStmt = 68, RULE_constSubStmt = 69, RULE_declareStmt = 70, RULE_argList = 71, 
		RULE_arg = 72, RULE_argDefaultValue = 73, RULE_defDirective = 74, RULE_defType = 75, 
		RULE_letterSpec = 76, RULE_singleLetter = 77, RULE_universalLetterRange = 78, 
		RULE_upperCaseA = 79, RULE_upperCaseZ = 80, RULE_letterRange = 81, RULE_firstLetter = 82, 
		RULE_lastLetter = 83, RULE_doLoopStmt = 84, RULE_enumerationStmt = 85, 
		RULE_enumerationStmt_Constant = 86, RULE_endStmt = 87, RULE_eraseStmt = 88, 
		RULE_errorStmt = 89, RULE_eventStmt = 90, RULE_exitStmt = 91, RULE_forEachStmt = 92, 
		RULE_forNextStmt = 93, RULE_functionStmt = 94, RULE_functionName = 95, 
		RULE_goSubStmt = 96, RULE_goToStmt = 97, RULE_ifStmt = 98, RULE_elseIfBlock = 99, 
		RULE_elseBlock = 100, RULE_singleLineIfStmt = 101, RULE_ifWithNonEmptyThen = 102, 
		RULE_ifWithEmptyThen = 103, RULE_singleLineElseClause = 104, RULE_listOrLabel = 105, 
		RULE_sameLineStatement = 106, RULE_booleanExpression = 107, RULE_implementsStmt = 108, 
		RULE_letStmt = 109, RULE_lsetStmt = 110, RULE_onErrorStmt = 111, RULE_onGoToStmt = 112, 
		RULE_onGoSubStmt = 113, RULE_propertyGetStmt = 114, RULE_propertySetStmt = 115, 
		RULE_propertyLetStmt = 116, RULE_raiseEventStmt = 117, RULE_eventArgumentList = 118, 
		RULE_eventArgument = 119, RULE_redimStmt = 120, RULE_redimDeclarationList = 121, 
		RULE_redimVariableDeclaration = 122, RULE_midStatement = 123, RULE_modeSpecifier = 124, 
		RULE_integerExpression = 125, RULE_callStmt = 126, RULE_resumeStmt = 127, 
		RULE_returnStmt = 128, RULE_rsetStmt = 129, RULE_stopStmt = 130, RULE_nameStmt = 131, 
		RULE_selectCaseStmt = 132, RULE_selectExpression = 133, RULE_caseClause = 134, 
		RULE_caseElseClause = 135, RULE_rangeClause = 136, RULE_selectStartValue = 137, 
		RULE_selectEndValue = 138, RULE_setStmt = 139, RULE_subStmt = 140, RULE_subroutineName = 141, 
		RULE_publicTypeDeclaration = 142, RULE_privateTypeDeclaration = 143, RULE_udtDeclaration = 144, 
		RULE_udtMemberList = 145, RULE_udtMember = 146, RULE_untypedNameMemberDeclaration = 147, 
		RULE_reservedNameMemberDeclaration = 148, RULE_optionalArrayClause = 149, 
		RULE_arrayDim = 150, RULE_boundsList = 151, RULE_dimSpec = 152, RULE_lowerBound = 153, 
		RULE_upperBound = 154, RULE_constantExpression = 155, RULE_variableStmt = 156, 
		RULE_variableListStmt = 157, RULE_variableSubStmt = 158, RULE_whileWendStmt = 159, 
		RULE_withStmt = 160, RULE_lineSpecialForm = 161, RULE_circleSpecialForm = 162, 
		RULE_scaleSpecialForm = 163, RULE_tuple = 164, RULE_lineSpecialFormOption = 165, 
		RULE_subscripts = 166, RULE_subscript = 167, RULE_unrestrictedIdentifier = 168, 
		RULE_identifier = 169, RULE_untypedIdentifier = 170, RULE_typedIdentifier = 171, 
		RULE_identifierValue = 172, RULE_foreignName = 173, RULE_foreignIdentifier = 174, 
		RULE_asTypeClause = 175, RULE_baseType = 176, RULE_comparisonOperator = 177, 
		RULE_complexType = 178, RULE_fieldLength = 179, RULE_statementLabelDefinition = 180, 
		RULE_identifierStatementLabel = 181, RULE_standaloneLineNumberLabel = 182, 
		RULE_combinedLabels = 183, RULE_lineNumberLabel = 184, RULE_numberLiteral = 185, 
		RULE_type = 186, RULE_typeHint = 187, RULE_visibility = 188, RULE_expression = 189, 
		RULE_literalExpression = 190, RULE_literalIdentifier = 191, RULE_booleanLiteralIdentifier = 192, 
		RULE_objectLiteralIdentifier = 193, RULE_variantLiteralIdentifier = 194, 
		RULE_lExpression = 195, RULE_builtInType = 196, RULE_argumentList = 197, 
		RULE_requiredArgument = 198, RULE_argument = 199, RULE_positionalArgument = 200, 
		RULE_namedArgument = 201, RULE_missingArgument = 202, RULE_argumentExpression = 203, 
		RULE_lowerBoundArgumentExpression = 204, RULE_upperBoundArgumentExpression = 205, 
		RULE_addressOfExpression = 206, RULE_keyword = 207, RULE_markerKeyword = 208, 
		RULE_statementKeyword = 209, RULE_endOfLine = 210, RULE_endOfStatement = 211, 
		RULE_commentOrAnnotation = 212, RULE_remComment = 213, RULE_comment = 214, 
		RULE_commentBody = 215, RULE_annotationList = 216, RULE_annotation = 217, 
		RULE_annotationName = 218, RULE_annotationArgList = 219, RULE_annotationArg = 220, 
		RULE_mandatoryLineContinuation = 221, RULE_whiteSpace = 222;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "attributeStmt", "attributeName", "attributeValue", 
		"moduleDeclarations", "moduleOption", "moduleDeclarationsElement", "moduleBody", 
		"moduleBodyElement", "block", "blockStmt", "mainBlockStmt", "fileStmt", 
		"openStmt", "pathName", "modeClause", "fileMode", "accessClause", "access", 
		"lock", "lenClause", "recLength", "fileNumber", "markedFileNumber", "unmarkedFileNumber", 
		"closeStmt", "resetStmt", "fileNumberList", "seekStmt", "position", "lockStmt", 
		"recordRange", "startRecordNumber", "endRecordNumber", "unlockStmt", "lineInputStmt", 
		"variableName", "widthStmt", "lineWidth", "debugPrintStmt", "debugPrint", 
		"debugModule", "debugPrintSub", "printStmt", "outputList", "outputItem", 
		"outputClause", "charPosition", "outputExpression", "spcClause", "spcNumber", 
		"tabClause", "tabNumberClause", "tabNumber", "writeStmt", "inputStmt", 
		"inputList", "inputVariable", "putStmt", "recordNumber", "data", "getStmt", 
		"variable", "constStmt", "constSubStmt", "declareStmt", "argList", "arg", 
		"argDefaultValue", "defDirective", "defType", "letterSpec", "singleLetter", 
		"universalLetterRange", "upperCaseA", "upperCaseZ", "letterRange", "firstLetter", 
		"lastLetter", "doLoopStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"endStmt", "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "functionName", "goSubStmt", "goToStmt", 
		"ifStmt", "elseIfBlock", "elseBlock", "singleLineIfStmt", "ifWithNonEmptyThen", 
		"ifWithEmptyThen", "singleLineElseClause", "listOrLabel", "sameLineStatement", 
		"booleanExpression", "implementsStmt", "letStmt", "lsetStmt", "onErrorStmt", 
		"onGoToStmt", "onGoSubStmt", "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
		"raiseEventStmt", "eventArgumentList", "eventArgument", "redimStmt", "redimDeclarationList", 
		"redimVariableDeclaration", "midStatement", "modeSpecifier", "integerExpression", 
		"callStmt", "resumeStmt", "returnStmt", "rsetStmt", "stopStmt", "nameStmt", 
		"selectCaseStmt", "selectExpression", "caseClause", "caseElseClause", 
		"rangeClause", "selectStartValue", "selectEndValue", "setStmt", "subStmt", 
		"subroutineName", "publicTypeDeclaration", "privateTypeDeclaration", "udtDeclaration", 
		"udtMemberList", "udtMember", "untypedNameMemberDeclaration", "reservedNameMemberDeclaration", 
		"optionalArrayClause", "arrayDim", "boundsList", "dimSpec", "lowerBound", 
		"upperBound", "constantExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "withStmt", "lineSpecialForm", "circleSpecialForm", 
		"scaleSpecialForm", "tuple", "lineSpecialFormOption", "subscripts", "subscript", 
		"unrestrictedIdentifier", "identifier", "untypedIdentifier", "typedIdentifier", 
		"identifierValue", "foreignName", "foreignIdentifier", "asTypeClause", 
		"baseType", "comparisonOperator", "complexType", "fieldLength", "statementLabelDefinition", 
		"identifierStatementLabel", "standaloneLineNumberLabel", "combinedLabels", 
		"lineNumberLabel", "numberLiteral", "type", "typeHint", "visibility", 
		"expression", "literalExpression", "literalIdentifier", "booleanLiteralIdentifier", 
		"objectLiteralIdentifier", "variantLiteralIdentifier", "lExpression", 
		"builtInType", "argumentList", "requiredArgument", "argument", "positionalArgument", 
		"namedArgument", "missingArgument", "argumentExpression", "lowerBoundArgumentExpression", 
		"upperBoundArgumentExpression", "addressOfExpression", "keyword", "markerKeyword", 
		"statementKeyword", "endOfLine", "endOfStatement", "commentOrAnnotation", 
		"remComment", "comment", "commentBody", "annotationList", "annotation", 
		"annotationName", "annotationArgList", "annotationArg", "mandatoryLineContinuation", 
		"whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; module();
			State = 447; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleAttributesContext moduleAttributes(int i) {
			return GetRuleContext<ModuleAttributesContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public IReadOnlyList<ModuleAttributesContext> moduleAttributes() {
			return GetRuleContexts<ModuleAttributesContext>();
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 449; endOfStatement();
				}
				break;
			}
			State = 452; moduleAttributes();
			State = 454;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 453; moduleHeader();
				}
				break;
			}
			State = 456; moduleAttributes();
			State = 458;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 457; moduleConfig();
				}
				break;
			}
			State = 460; moduleAttributes();
			State = 461; moduleDeclarations();
			State = 462; moduleAttributes();
			State = 463; moduleBody();
			State = 464; moduleAttributes();
			State = 466;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 465; whiteSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(VERSION);
			State = 469; whiteSpace();
			State = 470; numberLiteral();
			State = 472;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 471; whiteSpace();
				}
				break;
			}
			State = 475;
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 474; Match(CLASS);
				}
			}

			State = 477; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; Match(BEGIN);
			State = 487;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 480; whiteSpace();
				State = 481; Match(GUIDLITERAL);
				State = 482; whiteSpace();
				State = 483; unrestrictedIdentifier();
				State = 485;
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 484; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 489; endOfStatement();
			State = 491;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 490; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 493;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 495; Match(END);
			State = 496; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; unrestrictedIdentifier();
			State = 502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 499; whiteSpace();
				}
				}
				State = 504;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 505; Match(EQ);
			State = 509;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 506; whiteSpace();
					}
					} 
				}
				State = 511;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			State = 512; expression(0);
			State = 515;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 513; Match(COLON);
				State = 514; numberLiteral();
				}
				break;
			}
			State = 517; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 519; attributeStmt();
					State = 520; endOfStatement();
					}
					} 
				}
				State = 526;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AttributeValueContext> attributeValue() {
			return GetRuleContexts<AttributeValueContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeValueContext attributeValue(int i) {
			return GetRuleContext<AttributeValueContext>(i);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; Match(ATTRIBUTE);
			State = 528; whiteSpace();
			State = 529; attributeName();
			State = 531;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 530; whiteSpace();
				}
			}

			State = 533; Match(EQ);
			State = 535;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 534; whiteSpace();
				}
				break;
			}
			State = 537; attributeValue();
			State = 548;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 539;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 538; whiteSpace();
						}
					}

					State = 541; Match(COMMA);
					State = 543;
					switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
					case 1:
						{
						State = 542; whiteSpace();
						}
						break;
					}
					State = 545; attributeValue();
					}
					} 
				}
				State = 550;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; lExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_attributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 555; moduleDeclarationsElement();
					State = 556; endOfStatement();
					}
					} 
				}
				State = 562;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleOption);
		int _la;
		try {
			State = 573;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 563; Match(OPTION_BASE);
				State = 564; whiteSpace();
				State = 565; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 567; Match(OPTION_COMPARE);
				State = 568; whiteSpace();
				State = 569;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 571; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 572; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public DefDirectiveContext defDirective() {
			return GetRuleContext<DefDirectiveContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public PrivateTypeDeclarationContext privateTypeDeclaration() {
			return GetRuleContext<PrivateTypeDeclarationContext>(0);
		}
		public PublicTypeDeclarationContext publicTypeDeclaration() {
			return GetRuleContext<PublicTypeDeclarationContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleDeclarationsElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 575; whiteSpace();
				}
			}

			State = 589;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 578; attributeStmt();
				}
				break;

			case 2:
				{
				State = 579; declareStmt();
				}
				break;

			case 3:
				{
				State = 580; defDirective();
				}
				break;

			case 4:
				{
				State = 581; enumerationStmt();
				}
				break;

			case 5:
				{
				State = 582; eventStmt();
				}
				break;

			case 6:
				{
				State = 583; constStmt();
				}
				break;

			case 7:
				{
				State = 584; implementsStmt();
				}
				break;

			case 8:
				{
				State = 585; variableStmt();
				}
				break;

			case 9:
				{
				State = 586; moduleOption();
				}
				break;

			case 10:
				{
				State = 587; publicTypeDeclaration();
				}
				break;

			case 11:
				{
				State = 588; privateTypeDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 591; whiteSpace();
				}
				break;
			}
			State = 599;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 594; moduleBodyElement();
					State = 595; endOfStatement();
					}
					} 
				}
				State = 601;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleBodyElement);
		try {
			State = 607;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 604; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 605; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 606; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 609; blockStmt();
					State = 610; endOfStatement();
					}
					} 
				}
				State = 616;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public MainBlockStmtContext mainBlockStmt() {
			return GetRuleContext<MainBlockStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_blockStmt);
		try {
			State = 625;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617; statementLabelDefinition();
				State = 619;
				switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					State = 618; whiteSpace();
					}
					break;
				}
				State = 622;
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 621; mainBlockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624; mainBlockStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainBlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public LineSpecialFormContext lineSpecialForm() {
			return GetRuleContext<LineSpecialFormContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public SingleLineIfStmtContext singleLineIfStmt() {
			return GetRuleContext<SingleLineIfStmtContext>(0);
		}
		public FileStmtContext fileStmt() {
			return GetRuleContext<FileStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public ScaleSpecialFormContext scaleSpecialForm() {
			return GetRuleContext<ScaleSpecialFormContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public CircleSpecialFormContext circleSpecialForm() {
			return GetRuleContext<CircleSpecialFormContext>(0);
		}
		public CallStmtContext callStmt() {
			return GetRuleContext<CallStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public MainBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMainBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMainBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainBlockStmtContext mainBlockStmt() {
		MainBlockStmtContext _localctx = new MainBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_mainBlockStmt);
		try {
			State = 663;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627; fileStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 629; constStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 630; doLoopStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 631; endStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 632; eraseStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 633; errorStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 634; exitStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 635; forEachStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 636; forNextStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 637; goSubStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 638; goToStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 639; ifStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 640; singleLineIfStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 641; implementsStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 642; letStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 643; lsetStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 644; onErrorStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 645; onGoToStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 646; onGoSubStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 647; raiseEventStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 648; redimStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 649; resumeStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 650; returnStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 651; rsetStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 652; selectCaseStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 653; setStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 654; stopStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 655; variableStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 656; whileWendStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 657; withStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 658; lineSpecialForm();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 659; circleSpecialForm();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 660; scaleSpecialForm();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 661; callStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 662; nameStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileStmtContext : ParserRuleContext {
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public DebugPrintStmtContext debugPrintStmt() {
			return GetRuleContext<DebugPrintStmtContext>(0);
		}
		public FileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileStmtContext fileStmt() {
		FileStmtContext _localctx = new FileStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_fileStmt);
		try {
			State = 679;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 665; openStmt();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 666; resetStmt();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 667; closeStmt();
				}
				break;
			case SEEK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 668; seekStmt();
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 669; lockStmt();
				}
				break;
			case UNLOCK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 670; unlockStmt();
				}
				break;
			case LINE_INPUT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 671; lineInputStmt();
				}
				break;
			case WIDTH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 672; widthStmt();
				}
				break;
			case DEBUG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 673; debugPrintStmt();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 674; printStmt();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 675; writeStmt();
				}
				break;
			case INPUT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 676; inputStmt();
				}
				break;
			case PUT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 677; putStmt();
				}
				break;
			case GET:
				EnterOuterAlt(_localctx, 14);
				{
				State = 678; getStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ModeClauseContext modeClause() {
			return GetRuleContext<ModeClauseContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public AccessClauseContext accessClause() {
			return GetRuleContext<AccessClauseContext>(0);
		}
		public LockContext @lock() {
			return GetRuleContext<LockContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LenClauseContext lenClause() {
			return GetRuleContext<LenClauseContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PathNameContext pathName() {
			return GetRuleContext<PathNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_openStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; Match(OPEN);
			State = 682; whiteSpace();
			State = 683; pathName();
			State = 687;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 684; whiteSpace();
				State = 685; modeClause();
				}
				break;
			}
			State = 692;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 689; whiteSpace();
				State = 690; accessClause();
				}
				break;
			}
			State = 697;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 694; whiteSpace();
				State = 695; @lock();
				}
				break;
			}
			State = 699; whiteSpace();
			State = 700; Match(AS);
			State = 701; whiteSpace();
			State = 702; fileNumber();
			State = 706;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 703; whiteSpace();
				State = 704; lenClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PathNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPathName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPathName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathNameContext pathName() {
		PathNameContext _localctx = new PathNameContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_pathName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeClauseContext : ParserRuleContext {
		public FileModeContext fileMode() {
			return GetRuleContext<FileModeContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeClauseContext modeClause() {
		ModeClauseContext _localctx = new ModeClauseContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_modeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(FOR);
			State = 711; whiteSpace();
			State = 712; fileMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileModeContext : ParserRuleContext {
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public FileModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileModeContext fileMode() {
		FileModeContext _localctx = new FileModeContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_fileMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (INPUT - 121)) | (1L << (OUTPUT - 121)) | (1L << (RANDOM - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessClauseContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public AccessClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccessClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccessClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessClauseContext accessClause() {
		AccessClauseContext _localctx = new AccessClauseContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_accessClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; Match(ACCESS);
			State = 717; whiteSpace();
			State = 718; access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			_la = _input.La(1);
			if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (READ - 168)) | (1L << (READ_WRITE - 168)) | (1L << (WRITE - 168)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public LockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockContext @lock() {
		LockContext _localctx = new LockContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_lock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			_la = _input.La(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LOCK_READ - 131)) | (1L << (LOCK_WRITE - 131)) | (1L << (LOCK_READ_WRITE - 131)) | (1L << (SHARED - 131)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public RecLengthContext recLength() {
			return GetRuleContext<RecLengthContext>(0);
		}
		public LenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLenClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLenClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenClauseContext lenClause() {
		LenClauseContext _localctx = new LenClauseContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_lenClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; Match(LEN);
			State = 726;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 725; whiteSpace();
				}
			}

			State = 728; Match(EQ);
			State = 730;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 729; whiteSpace();
				}
				break;
			}
			State = 732; recLength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecLengthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecLengthContext recLength() {
		RecLengthContext _localctx = new RecLengthContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_recLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public UnmarkedFileNumberContext unmarkedFileNumber() {
			return GetRuleContext<UnmarkedFileNumberContext>(0);
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_fileNumber);
		try {
			State = 738;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736; markedFileNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737; unmarkedFileNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkedFileNumberContext markedFileNumber() {
		MarkedFileNumberContext _localctx = new MarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_markedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; Match(HASH);
			State = 741; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnmarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnmarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unmarkedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnmarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnmarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnmarkedFileNumberContext unmarkedFileNumber() {
		UnmarkedFileNumberContext _localctx = new UnmarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_unmarkedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FileNumberListContext fileNumberList() {
			return GetRuleContext<FileNumberListContext>(0);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_closeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(CLOSE);
			State = 749;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 746; whiteSpace();
				State = 747; fileNumberList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public FileNumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberListContext fileNumberList() {
		FileNumberListContext _localctx = new FileNumberListContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_fileNumberList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; fileNumber();
			State = 764;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 755;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 754; whiteSpace();
						}
					}

					State = 757; Match(COMMA);
					State = 759;
					switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
					case 1:
						{
						State = 758; whiteSpace();
						}
						break;
					}
					State = 761; fileNumber();
					}
					} 
				}
				State = 766;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(SEEK);
			State = 768; whiteSpace();
			State = 769; fileNumber();
			State = 771;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 770; whiteSpace();
				}
			}

			State = 773; Match(COMMA);
			State = 775;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 774; whiteSpace();
				}
				break;
			}
			State = 777; position();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_position);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; Match(LOCK);
			State = 782; whiteSpace();
			State = 783; fileNumber();
			State = 792;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 785;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 784; whiteSpace();
					}
				}

				State = 787; Match(COMMA);
				State = 789;
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 788; whiteSpace();
					}
					break;
				}
				State = 791; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public StartRecordNumberContext startRecordNumber() {
			return GetRuleContext<StartRecordNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public EndRecordNumberContext endRecordNumber() {
			return GetRuleContext<EndRecordNumberContext>(0);
		}
		public RecordRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordRangeContext recordRange() {
		RecordRangeContext _localctx = new RecordRangeContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_recordRange);
		try {
			State = 804;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 794; startRecordNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 798;
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 795; startRecordNumber();
					State = 796; whiteSpace();
					}
					break;
				}
				State = 800; Match(TO);
				State = 801; whiteSpace();
				State = 802; endRecordNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRecordNumberContext startRecordNumber() {
		StartRecordNumberContext _localctx = new StartRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_startRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRecordNumberContext endRecordNumber() {
		EndRecordNumberContext _localctx = new EndRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_endRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; Match(UNLOCK);
			State = 811; whiteSpace();
			State = 812; fileNumber();
			State = 821;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 814;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 813; whiteSpace();
					}
				}

				State = 816; Match(COMMA);
				State = 818;
				switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					State = 817; whiteSpace();
					}
					break;
				}
				State = 820; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(LINE_INPUT);
			State = 824; whiteSpace();
			State = 825; markedFileNumber();
			State = 827;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 826; whiteSpace();
				}
			}

			State = 829; Match(COMMA);
			State = 831;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 830; whiteSpace();
				}
				break;
			}
			State = 833; variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public LineWidthContext lineWidth() {
			return GetRuleContext<LineWidthContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; Match(WIDTH);
			State = 838; whiteSpace();
			State = 839; markedFileNumber();
			State = 841;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 840; whiteSpace();
				}
			}

			State = 843; Match(COMMA);
			State = 845;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 844; whiteSpace();
				}
				break;
			}
			State = 847; lineWidth();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineWidthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineWidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineWidth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineWidth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineWidth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWidth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineWidthContext lineWidth() {
		LineWidthContext _localctx = new LineWidthContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_lineWidth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintStmtContext : ParserRuleContext {
		public DebugPrintContext debugPrint() {
			return GetRuleContext<DebugPrintContext>(0);
		}
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DebugPrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintStmtContext debugPrintStmt() {
		DebugPrintStmtContext _localctx = new DebugPrintStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_debugPrintStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851; debugPrint();
			State = 855;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 852; whiteSpace();
				State = 853; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public DebugPrintSubContext debugPrintSub() {
			return GetRuleContext<DebugPrintSubContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public DebugModuleContext debugModule() {
			return GetRuleContext<DebugModuleContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DebugPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintContext debugPrint() {
		DebugPrintContext _localctx = new DebugPrintContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_debugPrint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857; debugModule();
			State = 859;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 858; whiteSpace();
				}
			}

			State = 861; Match(DOT);
			State = 863;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 862; whiteSpace();
				}
			}

			State = 865; debugPrintSub();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugModuleContext : ParserRuleContext {
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public DebugModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugModule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugModuleContext debugModule() {
		DebugModuleContext _localctx = new DebugModuleContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_debugModule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; Match(DEBUG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintSubContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public DebugPrintSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintSubContext debugPrintSub() {
		DebugPrintSubContext _localctx = new DebugPrintSubContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_debugPrintSub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869; Match(PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871; Match(PRINT);
			State = 872; whiteSpace();
			State = 873; markedFileNumber();
			State = 875;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 874; whiteSpace();
				}
			}

			State = 877; Match(COMMA);
			State = 882;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 879;
				switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					State = 878; whiteSpace();
					}
					break;
				}
				State = 881; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public OutputItemContext outputItem(int i) {
			return GetRuleContext<OutputItemContext>(i);
		}
		public IReadOnlyList<OutputItemContext> outputItem() {
			return GetRuleContexts<OutputItemContext>();
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_outputList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 884; outputItem();
			State = 891;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 886;
					switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
					case 1:
						{
						State = 885; whiteSpace();
						}
						break;
					}
					State = 888; outputItem();
					}
					} 
				}
				State = 893;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputItemContext : ParserRuleContext {
		public OutputClauseContext outputClause() {
			return GetRuleContext<OutputClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public CharPositionContext charPosition() {
			return GetRuleContext<CharPositionContext>(0);
		}
		public OutputItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputItemContext outputItem() {
		OutputItemContext _localctx = new OutputItemContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_outputItem);
		int _la;
		try {
			State = 902;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 894; outputClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 895; charPosition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 896; outputClause();
				State = 898;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 897; whiteSpace();
					}
				}

				State = 900; charPosition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputClauseContext : ParserRuleContext {
		public TabClauseContext tabClause() {
			return GetRuleContext<TabClauseContext>(0);
		}
		public OutputExpressionContext outputExpression() {
			return GetRuleContext<OutputExpressionContext>(0);
		}
		public SpcClauseContext spcClause() {
			return GetRuleContext<SpcClauseContext>(0);
		}
		public OutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputClauseContext outputClause() {
		OutputClauseContext _localctx = new OutputClauseContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_outputClause);
		try {
			State = 907;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 904; spcClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 905; tabClause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 906; outputExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharPositionContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(VBAParser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public CharPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charPosition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCharPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCharPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharPositionContext charPosition() {
		CharPositionContext _localctx = new CharPositionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_charPosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			_la = _input.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OutputExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputExpressionContext outputExpression() {
		OutputExpressionContext _localctx = new OutputExpressionContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_outputExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcClauseContext : ParserRuleContext {
		public SpcNumberContext spcNumber() {
			return GetRuleContext<SpcNumberContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SpcClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcClauseContext spcClause() {
		SpcClauseContext _localctx = new SpcClauseContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_spcClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913; Match(SPC);
			State = 915;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 914; whiteSpace();
				}
			}

			State = 917; Match(LPAREN);
			State = 919;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 918; whiteSpace();
				}
				break;
			}
			State = 921; spcNumber();
			State = 923;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 922; whiteSpace();
				}
			}

			State = 925; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpcNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcNumberContext spcNumber() {
		SpcNumberContext _localctx = new SpcNumberContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_spcNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabClauseContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public TabNumberClauseContext tabNumberClause() {
			return GetRuleContext<TabNumberClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public TabClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabClauseContext tabClause() {
		TabClauseContext _localctx = new TabClauseContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_tabClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; Match(TAB);
			State = 934;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 931;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 930; whiteSpace();
					}
				}

				State = 933; tabNumberClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TabNumberContext tabNumber() {
			return GetRuleContext<TabNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public TabNumberClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumberClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumberClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumberClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumberClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberClauseContext tabNumberClause() {
		TabNumberClauseContext _localctx = new TabNumberClauseContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_tabNumberClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936; Match(LPAREN);
			State = 938;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 937; whiteSpace();
				}
				break;
			}
			State = 940; tabNumber();
			State = 942;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 941; whiteSpace();
				}
			}

			State = 944; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TabNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberContext tabNumber() {
		TabNumberContext _localctx = new TabNumberContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_tabNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948; Match(WRITE);
			State = 949; whiteSpace();
			State = 950; markedFileNumber();
			State = 952;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 951; whiteSpace();
				}
			}

			State = 954; Match(COMMA);
			State = 959;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 956;
				switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					State = 955; whiteSpace();
					}
					break;
				}
				State = 958; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public InputListContext inputList() {
			return GetRuleContext<InputListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_inputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961; Match(INPUT);
			State = 962; whiteSpace();
			State = 963; markedFileNumber();
			State = 965;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 964; whiteSpace();
				}
			}

			State = 967; Match(COMMA);
			State = 969;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 968; whiteSpace();
				}
				break;
			}
			State = 971; inputList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<InputVariableContext> inputVariable() {
			return GetRuleContexts<InputVariableContext>();
		}
		public InputVariableContext inputVariable(int i) {
			return GetRuleContext<InputVariableContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public InputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputListContext inputList() {
		InputListContext _localctx = new InputListContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_inputList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 973; inputVariable();
			State = 984;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 975;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 974; whiteSpace();
						}
					}

					State = 977; Match(COMMA);
					State = 979;
					switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
					case 1:
						{
						State = 978; whiteSpace();
						}
						break;
					}
					State = 981; inputVariable();
					}
					} 
				}
				State = 986;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InputVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVariableContext inputVariable() {
		InputVariableContext _localctx = new InputVariableContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_inputVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; Match(PUT);
			State = 990; whiteSpace();
			State = 991; fileNumber();
			State = 993;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 992; whiteSpace();
				}
			}

			State = 995; Match(COMMA);
			State = 997;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 996; whiteSpace();
				}
				break;
			}
			State = 1000;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 999; recordNumber();
				}
				break;
			}
			State = 1003;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1002; whiteSpace();
				}
			}

			State = 1005; Match(COMMA);
			State = 1007;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 1006; whiteSpace();
				}
				break;
			}
			State = 1009; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordNumberContext recordNumber() {
		RecordNumberContext _localctx = new RecordNumberContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_recordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015; Match(GET);
			State = 1016; whiteSpace();
			State = 1017; fileNumber();
			State = 1019;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1018; whiteSpace();
				}
			}

			State = 1021; Match(COMMA);
			State = 1023;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 1022; whiteSpace();
				}
				break;
			}
			State = 1026;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 1025; recordNumber();
				}
				break;
			}
			State = 1029;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1028; whiteSpace();
				}
			}

			State = 1031; Match(COMMA);
			State = 1033;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1032; whiteSpace();
				}
				break;
			}
			State = 1035; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1039; visibility();
				State = 1040; whiteSpace();
				}
			}

			State = 1044; Match(CONST);
			State = 1045; whiteSpace();
			State = 1046; constSubStmt();
			State = 1057;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1048;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1047; whiteSpace();
						}
					}

					State = 1050; Match(COMMA);
					State = 1052;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1051; whiteSpace();
						}
					}

					State = 1054; constSubStmt();
					}
					} 
				}
				State = 1059;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060; identifier();
			State = 1064;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 1061; whiteSpace();
				State = 1062; asTypeClause();
				}
				break;
			}
			State = 1067;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1066; whiteSpace();
				}
			}

			State = 1069; Match(EQ);
			State = 1071;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 1070; whiteSpace();
				}
				break;
			}
			State = 1073; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1075; visibility();
				State = 1076; whiteSpace();
				}
			}

			State = 1080; Match(DECLARE);
			State = 1081; whiteSpace();
			State = 1084;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 1082; Match(PTRSAFE);
				State = 1083; whiteSpace();
				}
			}

			State = 1086;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1087; whiteSpace();
			State = 1088; identifier();
			State = 1089; whiteSpace();
			State = 1090; Match(LIB);
			State = 1091; whiteSpace();
			State = 1092; Match(STRINGLITERAL);
			State = 1098;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 1093; whiteSpace();
				State = 1094; Match(ALIAS);
				State = 1095; whiteSpace();
				State = 1096; Match(STRINGLITERAL);
				}
				break;
			}
			State = 1104;
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 1101;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1100; whiteSpace();
					}
				}

				State = 1103; argList();
				}
				break;
			}
			State = 1109;
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 1106; whiteSpace();
				State = 1107; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111; Match(LPAREN);
			State = 1129;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 1113;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1112; whiteSpace();
					}
				}

				State = 1115; arg();
				State = 1126;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,108,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1117;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1116; whiteSpace();
							}
						}

						State = 1119; Match(COMMA);
						State = 1121;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1120; whiteSpace();
							}
						}

						State = 1123; arg();
						}
						} 
					}
					State = 1128;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,108,_ctx);
				}
				}
				break;
			}
			State = 1132;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1131; whiteSpace();
				}
			}

			State = 1134; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 1136; Match(OPTIONAL);
				State = 1137; whiteSpace();
				}
				break;
			}
			State = 1142;
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				State = 1140;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1141; whiteSpace();
				}
				break;
			}
			State = 1146;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				State = 1144; Match(PARAMARRAY);
				State = 1145; whiteSpace();
				}
				break;
			}
			State = 1148; unrestrictedIdentifier();
			State = 1157;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				State = 1150;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1149; whiteSpace();
					}
				}

				State = 1152; Match(LPAREN);
				State = 1154;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1153; whiteSpace();
					}
				}

				State = 1156; Match(RPAREN);
				}
				break;
			}
			State = 1163;
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				State = 1160;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1159; whiteSpace();
					}
				}

				State = 1162; asTypeClause();
				}
				break;
			}
			State = 1169;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				State = 1166;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1165; whiteSpace();
					}
				}

				State = 1168; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171; Match(EQ);
			State = 1173;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1172; whiteSpace();
				}
				break;
			}
			State = 1175; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDirectiveContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LetterSpecContext letterSpec(int i) {
			return GetRuleContext<LetterSpecContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LetterSpecContext> letterSpec() {
			return GetRuleContexts<LetterSpecContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DefTypeContext defType() {
			return GetRuleContext<DefTypeContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDirectiveContext defDirective() {
		DefDirectiveContext _localctx = new DefDirectiveContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_defDirective);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177; defType();
			State = 1178; whiteSpace();
			State = 1179; letterSpec();
			State = 1190;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,124,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1181;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1180; whiteSpace();
						}
					}

					State = 1183; Match(COMMA);
					State = 1185;
					switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
					case 1:
						{
						State = 1184; whiteSpace();
						}
						break;
					}
					State = 1187; letterSpec();
					}
					} 
				}
				State = 1192;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,124,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefTypeContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefTypeContext defType() {
		DefTypeContext _localctx = new DefTypeContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_defType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (DEFBOOL - 70)) | (1L << (DEFBYTE - 70)) | (1L << (DEFDATE - 70)) | (1L << (DEFDBL - 70)) | (1L << (DEFCUR - 70)) | (1L << (DEFINT - 70)) | (1L << (DEFLNG - 70)) | (1L << (DEFLNGLNG - 70)) | (1L << (DEFLNGPTR - 70)) | (1L << (DEFOBJ - 70)) | (1L << (DEFSNG - 70)) | (1L << (DEFSTR - 70)) | (1L << (DEFVAR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterSpecContext : ParserRuleContext {
		public SingleLetterContext singleLetter() {
			return GetRuleContext<SingleLetterContext>(0);
		}
		public UniversalLetterRangeContext universalLetterRange() {
			return GetRuleContext<UniversalLetterRangeContext>(0);
		}
		public LetterRangeContext letterRange() {
			return GetRuleContext<LetterRangeContext>(0);
		}
		public LetterSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterSpecContext letterSpec() {
		LetterSpecContext _localctx = new LetterSpecContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_letterSpec);
		try {
			State = 1198;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1195; singleLetter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1196; universalLetterRange();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1197; letterRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public SingleLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLetterContext singleLetter() {
		SingleLetterContext _localctx = new SingleLetterContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_singleLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalLetterRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public UpperCaseAContext upperCaseA() {
			return GetRuleContext<UpperCaseAContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public UpperCaseZContext upperCaseZ() {
			return GetRuleContext<UpperCaseZContext>(0);
		}
		public UniversalLetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalLetterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUniversalLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUniversalLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalLetterRangeContext universalLetterRange() {
		UniversalLetterRangeContext _localctx = new UniversalLetterRangeContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_universalLetterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202; upperCaseA();
			State = 1204;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1203; whiteSpace();
				}
			}

			State = 1206; Match(MINUS);
			State = 1208;
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				State = 1207; whiteSpace();
				}
				break;
			}
			State = 1210; upperCaseZ();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseAContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseAContext upperCaseA() {
		UpperCaseAContext _localctx = new UpperCaseAContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_upperCaseA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			if (!(_input.Lt(1).Text.Equals("A"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"A\")");
			State = 1213; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseZContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseZ; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseZ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseZ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseZ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseZContext upperCaseZ() {
		UpperCaseZContext _localctx = new UpperCaseZContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_upperCaseZ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215;
			if (!(_input.Lt(1).Text.Equals("Z"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"Z\")");
			State = 1216; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterRangeContext : ParserRuleContext {
		public LastLetterContext lastLetter() {
			return GetRuleContext<LastLetterContext>(0);
		}
		public FirstLetterContext firstLetter() {
			return GetRuleContext<FirstLetterContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterRangeContext letterRange() {
		LetterRangeContext _localctx = new LetterRangeContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_letterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218; firstLetter();
			State = 1220;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1219; whiteSpace();
				}
			}

			State = 1222; Match(MINUS);
			State = 1224;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1223; whiteSpace();
				}
			}

			State = 1226; lastLetter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public FirstLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFirstLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFirstLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstLetterContext firstLetter() {
		FirstLetterContext _localctx = new FirstLetterContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_firstLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LastLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLastLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLastLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastLetterContext lastLetter() {
		LastLetterContext _localctx = new LastLetterContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_lastLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_doLoopStmt);
		int _la;
		try {
			State = 1273;
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1232; Match(DO);
				State = 1233; endOfStatement();
				State = 1234; block();
				State = 1236;
				switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					State = 1235; statementLabelDefinition();
					}
					break;
				}
				State = 1239;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1238; whiteSpace();
					}
				}

				State = 1241; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1243; Match(DO);
				State = 1244; whiteSpace();
				State = 1245;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1246; whiteSpace();
				State = 1247; expression(0);
				State = 1248; endOfStatement();
				State = 1249; block();
				State = 1251;
				switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					State = 1250; statementLabelDefinition();
					}
					break;
				}
				State = 1254;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1253; whiteSpace();
					}
				}

				State = 1256; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1258; Match(DO);
				State = 1259; endOfStatement();
				State = 1260; block();
				State = 1262;
				switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					State = 1261; statementLabelDefinition();
					}
					break;
				}
				State = 1265;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1264; whiteSpace();
					}
				}

				State = 1267; Match(LOOP);
				State = 1268; whiteSpace();
				State = 1269;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1270; whiteSpace();
				State = 1271; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1275; visibility();
				State = 1276; whiteSpace();
				}
			}

			State = 1280; Match(ENUM);
			State = 1281; whiteSpace();
			State = 1282; identifier();
			State = 1283; endOfStatement();
			State = 1287;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				{
				State = 1284; enumerationStmt_Constant();
				}
				}
				State = 1289;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1290; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292; identifier();
			State = 1301;
			switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				State = 1294;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1293; whiteSpace();
					}
				}

				State = 1296; Match(EQ);
				State = 1298;
				switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					State = 1297; whiteSpace();
					}
					break;
				}
				State = 1300; expression(0);
				}
				break;
			}
			State = 1303; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307; Match(ERASE);
			State = 1308; whiteSpace();
			State = 1309; expression(0);
			State = 1320;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,144,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1311;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1310; whiteSpace();
						}
					}

					State = 1313; Match(COMMA);
					State = 1315;
					switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
					case 1:
						{
						State = 1314; whiteSpace();
						}
						break;
					}
					State = 1317; expression(0);
					}
					} 
				}
				State = 1322;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,144,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323; Match(ERROR);
			State = 1324; whiteSpace();
			State = 1325; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1327; visibility();
				State = 1328; whiteSpace();
				}
			}

			State = 1332; Match(EVENT);
			State = 1333; whiteSpace();
			State = 1334; identifier();
			State = 1336;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1335; whiteSpace();
				}
			}

			State = 1338; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340;
			_la = _input.La(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EXIT_DO - 104)) | (1L << (EXIT_FOR - 104)) | (1L << (EXIT_FUNCTION - 104)) | (1L << (EXIT_PROPERTY - 104)) | (1L << (EXIT_SUB - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342; Match(FOR);
			State = 1343; whiteSpace();
			State = 1344; Match(EACH);
			State = 1345; whiteSpace();
			State = 1346; expression(0);
			State = 1347; whiteSpace();
			State = 1348; Match(IN);
			State = 1349; whiteSpace();
			State = 1350; expression(0);
			State = 1351; endOfStatement();
			State = 1352; block();
			State = 1354;
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				State = 1353; statementLabelDefinition();
				}
				break;
			}
			State = 1357;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1356; whiteSpace();
				}
			}

			State = 1359; Match(NEXT);
			State = 1363;
			switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				State = 1360; whiteSpace();
				State = 1361; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(FOR);
			State = 1366; whiteSpace();
			State = 1367; expression(0);
			State = 1368; whiteSpace();
			State = 1369; Match(TO);
			State = 1370; whiteSpace();
			State = 1371; expression(0);
			State = 1377;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1372; whiteSpace();
				State = 1373; Match(STEP);
				State = 1374; whiteSpace();
				State = 1375; expression(0);
				}
				break;
			}
			State = 1379; endOfStatement();
			State = 1380; block();
			State = 1382;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				State = 1381; statementLabelDefinition();
				}
				break;
			}
			State = 1385;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1384; whiteSpace();
				}
			}

			State = 1387; Match(NEXT);
			State = 1391;
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				State = 1388; whiteSpace();
				State = 1389; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_functionStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1393; visibility();
				State = 1394; whiteSpace();
				}
			}

			State = 1400;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1398; Match(STATIC);
				State = 1399; whiteSpace();
				}
			}

			State = 1402; Match(FUNCTION);
			State = 1404;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1403; whiteSpace();
				}
			}

			State = 1406; functionName();
			State = 1411;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 1408;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1407; whiteSpace();
					}
				}

				State = 1410; argList();
				}
				break;
			}
			State = 1417;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1414;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1413; whiteSpace();
					}
				}

				State = 1416; asTypeClause();
				}
				break;
			}
			State = 1419; endOfStatement();
			State = 1420; block();
			State = 1422;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 1421; statementLabelDefinition();
				}
				break;
			}
			State = 1425;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1424; whiteSpace();
				}
			}

			State = 1427; Match(END_FUNCTION);
			State = 1433;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1428; endOfLine();
					State = 1429; attributeStmt();
					}
					} 
				}
				State = 1435;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438; Match(GOSUB);
			State = 1439; whiteSpace();
			State = 1440; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442; Match(GOTO);
			State = 1443; whiteSpace();
			State = 1444; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public IReadOnlyList<StatementLabelDefinitionContext> statementLabelDefinition() {
			return GetRuleContexts<StatementLabelDefinitionContext>();
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<ElseIfBlockContext> elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public StatementLabelDefinitionContext statementLabelDefinition(int i) {
			return GetRuleContext<StatementLabelDefinitionContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_ifStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446; Match(IF);
			State = 1447; whiteSpace();
			State = 1448; booleanExpression();
			State = 1449; whiteSpace();
			State = 1450; Match(THEN);
			State = 1451; endOfStatement();
			State = 1452; block();
			State = 1462;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,166,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1454;
					switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
					case 1:
						{
						State = 1453; statementLabelDefinition();
						}
						break;
					}
					State = 1457;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1456; whiteSpace();
						}
					}

					State = 1459; elseIfBlock();
					}
					} 
				}
				State = 1464;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,166,_ctx);
			}
			{
			State = 1466;
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				State = 1465; statementLabelDefinition();
				}
				break;
			}
			State = 1469;
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1468; whiteSpace();
				}
				break;
			}
			State = 1472;
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1471; elseBlock();
				}
				break;
			}
			}
			State = 1475;
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1474; statementLabelDefinition();
				}
				break;
			}
			State = 1478;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1477; whiteSpace();
				}
			}

			State = 1480; Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_elseIfBlock);
		try {
			State = 1500;
			switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1482; Match(ELSEIF);
				State = 1483; whiteSpace();
				State = 1484; booleanExpression();
				State = 1485; whiteSpace();
				State = 1486; Match(THEN);
				State = 1487; endOfStatement();
				State = 1488; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1490; Match(ELSEIF);
				State = 1491; whiteSpace();
				State = 1492; booleanExpression();
				State = 1493; whiteSpace();
				State = 1494; Match(THEN);
				State = 1496;
				switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					State = 1495; whiteSpace();
					}
					break;
				}
				State = 1498; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; Match(ELSE);
			State = 1503; endOfStatement();
			State = 1504; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineIfStmtContext : ParserRuleContext {
		public IfWithEmptyThenContext ifWithEmptyThen() {
			return GetRuleContext<IfWithEmptyThenContext>(0);
		}
		public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
			return GetRuleContext<IfWithNonEmptyThenContext>(0);
		}
		public SingleLineIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineIfStmtContext singleLineIfStmt() {
		SingleLineIfStmtContext _localctx = new SingleLineIfStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_singleLineIfStmt);
		try {
			State = 1508;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1506; ifWithNonEmptyThen();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1507; ifWithEmptyThen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithNonEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithNonEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithNonEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithNonEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithNonEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithNonEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
		IfWithNonEmptyThenContext _localctx = new IfWithNonEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_ifWithNonEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1510; Match(IF);
			State = 1512;
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 1511; whiteSpace();
				}
				break;
			}
			State = 1514; booleanExpression();
			State = 1516;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1515; whiteSpace();
				}
			}

			State = 1518; Match(THEN);
			State = 1520;
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 1519; whiteSpace();
				}
				break;
			}
			State = 1522; listOrLabel();
			State = 1526;
			switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				State = 1523; whiteSpace();
				State = 1524; singleLineElseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IfWithEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithEmptyThenContext ifWithEmptyThen() {
		IfWithEmptyThenContext _localctx = new IfWithEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_ifWithEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1528; Match(IF);
			State = 1530;
			switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				State = 1529; whiteSpace();
				}
				break;
			}
			State = 1532; booleanExpression();
			State = 1534;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1533; whiteSpace();
				}
			}

			State = 1536; Match(THEN);
			State = 1538;
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 1537; endOfStatement();
				}
				break;
			}
			State = 1541;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1540; whiteSpace();
				}
			}

			State = 1543; singleLineElseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineElseClauseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public SingleLineElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineElseClauseContext singleLineElseClause() {
		SingleLineElseClauseContext _localctx = new SingleLineElseClauseContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_singleLineElseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545; Match(ELSE);
			State = 1547;
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				State = 1546; whiteSpace();
				}
				break;
			}
			State = 1550;
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 1549; listOrLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOrLabelContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public SameLineStatementContext sameLineStatement(int i) {
			return GetRuleContext<SameLineStatementContext>(i);
		}
		public IReadOnlyList<SameLineStatementContext> sameLineStatement() {
			return GetRuleContexts<SameLineStatementContext>();
		}
		public ListOrLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOrLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterListOrLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitListOrLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOrLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOrLabelContext listOrLabel() {
		ListOrLabelContext _localctx = new ListOrLabelContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_listOrLabel);
		int _la;
		try {
			int _alt;
			State = 1590;
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1552; lineNumberLabel();
				State = 1565;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,188,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1554;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1553; whiteSpace();
							}
						}

						State = 1556; Match(COLON);
						State = 1558;
						switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
						case 1:
							{
							State = 1557; whiteSpace();
							}
							break;
						}
						State = 1561;
						switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
						case 1:
							{
							State = 1560; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1567;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,188,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1572;
				switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					State = 1568; Match(COLON);
					State = 1570;
					switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
					case 1:
						{
						State = 1569; whiteSpace();
						}
						break;
					}
					}
					break;
				}
				State = 1574; sameLineStatement();
				State = 1587;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,194,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1576;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1575; whiteSpace();
							}
						}

						State = 1578; Match(COLON);
						State = 1580;
						switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
						case 1:
							{
							State = 1579; whiteSpace();
							}
							break;
						}
						State = 1583;
						switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
						case 1:
							{
							State = 1582; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1589;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,194,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SameLineStatementContext : ParserRuleContext {
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public SameLineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sameLineStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSameLineStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSameLineStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameLineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SameLineStatementContext sameLineStatement() {
		SameLineStatementContext _localctx = new SameLineStatementContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_sameLineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592; blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596; Match(IMPLEMENTS);
			State = 1597; whiteSpace();
			State = 1598; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602;
			_la = _input.La(1);
			if (_la==LET) {
				{
				State = 1600; Match(LET);
				State = 1601; whiteSpace();
				}
			}

			State = 1604; lExpression(0);
			State = 1606;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1605; whiteSpace();
				}
			}

			State = 1608; Match(EQ);
			State = 1610;
			switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				State = 1609; whiteSpace();
				}
				break;
			}
			State = 1612; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614; Match(LSET);
			State = 1615; whiteSpace();
			State = 1616; expression(0);
			State = 1618;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1617; whiteSpace();
				}
			}

			State = 1620; Match(EQ);
			State = 1622;
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 1621; whiteSpace();
				}
				break;
			}
			State = 1624; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1627; whiteSpace();
			State = 1636;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1628; Match(GOTO);
				State = 1629; whiteSpace();
				State = 1630; expression(0);
				}
				break;
			case RESUME:
				{
				State = 1632; Match(RESUME);
				State = 1633; whiteSpace();
				State = 1634; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638; Match(ON);
			State = 1639; whiteSpace();
			State = 1640; expression(0);
			State = 1641; whiteSpace();
			State = 1642; Match(GOTO);
			State = 1643; whiteSpace();
			State = 1644; expression(0);
			State = 1655;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1646;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1645; whiteSpace();
						}
					}

					State = 1648; Match(COMMA);
					State = 1650;
					switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
					case 1:
						{
						State = 1649; whiteSpace();
						}
						break;
					}
					State = 1652; expression(0);
					}
					} 
				}
				State = 1657;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658; Match(ON);
			State = 1659; whiteSpace();
			State = 1660; expression(0);
			State = 1661; whiteSpace();
			State = 1662; Match(GOSUB);
			State = 1663; whiteSpace();
			State = 1664; expression(0);
			State = 1675;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,207,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1666;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1665; whiteSpace();
						}
					}

					State = 1668; Match(COMMA);
					State = 1670;
					switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
					case 1:
						{
						State = 1669; whiteSpace();
						}
						break;
					}
					State = 1672; expression(0);
					}
					} 
				}
				State = 1677;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,207,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_propertyGetStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1678; visibility();
				State = 1679; whiteSpace();
				}
			}

			State = 1685;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1683; Match(STATIC);
				State = 1684; whiteSpace();
				}
			}

			State = 1687; Match(PROPERTY_GET);
			State = 1688; whiteSpace();
			State = 1689; functionName();
			State = 1694;
			switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				State = 1691;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1690; whiteSpace();
					}
				}

				State = 1693; argList();
				}
				break;
			}
			State = 1699;
			switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				State = 1696; whiteSpace();
				State = 1697; asTypeClause();
				}
				break;
			}
			State = 1701; endOfStatement();
			State = 1702; block();
			State = 1704;
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				State = 1703; statementLabelDefinition();
				}
				break;
			}
			State = 1707;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1706; whiteSpace();
				}
			}

			State = 1709; Match(END_PROPERTY);
			State = 1715;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,215,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1710; endOfLine();
					State = 1711; attributeStmt();
					}
					} 
				}
				State = 1717;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,215,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_propertySetStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1718; visibility();
				State = 1719; whiteSpace();
				}
			}

			State = 1725;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1723; Match(STATIC);
				State = 1724; whiteSpace();
				}
			}

			State = 1727; Match(PROPERTY_SET);
			State = 1728; whiteSpace();
			State = 1729; subroutineName();
			State = 1734;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 1731;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1730; whiteSpace();
					}
				}

				State = 1733; argList();
				}
				break;
			}
			State = 1736; endOfStatement();
			State = 1737; block();
			State = 1739;
			switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				State = 1738; statementLabelDefinition();
				}
				break;
			}
			State = 1742;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1741; whiteSpace();
				}
			}

			State = 1744; Match(END_PROPERTY);
			State = 1750;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,222,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1745; endOfLine();
					State = 1746; attributeStmt();
					}
					} 
				}
				State = 1752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,222,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_propertyLetStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1753; visibility();
				State = 1754; whiteSpace();
				}
			}

			State = 1760;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1758; Match(STATIC);
				State = 1759; whiteSpace();
				}
			}

			State = 1762; Match(PROPERTY_LET);
			State = 1763; whiteSpace();
			State = 1764; subroutineName();
			State = 1769;
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 1766;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1765; whiteSpace();
					}
				}

				State = 1768; argList();
				}
				break;
			}
			State = 1771; endOfStatement();
			State = 1772; block();
			State = 1774;
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				State = 1773; statementLabelDefinition();
				}
				break;
			}
			State = 1777;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1776; whiteSpace();
				}
			}

			State = 1779; Match(END_PROPERTY);
			State = 1785;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,229,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1780; endOfLine();
					State = 1781; attributeStmt();
					}
					} 
				}
				State = 1787;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,229,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EventArgumentListContext eventArgumentList() {
			return GetRuleContext<EventArgumentListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1788; Match(RAISEEVENT);
			State = 1789; whiteSpace();
			State = 1790; identifier();
			State = 1805;
			switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				State = 1792;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1791; whiteSpace();
					}
				}

				State = 1794; Match(LPAREN);
				State = 1796;
				switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					State = 1795; whiteSpace();
					}
					break;
				}
				State = 1799;
				switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					State = 1798; eventArgumentList();
					}
					break;
				}
				State = 1802;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1801; whiteSpace();
					}
				}

				State = 1804; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentListContext : ParserRuleContext {
		public EventArgumentContext eventArgument(int i) {
			return GetRuleContext<EventArgumentContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<EventArgumentContext> eventArgument() {
			return GetRuleContexts<EventArgumentContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EventArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentListContext eventArgumentList() {
		EventArgumentListContext _localctx = new EventArgumentListContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_eventArgumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807; eventArgument();
			State = 1818;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,237,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1809;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1808; whiteSpace();
						}
					}

					State = 1811; Match(COMMA);
					State = 1813;
					switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
					case 1:
						{
						State = 1812; whiteSpace();
						}
						break;
					}
					State = 1815; eventArgument();
					}
					} 
				}
				State = 1820;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,237,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public EventArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentContext eventArgument() {
		EventArgumentContext _localctx = new EventArgumentContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_eventArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823;
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				State = 1821; Match(BYVAL);
				State = 1822; whiteSpace();
				}
				break;
			}
			State = 1825; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public RedimDeclarationListContext redimDeclarationList() {
			return GetRuleContext<RedimDeclarationListContext>(0);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_redimStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827; Match(REDIM);
			State = 1828; whiteSpace();
			State = 1831;
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				State = 1829; Match(PRESERVE);
				State = 1830; whiteSpace();
				}
				break;
			}
			State = 1833; redimDeclarationList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimDeclarationListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<RedimVariableDeclarationContext> redimVariableDeclaration() {
			return GetRuleContexts<RedimVariableDeclarationContext>();
		}
		public RedimVariableDeclarationContext redimVariableDeclaration(int i) {
			return GetRuleContext<RedimVariableDeclarationContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimDeclarationListContext redimDeclarationList() {
		RedimDeclarationListContext _localctx = new RedimDeclarationListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_redimDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835; redimVariableDeclaration();
			State = 1846;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,242,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1837;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1836; whiteSpace();
						}
					}

					State = 1839; Match(COMMA);
					State = 1841;
					switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
					case 1:
						{
						State = 1840; whiteSpace();
						}
						break;
					}
					State = 1843; redimVariableDeclaration();
					}
					} 
				}
				State = 1848;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,242,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimVariableDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RedimVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimVariableDeclarationContext redimVariableDeclaration() {
		RedimVariableDeclarationContext _localctx = new RedimVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_redimVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1849; expression(0);
			State = 1853;
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 1850; whiteSpace();
				State = 1851; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStatementContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public LExpressionContext lExpression(int i) {
			return GetRuleContext<LExpressionContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<LExpressionContext> lExpression() {
			return GetRuleContexts<LExpressionContext>();
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ModeSpecifierContext modeSpecifier() {
			return GetRuleContext<ModeSpecifierContext>(0);
		}
		public MidStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStatementContext midStatement() {
		MidStatementContext _localctx = new MidStatementContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_midStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855; modeSpecifier();
			State = 1856; Match(LPAREN);
			State = 1858;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1857; whiteSpace();
				}
			}

			State = 1860; lExpression(0);
			State = 1862;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1861; whiteSpace();
				}
			}

			State = 1864; Match(COMMA);
			State = 1866;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1865; whiteSpace();
				}
			}

			State = 1868; lExpression(0);
			State = 1870;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1869; whiteSpace();
				}
			}

			State = 1880;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1872; Match(COMMA);
				State = 1874;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1873; whiteSpace();
					}
				}

				State = 1876; lExpression(0);
				State = 1878;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1877; whiteSpace();
					}
				}

				}
			}

			State = 1882; Match(RPAREN);
			State = 1884;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1883; whiteSpace();
				}
			}

			State = 1886; Match(ASSIGN);
			State = 1888;
			switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				State = 1887; whiteSpace();
				}
				break;
			}
			State = 1890; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecifierContext : ParserRuleContext {
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ModeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecifierContext modeSpecifier() {
		ModeSpecifierContext _localctx = new ModeSpecifierContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_modeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892;
			_la = _input.La(1);
			if ( !(_la==MIDB || _la==MID) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1894;
			_la = _input.La(1);
			if (_la==DOLLAR) {
				{
				State = 1893; Match(DOLLAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerExpressionContext integerExpression() {
		IntegerExpressionContext _localctx = new IntegerExpressionContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_integerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStmtContext callStmt() {
		CallStmtContext _localctx = new CallStmtContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_callStmt);
		try {
			State = 1908;
			switch (_input.La(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1898; Match(CALL);
				State = 1899; whiteSpace();
				State = 1900; lExpression(0);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case EXCLAMATIONPOINT:
			case DOT:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1902; lExpression(0);
				State = 1906;
				switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					State = 1903; whiteSpace();
					State = 1904; argumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1910; Match(RESUME);
			State = 1916;
			switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				State = 1911; whiteSpace();
				State = 1914;
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1912; Match(NEXT);
					}
					break;
				case ABS:
				case ANY:
				case ARRAY:
				case B_CHAR:
				case BF:
				case CBOOL:
				case CBYTE:
				case CCUR:
				case CDATE:
				case CDBL:
				case CDEC:
				case CINT:
				case CLNG:
				case CLNGLNG:
				case CLNGPTR:
				case CSNG:
				case CSTR:
				case CURRENCY:
				case CVAR:
				case CVERR:
				case DEBUG:
				case DOEVENTS:
				case FIX:
				case INPUTB:
				case INT:
				case LBOUND:
				case LEN:
				case LENB:
				case LONGLONG:
				case LONGPTR:
				case MIDB:
				case PSET:
				case SGN:
				case UBOUND:
				case EXCLAMATIONPOINT:
				case DOT:
				case HASH:
				case ACCESS:
				case ADDRESSOF:
				case ALIAS:
				case AND:
				case ATTRIBUTE:
				case APPEND:
				case BEGIN:
				case BINARY:
				case BOOLEAN:
				case BYVAL:
				case BYREF:
				case BYTE:
				case CLASS:
				case CLOSE:
				case DATABASE:
				case DATE:
				case DOUBLE:
				case EMPTY:
				case END:
				case EQV:
				case ERROR:
				case FALSE:
				case GET:
				case IMP:
				case IN:
				case INPUT:
				case IS:
				case INTEGER:
				case LOCK:
				case LONG:
				case LIB:
				case LIKE:
				case LINE_INPUT:
				case LOCK_READ:
				case LOCK_WRITE:
				case LOCK_READ_WRITE:
				case ME:
				case MID:
				case MOD:
				case NAME:
				case NEW:
				case NOT:
				case NOTHING:
				case NULL:
				case OBJECT:
				case ON_ERROR:
				case OPEN:
				case OPTIONAL:
				case OR:
				case OUTPUT:
				case PARAMARRAY:
				case PRESERVE:
				case PRINT:
				case PTRSAFE:
				case PUT:
				case RANDOM:
				case READ:
				case READ_WRITE:
				case REM:
				case RESET:
				case SEEK:
				case SHARED:
				case SINGLE:
				case SPC:
				case STEP:
				case STRING:
				case TAB:
				case TEXT:
				case THEN:
				case TO:
				case TRUE:
				case TYPEOF:
				case UNLOCK:
				case UNTIL:
				case VARIANT:
				case VERSION:
				case WIDTH:
				case WITHEVENTS:
				case WRITE:
				case XOR:
				case LPAREN:
				case MINUS:
				case L_SQUARE_BRACKET:
				case STRINGLITERAL:
				case OCTLITERAL:
				case HEXLITERAL:
				case FLOATLITERAL:
				case INTEGERLITERAL:
				case DATELITERAL:
				case WS:
				case IDENTIFIER:
				case LINE_CONTINUATION:
					{
					State = 1913; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1920; Match(RSET);
			State = 1921; whiteSpace();
			State = 1922; expression(0);
			State = 1924;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1923; whiteSpace();
				}
			}

			State = 1926; Match(EQ);
			State = 1928;
			switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				State = 1927; whiteSpace();
				}
				break;
			}
			State = 1930; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1932; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1934; Match(NAME);
			State = 1935; whiteSpace();
			State = 1936; expression(0);
			State = 1937; whiteSpace();
			State = 1938; Match(AS);
			State = 1939; whiteSpace();
			State = 1940; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public IReadOnlyList<StatementLabelDefinitionContext> statementLabelDefinition() {
			return GetRuleContexts<StatementLabelDefinitionContext>();
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public IReadOnlyList<CaseClauseContext> caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public StatementLabelDefinitionContext statementLabelDefinition(int i) {
			return GetRuleContext<StatementLabelDefinitionContext>(i);
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		public CaseElseClauseContext caseElseClause() {
			return GetRuleContext<CaseElseClauseContext>(0);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_selectCaseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; Match(SELECT);
			State = 1944;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1943; whiteSpace();
				}
			}

			State = 1946; Match(CASE);
			State = 1948;
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				State = 1947; whiteSpace();
				}
				break;
			}
			State = 1950; selectExpression();
			State = 1951; endOfStatement();
			State = 1961;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,264,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1953;
					switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
					case 1:
						{
						State = 1952; statementLabelDefinition();
						}
						break;
					}
					State = 1956;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1955; whiteSpace();
						}
					}

					State = 1958; caseClause();
					}
					} 
				}
				State = 1963;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,264,_ctx);
			}
			State = 1965;
			switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				State = 1964; statementLabelDefinition();
				}
				break;
			}
			State = 1968;
			switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				State = 1967; whiteSpace();
				}
				break;
			}
			State = 1971;
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 1970; caseElseClause();
				}
				break;
			}
			State = 1974;
			switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				State = 1973; statementLabelDefinition();
				}
				break;
			}
			State = 1977;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1976; whiteSpace();
				}
			}

			State = 1979; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_selectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public IReadOnlyList<RangeClauseContext> rangeClause() {
			return GetRuleContexts<RangeClauseContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public RangeClauseContext rangeClause(int i) {
			return GetRuleContext<RangeClauseContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1983; Match(CASE);
			State = 1984; whiteSpace();
			State = 1985; rangeClause();
			State = 1996;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,272,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1987;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1986; whiteSpace();
						}
					}

					State = 1989; Match(COMMA);
					State = 1991;
					switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
					case 1:
						{
						State = 1990; whiteSpace();
						}
						break;
					}
					State = 1993; rangeClause();
					}
					} 
				}
				State = 1998;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,272,_ctx);
			}
			State = 1999; endOfStatement();
			State = 2000; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CaseElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseClauseContext caseElseClause() {
		CaseElseClauseContext _localctx = new CaseElseClauseContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_caseElseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2002; Match(CASE);
			State = 2004;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2003; whiteSpace();
				}
			}

			State = 2006; Match(ELSE);
			State = 2007; endOfStatement();
			State = 2008; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SelectEndValueContext selectEndValue() {
			return GetRuleContext<SelectEndValueContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SelectStartValueContext selectStartValue() {
			return GetRuleContext<SelectStartValueContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_rangeClause);
		int _la;
		try {
			State = 2029;
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2014;
				switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					State = 2010; Match(IS);
					State = 2012;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2011; whiteSpace();
						}
					}

					}
					break;
				}
				State = 2016; comparisonOperator();
				State = 2018;
				switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					State = 2017; whiteSpace();
					}
					break;
				}
				State = 2020; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2022; selectStartValue();
				State = 2023; whiteSpace();
				State = 2024; Match(TO);
				State = 2025; whiteSpace();
				State = 2026; selectEndValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2028; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStartValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectStartValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStartValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectStartValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectStartValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStartValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStartValueContext selectStartValue() {
		SelectStartValueContext _localctx = new SelectStartValueContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_selectStartValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectEndValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectEndValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectEndValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectEndValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectEndValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectEndValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectEndValueContext selectEndValue() {
		SelectEndValueContext _localctx = new SelectEndValueContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_selectEndValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2033; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2035; Match(SET);
			State = 2036; whiteSpace();
			State = 2037; lExpression(0);
			State = 2039;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2038; whiteSpace();
				}
			}

			State = 2041; Match(EQ);
			State = 2043;
			switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				State = 2042; whiteSpace();
				}
				break;
			}
			State = 2045; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_subStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 2047; visibility();
				State = 2048; whiteSpace();
				}
			}

			State = 2054;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 2052; Match(STATIC);
				State = 2053; whiteSpace();
				}
			}

			State = 2056; Match(SUB);
			State = 2058;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2057; whiteSpace();
				}
			}

			State = 2060; subroutineName();
			State = 2065;
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				State = 2062;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2061; whiteSpace();
					}
				}

				State = 2064; argList();
				}
				break;
			}
			State = 2067; endOfStatement();
			State = 2068; block();
			State = 2070;
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				State = 2069; statementLabelDefinition();
				}
				break;
			}
			State = 2073;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2072; whiteSpace();
				}
			}

			State = 2075; Match(END_SUB);
			State = 2081;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,287,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2076; endOfLine();
					State = 2077; attributeStmt();
					}
					} 
				}
				State = 2083;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,287,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2084; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicTypeDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public UdtDeclarationContext udtDeclaration() {
			return GetRuleContext<UdtDeclarationContext>(0);
		}
		public PublicTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPublicTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPublicTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicTypeDeclarationContext publicTypeDeclaration() {
		PublicTypeDeclarationContext _localctx = new PublicTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_publicTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2088;
			_la = _input.La(1);
			if (_la==GLOBAL || _la==PUBLIC) {
				{
				State = 2086;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==PUBLIC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2087; whiteSpace();
				}
			}

			State = 2090; udtDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivateTypeDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public UdtDeclarationContext udtDeclaration() {
			return GetRuleContext<UdtDeclarationContext>(0);
		}
		public PrivateTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privateTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrivateTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrivateTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivateTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivateTypeDeclarationContext privateTypeDeclaration() {
		PrivateTypeDeclarationContext _localctx = new PrivateTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_privateTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2092; Match(PRIVATE);
			State = 2093; whiteSpace();
			State = 2094; udtDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtDeclarationContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public UdtMemberListContext udtMemberList() {
			return GetRuleContext<UdtMemberListContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public UdtDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtDeclarationContext udtDeclaration() {
		UdtDeclarationContext _localctx = new UdtDeclarationContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_udtDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2096; Match(TYPE);
			State = 2097; whiteSpace();
			State = 2098; untypedIdentifier();
			State = 2099; endOfStatement();
			State = 2100; udtMemberList();
			State = 2101; endOfStatement();
			State = 2102; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtMemberListContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public UdtMemberContext udtMember(int i) {
			return GetRuleContext<UdtMemberContext>(i);
		}
		public IReadOnlyList<UdtMemberContext> udtMember() {
			return GetRuleContexts<UdtMemberContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public UdtMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtMemberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtMemberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtMemberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtMemberListContext udtMemberList() {
		UdtMemberListContext _localctx = new UdtMemberListContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_udtMemberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2104; udtMember();
			State = 2110;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,289,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2105; endOfStatement();
					State = 2106; udtMember();
					}
					} 
				}
				State = 2112;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,289,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtMemberContext : ParserRuleContext {
		public UntypedNameMemberDeclarationContext untypedNameMemberDeclaration() {
			return GetRuleContext<UntypedNameMemberDeclarationContext>(0);
		}
		public ReservedNameMemberDeclarationContext reservedNameMemberDeclaration() {
			return GetRuleContext<ReservedNameMemberDeclarationContext>(0);
		}
		public UdtMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtMemberContext udtMember() {
		UdtMemberContext _localctx = new UdtMemberContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_udtMember);
		try {
			State = 2115;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2113; reservedNameMemberDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2114; untypedNameMemberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedNameMemberDeclarationContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public OptionalArrayClauseContext optionalArrayClause() {
			return GetRuleContext<OptionalArrayClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public UntypedNameMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedNameMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUntypedNameMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUntypedNameMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedNameMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedNameMemberDeclarationContext untypedNameMemberDeclaration() {
		UntypedNameMemberDeclarationContext _localctx = new UntypedNameMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_untypedNameMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2117; untypedIdentifier();
			State = 2119;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2118; whiteSpace();
				}
			}

			State = 2121; optionalArrayClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedNameMemberDeclarationContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ReservedNameMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedNameMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReservedNameMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReservedNameMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedNameMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedNameMemberDeclarationContext reservedNameMemberDeclaration() {
		ReservedNameMemberDeclarationContext _localctx = new ReservedNameMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_reservedNameMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2123; unrestrictedIdentifier();
			State = 2124; whiteSpace();
			State = 2125; asTypeClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalArrayClauseContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ArrayDimContext arrayDim() {
			return GetRuleContext<ArrayDimContext>(0);
		}
		public OptionalArrayClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalArrayClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionalArrayClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionalArrayClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalArrayClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalArrayClauseContext optionalArrayClause() {
		OptionalArrayClauseContext _localctx = new OptionalArrayClauseContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_optionalArrayClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2130;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 2127; arrayDim();
				State = 2128; whiteSpace();
				}
			}

			State = 2132; asTypeClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BoundsListContext boundsList() {
			return GetRuleContext<BoundsListContext>(0);
		}
		public ArrayDimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDim; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArrayDim(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArrayDim(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimContext arrayDim() {
		ArrayDimContext _localctx = new ArrayDimContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_arrayDim);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2134; Match(LPAREN);
			State = 2136;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				State = 2135; whiteSpace();
				}
				break;
			}
			State = 2139;
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				State = 2138; boundsList();
				}
				break;
			}
			State = 2142;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2141; whiteSpace();
				}
			}

			State = 2144; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundsListContext : ParserRuleContext {
		public DimSpecContext dimSpec(int i) {
			return GetRuleContext<DimSpecContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<DimSpecContext> dimSpec() {
			return GetRuleContexts<DimSpecContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public BoundsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBoundsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBoundsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoundsListContext boundsList() {
		BoundsListContext _localctx = new BoundsListContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_boundsList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2146; dimSpec();
			State = 2157;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,298,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2148;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2147; whiteSpace();
						}
					}

					State = 2150; Match(COMMA);
					State = 2152;
					switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						State = 2151; whiteSpace();
						}
						break;
					}
					State = 2154; dimSpec();
					}
					} 
				}
				State = 2159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,298,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimSpecContext : ParserRuleContext {
		public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DimSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDimSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDimSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimSpecContext dimSpec() {
		DimSpecContext _localctx = new DimSpecContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_dimSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2164;
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				State = 2160; lowerBound();
				State = 2162;
				switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					State = 2161; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 2166; upperBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLowerBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLowerBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_lowerBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2168; constantExpression();
			State = 2170;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2169; whiteSpace();
				}
			}

			State = 2172; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2174; constantExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2176; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2181;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2178; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2179; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2180; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2183; whiteSpace();
			State = 2186;
			switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				State = 2184; Match(WITHEVENTS);
				State = 2185; whiteSpace();
				}
				break;
			}
			State = 2188; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190; variableSubStmt();
			State = 2201;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2192;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2191; whiteSpace();
						}
					}

					State = 2194; Match(COMMA);
					State = 2196;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2195; whiteSpace();
						}
					}

					State = 2198; variableSubStmt();
					}
					} 
				}
				State = 2203;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2204; identifier();
			State = 2222;
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 2206;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2205; whiteSpace();
					}
				}

				State = 2208; Match(LPAREN);
				State = 2210;
				switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					State = 2209; whiteSpace();
					}
					break;
				}
				State = 2216;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
					{
					State = 2212; subscripts();
					State = 2214;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2213; whiteSpace();
						}
					}

					}
				}

				State = 2218; Match(RPAREN);
				State = 2220;
				switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					State = 2219; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 2227;
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 2224; whiteSpace();
				State = 2225; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_whileWendStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2229; Match(WHILE);
			State = 2230; whiteSpace();
			State = 2231; expression(0);
			State = 2232; endOfStatement();
			State = 2233; block();
			State = 2235;
			switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				State = 2234; statementLabelDefinition();
				}
				break;
			}
			State = 2238;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2237; whiteSpace();
				}
			}

			State = 2240; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2242; Match(WITH);
			State = 2243; whiteSpace();
			State = 2244; expression(0);
			State = 2245; endOfStatement();
			State = 2246; block();
			State = 2248;
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				State = 2247; statementLabelDefinition();
				}
				break;
			}
			State = 2251;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2250; whiteSpace();
				}
			}

			State = 2253; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineSpecialFormContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STEP(int i) {
			return GetToken(VBAParser.STEP, i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<TupleContext> tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<ITerminalNode> STEP() { return GetTokens(VBAParser.STEP); }
		public LineSpecialFormOptionContext lineSpecialFormOption() {
			return GetRuleContext<LineSpecialFormOptionContext>(0);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public LineSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineSpecialFormContext lineSpecialForm() {
		LineSpecialFormContext _localctx = new LineSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_lineSpecialForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2255; expression(0);
			State = 2256; whiteSpace();
			State = 2261;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2257; Match(STEP);
				State = 2259;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2258; whiteSpace();
					}
				}

				}
			}

			State = 2263; tuple();
			State = 2264; Match(MINUS);
			State = 2269;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2265; Match(STEP);
				State = 2267;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2266; whiteSpace();
					}
				}

				}
			}

			State = 2271; tuple();
			State = 2273;
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 2272; whiteSpace();
				}
				break;
			}
			State = 2280;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				State = 2275; Match(COMMA);
				State = 2277;
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 2276; whiteSpace();
					}
					break;
				}
				State = 2279; expression(0);
				}
				break;
			}
			State = 2283;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2282; whiteSpace();
				}
				break;
			}
			State = 2290;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 2285; Match(COMMA);
				State = 2287;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2286; whiteSpace();
					}
				}

				State = 2289; lineSpecialFormOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleSpecialFormContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public CircleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCircleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCircleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleSpecialFormContext circleSpecialForm() {
		CircleSpecialFormContext _localctx = new CircleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_circleSpecialForm);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2300;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
				{
				State = 2292; expression(0);
				State = 2294;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2293; whiteSpace();
					}
				}

				State = 2296; Match(DOT);
				State = 2298;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2297; whiteSpace();
					}
				}

				}
			}

			State = 2302; Match(CIRCLE);
			State = 2303; whiteSpace();
			State = 2308;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2304; Match(STEP);
				State = 2306;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2305; whiteSpace();
					}
				}

				}
			}

			State = 2310; tuple();
			State = 2319;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2312;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2311; whiteSpace();
						}
					}

					State = 2314; Match(COMMA);
					State = 2316;
					switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
					case 1:
						{
						State = 2315; whiteSpace();
						}
						break;
					}
					State = 2318; expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2321;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,335,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScaleSpecialFormContext : ParserRuleContext {
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<TupleContext> tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public ScaleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scaleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterScaleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitScaleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScaleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScaleSpecialFormContext scaleSpecialForm() {
		ScaleSpecialFormContext _localctx = new ScaleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_scaleSpecialForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
				{
				State = 2323; expression(0);
				State = 2325;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2324; whiteSpace();
					}
				}

				State = 2327; Match(DOT);
				State = 2329;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2328; whiteSpace();
					}
				}

				}
			}

			State = 2333; Match(SCALE);
			State = 2334; whiteSpace();
			State = 2335; tuple();
			State = 2337;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2336; whiteSpace();
				}
			}

			State = 2339; Match(MINUS);
			State = 2341;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2340; whiteSpace();
				}
			}

			State = 2343; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345; Match(LPAREN);
			State = 2347;
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 2346; whiteSpace();
				}
				break;
			}
			State = 2349; expression(0);
			State = 2351;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2350; whiteSpace();
				}
			}

			State = 2353; Match(COMMA);
			State = 2355;
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				State = 2354; whiteSpace();
				}
				break;
			}
			State = 2357; expression(0);
			State = 2359;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2358; whiteSpace();
				}
			}

			State = 2361; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineSpecialFormOptionContext : ParserRuleContext {
		public ITerminalNode B_CHAR() { return GetToken(VBAParser.B_CHAR, 0); }
		public ITerminalNode BF() { return GetToken(VBAParser.BF, 0); }
		public LineSpecialFormOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineSpecialFormOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineSpecialFormOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineSpecialFormOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineSpecialFormOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineSpecialFormOptionContext lineSpecialFormOption() {
		LineSpecialFormOptionContext _localctx = new LineSpecialFormOptionContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_lineSpecialFormOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363;
			_la = _input.La(1);
			if ( !(_la==B_CHAR || _la==BF) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2365; subscript();
			State = 2376;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,347,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2367;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2366; whiteSpace();
						}
					}

					State = 2369; Match(COMMA);
					State = 2371;
					switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
					case 1:
						{
						State = 2370; whiteSpace();
						}
						break;
					}
					State = 2373; subscript();
					}
					} 
				}
				State = 2378;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,347,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				State = 2379; expression(0);
				State = 2380; whiteSpace();
				State = 2381; Match(TO);
				State = 2382; whiteSpace();
				}
				break;
			}
			State = 2386; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public MarkerKeywordContext markerKeyword() {
			return GetRuleContext<MarkerKeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_unrestrictedIdentifier);
		try {
			State = 2391;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2388; identifier();
				}
				break;
			case EXIT:
			case OPTION:
			case CALL:
			case CASE:
			case CONST:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case ENUM:
			case ERASE:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case LOOP:
			case LET:
			case LSET:
			case NEXT:
			case ON:
			case PRIVATE:
			case PUBLIC:
			case RAISEEVENT:
			case REDIM:
			case RESUME:
			case RETURN:
			case RSET:
			case SELECT:
			case SET:
			case STATIC:
			case STOP:
			case SUB:
			case TYPE:
			case WEND:
			case WHILE:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2389; statementKeyword();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2390; markerKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public TypedIdentifierContext typedIdentifier() {
			return GetRuleContext<TypedIdentifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_identifier);
		try {
			State = 2395;
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2393; typedIdentifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2394; untypedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedIdentifierContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public UntypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUntypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUntypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedIdentifierContext untypedIdentifier() {
		UntypedIdentifierContext _localctx = new UntypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_untypedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397; identifierValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentifierContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public TypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentifierContext typedIdentifier() {
		TypedIdentifierContext _localctx = new TypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_typedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2399; untypedIdentifier();
			State = 2400; typeHint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public ITerminalNode BF() { return GetToken(VBAParser.BF, 0); }
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_identifierValue);
		try {
			State = 2406;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2402; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2403; keyword();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2404; foreignName();
				}
				break;
			case BF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2405; Match(BF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignNameContext : ParserRuleContext {
		public IReadOnlyList<ForeignIdentifierContext> foreignIdentifier() {
			return GetRuleContexts<ForeignIdentifierContext>();
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext foreignIdentifier(int i) {
			return GetRuleContext<ForeignIdentifierContext>(i);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignNameContext foreignName() {
		ForeignNameContext _localctx = new ForeignNameContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_foreignName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2408; Match(L_SQUARE_BRACKET);
			State = 2412;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << COMMA) | (1L << COLON) | (1L << SEMICOLON) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_ENUM - 64)) | (1L << (END_FUNCTION - 64)) | (1L << (END_IF - 64)) | (1L << (END_PROPERTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_SUB - 64)) | (1L << (END_TYPE - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OPTION_BASE - 128)) | (1L << (OPTION_EXPLICIT - 128)) | (1L << (OPTION_COMPARE - 128)) | (1L << (OPTION_PRIVATE_MODULE - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (ASSIGN - 192)) | (1L << (DIV - 192)) | (1L << (INTDIV - 192)) | (1L << (EQ - 192)) | (1L << (GEQ - 192)) | (1L << (GT - 192)) | (1L << (LEQ - 192)) | (1L << (LPAREN - 192)) | (1L << (LT - 192)) | (1L << (MINUS - 192)) | (1L << (MULT - 192)) | (1L << (NEQ - 192)) | (1L << (PLUS - 192)) | (1L << (POW - 192)) | (1L << (RPAREN - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (NEWLINE - 192)) | (1L << (SINGLEQUOTE - 192)) | (1L << (UNDERSCORE - 192)) | (1L << (WS - 192)) | (1L << (GUIDLITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (ERRORCHAR - 192)))) != 0)) {
				{
				{
				State = 2409; foreignIdentifier();
				}
				}
				State = 2414;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2415; Match(R_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignIdentifierContext : ParserRuleContext {
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignIdentifierContext foreignIdentifier() {
		ForeignIdentifierContext _localctx = new ForeignIdentifierContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_foreignIdentifier);
		int _la;
		try {
			State = 2419;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case COMMA:
			case COLON:
			case SEMICOLON:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case AT:
			case PERCENT:
			case DOLLAR:
			case AMPERSAND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case EMPTY:
			case END_ENUM:
			case END_FUNCTION:
			case END_IF:
			case END_PROPERTY:
			case END_SELECT:
			case END_SUB:
			case END_TYPE:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case ON_ERROR:
			case ON_LOCAL_ERROR:
			case OPEN:
			case OPTIONAL:
			case OPTION_BASE:
			case OPTION_EXPLICIT:
			case OPTION_COMPARE:
			case OPTION_PRIVATE_MODULE:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PROPERTY_GET:
			case PROPERTY_LET:
			case PROPERTY_SET:
			case PTRSAFE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case ASSIGN:
			case DIV:
			case INTDIV:
			case EQ:
			case GEQ:
			case GT:
			case LEQ:
			case LPAREN:
			case LT:
			case MINUS:
			case MULT:
			case NEQ:
			case PLUS:
			case POW:
			case RPAREN:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case NEWLINE:
			case SINGLEQUOTE:
			case UNDERSCORE:
			case WS:
			case GUIDLITERAL:
			case IDENTIFIER:
			case LINE_CONTINUATION:
			case ERRORCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2417;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==L_SQUARE_BRACKET || _la==R_SQUARE_BRACKET) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2418; foreignName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2421; Match(AS);
			State = 2423;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2422; whiteSpace();
				}
			}

			State = 2427;
			switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				State = 2425; Match(NEW);
				State = 2426; whiteSpace();
				}
				break;
			}
			State = 2429; type();
			State = 2434;
			switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				State = 2431;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2430; whiteSpace();
					}
				}

				State = 2433; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DATE - 68)) | (1L << (DOUBLE - 68)) | (1L << (INTEGER - 68)) | (1L << (LONG - 68)))) != 0) || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (SINGLE - 180)) | (1L << (STRING - 180)) | (1L << (VARIANT - 180)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2438;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (EQ - 208)) | (1L << (GEQ - 208)) | (1L << (GT - 208)) | (1L << (LEQ - 208)) | (1L << (LT - 208)) | (1L << (NEQ - 208)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
	 
		public ComplexTypeContext() { }
		public virtual void CopyFrom(ComplexTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CtTypeofexprContext : ComplexTypeContext {
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtTypeofexprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtTypeofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtTypeofexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtTypeofexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtMarkedFileNumberExprContext : ComplexTypeContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public CtMarkedFileNumberExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtMarkedFileNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtMarkedFileNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtMarkedFileNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtLiteralExprContext : ComplexTypeContext {
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public CtLiteralExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtBuiltInTypeExprContext : ComplexTypeContext {
		public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		public CtBuiltInTypeExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtBuiltInTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtBuiltInTypeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtBuiltInTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtNewExprContext : ComplexTypeContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtNewExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtParenthesizedExprContext : ComplexTypeContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtParenthesizedExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtLExprContext : ComplexTypeContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public CtLExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_complexType);
		int _la;
		try {
			State = 2463;
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				_localctx = new CtLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2440; literalExpression();
				}
				break;

			case 2:
				_localctx = new CtLExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2441; lExpression(0);
				}
				break;

			case 3:
				_localctx = new CtBuiltInTypeExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2442; builtInType();
				}
				break;

			case 4:
				_localctx = new CtParenthesizedExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2443; Match(LPAREN);
				State = 2445;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2444; whiteSpace();
					}
				}

				State = 2447; complexType();
				State = 2449;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2448; whiteSpace();
					}
				}

				State = 2451; Match(RPAREN);
				}
				break;

			case 5:
				_localctx = new CtTypeofexprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2453; Match(TYPEOF);
				State = 2454; whiteSpace();
				State = 2455; complexType();
				}
				break;

			case 6:
				_localctx = new CtNewExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2457; Match(NEW);
				State = 2458; whiteSpace();
				State = 2459; complexType();
				}
				break;

			case 7:
				_localctx = new CtMarkedFileNumberExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2461; Match(HASH);
				State = 2462; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465; Match(MULT);
			State = 2467;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2466; whiteSpace();
				}
			}

			State = 2471;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2469; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2470; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelDefinitionContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public CombinedLabelsContext combinedLabels() {
			return GetRuleContext<CombinedLabelsContext>(0);
		}
		public StandaloneLineNumberLabelContext standaloneLineNumberLabel() {
			return GetRuleContext<StandaloneLineNumberLabelContext>(0);
		}
		public StatementLabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelDefinitionContext statementLabelDefinition() {
		StatementLabelDefinitionContext _localctx = new StatementLabelDefinitionContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_statementLabelDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2473;
			if (!(_input.La(-1) == NEWLINE)) throw new FailedPredicateException(this, "_input.La(-1) == NEWLINE");
			State = 2477;
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 2474; combinedLabels();
				}
				break;

			case 2:
				{
				State = 2475; identifierStatementLabel();
				}
				break;

			case 3:
				{
				State = 2476; standaloneLineNumberLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierStatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementLabelContext identifierStatementLabel() {
		IdentifierStatementLabelContext _localctx = new IdentifierStatementLabelContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_identifierStatementLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2479; unrestrictedIdentifier();
			State = 2481;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2480; whiteSpace();
				}
			}

			State = 2483; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneLineNumberLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public StandaloneLineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneLineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStandaloneLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStandaloneLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneLineNumberLabelContext standaloneLineNumberLabel() {
		StandaloneLineNumberLabelContext _localctx = new StandaloneLineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_standaloneLineNumberLabel);
		int _la;
		try {
			State = 2492;
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2485; lineNumberLabel();
				State = 2487;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2486; whiteSpace();
					}
				}

				State = 2489; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2491; lineNumberLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombinedLabelsContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public CombinedLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combinedLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCombinedLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCombinedLabels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombinedLabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CombinedLabelsContext combinedLabels() {
		CombinedLabelsContext _localctx = new CombinedLabelsContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_combinedLabels);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494; lineNumberLabel();
			State = 2495; whiteSpace();
			State = 2496; identifierStatementLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberLabelContext : ParserRuleContext {
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberLabelContext lineNumberLabel() {
		LineNumberLabelContext _localctx = new LineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_lineNumberLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2498; numberLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500;
			_la = _input.La(1);
			if ( !(((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (OCTLITERAL - 223)) | (1L << (HEXLITERAL - 223)) | (1L << (FLOATLITERAL - 223)) | (1L << (INTEGERLITERAL - 223)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2504;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2502; baseType();
				}
				break;

			case 2:
				{
				State = 2503; complexType();
				}
				break;
			}
			State = 2514;
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				State = 2507;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2506; whiteSpace();
					}
				}

				State = 2509; Match(LPAREN);
				State = 2511;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2510; whiteSpace();
					}
				}

				State = 2513; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2518;
			_la = _input.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public NewExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public PowOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPowOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPowOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AddOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofexprContext : ExpressionContext {
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeofexprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeofexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntDivOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public IntDivOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntDivOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntDivOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDivOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalImpOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public LogicalImpOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalImpOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalImpOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalImpOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ConcatOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConcatOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConcatOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MarkedFileNumberExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ModOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LExprContext : ExpressionContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public LExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public MultOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalXorOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalAndOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalOrOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalOpContext : ExpressionContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RelationalOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalEqvOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalEqvOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalEqvOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalEqvOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalEqvOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuiltInTypeExprContext : ExpressionContext {
		public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		public BuiltInTypeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInTypeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotOpContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicalNotOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalNotOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalNotOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNotOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 378;
		EnterRecursionRule(_localctx, 378, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557;
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				_localctx = new TypeofexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2521; Match(TYPEOF);
				State = 2522; whiteSpace();
				State = 2523; expression(17);
				}
				break;

			case 2:
				{
				_localctx = new NewExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2525; Match(NEW);
				State = 2526; whiteSpace();
				State = 2527; expression(16);
				}
				break;

			case 3:
				{
				_localctx = new UnaryMinusOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2529; Match(MINUS);
				State = 2531;
				switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					State = 2530; whiteSpace();
					}
					break;
				}
				State = 2533; expression(14);
				}
				break;

			case 4:
				{
				_localctx = new LogicalNotOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2534; Match(NOT);
				State = 2536;
				switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					State = 2535; whiteSpace();
					}
					break;
				}
				State = 2538; expression(7);
				}
				break;

			case 5:
				{
				_localctx = new MarkedFileNumberExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2539; Match(HASH);
				State = 2540; expression(1);
				}
				break;

			case 6:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2542;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2541; whiteSpace();
					}
				}

				State = 2544; Match(LPAREN);
				State = 2546;
				switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					State = 2545; whiteSpace();
					}
					break;
				}
				State = 2548; expression(0);
				State = 2550;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2549; whiteSpace();
					}
				}

				State = 2552; Match(RPAREN);
				}
				break;

			case 7:
				{
				_localctx = new LiteralExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2554; literalExpression();
				}
				break;

			case 8:
				{
				_localctx = new LExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2555; lExpression(0);
				}
				break;

			case 9:
				{
				_localctx = new BuiltInTypeExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2556; builtInType();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2669;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2667;
					switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
					case 1:
						{
						_localctx = new PowOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2559;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2561;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2560; whiteSpace();
							}
						}

						State = 2563; Match(POW);
						State = 2565;
						switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
						case 1:
							{
							State = 2564; whiteSpace();
							}
							break;
						}
						State = 2567; expression(16);
						}
						break;

					case 2:
						{
						_localctx = new MultOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2568;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2570;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2569; whiteSpace();
							}
						}

						State = 2572;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2574;
						switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
						case 1:
							{
							State = 2573; whiteSpace();
							}
							break;
						}
						State = 2576; expression(14);
						}
						break;

					case 3:
						{
						_localctx = new IntDivOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2577;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2579;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2578; whiteSpace();
							}
						}

						State = 2581; Match(INTDIV);
						State = 2583;
						switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
						case 1:
							{
							State = 2582; whiteSpace();
							}
							break;
						}
						State = 2585; expression(13);
						}
						break;

					case 4:
						{
						_localctx = new ModOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2586;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2588;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2587; whiteSpace();
							}
						}

						State = 2590; Match(MOD);
						State = 2592;
						switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
						case 1:
							{
							State = 2591; whiteSpace();
							}
							break;
						}
						State = 2594; expression(12);
						}
						break;

					case 5:
						{
						_localctx = new AddOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2595;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2597;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2596; whiteSpace();
							}
						}

						State = 2599;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2601;
						switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
						case 1:
							{
							State = 2600; whiteSpace();
							}
							break;
						}
						State = 2603; expression(11);
						}
						break;

					case 6:
						{
						_localctx = new ConcatOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2604;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2606;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2605; whiteSpace();
							}
						}

						State = 2608; Match(AMPERSAND);
						State = 2610;
						switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
						case 1:
							{
							State = 2609; whiteSpace();
							}
							break;
						}
						State = 2612; expression(10);
						}
						break;

					case 7:
						{
						_localctx = new RelationalOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2613;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2615;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2614; whiteSpace();
							}
						}

						State = 2617;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (EQ - 208)) | (1L << (GEQ - 208)) | (1L << (GT - 208)) | (1L << (LEQ - 208)) | (1L << (LT - 208)) | (1L << (NEQ - 208)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2619;
						switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
						case 1:
							{
							State = 2618; whiteSpace();
							}
							break;
						}
						State = 2621; expression(9);
						}
						break;

					case 8:
						{
						_localctx = new LogicalAndOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2622;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2624;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2623; whiteSpace();
							}
						}

						State = 2626; Match(AND);
						State = 2628;
						switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
						case 1:
							{
							State = 2627; whiteSpace();
							}
							break;
						}
						State = 2630; expression(7);
						}
						break;

					case 9:
						{
						_localctx = new LogicalOrOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2631;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2633;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2632; whiteSpace();
							}
						}

						State = 2635; Match(OR);
						State = 2637;
						switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
						case 1:
							{
							State = 2636; whiteSpace();
							}
							break;
						}
						State = 2639; expression(6);
						}
						break;

					case 10:
						{
						_localctx = new LogicalXorOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2640;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2642;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2641; whiteSpace();
							}
						}

						State = 2644; Match(XOR);
						State = 2646;
						switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
						case 1:
							{
							State = 2645; whiteSpace();
							}
							break;
						}
						State = 2648; expression(5);
						}
						break;

					case 11:
						{
						_localctx = new LogicalEqvOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2649;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2651;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2650; whiteSpace();
							}
						}

						State = 2653; Match(EQV);
						State = 2655;
						switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
						case 1:
							{
							State = 2654; whiteSpace();
							}
							break;
						}
						State = 2657; expression(4);
						}
						break;

					case 12:
						{
						_localctx = new LogicalImpOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2658;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2660;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2659; whiteSpace();
							}
						}

						State = 2662; Match(IMP);
						State = 2664;
						switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
						case 1:
							{
							State = 2663; whiteSpace();
							}
							break;
						}
						State = 2666; expression(3);
						}
						break;
					}
					} 
				}
				State = 2671;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LiteralIdentifierContext literalIdentifier() {
			return GetRuleContext<LiteralIdentifierContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_literalExpression);
		try {
			State = 2679;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2672; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2673; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2674; Match(STRINGLITERAL);
				}
				break;
			case EMPTY:
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2675; literalIdentifier();
				State = 2677;
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 2676; typeHint();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIdentifierContext : ParserRuleContext {
		public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
			return GetRuleContext<ObjectLiteralIdentifierContext>(0);
		}
		public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
			return GetRuleContext<BooleanLiteralIdentifierContext>(0);
		}
		public VariantLiteralIdentifierContext variantLiteralIdentifier() {
			return GetRuleContext<VariantLiteralIdentifierContext>(0);
		}
		public LiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIdentifierContext literalIdentifier() {
		LiteralIdentifierContext _localctx = new LiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_literalIdentifier);
		try {
			State = 2684;
			switch (_input.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2681; booleanLiteralIdentifier();
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2682; objectLiteralIdentifier();
				}
				break;
			case EMPTY:
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2683; variantLiteralIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public BooleanLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
		BooleanLiteralIdentifierContext _localctx = new BooleanLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_booleanLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ObjectLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
		ObjectLiteralIdentifierContext _localctx = new ObjectLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_objectLiteralIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2688; Match(NOTHING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public VariantLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariantLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariantLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantLiteralIdentifierContext variantLiteralIdentifier() {
		VariantLiteralIdentifierContext _localctx = new VariantLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_variantLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2690;
			_la = _input.La(1);
			if ( !(_la==EMPTY || _la==NULL) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LExpressionContext : ParserRuleContext {
		public LExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lExpression; } }
	 
		public LExpressionContext() { }
		public virtual void CopyFrom(LExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexExprContext : LExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IndexExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithMemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithMemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithDictionaryAccessExprContext : LExpressionContext {
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithDictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExprContext : LExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleNameExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public MemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceExprContext : LExpressionContext {
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public InstanceExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DictionaryAccessExprContext : LExpressionContext {
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public DictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhitespaceIndexExprContext : LExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public WhitespaceIndexExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhitespaceIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhitespaceIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespaceIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LExpressionContext lExpression() {
		return lExpression(0);
	}

	private LExpressionContext lExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LExpressionContext _localctx = new LExpressionContext(_ctx, _parentState);
		LExpressionContext _prevctx = _localctx;
		int _startState = 390;
		EnterRecursionRule(_localctx, 390, RULE_lExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2705;
			switch ( Interpreter.AdaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				_localctx = new InstanceExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2693; Match(ME);
				}
				break;

			case 2:
				{
				_localctx = new SimpleNameExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2694; identifier();
				}
				break;

			case 3:
				{
				_localctx = new WithMemberAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2695; Match(DOT);
				State = 2697;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2696; mandatoryLineContinuation();
					}
				}

				State = 2699; unrestrictedIdentifier();
				}
				break;

			case 4:
				{
				_localctx = new WithDictionaryAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2700; Match(EXCLAMATIONPOINT);
				State = 2702;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2701; mandatoryLineContinuation();
					}
				}

				State = 2704; unrestrictedIdentifier();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2756;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,421,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2754;
					switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
					case 1:
						{
						_localctx = new IndexExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2707;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2708; Match(LPAREN);
						State = 2710;
						switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
						case 1:
							{
							State = 2709; whiteSpace();
							}
							break;
						}
						State = 2713;
						switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
						case 1:
							{
							State = 2712; argumentList();
							}
							break;
						}
						State = 2716;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2715; whiteSpace();
							}
						}

						State = 2718; Match(RPAREN);
						}
						break;

					case 2:
						{
						_localctx = new MemberAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2719;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2721;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2720; mandatoryLineContinuation();
							}
						}

						State = 2723; Match(DOT);
						State = 2725;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2724; mandatoryLineContinuation();
							}
						}

						State = 2727; unrestrictedIdentifier();
						}
						break;

					case 3:
						{
						_localctx = new DictionaryAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2728;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2730;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2729; mandatoryLineContinuation();
							}
						}

						State = 2732; Match(EXCLAMATIONPOINT);
						State = 2734;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2733; mandatoryLineContinuation();
							}
						}

						State = 2736; unrestrictedIdentifier();
						}
						break;

					case 4:
						{
						_localctx = new WhitespaceIndexExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2737;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2738; mandatoryLineContinuation();
						State = 2740;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2739; whiteSpace();
							}
						}

						State = 2742; Match(LPAREN);
						State = 2744;
						switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
						case 1:
							{
							State = 2743; whiteSpace();
							}
							break;
						}
						State = 2747;
						switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
						case 1:
							{
							State = 2746; argumentList();
							}
							break;
						}
						State = 2750;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2749; whiteSpace();
							}
						}

						State = 2752; Match(RPAREN);
						}
						break;
					}
					} 
				}
				State = 2758;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,421,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BuiltInTypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtInType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInTypeContext builtInType() {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_builtInType);
		int _la;
		try {
			State = 2780;
			switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2759; baseType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2760; Match(L_SQUARE_BRACKET);
				State = 2762;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2761; whiteSpace();
					}
				}

				State = 2764; baseType();
				State = 2766;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2765; whiteSpace();
					}
				}

				State = 2768; Match(R_SQUARE_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2770; Match(OBJECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2771; Match(L_SQUARE_BRACKET);
				State = 2773;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2772; whiteSpace();
					}
				}

				State = 2775; Match(OBJECT);
				State = 2777;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2776; whiteSpace();
					}
				}

				State = 2779; Match(R_SQUARE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ArgumentContext> argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_argumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2783;
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 2782; whiteSpace();
				}
				break;
			}
			State = 2801;
			switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
			case 1+1:
				{
				State = 2786;
				switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					State = 2785; argument();
					}
					break;
				}
				State = 2798;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,431,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2789;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2788; whiteSpace();
							}
						}

						State = 2791; Match(COMMA);
						State = 2793;
						switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
						case 1:
							{
							State = 2792; whiteSpace();
							}
							break;
						}
						State = 2795; argument();
						}
						} 
					}
					State = 2800;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,431,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredArgumentContext : ParserRuleContext {
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public RequiredArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRequiredArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRequiredArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredArgumentContext requiredArgument() {
		RequiredArgumentContext _localctx = new RequiredArgumentContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_requiredArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2803; argument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NamedArgumentContext namedArgument() {
			return GetRuleContext<NamedArgumentContext>(0);
		}
		public MissingArgumentContext missingArgument() {
			return GetRuleContext<MissingArgumentContext>(0);
		}
		public PositionalArgumentContext positionalArgument() {
			return GetRuleContext<PositionalArgumentContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_argument);
		try {
			State = 2808;
			switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2805; positionalArgument();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2806; namedArgument();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2807; missingArgument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalArgumentContext : ParserRuleContext {
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public PositionalArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPositionalArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPositionalArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalArgumentContext positionalArgument() {
		PositionalArgumentContext _localctx = new PositionalArgumentContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_positionalArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_namedArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812; unrestrictedIdentifier();
			State = 2814;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2813; whiteSpace();
				}
			}

			State = 2816; Match(ASSIGN);
			State = 2818;
			switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				State = 2817; whiteSpace();
				}
				break;
			}
			State = 2820; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MissingArgumentContext : ParserRuleContext {
		public MissingArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_missingArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMissingArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMissingArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMissingArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MissingArgumentContext missingArgument() {
		MissingArgumentContext _localctx = new MissingArgumentContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_missingArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
			return GetRuleContext<LowerBoundArgumentExpressionContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
			return GetRuleContext<UpperBoundArgumentExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public AddressOfExpressionContext addressOfExpression() {
			return GetRuleContext<AddressOfExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_argumentExpression);
		try {
			State = 2836;
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2826;
				switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					State = 2824; Match(BYVAL);
					State = 2825; whiteSpace();
					}
					break;
				}
				State = 2828; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2829; addressOfExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2830; lowerBoundArgumentExpression();
				State = 2831; whiteSpace();
				State = 2832; Match(TO);
				State = 2833; whiteSpace();
				State = 2834; upperBoundArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLowerBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLowerBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
		LowerBoundArgumentExpressionContext _localctx = new LowerBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_lowerBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2838; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
		UpperBoundArgumentExpressionContext _localctx = new UpperBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_upperBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2840; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressOfExpressionContext : ParserRuleContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddressOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddressOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddressOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddressOfExpressionContext addressOfExpression() {
		AddressOfExpressionContext _localctx = new AddressOfExpressionContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_addressOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2842; Match(ADDRESSOF);
			State = 2843; whiteSpace();
			State = 2844; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode WRITE(int i) {
			return GetToken(VBAParser.WRITE, i);
		}
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode B_CHAR() { return GetToken(VBAParser.B_CHAR, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WRITE() { return GetTokens(VBAParser.WRITE); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2846;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerKeywordContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public MarkerKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkerKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkerKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerKeywordContext markerKeyword() {
		MarkerKeywordContext _localctx = new MarkerKeywordContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_markerKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2848; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2850;
			_la = _input.La(1);
			if ( !(((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (EXIT - 24)) | (1L << (OPTION - 24)) | (1L << (CALL - 24)) | (1L << (CASE - 24)) | (1L << (CONST - 24)) | (1L << (DECLARE - 24)) | (1L << (DEFBOOL - 24)) | (1L << (DEFBYTE - 24)) | (1L << (DEFDATE - 24)) | (1L << (DEFDBL - 24)) | (1L << (DEFCUR - 24)) | (1L << (DEFINT - 24)) | (1L << (DEFLNG - 24)) | (1L << (DEFLNGLNG - 24)) | (1L << (DEFLNGPTR - 24)) | (1L << (DEFOBJ - 24)) | (1L << (DEFSNG - 24)) | (1L << (DEFSTR - 24)) | (1L << (DEFVAR - 24)) | (1L << (DIM - 24)) | (1L << (DO - 24)) | (1L << (ELSE - 24)))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (ELSEIF - 88)) | (1L << (END_SELECT - 88)) | (1L << (END_WITH - 88)) | (1L << (ENUM - 88)) | (1L << (ERASE - 88)) | (1L << (EVENT - 88)) | (1L << (EXIT_DO - 88)) | (1L << (EXIT_FOR - 88)) | (1L << (EXIT_FUNCTION - 88)) | (1L << (EXIT_PROPERTY - 88)) | (1L << (EXIT_SUB - 88)) | (1L << (FRIEND - 88)) | (1L << (FOR - 88)) | (1L << (FUNCTION - 88)) | (1L << (GLOBAL - 88)) | (1L << (GOSUB - 88)) | (1L << (GOTO - 88)) | (1L << (IF - 88)) | (1L << (IMPLEMENTS - 88)) | (1L << (LOOP - 88)) | (1L << (LET - 88)) | (1L << (LSET - 88)) | (1L << (NEXT - 88)) | (1L << (ON - 88)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (PRIVATE - 159)) | (1L << (PUBLIC - 159)) | (1L << (RAISEEVENT - 159)) | (1L << (REDIM - 159)) | (1L << (RESUME - 159)) | (1L << (RETURN - 159)) | (1L << (RSET - 159)) | (1L << (SELECT - 159)) | (1L << (SET - 159)) | (1L << (STATIC - 159)) | (1L << (STOP - 159)) | (1L << (SUB - 159)) | (1L << (TYPE - 159)) | (1L << (WEND - 159)) | (1L << (WHILE - 159)) | (1L << (WITH - 159)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CommentOrAnnotationContext commentOrAnnotation() {
			return GetRuleContext<CommentOrAnnotationContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_endOfLine);
		int _la;
		try {
			State = 2863;
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2853;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2852; whiteSpace();
					}
				}

				State = 2855; Match(NEWLINE);
				State = 2857;
				switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					State = 2856; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2860;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2859; whiteSpace();
					}
				}

				State = 2862; commentOrAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			State = 2881;
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2873;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2873;
						switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
						case 1:
							{
							State = 2865; endOfLine();
							}
							break;

						case 2:
							{
							{
							State = 2867;
							_la = _input.La(1);
							if (_la==WS || _la==LINE_CONTINUATION) {
								{
								State = 2866; whiteSpace();
								}
							}

							State = 2869; Match(COLON);
							State = 2871;
							switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
							case 1:
								{
								State = 2870; whiteSpace();
								}
								break;
							}
							}
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2875;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,445,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2878;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2877; whiteSpace();
					}
				}

				State = 2880; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentOrAnnotationContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public CommentOrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentOrAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentOrAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentOrAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentOrAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentOrAnnotationContext commentOrAnnotation() {
		CommentOrAnnotationContext _localctx = new CommentOrAnnotationContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_commentOrAnnotation);
		try {
			State = 2886;
			switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2883; annotationList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2884; remComment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2885; comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2888; Match(REM);
			State = 2890;
			switch ( Interpreter.AdaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				State = 2889; whiteSpace();
				}
				break;
			}
			State = 2892; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2894; Match(SINGLEQUOTE);
			State = 2895; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public CommentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBodyContext commentBody() {
		CommentBodyContext _localctx = new CommentBodyContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_commentBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2901;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,451,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2899;
					switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
					case 1:
						{
						State = 2897; Match(LINE_CONTINUATION);
						}
						break;

					case 2:
						{
						State = 2898;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==NEWLINE) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						}
						break;
					}
					} 
				}
				State = 2903;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,451,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> AT() { return GetTokens(VBAParser.AT); }
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode AT(int i) {
			return GetToken(VBAParser.AT, i);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_annotationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2904; Match(SINGLEQUOTE);
			State = 2910;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2905; Match(AT);
					State = 2906; annotation();
					State = 2908;
					switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
					case 1:
						{
						State = 2907; whiteSpace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2912;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,453,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2919;
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 2915;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2914; whiteSpace();
					}
				}

				State = 2917; Match(COLON);
				State = 2918; commentBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2921; annotationName();
			State = 2923;
			switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				State = 2922; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2925; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2987;
			switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2927; whiteSpace();
				State = 2928; annotationArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2930; whiteSpace();
				State = 2931; annotationArg();
				State = 2940;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2933;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2932; whiteSpace();
							}
						}

						State = 2935; Match(COMMA);
						State = 2937;
						switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
						case 1:
							{
							State = 2936; whiteSpace();
							}
							break;
						}
						State = 2939; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2942;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,459,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2945;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2944; whiteSpace();
					}
				}

				State = 2947; Match(LPAREN);
				State = 2949;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2948; whiteSpace();
					}
				}

				State = 2951; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2953;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2952; whiteSpace();
					}
				}

				State = 2955; Match(LPAREN);
				State = 2957;
				switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					State = 2956; whiteSpace();
					}
					break;
				}
				State = 2959; annotationArg();
				State = 2961;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2960; whiteSpace();
					}
				}

				State = 2963; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2966;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2965; whiteSpace();
					}
				}

				State = 2968; Match(LPAREN);
				State = 2969; annotationArg();
				State = 2978;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2971;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2970; whiteSpace();
							}
						}

						State = 2973; Match(COMMA);
						State = 2975;
						switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
						case 1:
							{
							State = 2974; whiteSpace();
							}
							break;
						}
						State = 2977; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2980;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,468,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2983;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2982; whiteSpace();
					}
				}

				State = 2985; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_annotationArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2989; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MandatoryLineContinuationContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LINE_CONTINUATION() { return GetToken(VBAParser.LINE_CONTINUATION, 0); }
		public MandatoryLineContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mandatoryLineContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMandatoryLineContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMandatoryLineContinuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMandatoryLineContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MandatoryLineContinuationContext mandatoryLineContinuation() {
		MandatoryLineContinuationContext _localctx = new MandatoryLineContinuationContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_mandatoryLineContinuation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2991; Match(LINE_CONTINUATION);
			State = 2995;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,471,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2992; Match(WS);
					}
					} 
				}
				State = 2997;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,471,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2999;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2998;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3001;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,472,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 79: return upperCaseA_sempred((UpperCaseAContext)_localctx, predIndex);

		case 80: return upperCaseZ_sempred((UpperCaseZContext)_localctx, predIndex);

		case 180: return statementLabelDefinition_sempred((StatementLabelDefinitionContext)_localctx, predIndex);

		case 189: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 195: return lExpression_sempred((LExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 15);

		case 4: return Precpred(_ctx, 13);

		case 5: return Precpred(_ctx, 12);

		case 6: return Precpred(_ctx, 11);

		case 7: return Precpred(_ctx, 10);

		case 8: return Precpred(_ctx, 9);

		case 9: return Precpred(_ctx, 8);

		case 10: return Precpred(_ctx, 6);

		case 11: return Precpred(_ctx, 5);

		case 12: return Precpred(_ctx, 4);

		case 13: return Precpred(_ctx, 3);

		case 14: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool upperCaseZ_sempred(UpperCaseZContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _input.Lt(1).Text.Equals("Z");
		}
		return true;
	}
	private bool statementLabelDefinition_sempred(StatementLabelDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return _input.La(-1) == NEWLINE;
		}
		return true;
	}
	private bool lExpression_sempred(LExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(_ctx, 7);

		case 17: return Precpred(_ctx, 6);

		case 18: return Precpred(_ctx, 1);

		case 15: return Precpred(_ctx, 8);
		}
		return true;
	}
	private bool upperCaseA_sempred(UpperCaseAContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _input.Lt(1).Text.Equals("A");
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xED\xBBE\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x1C5\n\x3\x3\x3\x3\x3\x5\x3"+
		"\x1C9\n\x3\x3\x3\x3\x3\x5\x3\x1CD\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x1D5\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x1DB\n\x4\x3\x4\x5\x4"+
		"\x1DE\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x1E8"+
		"\n\x5\x5\x5\x1EA\n\x5\x3\x5\x3\x5\x6\x5\x1EE\n\x5\r\x5\xE\x5\x1EF\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x1F7\n\x6\f\x6\xE\x6\x1FA\v\x6\x3\x6\x3"+
		"\x6\a\x6\x1FE\n\x6\f\x6\xE\x6\x201\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x206\n"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\x20D\n\a\f\a\xE\a\x210\v\a\x3\b\x3"+
		"\b\x3\b\x3\b\x5\b\x216\n\b\x3\b\x3\b\x5\b\x21A\n\b\x3\b\x3\b\x5\b\x21E"+
		"\n\b\x3\b\x3\b\x5\b\x222\n\b\x3\b\a\b\x225\n\b\f\b\xE\b\x228\v\b\x3\t"+
		"\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\x231\n\v\f\v\xE\v\x234\v\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x240\n\f\x3\r\x5\r\x243"+
		"\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x250"+
		"\n\r\x3\xE\x5\xE\x253\n\xE\x3\xE\x3\xE\x3\xE\a\xE\x258\n\xE\f\xE\xE\xE"+
		"\x25B\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x262\n\xF\x3\x10\x3\x10"+
		"\x3\x10\a\x10\x267\n\x10\f\x10\xE\x10\x26A\v\x10\x3\x11\x3\x11\x5\x11"+
		"\x26E\n\x11\x3\x11\x5\x11\x271\n\x11\x3\x11\x5\x11\x274\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x29A\n\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x5\x13\x2AA\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5"+
		"\x14\x2B2\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x2B7\n\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x2BC\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x2C5\n\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x5\x1B\x2D9\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2DD\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1C\x3\x1C\x3\x1D\x3\x1D\x5\x1D\x2E5\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3 \x3 \x3 \x3 \x5 \x2F0\n \x3!\x3!\x3\"\x3\"\x5\"\x2F6\n\"\x3"+
		"\"\x3\"\x5\"\x2FA\n\"\x3\"\a\"\x2FD\n\"\f\"\xE\"\x300\v\"\x3#\x3#\x3#"+
		"\x3#\x5#\x306\n#\x3#\x3#\x5#\x30A\n#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x5"+
		"%\x314\n%\x3%\x3%\x5%\x318\n%\x3%\x5%\x31B\n%\x3&\x3&\x3&\x3&\x5&\x321"+
		"\n&\x3&\x3&\x3&\x3&\x5&\x327\n&\x3\'\x3\'\x3(\x3(\x3)\x3)\x3)\x3)\x5)"+
		"\x331\n)\x3)\x3)\x5)\x335\n)\x3)\x5)\x338\n)\x3*\x3*\x3*\x3*\x5*\x33E"+
		"\n*\x3*\x3*\x5*\x342\n*\x3*\x3*\x3+\x3+\x3,\x3,\x3,\x3,\x5,\x34C\n,\x3"+
		",\x3,\x5,\x350\n,\x3,\x3,\x3-\x3-\x3.\x3.\x3.\x3.\x5.\x35A\n.\x3/\x3/"+
		"\x5/\x35E\n/\x3/\x3/\x5/\x362\n/\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x5\x32\x36E\n\x32\x3\x32\x3\x32\x5\x32\x372"+
		"\n\x32\x3\x32\x5\x32\x375\n\x32\x3\x33\x3\x33\x5\x33\x379\n\x33\x3\x33"+
		"\a\x33\x37C\n\x33\f\x33\xE\x33\x37F\v\x33\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x5\x34\x385\n\x34\x3\x34\x3\x34\x5\x34\x389\n\x34\x3\x35\x3\x35\x3\x35"+
		"\x5\x35\x38E\n\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x5\x38\x396"+
		"\n\x38\x3\x38\x3\x38\x5\x38\x39A\n\x38\x3\x38\x3\x38\x5\x38\x39E\n\x38"+
		"\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x5:\x3A6\n:\x3:\x5:\x3A9\n:\x3;\x3"+
		";\x5;\x3AD\n;\x3;\x3;\x5;\x3B1\n;\x3;\x3;\x3<\x3<\x3=\x3=\x3=\x3=\x5="+
		"\x3BB\n=\x3=\x3=\x5=\x3BF\n=\x3=\x5=\x3C2\n=\x3>\x3>\x3>\x3>\x5>\x3C8"+
		"\n>\x3>\x3>\x5>\x3CC\n>\x3>\x3>\x3?\x3?\x5?\x3D2\n?\x3?\x3?\x5?\x3D6\n"+
		"?\x3?\a?\x3D9\n?\f?\xE?\x3DC\v?\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x5"+
		"\x41\x3E4\n\x41\x3\x41\x3\x41\x5\x41\x3E8\n\x41\x3\x41\x5\x41\x3EB\n\x41"+
		"\x3\x41\x5\x41\x3EE\n\x41\x3\x41\x3\x41\x5\x41\x3F2\n\x41\x3\x41\x3\x41"+
		"\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x3FE\n"+
		"\x44\x3\x44\x3\x44\x5\x44\x402\n\x44\x3\x44\x5\x44\x405\n\x44\x3\x44\x5"+
		"\x44\x408\n\x44\x3\x44\x3\x44\x5\x44\x40C\n\x44\x3\x44\x3\x44\x3\x45\x3"+
		"\x45\x3\x46\x3\x46\x3\x46\x5\x46\x415\n\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x5\x46\x41B\n\x46\x3\x46\x3\x46\x5\x46\x41F\n\x46\x3\x46\a\x46\x422\n"+
		"\x46\f\x46\xE\x46\x425\v\x46\x3G\x3G\x3G\x3G\x5G\x42B\nG\x3G\x5G\x42E"+
		"\nG\x3G\x3G\x5G\x432\nG\x3G\x3G\x3H\x3H\x3H\x5H\x439\nH\x3H\x3H\x3H\x3"+
		"H\x5H\x43F\nH\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x5H\x44D"+
		"\nH\x3H\x5H\x450\nH\x3H\x5H\x453\nH\x3H\x3H\x3H\x5H\x458\nH\x3I\x3I\x5"+
		"I\x45C\nI\x3I\x3I\x5I\x460\nI\x3I\x3I\x5I\x464\nI\x3I\aI\x467\nI\fI\xE"+
		"I\x46A\vI\x5I\x46C\nI\x3I\x5I\x46F\nI\x3I\x3I\x3J\x3J\x5J\x475\nJ\x3J"+
		"\x3J\x5J\x479\nJ\x3J\x3J\x5J\x47D\nJ\x3J\x3J\x5J\x481\nJ\x3J\x3J\x5J\x485"+
		"\nJ\x3J\x5J\x488\nJ\x3J\x5J\x48B\nJ\x3J\x5J\x48E\nJ\x3J\x5J\x491\nJ\x3"+
		"J\x5J\x494\nJ\x3K\x3K\x5K\x498\nK\x3K\x3K\x3L\x3L\x3L\x3L\x5L\x4A0\nL"+
		"\x3L\x3L\x5L\x4A4\nL\x3L\aL\x4A7\nL\fL\xEL\x4AA\vL\x3M\x3M\x3N\x3N\x3"+
		"N\x5N\x4B1\nN\x3O\x3O\x3P\x3P\x5P\x4B7\nP\x3P\x3P\x5P\x4BB\nP\x3P\x3P"+
		"\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3S\x3S\x5S\x4C7\nS\x3S\x3S\x5S\x4CB\nS\x3S\x3"+
		"S\x3T\x3T\x3U\x3U\x3V\x3V\x3V\x3V\x5V\x4D7\nV\x3V\x5V\x4DA\nV\x3V\x3V"+
		"\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x5V\x4E6\nV\x3V\x5V\x4E9\nV\x3V\x3V\x3"+
		"V\x3V\x3V\x3V\x5V\x4F1\nV\x3V\x5V\x4F4\nV\x3V\x3V\x3V\x3V\x3V\x3V\x5V"+
		"\x4FC\nV\x3W\x3W\x3W\x5W\x501\nW\x3W\x3W\x3W\x3W\x3W\aW\x508\nW\fW\xE"+
		"W\x50B\vW\x3W\x3W\x3X\x3X\x5X\x511\nX\x3X\x3X\x5X\x515\nX\x3X\x5X\x518"+
		"\nX\x3X\x3X\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5Z\x522\nZ\x3Z\x3Z\x5Z\x526\nZ\x3"+
		"Z\aZ\x529\nZ\fZ\xEZ\x52C\vZ\x3[\x3[\x3[\x3[\x3\\\x3\\\x3\\\x5\\\x535\n"+
		"\\\x3\\\x3\\\x3\\\x3\\\x5\\\x53B\n\\\x3\\\x3\\\x3]\x3]\x3^\x3^\x3^\x3"+
		"^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x54D\n^\x3^\x5^\x550\n^\x3^\x3^"+
		"\x3^\x3^\x5^\x556\n^\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x5"+
		"_\x564\n_\x3_\x3_\x3_\x5_\x569\n_\x3_\x5_\x56C\n_\x3_\x3_\x3_\x3_\x5_"+
		"\x572\n_\x3`\x3`\x3`\x5`\x577\n`\x3`\x3`\x5`\x57B\n`\x3`\x3`\x5`\x57F"+
		"\n`\x3`\x3`\x5`\x583\n`\x3`\x5`\x586\n`\x3`\x5`\x589\n`\x3`\x5`\x58C\n"+
		"`\x3`\x3`\x3`\x5`\x591\n`\x3`\x5`\x594\n`\x3`\x3`\x3`\x3`\a`\x59A\n`\f"+
		"`\xE`\x59D\v`\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x5\x64\x5B1\n\x64\x3\x64\x5\x64\x5B4\n\x64\x3\x64\a\x64\x5B7\n\x64\f"+
		"\x64\xE\x64\x5BA\v\x64\x3\x64\x5\x64\x5BD\n\x64\x3\x64\x5\x64\x5C0\n\x64"+
		"\x3\x64\x5\x64\x5C3\n\x64\x3\x64\x5\x64\x5C6\n\x64\x3\x64\x5\x64\x5C9"+
		"\n\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x5DB\n\x65\x3"+
		"\x65\x3\x65\x5\x65\x5DF\n\x65\x3\x66\x3\x66\x3\x66\x3\x66\x3g\x3g\x5g"+
		"\x5E7\ng\x3h\x3h\x5h\x5EB\nh\x3h\x3h\x5h\x5EF\nh\x3h\x3h\x5h\x5F3\nh\x3"+
		"h\x3h\x3h\x3h\x5h\x5F9\nh\x3i\x3i\x5i\x5FD\ni\x3i\x3i\x5i\x601\ni\x3i"+
		"\x3i\x5i\x605\ni\x3i\x5i\x608\ni\x3i\x3i\x3j\x3j\x5j\x60E\nj\x3j\x5j\x611"+
		"\nj\x3k\x3k\x5k\x615\nk\x3k\x3k\x5k\x619\nk\x3k\x5k\x61C\nk\ak\x61E\n"+
		"k\fk\xEk\x621\vk\x3k\x3k\x5k\x625\nk\x5k\x627\nk\x3k\x3k\x5k\x62B\nk\x3"+
		"k\x3k\x5k\x62F\nk\x3k\x5k\x632\nk\ak\x634\nk\fk\xEk\x637\vk\x5k\x639\n"+
		"k\x3l\x3l\x3m\x3m\x3n\x3n\x3n\x3n\x3o\x3o\x5o\x645\no\x3o\x3o\x5o\x649"+
		"\no\x3o\x3o\x5o\x64D\no\x3o\x3o\x3p\x3p\x3p\x3p\x5p\x655\np\x3p\x3p\x5"+
		"p\x659\np\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x5q\x667\nq"+
		"\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x5r\x671\nr\x3r\x3r\x5r\x675\nr\x3r\a"+
		"r\x678\nr\fr\xEr\x67B\vr\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x5s\x685\ns\x3"+
		"s\x3s\x5s\x689\ns\x3s\as\x68C\ns\fs\xEs\x68F\vs\x3t\x3t\x3t\x5t\x694\n"+
		"t\x3t\x3t\x5t\x698\nt\x3t\x3t\x3t\x3t\x5t\x69E\nt\x3t\x5t\x6A1\nt\x3t"+
		"\x3t\x3t\x5t\x6A6\nt\x3t\x3t\x3t\x5t\x6AB\nt\x3t\x5t\x6AE\nt\x3t\x3t\x3"+
		"t\x3t\at\x6B4\nt\ft\xEt\x6B7\vt\x3u\x3u\x3u\x5u\x6BC\nu\x3u\x3u\x5u\x6C0"+
		"\nu\x3u\x3u\x3u\x3u\x5u\x6C6\nu\x3u\x5u\x6C9\nu\x3u\x3u\x3u\x5u\x6CE\n"+
		"u\x3u\x5u\x6D1\nu\x3u\x3u\x3u\x3u\au\x6D7\nu\fu\xEu\x6DA\vu\x3v\x3v\x3"+
		"v\x5v\x6DF\nv\x3v\x3v\x5v\x6E3\nv\x3v\x3v\x3v\x3v\x5v\x6E9\nv\x3v\x5v"+
		"\x6EC\nv\x3v\x3v\x3v\x5v\x6F1\nv\x3v\x5v\x6F4\nv\x3v\x3v\x3v\x3v\av\x6FA"+
		"\nv\fv\xEv\x6FD\vv\x3w\x3w\x3w\x3w\x5w\x703\nw\x3w\x3w\x5w\x707\nw\x3"+
		"w\x5w\x70A\nw\x3w\x5w\x70D\nw\x3w\x5w\x710\nw\x3x\x3x\x5x\x714\nx\x3x"+
		"\x3x\x5x\x718\nx\x3x\ax\x71B\nx\fx\xEx\x71E\vx\x3y\x3y\x5y\x722\ny\x3"+
		"y\x3y\x3z\x3z\x3z\x3z\x5z\x72A\nz\x3z\x3z\x3{\x3{\x5{\x730\n{\x3{\x3{"+
		"\x5{\x734\n{\x3{\a{\x737\n{\f{\xE{\x73A\v{\x3|\x3|\x3|\x3|\x5|\x740\n"+
		"|\x3}\x3}\x3}\x5}\x745\n}\x3}\x3}\x5}\x749\n}\x3}\x3}\x5}\x74D\n}\x3}"+
		"\x3}\x5}\x751\n}\x3}\x3}\x5}\x755\n}\x3}\x3}\x5}\x759\n}\x5}\x75B\n}\x3"+
		"}\x3}\x5}\x75F\n}\x3}\x3}\x5}\x763\n}\x3}\x3}\x3~\x3~\x5~\x769\n~\x3\x7F"+
		"\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80"+
		"\x775\n\x80\x5\x80\x777\n\x80\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\x77D"+
		"\n\x81\x5\x81\x77F\n\x81\x3\x82\x3\x82\x3\x83\x3\x83\x3\x83\x3\x83\x5"+
		"\x83\x787\n\x83\x3\x83\x3\x83\x5\x83\x78B\n\x83\x3\x83\x3\x83\x3\x84\x3"+
		"\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x86\x3"+
		"\x86\x5\x86\x79B\n\x86\x3\x86\x3\x86\x5\x86\x79F\n\x86\x3\x86\x3\x86\x3"+
		"\x86\x5\x86\x7A4\n\x86\x3\x86\x5\x86\x7A7\n\x86\x3\x86\a\x86\x7AA\n\x86"+
		"\f\x86\xE\x86\x7AD\v\x86\x3\x86\x5\x86\x7B0\n\x86\x3\x86\x5\x86\x7B3\n"+
		"\x86\x3\x86\x5\x86\x7B6\n\x86\x3\x86\x5\x86\x7B9\n\x86\x3\x86\x5\x86\x7BC"+
		"\n\x86\x3\x86\x3\x86\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88"+
		"\x7C6\n\x88\x3\x88\x3\x88\x5\x88\x7CA\n\x88\x3\x88\a\x88\x7CD\n\x88\f"+
		"\x88\xE\x88\x7D0\v\x88\x3\x88\x3\x88\x3\x88\x3\x89\x3\x89\x5\x89\x7D7"+
		"\n\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x5\x8A\x7DF\n\x8A\x5"+
		"\x8A\x7E1\n\x8A\x3\x8A\x3\x8A\x5\x8A\x7E5\n\x8A\x3\x8A\x3\x8A\x3\x8A\x3"+
		"\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x5\x8A\x7F0\n\x8A\x3\x8B\x3\x8B"+
		"\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\x7FA\n\x8D\x3\x8D\x3"+
		"\x8D\x5\x8D\x7FE\n\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x5\x8E\x805"+
		"\n\x8E\x3\x8E\x3\x8E\x5\x8E\x809\n\x8E\x3\x8E\x3\x8E\x5\x8E\x80D\n\x8E"+
		"\x3\x8E\x3\x8E\x5\x8E\x811\n\x8E\x3\x8E\x5\x8E\x814\n\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\x5\x8E\x819\n\x8E\x3\x8E\x5\x8E\x81C\n\x8E\x3\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\a\x8E\x822\n\x8E\f\x8E\xE\x8E\x825\v\x8E\x3\x8F\x3\x8F\x3\x90"+
		"\x3\x90\x5\x90\x82B\n\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3"+
		"\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x93\x3\x93\x3"+
		"\x93\x3\x93\a\x93\x83F\n\x93\f\x93\xE\x93\x842\v\x93\x3\x94\x3\x94\x5"+
		"\x94\x846\n\x94\x3\x95\x3\x95\x5\x95\x84A\n\x95\x3\x95\x3\x95\x3\x96\x3"+
		"\x96\x3\x96\x3\x96\x3\x97\x3\x97\x3\x97\x5\x97\x855\n\x97\x3\x97\x3\x97"+
		"\x3\x98\x3\x98\x5\x98\x85B\n\x98\x3\x98\x5\x98\x85E\n\x98\x3\x98\x5\x98"+
		"\x861\n\x98\x3\x98\x3\x98\x3\x99\x3\x99\x5\x99\x867\n\x99\x3\x99\x3\x99"+
		"\x5\x99\x86B\n\x99\x3\x99\a\x99\x86E\n\x99\f\x99\xE\x99\x871\v\x99\x3"+
		"\x9A\x3\x9A\x5\x9A\x875\n\x9A\x5\x9A\x877\n\x9A\x3\x9A\x3\x9A\x3\x9B\x3"+
		"\x9B\x5\x9B\x87D\n\x9B\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9D\x3\x9D\x3\x9E"+
		"\x3\x9E\x3\x9E\x5\x9E\x888\n\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\x88D\n\x9E"+
		"\x3\x9E\x3\x9E\x3\x9F\x3\x9F\x5\x9F\x893\n\x9F\x3\x9F\x3\x9F\x5\x9F\x897"+
		"\n\x9F\x3\x9F\a\x9F\x89A\n\x9F\f\x9F\xE\x9F\x89D\v\x9F\x3\xA0\x3\xA0\x5"+
		"\xA0\x8A1\n\xA0\x3\xA0\x3\xA0\x5\xA0\x8A5\n\xA0\x3\xA0\x3\xA0\x5\xA0\x8A9"+
		"\n\xA0\x5\xA0\x8AB\n\xA0\x3\xA0\x3\xA0\x5\xA0\x8AF\n\xA0\x5\xA0\x8B1\n"+
		"\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\x8B6\n\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\x5\xA1\x8BE\n\xA1\x3\xA1\x5\xA1\x8C1\n\xA1\x3\xA1\x3\xA1"+
		"\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\x8CB\n\xA2\x3\xA2\x5"+
		"\xA2\x8CE\n\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x8D6"+
		"\n\xA3\x5\xA3\x8D8\n\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x8DE\n\xA3"+
		"\x5\xA3\x8E0\n\xA3\x3\xA3\x3\xA3\x5\xA3\x8E4\n\xA3\x3\xA3\x3\xA3\x5\xA3"+
		"\x8E8\n\xA3\x3\xA3\x5\xA3\x8EB\n\xA3\x3\xA3\x5\xA3\x8EE\n\xA3\x3\xA3\x3"+
		"\xA3\x5\xA3\x8F2\n\xA3\x3\xA3\x5\xA3\x8F5\n\xA3\x3\xA4\x3\xA4\x5\xA4\x8F9"+
		"\n\xA4\x3\xA4\x3\xA4\x5\xA4\x8FD\n\xA4\x5\xA4\x8FF\n\xA4\x3\xA4\x3\xA4"+
		"\x3\xA4\x3\xA4\x5\xA4\x905\n\xA4\x5\xA4\x907\n\xA4\x3\xA4\x3\xA4\x5\xA4"+
		"\x90B\n\xA4\x3\xA4\x3\xA4\x5\xA4\x90F\n\xA4\x3\xA4\x6\xA4\x912\n\xA4\r"+
		"\xA4\xE\xA4\x913\x3\xA5\x3\xA5\x5\xA5\x918\n\xA5\x3\xA5\x3\xA5\x5\xA5"+
		"\x91C\n\xA5\x5\xA5\x91E\n\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\x924"+
		"\n\xA5\x3\xA5\x3\xA5\x5\xA5\x928\n\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x5"+
		"\xA6\x92E\n\xA6\x3\xA6\x3\xA6\x5\xA6\x932\n\xA6\x3\xA6\x3\xA6\x5\xA6\x936"+
		"\n\xA6\x3\xA6\x3\xA6\x5\xA6\x93A\n\xA6\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3"+
		"\xA8\x3\xA8\x5\xA8\x942\n\xA8\x3\xA8\x3\xA8\x5\xA8\x946\n\xA8\x3\xA8\a"+
		"\xA8\x949\n\xA8\f\xA8\xE\xA8\x94C\v\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3"+
		"\xA9\x5\xA9\x953\n\xA9\x3\xA9\x3\xA9\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x95A"+
		"\n\xAA\x3\xAB\x3\xAB\x5\xAB\x95E\n\xAB\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3"+
		"\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\x969\n\xAE\x3\xAF\x3\xAF\a\xAF"+
		"\x96D\n\xAF\f\xAF\xE\xAF\x970\v\xAF\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x5\xB0"+
		"\x976\n\xB0\x3\xB1\x3\xB1\x5\xB1\x97A\n\xB1\x3\xB1\x3\xB1\x5\xB1\x97E"+
		"\n\xB1\x3\xB1\x3\xB1\x5\xB1\x982\n\xB1\x3\xB1\x5\xB1\x985\n\xB1\x3\xB2"+
		"\x3\xB2\x3\xB3\x3\xB3\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x990\n"+
		"\xB4\x3\xB4\x3\xB4\x5\xB4\x994\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4"+
		"\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x9A2\n\xB4\x3"+
		"\xB5\x3\xB5\x5\xB5\x9A6\n\xB5\x3\xB5\x3\xB5\x5\xB5\x9AA\n\xB5\x3\xB6\x3"+
		"\xB6\x3\xB6\x3\xB6\x5\xB6\x9B0\n\xB6\x3\xB7\x3\xB7\x5\xB7\x9B4\n\xB7\x3"+
		"\xB7\x3\xB7\x3\xB8\x3\xB8\x5\xB8\x9BA\n\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8"+
		"\x9BF\n\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3"+
		"\xBC\x3\xBC\x5\xBC\x9CB\n\xBC\x3\xBC\x5\xBC\x9CE\n\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9D2\n\xBC\x3\xBC\x5\xBC\x9D5\n\xBC\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x5\xBF\x9E6\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x9EB\n\xBF\x3\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\x5\xBF\x9F1\n\xBF\x3\xBF\x3\xBF\x5\xBF\x9F5\n\xBF\x3"+
		"\xBF\x3\xBF\x5\xBF\x9F9\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF"+
		"\xA00\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA04\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA08"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA0D\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA11"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA16\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA1A"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA1F\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA23"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA28\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA2C"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA31\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA35"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA3A\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA3E"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA43\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA47"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA4C\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA50"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA55\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA59"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA5E\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA62"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xA67\n\xBF\x3\xBF\x3\xBF\x5\xBF\xA6B"+
		"\n\xBF\x3\xBF\a\xBF\xA6E\n\xBF\f\xBF\xE\xBF\xA71\v\xBF\x3\xC0\x3\xC0\x3"+
		"\xC0\x3\xC0\x3\xC0\x5\xC0\xA78\n\xC0\x5\xC0\xA7A\n\xC0\x3\xC1\x3\xC1\x3"+
		"\xC1\x5\xC1\xA7F\n\xC1\x3\xC2\x3\xC2\x3\xC3\x3\xC3\x3\xC4\x3\xC4\x3\xC5"+
		"\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\xA8C\n\xC5\x3\xC5\x3\xC5\x3\xC5\x5"+
		"\xC5\xA91\n\xC5\x3\xC5\x5\xC5\xA94\n\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\xA99"+
		"\n\xC5\x3\xC5\x5\xC5\xA9C\n\xC5\x3\xC5\x5\xC5\xA9F\n\xC5\x3\xC5\x3\xC5"+
		"\x3\xC5\x5\xC5\xAA4\n\xC5\x3\xC5\x3\xC5\x5\xC5\xAA8\n\xC5\x3\xC5\x3\xC5"+
		"\x3\xC5\x5\xC5\xAAD\n\xC5\x3\xC5\x3\xC5\x5\xC5\xAB1\n\xC5\x3\xC5\x3\xC5"+
		"\x3\xC5\x3\xC5\x5\xC5\xAB7\n\xC5\x3\xC5\x3\xC5\x5\xC5\xABB\n\xC5\x3\xC5"+
		"\x5\xC5\xABE\n\xC5\x3\xC5\x5\xC5\xAC1\n\xC5\x3\xC5\x3\xC5\a\xC5\xAC5\n"+
		"\xC5\f\xC5\xE\xC5\xAC8\v\xC5\x3\xC6\x3\xC6\x3\xC6\x5\xC6\xACD\n\xC6\x3"+
		"\xC6\x3\xC6\x5\xC6\xAD1\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6"+
		"\xAD8\n\xC6\x3\xC6\x3\xC6\x5\xC6\xADC\n\xC6\x3\xC6\x5\xC6\xADF\n\xC6\x3"+
		"\xC7\x5\xC7\xAE2\n\xC7\x3\xC7\x5\xC7\xAE5\n\xC7\x3\xC7\x5\xC7\xAE8\n\xC7"+
		"\x3\xC7\x3\xC7\x5\xC7\xAEC\n\xC7\x3\xC7\a\xC7\xAEF\n\xC7\f\xC7\xE\xC7"+
		"\xAF2\v\xC7\x5\xC7\xAF4\n\xC7\x3\xC8\x3\xC8\x3\xC9\x3\xC9\x3\xC9\x5\xC9"+
		"\xAFB\n\xC9\x3\xCA\x3\xCA\x3\xCB\x3\xCB\x5\xCB\xB01\n\xCB\x3\xCB\x3\xCB"+
		"\x5\xCB\xB05\n\xCB\x3\xCB\x3\xCB\x3\xCC\x3\xCC\x3\xCD\x3\xCD\x5\xCD\xB0D"+
		"\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD"+
		"\xB17\n\xCD\x3\xCE\x3\xCE\x3\xCF\x3\xCF\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3"+
		"\xD1\x3\xD1\x3\xD2\x3\xD2\x3\xD3\x3\xD3\x3\xD4\x5\xD4\xB28\n\xD4\x3\xD4"+
		"\x3\xD4\x5\xD4\xB2C\n\xD4\x3\xD4\x5\xD4\xB2F\n\xD4\x3\xD4\x5\xD4\xB32"+
		"\n\xD4\x3\xD5\x3\xD5\x5\xD5\xB36\n\xD5\x3\xD5\x3\xD5\x5\xD5\xB3A\n\xD5"+
		"\x6\xD5\xB3C\n\xD5\r\xD5\xE\xD5\xB3D\x3\xD5\x5\xD5\xB41\n\xD5\x3\xD5\x5"+
		"\xD5\xB44\n\xD5\x3\xD6\x3\xD6\x3\xD6\x5\xD6\xB49\n\xD6\x3\xD7\x3\xD7\x5"+
		"\xD7\xB4D\n\xD7\x3\xD7\x3\xD7\x3\xD8\x3\xD8\x3\xD8\x3\xD9\x3\xD9\a\xD9"+
		"\xB56\n\xD9\f\xD9\xE\xD9\xB59\v\xD9\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA"+
		"\xB5F\n\xDA\x6\xDA\xB61\n\xDA\r\xDA\xE\xDA\xB62\x3\xDA\x5\xDA\xB66\n\xDA"+
		"\x3\xDA\x3\xDA\x5\xDA\xB6A\n\xDA\x3\xDB\x3\xDB\x5\xDB\xB6E\n\xDB\x3\xDC"+
		"\x3\xDC\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\xB78\n\xDD\x3"+
		"\xDD\x3\xDD\x5\xDD\xB7C\n\xDD\x3\xDD\x6\xDD\xB7F\n\xDD\r\xDD\xE\xDD\xB80"+
		"\x3\xDD\x5\xDD\xB84\n\xDD\x3\xDD\x3\xDD\x5\xDD\xB88\n\xDD\x3\xDD\x3\xDD"+
		"\x5\xDD\xB8C\n\xDD\x3\xDD\x3\xDD\x5\xDD\xB90\n\xDD\x3\xDD\x3\xDD\x5\xDD"+
		"\xB94\n\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\xB99\n\xDD\x3\xDD\x3\xDD\x3\xDD"+
		"\x5\xDD\xB9E\n\xDD\x3\xDD\x3\xDD\x5\xDD\xBA2\n\xDD\x3\xDD\x6\xDD\xBA5"+
		"\n\xDD\r\xDD\xE\xDD\xBA6\x3\xDD\x5\xDD\xBAA\n\xDD\x3\xDD\x3\xDD\x5\xDD"+
		"\xBAE\n\xDD\x3\xDE\x3\xDE\x3\xDF\x3\xDF\a\xDF\xBB4\n\xDF\f\xDF\xE\xDF"+
		"\xBB7\v\xDF\x3\xE0\x6\xE0\xBBA\n\xE0\r\xE0\xE\xE0\xBBB\x3\xE0\x3\xAF3"+
		"\x2\x4\x17C\x188\xE1\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44"+
		"\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2"+
		"\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2"+
		"\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2"+
		"\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2"+
		"\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2"+
		"\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2"+
		"\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2"+
		"\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2"+
		"\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2"+
		"\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C"+
		"\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E"+
		"\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140"+
		"\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152"+
		"\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164"+
		"\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176"+
		"\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186\x2\x188"+
		"\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192\x2\x194\x2\x196\x2\x198\x2\x19A"+
		"\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6\x2\x1A8\x2\x1AA\x2\x1AC"+
		"\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6\x2\x1B8\x2\x1BA\x2\x1BC\x2\x1BE"+
		"\x2\x2\x1E\x5\x2;;\x45\x45\xBE\xBE\a\x2\x38\x38;;{{\x9D\x9D\xA8\xA8\x4"+
		"\x2\xAA\xAB\xCD\xCD\x4\x2\x85\x87\xB5\xB5\x4\x2))++\x4\x2rr\xBC\xBC\x3"+
		"\x2=>\x3\x2HT\x4\x2\xC5\xC5\xC9\xC9\x3\x2jn\x3\x2\x94\x95\x4\x2##\x8A"+
		"\x8A\x4\x2tt\xA6\xA6\x3\x2\x6\a\x3\x2\xDE\xDF\xE\x2\x4\x4\x15\x15!\"<"+
		"<??\x46\x46WW}}\x7F\x7F\xB6\xB6\xBB\xBB\xC6\xC6\a\x2||\x83\x83\xD2\xD5"+
		"\xD7\xD7\xDA\xDA\x3\x2\xE1\xE4\x5\x2,,.\x32\xDC\xDC\x6\x2pptt\xA1\xA1"+
		"\xA6\xA6\x4\x2\xD0\xD0\xD9\xD9\x4\x2\xD8\xD8\xDB\xDB\x4\x2oo\xC1\xC1\x4"+
		"\x2[[\x91\x91&\x2\x3\x6\b\xE\x10\x19\x1B#%%\'(\x33\x38:?\x42\x43\x45\x46"+
		"WW\x64\x64\x66\x66hhoossxxz\x7F\x82\x87\x89\x8C\x8E\x92\x94\x94\x96\x97"+
		"\x9C\xA0\xA5\xA5\xA7\xA8\xAA\xAB\xAD\xAE\xB2\xB2\xB5\xB7\xB9\xB9\xBB\xBB"+
		"\xBD\xC1\xC3\xC7\xCA\xCA\xCC\xCE \x2\x1A\x1A$$@\x41\x44\x44GVYZ``\x63"+
		"\x63\x65\x65gginprtwyy\x80\x81\x88\x88\x8D\x8D\x93\x93\xA1\xA1\xA6\xA6"+
		"\xA9\xA9\xAC\xAC\xAF\xB1\xB3\xB4\xB8\xB8\xBA\xBA\xBC\xBC\xC2\xC2\xC8\xC9"+
		"\xCB\xCB\x3\x2\xE6\xE6\x4\x2\xE9\xE9\xEC\xEC\xD22\x2\x1C0\x3\x2\x2\x2"+
		"\x4\x1C4\x3\x2\x2\x2\x6\x1D6\x3\x2\x2\x2\b\x1E1\x3\x2\x2\x2\n\x1F4\x3"+
		"\x2\x2\x2\f\x20E\x3\x2\x2\x2\xE\x211\x3\x2\x2\x2\x10\x229\x3\x2\x2\x2"+
		"\x12\x22B\x3\x2\x2\x2\x14\x232\x3\x2\x2\x2\x16\x23F\x3\x2\x2\x2\x18\x242"+
		"\x3\x2\x2\x2\x1A\x252\x3\x2\x2\x2\x1C\x261\x3\x2\x2\x2\x1E\x268\x3\x2"+
		"\x2\x2 \x273\x3\x2\x2\x2\"\x299\x3\x2\x2\x2$\x2A9\x3\x2\x2\x2&\x2AB\x3"+
		"\x2\x2\x2(\x2C6\x3\x2\x2\x2*\x2C8\x3\x2\x2\x2,\x2CC\x3\x2\x2\x2.\x2CE"+
		"\x3\x2\x2\x2\x30\x2D2\x3\x2\x2\x2\x32\x2D4\x3\x2\x2\x2\x34\x2D6\x3\x2"+
		"\x2\x2\x36\x2E0\x3\x2\x2\x2\x38\x2E4\x3\x2\x2\x2:\x2E6\x3\x2\x2\x2<\x2E9"+
		"\x3\x2\x2\x2>\x2EB\x3\x2\x2\x2@\x2F1\x3\x2\x2\x2\x42\x2F3\x3\x2\x2\x2"+
		"\x44\x301\x3\x2\x2\x2\x46\x30D\x3\x2\x2\x2H\x30F\x3\x2\x2\x2J\x326\x3"+
		"\x2\x2\x2L\x328\x3\x2\x2\x2N\x32A\x3\x2\x2\x2P\x32C\x3\x2\x2\x2R\x339"+
		"\x3\x2\x2\x2T\x345\x3\x2\x2\x2V\x347\x3\x2\x2\x2X\x353\x3\x2\x2\x2Z\x355"+
		"\x3\x2\x2\x2\\\x35B\x3\x2\x2\x2^\x365\x3\x2\x2\x2`\x367\x3\x2\x2\x2\x62"+
		"\x369\x3\x2\x2\x2\x64\x376\x3\x2\x2\x2\x66\x388\x3\x2\x2\x2h\x38D\x3\x2"+
		"\x2\x2j\x38F\x3\x2\x2\x2l\x391\x3\x2\x2\x2n\x393\x3\x2\x2\x2p\x3A1\x3"+
		"\x2\x2\x2r\x3A3\x3\x2\x2\x2t\x3AA\x3\x2\x2\x2v\x3B4\x3\x2\x2\x2x\x3B6"+
		"\x3\x2\x2\x2z\x3C3\x3\x2\x2\x2|\x3CF\x3\x2\x2\x2~\x3DD\x3\x2\x2\x2\x80"+
		"\x3DF\x3\x2\x2\x2\x82\x3F5\x3\x2\x2\x2\x84\x3F7\x3\x2\x2\x2\x86\x3F9\x3"+
		"\x2\x2\x2\x88\x40F\x3\x2\x2\x2\x8A\x414\x3\x2\x2\x2\x8C\x426\x3\x2\x2"+
		"\x2\x8E\x438\x3\x2\x2\x2\x90\x459\x3\x2\x2\x2\x92\x474\x3\x2\x2\x2\x94"+
		"\x495\x3\x2\x2\x2\x96\x49B\x3\x2\x2\x2\x98\x4AB\x3\x2\x2\x2\x9A\x4B0\x3"+
		"\x2\x2\x2\x9C\x4B2\x3\x2\x2\x2\x9E\x4B4\x3\x2\x2\x2\xA0\x4BE\x3\x2\x2"+
		"\x2\xA2\x4C1\x3\x2\x2\x2\xA4\x4C4\x3\x2\x2\x2\xA6\x4CE\x3\x2\x2\x2\xA8"+
		"\x4D0\x3\x2\x2\x2\xAA\x4FB\x3\x2\x2\x2\xAC\x500\x3\x2\x2\x2\xAE\x50E\x3"+
		"\x2\x2\x2\xB0\x51B\x3\x2\x2\x2\xB2\x51D\x3\x2\x2\x2\xB4\x52D\x3\x2\x2"+
		"\x2\xB6\x534\x3\x2\x2\x2\xB8\x53E\x3\x2\x2\x2\xBA\x540\x3\x2\x2\x2\xBC"+
		"\x557\x3\x2\x2\x2\xBE\x576\x3\x2\x2\x2\xC0\x59E\x3\x2\x2\x2\xC2\x5A0\x3"+
		"\x2\x2\x2\xC4\x5A4\x3\x2\x2\x2\xC6\x5A8\x3\x2\x2\x2\xC8\x5DE\x3\x2\x2"+
		"\x2\xCA\x5E0\x3\x2\x2\x2\xCC\x5E6\x3\x2\x2\x2\xCE\x5E8\x3\x2\x2\x2\xD0"+
		"\x5FA\x3\x2\x2\x2\xD2\x60B\x3\x2\x2\x2\xD4\x638\x3\x2\x2\x2\xD6\x63A\x3"+
		"\x2\x2\x2\xD8\x63C\x3\x2\x2\x2\xDA\x63E\x3\x2\x2\x2\xDC\x644\x3\x2\x2"+
		"\x2\xDE\x650\x3\x2\x2\x2\xE0\x65C\x3\x2\x2\x2\xE2\x668\x3\x2\x2\x2\xE4"+
		"\x67C\x3\x2\x2\x2\xE6\x693\x3\x2\x2\x2\xE8\x6BB\x3\x2\x2\x2\xEA\x6DE\x3"+
		"\x2\x2\x2\xEC\x6FE\x3\x2\x2\x2\xEE\x711\x3\x2\x2\x2\xF0\x721\x3\x2\x2"+
		"\x2\xF2\x725\x3\x2\x2\x2\xF4\x72D\x3\x2\x2\x2\xF6\x73B\x3\x2\x2\x2\xF8"+
		"\x741\x3\x2\x2\x2\xFA\x766\x3\x2\x2\x2\xFC\x76A\x3\x2\x2\x2\xFE\x776\x3"+
		"\x2\x2\x2\x100\x778\x3\x2\x2\x2\x102\x780\x3\x2\x2\x2\x104\x782\x3\x2"+
		"\x2\x2\x106\x78E\x3\x2\x2\x2\x108\x790\x3\x2\x2\x2\x10A\x798\x3\x2\x2"+
		"\x2\x10C\x7BF\x3\x2\x2\x2\x10E\x7C1\x3\x2\x2\x2\x110\x7D4\x3\x2\x2\x2"+
		"\x112\x7EF\x3\x2\x2\x2\x114\x7F1\x3\x2\x2\x2\x116\x7F3\x3\x2\x2\x2\x118"+
		"\x7F5\x3\x2\x2\x2\x11A\x804\x3\x2\x2\x2\x11C\x826\x3\x2\x2\x2\x11E\x82A"+
		"\x3\x2\x2\x2\x120\x82E\x3\x2\x2\x2\x122\x832\x3\x2\x2\x2\x124\x83A\x3"+
		"\x2\x2\x2\x126\x845\x3\x2\x2\x2\x128\x847\x3\x2\x2\x2\x12A\x84D\x3\x2"+
		"\x2\x2\x12C\x854\x3\x2\x2\x2\x12E\x858\x3\x2\x2\x2\x130\x864\x3\x2\x2"+
		"\x2\x132\x876\x3\x2\x2\x2\x134\x87A\x3\x2\x2\x2\x136\x880\x3\x2\x2\x2"+
		"\x138\x882\x3\x2\x2\x2\x13A\x887\x3\x2\x2\x2\x13C\x890\x3\x2\x2\x2\x13E"+
		"\x89E\x3\x2\x2\x2\x140\x8B7\x3\x2\x2\x2\x142\x8C4\x3\x2\x2\x2\x144\x8D1"+
		"\x3\x2\x2\x2\x146\x8FE\x3\x2\x2\x2\x148\x91D\x3\x2\x2\x2\x14A\x92B\x3"+
		"\x2\x2\x2\x14C\x93D\x3\x2\x2\x2\x14E\x93F\x3\x2\x2\x2\x150\x952\x3\x2"+
		"\x2\x2\x152\x959\x3\x2\x2\x2\x154\x95D\x3\x2\x2\x2\x156\x95F\x3\x2\x2"+
		"\x2\x158\x961\x3\x2\x2\x2\x15A\x968\x3\x2\x2\x2\x15C\x96A\x3\x2\x2\x2"+
		"\x15E\x975\x3\x2\x2\x2\x160\x977\x3\x2\x2\x2\x162\x986\x3\x2\x2\x2\x164"+
		"\x988\x3\x2\x2\x2\x166\x9A1\x3\x2\x2\x2\x168\x9A3\x3\x2\x2\x2\x16A\x9AB"+
		"\x3\x2\x2\x2\x16C\x9B1\x3\x2\x2\x2\x16E\x9BE\x3\x2\x2\x2\x170\x9C0\x3"+
		"\x2\x2\x2\x172\x9C4\x3\x2\x2\x2\x174\x9C6\x3\x2\x2\x2\x176\x9CA\x3\x2"+
		"\x2\x2\x178\x9D6\x3\x2\x2\x2\x17A\x9D8\x3\x2\x2\x2\x17C\x9FF\x3\x2\x2"+
		"\x2\x17E\xA79\x3\x2\x2\x2\x180\xA7E\x3\x2\x2\x2\x182\xA80\x3\x2\x2\x2"+
		"\x184\xA82\x3\x2\x2\x2\x186\xA84\x3\x2\x2\x2\x188\xA93\x3\x2\x2\x2\x18A"+
		"\xADE\x3\x2\x2\x2\x18C\xAE1\x3\x2\x2\x2\x18E\xAF5\x3\x2\x2\x2\x190\xAFA"+
		"\x3\x2\x2\x2\x192\xAFC\x3\x2\x2\x2\x194\xAFE\x3\x2\x2\x2\x196\xB08\x3"+
		"\x2\x2\x2\x198\xB16\x3\x2\x2\x2\x19A\xB18\x3\x2\x2\x2\x19C\xB1A\x3\x2"+
		"\x2\x2\x19E\xB1C\x3\x2\x2\x2\x1A0\xB20\x3\x2\x2\x2\x1A2\xB22\x3\x2\x2"+
		"\x2\x1A4\xB24\x3\x2\x2\x2\x1A6\xB31\x3\x2\x2\x2\x1A8\xB43\x3\x2\x2\x2"+
		"\x1AA\xB48\x3\x2\x2\x2\x1AC\xB4A\x3\x2\x2\x2\x1AE\xB50\x3\x2\x2\x2\x1B0"+
		"\xB57\x3\x2\x2\x2\x1B2\xB5A\x3\x2\x2\x2\x1B4\xB6B\x3\x2\x2\x2\x1B6\xB6F"+
		"\x3\x2\x2\x2\x1B8\xBAD\x3\x2\x2\x2\x1BA\xBAF\x3\x2\x2\x2\x1BC\xBB1\x3"+
		"\x2\x2\x2\x1BE\xBB9\x3\x2\x2\x2\x1C0\x1C1\x5\x4\x3\x2\x1C1\x1C2\a\x2\x2"+
		"\x3\x1C2\x3\x3\x2\x2\x2\x1C3\x1C5\x5\x1A8\xD5\x2\x1C4\x1C3\x3\x2\x2\x2"+
		"\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C8\x5\f\a\x2\x1C7"+
		"\x1C9\x5\x6\x4\x2\x1C8\x1C7\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CA"+
		"\x3\x2\x2\x2\x1CA\x1CC\x5\f\a\x2\x1CB\x1CD\x5\b\x5\x2\x1CC\x1CB\x3\x2"+
		"\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x5\f\a\x2"+
		"\x1CF\x1D0\x5\x14\v\x2\x1D0\x1D1\x5\f\a\x2\x1D1\x1D2\x5\x1A\xE\x2\x1D2"+
		"\x1D4\x5\f\a\x2\x1D3\x1D5\x5\x1BE\xE0\x2\x1D4\x1D3\x3\x2\x2\x2\x1D4\x1D5"+
		"\x3\x2\x2\x2\x1D5\x5\x3\x2\x2\x2\x1D6\x1D7\a\xC7\x2\x2\x1D7\x1D8\x5\x1BE"+
		"\xE0\x2\x1D8\x1DA\x5\x174\xBB\x2\x1D9\x1DB\x5\x1BE\xE0\x2\x1DA\x1D9\x3"+
		"\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DD\x3\x2\x2\x2\x1DC\x1DE\a\x42"+
		"\x2\x2\x1DD\x1DC\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2"+
		"\x2\x1DF\x1E0\x5\x1A8\xD5\x2\x1E0\a\x3\x2\x2\x2\x1E1\x1E9\a:\x2\x2\x1E2"+
		"\x1E3\x5\x1BE\xE0\x2\x1E3\x1E4\a\xEA\x2\x2\x1E4\x1E5\x5\x1BE\xE0\x2\x1E5"+
		"\x1E7\x5\x152\xAA\x2\x1E6\x1E8\x5\x1BE\xE0\x2\x1E7\x1E6\x3\x2\x2\x2\x1E7"+
		"\x1E8\x3\x2\x2\x2\x1E8\x1EA\x3\x2\x2\x2\x1E9\x1E2\x3\x2\x2\x2\x1E9\x1EA"+
		"\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1ED\x5\x1A8\xD5\x2\x1EC\x1EE"+
		"\x5\n\x6\x2\x1ED\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1ED\x3\x2"+
		"\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\a\x64\x2"+
		"\x2\x1F2\x1F3\x5\x1A8\xD5\x2\x1F3\t\x3\x2\x2\x2\x1F4\x1F8\x5\x152\xAA"+
		"\x2\x1F5\x1F7\x5\x1BE\xE0\x2\x1F6\x1F5\x3\x2\x2\x2\x1F7\x1FA\x3\x2\x2"+
		"\x2\x1F8\x1F6\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FB\x3\x2\x2\x2"+
		"\x1FA\x1F8\x3\x2\x2\x2\x1FB\x1FF\a\xD2\x2\x2\x1FC\x1FE\x5\x1BE\xE0\x2"+
		"\x1FD\x1FC\x3\x2\x2\x2\x1FE\x201\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x1FF"+
		"\x200\x3\x2\x2\x2\x200\x202\x3\x2\x2\x2\x201\x1FF\x3\x2\x2\x2\x202\x205"+
		"\x5\x17C\xBF\x2\x203\x204\a*\x2\x2\x204\x206\x5\x174\xBB\x2\x205\x203"+
		"\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\x208\x5"+
		"\x1A8\xD5\x2\x208\v\x3\x2\x2\x2\x209\x20A\x5\xE\b\x2\x20A\x20B\x5\x1A8"+
		"\xD5\x2\x20B\x20D\x3\x2\x2\x2\x20C\x209\x3\x2\x2\x2\x20D\x210\x3\x2\x2"+
		"\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\r\x3\x2\x2\x2\x210"+
		"\x20E\x3\x2\x2\x2\x211\x212\a\x37\x2\x2\x212\x213\x5\x1BE\xE0\x2\x213"+
		"\x215\x5\x10\t\x2\x214\x216\x5\x1BE\xE0\x2\x215\x214\x3\x2\x2\x2\x215"+
		"\x216\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217\x219\a\xD2\x2\x2\x218\x21A"+
		"\x5\x1BE\xE0\x2\x219\x218\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A\x21B"+
		"\x3\x2\x2\x2\x21B\x226\x5\x12\n\x2\x21C\x21E\x5\x1BE\xE0\x2\x21D\x21C"+
		"\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x221\a)"+
		"\x2\x2\x220\x222\x5\x1BE\xE0\x2\x221\x220\x3\x2\x2\x2\x221\x222\x3\x2"+
		"\x2\x2\x222\x223\x3\x2\x2\x2\x223\x225\x5\x12\n\x2\x224\x21D\x3\x2\x2"+
		"\x2\x225\x228\x3\x2\x2\x2\x226\x224\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2"+
		"\x227\xF\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x229\x22A\x5\x188\xC5\x2\x22A"+
		"\x11\x3\x2\x2\x2\x22B\x22C\x5\x17C\xBF\x2\x22C\x13\x3\x2\x2\x2\x22D\x22E"+
		"\x5\x18\r\x2\x22E\x22F\x5\x1A8\xD5\x2\x22F\x231\x3\x2\x2\x2\x230\x22D"+
		"\x3\x2\x2\x2\x231\x234\x3\x2\x2\x2\x232\x230\x3\x2\x2\x2\x232\x233\x3"+
		"\x2\x2\x2\x233\x15\x3\x2\x2\x2\x234\x232\x3\x2\x2\x2\x235\x236\a\x98\x2"+
		"\x2\x236\x237\x5\x1BE\xE0\x2\x237\x238\x5\x174\xBB\x2\x238\x240\x3\x2"+
		"\x2\x2\x239\x23A\a\x9A\x2\x2\x23A\x23B\x5\x1BE\xE0\x2\x23B\x23C\t\x2\x2"+
		"\x2\x23C\x240\x3\x2\x2\x2\x23D\x240\a\x99\x2\x2\x23E\x240\a\x9B\x2\x2"+
		"\x23F\x235\x3\x2\x2\x2\x23F\x239\x3\x2\x2\x2\x23F\x23D\x3\x2\x2\x2\x23F"+
		"\x23E\x3\x2\x2\x2\x240\x17\x3\x2\x2\x2\x241\x243\x5\x1BE\xE0\x2\x242\x241"+
		"\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x24F\x3\x2\x2\x2\x244\x250\x5"+
		"\xE\b\x2\x245\x250\x5\x8EH\x2\x246\x250\x5\x96L\x2\x247\x250\x5\xACW\x2"+
		"\x248\x250\x5\xB6\\\x2\x249\x250\x5\x8A\x46\x2\x24A\x250\x5\xDAn\x2\x24B"+
		"\x250\x5\x13A\x9E\x2\x24C\x250\x5\x16\f\x2\x24D\x250\x5\x11E\x90\x2\x24E"+
		"\x250\x5\x120\x91\x2\x24F\x244\x3\x2\x2\x2\x24F\x245\x3\x2\x2\x2\x24F"+
		"\x246\x3\x2\x2\x2\x24F\x247\x3\x2\x2\x2\x24F\x248\x3\x2\x2\x2\x24F\x249"+
		"\x3\x2\x2\x2\x24F\x24A\x3\x2\x2\x2\x24F\x24B\x3\x2\x2\x2\x24F\x24C\x3"+
		"\x2\x2\x2\x24F\x24D\x3\x2\x2\x2\x24F\x24E\x3\x2\x2\x2\x250\x19\x3\x2\x2"+
		"\x2\x251\x253\x5\x1BE\xE0\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2"+
		"\x2\x253\x259\x3\x2\x2\x2\x254\x255\x5\x1C\xF\x2\x255\x256\x5\x1A8\xD5"+
		"\x2\x256\x258\x3\x2\x2\x2\x257\x254\x3\x2\x2\x2\x258\x25B\x3\x2\x2\x2"+
		"\x259\x257\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x1B\x3\x2\x2\x2\x25B"+
		"\x259\x3\x2\x2\x2\x25C\x262\x5\xBE`\x2\x25D\x262\x5\xE6t\x2\x25E\x262"+
		"\x5\xE8u\x2\x25F\x262\x5\xEAv\x2\x260\x262\x5\x11A\x8E\x2\x261\x25C\x3"+
		"\x2\x2\x2\x261\x25D\x3\x2\x2\x2\x261\x25E\x3\x2\x2\x2\x261\x25F\x3\x2"+
		"\x2\x2\x261\x260\x3\x2\x2\x2\x262\x1D\x3\x2\x2\x2\x263\x264\x5 \x11\x2"+
		"\x264\x265\x5\x1A8\xD5\x2\x265\x267\x3\x2\x2\x2\x266\x263\x3\x2\x2\x2"+
		"\x267\x26A\x3\x2\x2\x2\x268\x266\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269"+
		"\x1F\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26B\x26D\x5\x16A\xB6\x2\x26C\x26E"+
		"\x5\x1BE\xE0\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x270"+
		"\x3\x2\x2\x2\x26F\x271\x5\"\x12\x2\x270\x26F\x3\x2\x2\x2\x270\x271\x3"+
		"\x2\x2\x2\x271\x274\x3\x2\x2\x2\x272\x274\x5\"\x12\x2\x273\x26B\x3\x2"+
		"\x2\x2\x273\x272\x3\x2\x2\x2\x274!\x3\x2\x2\x2\x275\x29A\x5$\x13\x2\x276"+
		"\x29A\x5\xE\b\x2\x277\x29A\x5\x8A\x46\x2\x278\x29A\x5\xAAV\x2\x279\x29A"+
		"\x5\xB0Y\x2\x27A\x29A\x5\xB2Z\x2\x27B\x29A\x5\xB4[\x2\x27C\x29A\x5\xB8"+
		"]\x2\x27D\x29A\x5\xBA^\x2\x27E\x29A\x5\xBC_\x2\x27F\x29A\x5\xC2\x62\x2"+
		"\x280\x29A\x5\xC4\x63\x2\x281\x29A\x5\xC6\x64\x2\x282\x29A\x5\xCCg\x2"+
		"\x283\x29A\x5\xDAn\x2\x284\x29A\x5\xDCo\x2\x285\x29A\x5\xDEp\x2\x286\x29A"+
		"\x5\xE0q\x2\x287\x29A\x5\xE2r\x2\x288\x29A\x5\xE4s\x2\x289\x29A\x5\xEC"+
		"w\x2\x28A\x29A\x5\xF2z\x2\x28B\x29A\x5\x100\x81\x2\x28C\x29A\x5\x102\x82"+
		"\x2\x28D\x29A\x5\x104\x83\x2\x28E\x29A\x5\x10A\x86\x2\x28F\x29A\x5\x118"+
		"\x8D\x2\x290\x29A\x5\x106\x84\x2\x291\x29A\x5\x13A\x9E\x2\x292\x29A\x5"+
		"\x140\xA1\x2\x293\x29A\x5\x142\xA2\x2\x294\x29A\x5\x144\xA3\x2\x295\x29A"+
		"\x5\x146\xA4\x2\x296\x29A\x5\x148\xA5\x2\x297\x29A\x5\xFE\x80\x2\x298"+
		"\x29A\x5\x108\x85\x2\x299\x275\x3\x2\x2\x2\x299\x276\x3\x2\x2\x2\x299"+
		"\x277\x3\x2\x2\x2\x299\x278\x3\x2\x2\x2\x299\x279\x3\x2\x2\x2\x299\x27A"+
		"\x3\x2\x2\x2\x299\x27B\x3\x2\x2\x2\x299\x27C\x3\x2\x2\x2\x299\x27D\x3"+
		"\x2\x2\x2\x299\x27E\x3\x2\x2\x2\x299\x27F\x3\x2\x2\x2\x299\x280\x3\x2"+
		"\x2\x2\x299\x281\x3\x2\x2\x2\x299\x282\x3\x2\x2\x2\x299\x283\x3\x2\x2"+
		"\x2\x299\x284\x3\x2\x2\x2\x299\x285\x3\x2\x2\x2\x299\x286\x3\x2\x2\x2"+
		"\x299\x287\x3\x2\x2\x2\x299\x288\x3\x2\x2\x2\x299\x289\x3\x2\x2\x2\x299"+
		"\x28A\x3\x2\x2\x2\x299\x28B\x3\x2\x2\x2\x299\x28C\x3\x2\x2\x2\x299\x28D"+
		"\x3\x2\x2\x2\x299\x28E\x3\x2\x2\x2\x299\x28F\x3\x2\x2\x2\x299\x290\x3"+
		"\x2\x2\x2\x299\x291\x3\x2\x2\x2\x299\x292\x3\x2\x2\x2\x299\x293\x3\x2"+
		"\x2\x2\x299\x294\x3\x2\x2\x2\x299\x295\x3\x2\x2\x2\x299\x296\x3\x2\x2"+
		"\x2\x299\x297\x3\x2\x2\x2\x299\x298\x3\x2\x2\x2\x29A#\x3\x2\x2\x2\x29B"+
		"\x2AA\x5&\x14\x2\x29C\x2AA\x5@!\x2\x29D\x2AA\x5> \x2\x29E\x2AA\x5\x44"+
		"#\x2\x29F\x2AA\x5H%\x2\x2A0\x2AA\x5P)\x2\x2A1\x2AA\x5R*\x2\x2A2\x2AA\x5"+
		"V,\x2\x2A3\x2AA\x5Z.\x2\x2A4\x2AA\x5\x62\x32\x2\x2A5\x2AA\x5x=\x2\x2A6"+
		"\x2AA\x5z>\x2\x2A7\x2AA\x5\x80\x41\x2\x2A8\x2AA\x5\x86\x44\x2\x2A9\x29B"+
		"\x3\x2\x2\x2\x2A9\x29C\x3\x2\x2\x2\x2A9\x29D\x3\x2\x2\x2\x2A9\x29E\x3"+
		"\x2\x2\x2\x2A9\x29F\x3\x2\x2\x2\x2A9\x2A0\x3\x2\x2\x2\x2A9\x2A1\x3\x2"+
		"\x2\x2\x2A9\x2A2\x3\x2\x2\x2\x2A9\x2A3\x3\x2\x2\x2\x2A9\x2A4\x3\x2\x2"+
		"\x2\x2A9\x2A5\x3\x2\x2\x2\x2A9\x2A6\x3\x2\x2\x2\x2A9\x2A7\x3\x2\x2\x2"+
		"\x2A9\x2A8\x3\x2\x2\x2\x2AA%\x3\x2\x2\x2\x2AB\x2AC\a\x96\x2\x2\x2AC\x2AD"+
		"\x5\x1BE\xE0\x2\x2AD\x2B1\x5(\x15\x2\x2AE\x2AF\x5\x1BE\xE0\x2\x2AF\x2B0"+
		"\x5*\x16\x2\x2B0\x2B2\x3\x2\x2\x2\x2B1\x2AE\x3\x2\x2\x2\x2B1\x2B2\x3\x2"+
		"\x2\x2\x2B2\x2B6\x3\x2\x2\x2\x2B3\x2B4\x5\x1BE\xE0\x2\x2B4\x2B5\x5.\x18"+
		"\x2\x2B5\x2B7\x3\x2\x2\x2\x2B6\x2B3\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2"+
		"\x2B7\x2BB\x3\x2\x2\x2\x2B8\x2B9\x5\x1BE\xE0\x2\x2B9\x2BA\x5\x32\x1A\x2"+
		"\x2BA\x2BC\x3\x2\x2\x2\x2BB\x2B8\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC"+
		"\x2BD\x3\x2\x2\x2\x2BD\x2BE\x5\x1BE\xE0\x2\x2BE\x2BF\a\x39\x2\x2\x2BF"+
		"\x2C0\x5\x1BE\xE0\x2\x2C0\x2C4\x5\x38\x1D\x2\x2C1\x2C2\x5\x1BE\xE0\x2"+
		"\x2C2\x2C3\x5\x34\x1B\x2\x2C3\x2C5\x3\x2\x2\x2\x2C4\x2C1\x3\x2\x2\x2\x2C4"+
		"\x2C5\x3\x2\x2\x2\x2C5\'\x3\x2\x2\x2\x2C6\x2C7\x5\x17C\xBF\x2\x2C7)\x3"+
		"\x2\x2\x2\x2C8\x2C9\aq\x2\x2\x2C9\x2CA\x5\x1BE\xE0\x2\x2CA\x2CB\x5,\x17"+
		"\x2\x2CB+\x3\x2\x2\x2\x2CC\x2CD\t\x3\x2\x2\x2CD-\x3\x2\x2\x2\x2CE\x2CF"+
		"\a\x33\x2\x2\x2CF\x2D0\x5\x1BE\xE0\x2\x2D0\x2D1\x5\x30\x19\x2\x2D1/\x3"+
		"\x2\x2\x2\x2D2\x2D3\t\x4\x2\x2\x2D3\x31\x3\x2\x2\x2\x2D4\x2D5\t\x5\x2"+
		"\x2\x2D5\x33\x3\x2\x2\x2\x2D6\x2D8\a\x1F\x2\x2\x2D7\x2D9\x5\x1BE\xE0\x2"+
		"\x2D8\x2D7\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA"+
		"\x2DC\a\xD2\x2\x2\x2DB\x2DD\x5\x1BE\xE0\x2\x2DC\x2DB\x3\x2\x2\x2\x2DC"+
		"\x2DD\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x2DF\x5\x36\x1C\x2\x2DF\x35"+
		"\x3\x2\x2\x2\x2E0\x2E1\x5\x17C\xBF\x2\x2E1\x37\x3\x2\x2\x2\x2E2\x2E5\x5"+
		":\x1E\x2\x2E3\x2E5\x5<\x1F\x2\x2E4\x2E2\x3\x2\x2\x2\x2E4\x2E3\x3\x2\x2"+
		"\x2\x2E5\x39\x3\x2\x2\x2\x2E6\x2E7\a.\x2\x2\x2E7\x2E8\x5\x17C\xBF\x2\x2E8"+
		";\x3\x2\x2\x2\x2E9\x2EA\x5\x17C\xBF\x2\x2EA=\x3\x2\x2\x2\x2EB\x2EF\a\x43"+
		"\x2\x2\x2EC\x2ED\x5\x1BE\xE0\x2\x2ED\x2EE\x5\x42\"\x2\x2EE\x2F0\x3\x2"+
		"\x2\x2\x2EF\x2EC\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0?\x3\x2\x2\x2\x2F1"+
		"\x2F2\a\xAE\x2\x2\x2F2\x41\x3\x2\x2\x2\x2F3\x2FE\x5\x38\x1D\x2\x2F4\x2F6"+
		"\x5\x1BE\xE0\x2\x2F5\x2F4\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F7"+
		"\x3\x2\x2\x2\x2F7\x2F9\a)\x2\x2\x2F8\x2FA\x5\x1BE\xE0\x2\x2F9\x2F8\x3"+
		"\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FB\x3\x2\x2\x2\x2FB\x2FD\x5\x38"+
		"\x1D\x2\x2FC\x2F5\x3\x2\x2\x2\x2FD\x300\x3\x2\x2\x2\x2FE\x2FC\x3\x2\x2"+
		"\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x43\x3\x2\x2\x2\x300\x2FE\x3\x2\x2\x2\x301"+
		"\x302\a\xB2\x2\x2\x302\x303\x5\x1BE\xE0\x2\x303\x305\x5\x38\x1D\x2\x304"+
		"\x306\x5\x1BE\xE0\x2\x305\x304\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306"+
		"\x307\x3\x2\x2\x2\x307\x309\a)\x2\x2\x308\x30A\x5\x1BE\xE0\x2\x309\x308"+
		"\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x30C\x5"+
		"\x46$\x2\x30C\x45\x3\x2\x2\x2\x30D\x30E\x5\x17C\xBF\x2\x30EG\x3\x2\x2"+
		"\x2\x30F\x310\a~\x2\x2\x310\x311\x5\x1BE\xE0\x2\x311\x31A\x5\x38\x1D\x2"+
		"\x312\x314\x5\x1BE\xE0\x2\x313\x312\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2"+
		"\x314\x315\x3\x2\x2\x2\x315\x317\a)\x2\x2\x316\x318\x5\x1BE\xE0\x2\x317"+
		"\x316\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x31B"+
		"\x5J&\x2\x31A\x313\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31BI\x3\x2\x2\x2"+
		"\x31C\x327\x5L\'\x2\x31D\x31E\x5L\'\x2\x31E\x31F\x5\x1BE\xE0\x2\x31F\x321"+
		"\x3\x2\x2\x2\x320\x31D\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x322\x3"+
		"\x2\x2\x2\x322\x323\a\xC0\x2\x2\x323\x324\x5\x1BE\xE0\x2\x324\x325\x5"+
		"N(\x2\x325\x327\x3\x2\x2\x2\x326\x31C\x3\x2\x2\x2\x326\x320\x3\x2\x2\x2"+
		"\x327K\x3\x2\x2\x2\x328\x329\x5\x17C\xBF\x2\x329M\x3\x2\x2\x2\x32A\x32B"+
		"\x5\x17C\xBF\x2\x32BO\x3\x2\x2\x2\x32C\x32D\a\xC4\x2\x2\x32D\x32E\x5\x1BE"+
		"\xE0\x2\x32E\x337\x5\x38\x1D\x2\x32F\x331\x5\x1BE\xE0\x2\x330\x32F\x3"+
		"\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x334\a)\x2"+
		"\x2\x333\x335\x5\x1BE\xE0\x2\x334\x333\x3\x2\x2\x2\x334\x335\x3\x2\x2"+
		"\x2\x335\x336\x3\x2\x2\x2\x336\x338\x5J&\x2\x337\x330\x3\x2\x2\x2\x337"+
		"\x338\x3\x2\x2\x2\x338Q\x3\x2\x2\x2\x339\x33A\a\x84\x2\x2\x33A\x33B\x5"+
		"\x1BE\xE0\x2\x33B\x33D\x5:\x1E\x2\x33C\x33E\x5\x1BE\xE0\x2\x33D\x33C\x3"+
		"\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x341\a)\x2"+
		"\x2\x340\x342\x5\x1BE\xE0\x2\x341\x340\x3\x2\x2\x2\x341\x342\x3\x2\x2"+
		"\x2\x342\x343\x3\x2\x2\x2\x343\x344\x5T+\x2\x344S\x3\x2\x2\x2\x345\x346"+
		"\x5\x17C\xBF\x2\x346U\x3\x2\x2\x2\x347\x348\a\xCA\x2\x2\x348\x349\x5\x1BE"+
		"\xE0\x2\x349\x34B\x5:\x1E\x2\x34A\x34C\x5\x1BE\xE0\x2\x34B\x34A\x3\x2"+
		"\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D\x34F\a)\x2\x2"+
		"\x34E\x350\x5\x1BE\xE0\x2\x34F\x34E\x3\x2\x2\x2\x34F\x350\x3\x2\x2\x2"+
		"\x350\x351\x3\x2\x2\x2\x351\x352\x5X-\x2\x352W\x3\x2\x2\x2\x353\x354\x5"+
		"\x17C\xBF\x2\x354Y\x3\x2\x2\x2\x355\x359\x5\\/\x2\x356\x357\x5\x1BE\xE0"+
		"\x2\x357\x358\x5\x64\x33\x2\x358\x35A\x3\x2\x2\x2\x359\x356\x3\x2\x2\x2"+
		"\x359\x35A\x3\x2\x2\x2\x35A[\x3\x2\x2\x2\x35B\x35D\x5^\x30\x2\x35C\x35E"+
		"\x5\x1BE\xE0\x2\x35D\x35C\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35E\x35F"+
		"\x3\x2\x2\x2\x35F\x361\a-\x2\x2\x360\x362\x5\x1BE\xE0\x2\x361\x360\x3"+
		"\x2\x2\x2\x361\x362\x3\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363\x364\x5`\x31"+
		"\x2\x364]\x3\x2\x2\x2\x365\x366\a\x18\x2\x2\x366_\x3\x2\x2\x2\x367\x368"+
		"\a\xA0\x2\x2\x368\x61\x3\x2\x2\x2\x369\x36A\a\xA0\x2\x2\x36A\x36B\x5\x1BE"+
		"\xE0\x2\x36B\x36D\x5:\x1E\x2\x36C\x36E\x5\x1BE\xE0\x2\x36D\x36C\x3\x2"+
		"\x2\x2\x36D\x36E\x3\x2\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x374\a)\x2\x2"+
		"\x370\x372\x5\x1BE\xE0\x2\x371\x370\x3\x2\x2\x2\x371\x372\x3\x2\x2\x2"+
		"\x372\x373\x3\x2\x2\x2\x373\x375\x5\x64\x33\x2\x374\x371\x3\x2\x2\x2\x374"+
		"\x375\x3\x2\x2\x2\x375\x63\x3\x2\x2\x2\x376\x37D\x5\x66\x34\x2\x377\x379"+
		"\x5\x1BE\xE0\x2\x378\x377\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2\x379\x37A"+
		"\x3\x2\x2\x2\x37A\x37C\x5\x66\x34\x2\x37B\x378\x3\x2\x2\x2\x37C\x37F\x3"+
		"\x2\x2\x2\x37D\x37B\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x65\x3\x2\x2"+
		"\x2\x37F\x37D\x3\x2\x2\x2\x380\x389\x5h\x35\x2\x381\x389\x5j\x36\x2\x382"+
		"\x384\x5h\x35\x2\x383\x385\x5\x1BE\xE0\x2\x384\x383\x3\x2\x2\x2\x384\x385"+
		"\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x387\x5j\x36\x2\x387\x389\x3\x2"+
		"\x2\x2\x388\x380\x3\x2\x2\x2\x388\x381\x3\x2\x2\x2\x388\x382\x3\x2\x2"+
		"\x2\x389g\x3\x2\x2\x2\x38A\x38E\x5n\x38\x2\x38B\x38E\x5r:\x2\x38C\x38E"+
		"\x5l\x37\x2\x38D\x38A\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38D\x38C\x3\x2"+
		"\x2\x2\x38Ei\x3\x2\x2\x2\x38F\x390\t\x6\x2\x2\x390k\x3\x2\x2\x2\x391\x392"+
		"\x5\x17C\xBF\x2\x392m\x3\x2\x2\x2\x393\x395\a\xB7\x2\x2\x394\x396\x5\x1BE"+
		"\xE0\x2\x395\x394\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x397\x3\x2\x2"+
		"\x2\x397\x399\a\xD6\x2\x2\x398\x39A\x5\x1BE\xE0\x2\x399\x398\x3\x2\x2"+
		"\x2\x399\x39A\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39D\x5p\x39\x2\x39C"+
		"\x39E\x5\x1BE\xE0\x2\x39D\x39C\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E"+
		"\x39F\x3\x2\x2\x2\x39F\x3A0\a\xDD\x2\x2\x3A0o\x3\x2\x2\x2\x3A1\x3A2\x5"+
		"\x17C\xBF\x2\x3A2q\x3\x2\x2\x2\x3A3\x3A8\a\xBD\x2\x2\x3A4\x3A6\x5\x1BE"+
		"\xE0\x2\x3A5\x3A4\x3\x2\x2\x2\x3A5\x3A6\x3\x2\x2\x2\x3A6\x3A7\x3\x2\x2"+
		"\x2\x3A7\x3A9\x5t;\x2\x3A8\x3A5\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9"+
		"s\x3\x2\x2\x2\x3AA\x3AC\a\xD6\x2\x2\x3AB\x3AD\x5\x1BE\xE0\x2\x3AC\x3AB"+
		"\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE\x3B0\x5"+
		"v<\x2\x3AF\x3B1\x5\x1BE\xE0\x2\x3B0\x3AF\x3\x2\x2\x2\x3B0\x3B1\x3\x2\x2"+
		"\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2\x3B3\a\xDD\x2\x2\x3B3u\x3\x2\x2\x2\x3B4"+
		"\x3B5\x5\x17C\xBF\x2\x3B5w\x3\x2\x2\x2\x3B6\x3B7\a\xCD\x2\x2\x3B7\x3B8"+
		"\x5\x1BE\xE0\x2\x3B8\x3BA\x5:\x1E\x2\x3B9\x3BB\x5\x1BE\xE0\x2\x3BA\x3B9"+
		"\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3C1\a)"+
		"\x2\x2\x3BD\x3BF\x5\x1BE\xE0\x2\x3BE\x3BD\x3\x2\x2\x2\x3BE\x3BF\x3\x2"+
		"\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C2\x5\x64\x33\x2\x3C1\x3BE\x3\x2\x2"+
		"\x2\x3C1\x3C2\x3\x2\x2\x2\x3C2y\x3\x2\x2\x2\x3C3\x3C4\a{\x2\x2\x3C4\x3C5"+
		"\x5\x1BE\xE0\x2\x3C5\x3C7\x5:\x1E\x2\x3C6\x3C8\x5\x1BE\xE0\x2\x3C7\x3C6"+
		"\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CB\a)"+
		"\x2\x2\x3CA\x3CC\x5\x1BE\xE0\x2\x3CB\x3CA\x3\x2\x2\x2\x3CB\x3CC\x3\x2"+
		"\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CE\x5|?\x2\x3CE{\x3\x2\x2\x2\x3CF"+
		"\x3DA\x5~@\x2\x3D0\x3D2\x5\x1BE\xE0\x2\x3D1\x3D0\x3\x2\x2\x2\x3D1\x3D2"+
		"\x3\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3\x3D5\a)\x2\x2\x3D4\x3D6\x5\x1BE"+
		"\xE0\x2\x3D5\x3D4\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2"+
		"\x2\x3D7\x3D9\x5~@\x2\x3D8\x3D1\x3\x2\x2\x2\x3D9\x3DC\x3\x2\x2\x2\x3DA"+
		"\x3D8\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB}\x3\x2\x2\x2\x3DC\x3DA\x3"+
		"\x2\x2\x2\x3DD\x3DE\x5\x17C\xBF\x2\x3DE\x7F\x3\x2\x2\x2\x3DF\x3E0\a\xA7"+
		"\x2\x2\x3E0\x3E1\x5\x1BE\xE0\x2\x3E1\x3E3\x5\x38\x1D\x2\x3E2\x3E4\x5\x1BE"+
		"\xE0\x2\x3E3\x3E2\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2\x2\x3E4\x3E5\x3\x2\x2"+
		"\x2\x3E5\x3E7\a)\x2\x2\x3E6\x3E8\x5\x1BE\xE0\x2\x3E7\x3E6\x3\x2\x2\x2"+
		"\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3EA\x3\x2\x2\x2\x3E9\x3EB\x5\x82\x42\x2\x3EA"+
		"\x3E9\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3ED\x3\x2\x2\x2\x3EC\x3EE"+
		"\x5\x1BE\xE0\x2\x3ED\x3EC\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3EF"+
		"\x3\x2\x2\x2\x3EF\x3F1\a)\x2\x2\x3F0\x3F2\x5\x1BE\xE0\x2\x3F1\x3F0\x3"+
		"\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F4\x5\x84"+
		"\x43\x2\x3F4\x81\x3\x2\x2\x2\x3F5\x3F6\x5\x17C\xBF\x2\x3F6\x83\x3\x2\x2"+
		"\x2\x3F7\x3F8\x5\x17C\xBF\x2\x3F8\x85\x3\x2\x2\x2\x3F9\x3FA\as\x2\x2\x3FA"+
		"\x3FB\x5\x1BE\xE0\x2\x3FB\x3FD\x5\x38\x1D\x2\x3FC\x3FE\x5\x1BE\xE0\x2"+
		"\x3FD\x3FC\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF"+
		"\x401\a)\x2\x2\x400\x402\x5\x1BE\xE0\x2\x401\x400\x3\x2\x2\x2\x401\x402"+
		"\x3\x2\x2\x2\x402\x404\x3\x2\x2\x2\x403\x405\x5\x82\x42\x2\x404\x403\x3"+
		"\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x407\x3\x2\x2\x2\x406\x408\x5\x1BE"+
		"\xE0\x2\x407\x406\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x409\x3\x2\x2"+
		"\x2\x409\x40B\a)\x2\x2\x40A\x40C\x5\x1BE\xE0\x2\x40B\x40A\x3\x2\x2\x2"+
		"\x40B\x40C\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40E\x5\x88\x45\x2\x40E"+
		"\x87\x3\x2\x2\x2\x40F\x410\x5\x17C\xBF\x2\x410\x89\x3\x2\x2\x2\x411\x412"+
		"\x5\x17A\xBE\x2\x412\x413\x5\x1BE\xE0\x2\x413\x415\x3\x2\x2\x2\x414\x411"+
		"\x3\x2\x2\x2\x414\x415\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416\x417\a\x44"+
		"\x2\x2\x417\x418\x5\x1BE\xE0\x2\x418\x423\x5\x8CG\x2\x419\x41B\x5\x1BE"+
		"\xE0\x2\x41A\x419\x3\x2\x2\x2\x41A\x41B\x3\x2\x2\x2\x41B\x41C\x3\x2\x2"+
		"\x2\x41C\x41E\a)\x2\x2\x41D\x41F\x5\x1BE\xE0\x2\x41E\x41D\x3\x2\x2\x2"+
		"\x41E\x41F\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x422\x5\x8CG\x2\x421"+
		"\x41A\x3\x2\x2\x2\x422\x425\x3\x2\x2\x2\x423\x421\x3\x2\x2\x2\x423\x424"+
		"\x3\x2\x2\x2\x424\x8B\x3\x2\x2\x2\x425\x423\x3\x2\x2\x2\x426\x42A\x5\x154"+
		"\xAB\x2\x427\x428\x5\x1BE\xE0\x2\x428\x429\x5\x160\xB1\x2\x429\x42B\x3"+
		"\x2\x2\x2\x42A\x427\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42D\x3\x2"+
		"\x2\x2\x42C\x42E\x5\x1BE\xE0\x2\x42D\x42C\x3\x2\x2\x2\x42D\x42E\x3\x2"+
		"\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F\x431\a\xD2\x2\x2\x430\x432\x5\x1BE\xE0"+
		"\x2\x431\x430\x3\x2\x2\x2\x431\x432\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2"+
		"\x433\x434\x5\x17C\xBF\x2\x434\x8D\x3\x2\x2\x2\x435\x436\x5\x17A\xBE\x2"+
		"\x436\x437\x5\x1BE\xE0\x2\x437\x439\x3\x2\x2\x2\x438\x435\x3\x2\x2\x2"+
		"\x438\x439\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43B\aG\x2\x2\x43B\x43E"+
		"\x5\x1BE\xE0\x2\x43C\x43D\a\xA5\x2\x2\x43D\x43F\x5\x1BE\xE0\x2\x43E\x43C"+
		"\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x440\x3\x2\x2\x2\x440\x441\t\a"+
		"\x2\x2\x441\x442\x5\x1BE\xE0\x2\x442\x443\x5\x154\xAB\x2\x443\x444\x5"+
		"\x1BE\xE0\x2\x444\x445\a\x82\x2\x2\x445\x446\x5\x1BE\xE0\x2\x446\x44C"+
		"\a\xE0\x2\x2\x447\x448\x5\x1BE\xE0\x2\x448\x449\a\x35\x2\x2\x449\x44A"+
		"\x5\x1BE\xE0\x2\x44A\x44B\a\xE0\x2\x2\x44B\x44D\x3\x2\x2\x2\x44C\x447"+
		"\x3\x2\x2\x2\x44C\x44D\x3\x2\x2\x2\x44D\x452\x3\x2\x2\x2\x44E\x450\x5"+
		"\x1BE\xE0\x2\x44F\x44E\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x451\x3"+
		"\x2\x2\x2\x451\x453\x5\x90I\x2\x452\x44F\x3\x2\x2\x2\x452\x453\x3\x2\x2"+
		"\x2\x453\x457\x3\x2\x2\x2\x454\x455\x5\x1BE\xE0\x2\x455\x456\x5\x160\xB1"+
		"\x2\x456\x458\x3\x2\x2\x2\x457\x454\x3\x2\x2\x2\x457\x458\x3\x2\x2\x2"+
		"\x458\x8F\x3\x2\x2\x2\x459\x46B\a\xD6\x2\x2\x45A\x45C\x5\x1BE\xE0\x2\x45B"+
		"\x45A\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x468"+
		"\x5\x92J\x2\x45E\x460\x5\x1BE\xE0\x2\x45F\x45E\x3\x2\x2\x2\x45F\x460\x3"+
		"\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461\x463\a)\x2\x2\x462\x464\x5\x1BE\xE0"+
		"\x2\x463\x462\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2"+
		"\x465\x467\x5\x92J\x2\x466\x45F\x3\x2\x2\x2\x467\x46A\x3\x2\x2\x2\x468"+
		"\x466\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46C\x3\x2\x2\x2\x46A\x468"+
		"\x3\x2\x2\x2\x46B\x45B\x3\x2\x2\x2\x46B\x46C\x3\x2\x2\x2\x46C\x46E\x3"+
		"\x2\x2\x2\x46D\x46F\x5\x1BE\xE0\x2\x46E\x46D\x3\x2\x2\x2\x46E\x46F\x3"+
		"\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x471\a\xDD\x2\x2\x471\x91\x3\x2\x2"+
		"\x2\x472\x473\a\x97\x2\x2\x473\x475\x5\x1BE\xE0\x2\x474\x472\x3\x2\x2"+
		"\x2\x474\x475\x3\x2\x2\x2\x475\x478\x3\x2\x2\x2\x476\x477\t\b\x2\x2\x477"+
		"\x479\x5\x1BE\xE0\x2\x478\x476\x3\x2\x2\x2\x478\x479\x3\x2\x2\x2\x479"+
		"\x47C\x3\x2\x2\x2\x47A\x47B\a\x9E\x2\x2\x47B\x47D\x5\x1BE\xE0\x2\x47C"+
		"\x47A\x3\x2\x2\x2\x47C\x47D\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2\x47E\x487"+
		"\x5\x152\xAA\x2\x47F\x481\x5\x1BE\xE0\x2\x480\x47F\x3\x2\x2\x2\x480\x481"+
		"\x3\x2\x2\x2\x481\x482\x3\x2\x2\x2\x482\x484\a\xD6\x2\x2\x483\x485\x5"+
		"\x1BE\xE0\x2\x484\x483\x3\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\x3"+
		"\x2\x2\x2\x486\x488\a\xDD\x2\x2\x487\x480\x3\x2\x2\x2\x487\x488\x3\x2"+
		"\x2\x2\x488\x48D\x3\x2\x2\x2\x489\x48B\x5\x1BE\xE0\x2\x48A\x489\x3\x2"+
		"\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48E\x5\x160\xB1"+
		"\x2\x48D\x48A\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x493\x3\x2\x2\x2"+
		"\x48F\x491\x5\x1BE\xE0\x2\x490\x48F\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2"+
		"\x491\x492\x3\x2\x2\x2\x492\x494\x5\x94K\x2\x493\x490\x3\x2\x2\x2\x493"+
		"\x494\x3\x2\x2\x2\x494\x93\x3\x2\x2\x2\x495\x497\a\xD2\x2\x2\x496\x498"+
		"\x5\x1BE\xE0\x2\x497\x496\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2\x498\x499"+
		"\x3\x2\x2\x2\x499\x49A\x5\x17C\xBF\x2\x49A\x95\x3\x2\x2\x2\x49B\x49C\x5"+
		"\x98M\x2\x49C\x49D\x5\x1BE\xE0\x2\x49D\x4A8\x5\x9AN\x2\x49E\x4A0\x5\x1BE"+
		"\xE0\x2\x49F\x49E\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2"+
		"\x2\x4A1\x4A3\a)\x2\x2\x4A2\x4A4\x5\x1BE\xE0\x2\x4A3\x4A2\x3\x2\x2\x2"+
		"\x4A3\x4A4\x3\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A7\x5\x9AN\x2\x4A6"+
		"\x49F\x3\x2\x2\x2\x4A7\x4AA\x3\x2\x2\x2\x4A8\x4A6\x3\x2\x2\x2\x4A8\x4A9"+
		"\x3\x2\x2\x2\x4A9\x97\x3\x2\x2\x2\x4AA\x4A8\x3\x2\x2\x2\x4AB\x4AC\t\t"+
		"\x2\x2\x4AC\x99\x3\x2\x2\x2\x4AD\x4B1\x5\x9CO\x2\x4AE\x4B1\x5\x9EP\x2"+
		"\x4AF\x4B1\x5\xA4S\x2\x4B0\x4AD\x3\x2\x2\x2\x4B0\x4AE\x3\x2\x2\x2\x4B0"+
		"\x4AF\x3\x2\x2\x2\x4B1\x9B\x3\x2\x2\x2\x4B2\x4B3\x5\x152\xAA\x2\x4B3\x9D"+
		"\x3\x2\x2\x2\x4B4\x4B6\x5\xA0Q\x2\x4B5\x4B7\x5\x1BE\xE0\x2\x4B6\x4B5\x3"+
		"\x2\x2\x2\x4B6\x4B7\x3\x2\x2\x2\x4B7\x4B8\x3\x2\x2\x2\x4B8\x4BA\a\xD8"+
		"\x2\x2\x4B9\x4BB\x5\x1BE\xE0\x2\x4BA\x4B9\x3\x2\x2\x2\x4BA\x4BB\x3\x2"+
		"\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4BD\x5\xA2R\x2\x4BD\x9F\x3\x2\x2\x2"+
		"\x4BE\x4BF\x6Q\x2\x2\x4BF\x4C0\x5\x152\xAA\x2\x4C0\xA1\x3\x2\x2\x2\x4C1"+
		"\x4C2\x6R\x3\x2\x4C2\x4C3\x5\x152\xAA\x2\x4C3\xA3\x3\x2\x2\x2\x4C4\x4C6"+
		"\x5\xA6T\x2\x4C5\x4C7\x5\x1BE\xE0\x2\x4C6\x4C5\x3\x2\x2\x2\x4C6\x4C7\x3"+
		"\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4CA\a\xD8\x2\x2\x4C9\x4CB\x5\x1BE"+
		"\xE0\x2\x4CA\x4C9\x3\x2\x2\x2\x4CA\x4CB\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2"+
		"\x2\x4CC\x4CD\x5\xA8U\x2\x4CD\xA5\x3\x2\x2\x2\x4CE\x4CF\x5\x152\xAA\x2"+
		"\x4CF\xA7\x3\x2\x2\x2\x4D0\x4D1\x5\x152\xAA\x2\x4D1\xA9\x3\x2\x2\x2\x4D2"+
		"\x4D3\aV\x2\x2\x4D3\x4D4\x5\x1A8\xD5\x2\x4D4\x4D6\x5\x1E\x10\x2\x4D5\x4D7"+
		"\x5\x16A\xB6\x2\x4D6\x4D5\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7\x4D9"+
		"\x3\x2\x2\x2\x4D8\x4DA\x5\x1BE\xE0\x2\x4D9\x4D8\x3\x2\x2\x2\x4D9\x4DA"+
		"\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DC\a\x80\x2\x2\x4DC\x4FC\x3"+
		"\x2\x2\x2\x4DD\x4DE\aV\x2\x2\x4DE\x4DF\x5\x1BE\xE0\x2\x4DF\x4E0\t\n\x2"+
		"\x2\x4E0\x4E1\x5\x1BE\xE0\x2\x4E1\x4E2\x5\x17C\xBF\x2\x4E2\x4E3\x5\x1A8"+
		"\xD5\x2\x4E3\x4E5\x5\x1E\x10\x2\x4E4\x4E6\x5\x16A\xB6\x2\x4E5\x4E4\x3"+
		"\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E8\x3\x2\x2\x2\x4E7\x4E9\x5\x1BE"+
		"\xE0\x2\x4E8\x4E7\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EA\x3\x2\x2"+
		"\x2\x4EA\x4EB\a\x80\x2\x2\x4EB\x4FC\x3\x2\x2\x2\x4EC\x4ED\aV\x2\x2\x4ED"+
		"\x4EE\x5\x1A8\xD5\x2\x4EE\x4F0\x5\x1E\x10\x2\x4EF\x4F1\x5\x16A\xB6\x2"+
		"\x4F0\x4EF\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\x4F3\x3\x2\x2\x2\x4F2"+
		"\x4F4\x5\x1BE\xE0\x2\x4F3\x4F2\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4"+
		"\x4F5\x3\x2\x2\x2\x4F5\x4F6\a\x80\x2\x2\x4F6\x4F7\x5\x1BE\xE0\x2\x4F7"+
		"\x4F8\t\n\x2\x2\x4F8\x4F9\x5\x1BE\xE0\x2\x4F9\x4FA\x5\x17C\xBF\x2\x4FA"+
		"\x4FC\x3\x2\x2\x2\x4FB\x4D2\x3\x2\x2\x2\x4FB\x4DD\x3\x2\x2\x2\x4FB\x4EC"+
		"\x3\x2\x2\x2\x4FC\xAB\x3\x2\x2\x2\x4FD\x4FE\x5\x17A\xBE\x2\x4FE\x4FF\x5"+
		"\x1BE\xE0\x2\x4FF\x501\x3\x2\x2\x2\x500\x4FD\x3\x2\x2\x2\x500\x501\x3"+
		"\x2\x2\x2\x501\x502\x3\x2\x2\x2\x502\x503\a\x65\x2\x2\x503\x504\x5\x1BE"+
		"\xE0\x2\x504\x505\x5\x154\xAB\x2\x505\x509\x5\x1A8\xD5\x2\x506\x508\x5"+
		"\xAEX\x2\x507\x506\x3\x2\x2\x2\x508\x50B\x3\x2\x2\x2\x509\x507\x3\x2\x2"+
		"\x2\x509\x50A\x3\x2\x2\x2\x50A\x50C\x3\x2\x2\x2\x50B\x509\x3\x2\x2\x2"+
		"\x50C\x50D\a\\\x2\x2\x50D\xAD\x3\x2\x2\x2\x50E\x517\x5\x154\xAB\x2\x50F"+
		"\x511\x5\x1BE\xE0\x2\x510\x50F\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511"+
		"\x512\x3\x2\x2\x2\x512\x514\a\xD2\x2\x2\x513\x515\x5\x1BE\xE0\x2\x514"+
		"\x513\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x518"+
		"\x5\x17C\xBF\x2\x517\x510\x3\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518\x519"+
		"\x3\x2\x2\x2\x519\x51A\x5\x1A8\xD5\x2\x51A\xAF\x3\x2\x2\x2\x51B\x51C\a"+
		"\x64\x2\x2\x51C\xB1\x3\x2\x2\x2\x51D\x51E\ag\x2\x2\x51E\x51F\x5\x1BE\xE0"+
		"\x2\x51F\x52A\x5\x17C\xBF\x2\x520\x522\x5\x1BE\xE0\x2\x521\x520\x3\x2"+
		"\x2\x2\x521\x522\x3\x2\x2\x2\x522\x523\x3\x2\x2\x2\x523\x525\a)\x2\x2"+
		"\x524\x526\x5\x1BE\xE0\x2\x525\x524\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2"+
		"\x526\x527\x3\x2\x2\x2\x527\x529\x5\x17C\xBF\x2\x528\x521\x3\x2\x2\x2"+
		"\x529\x52C\x3\x2\x2\x2\x52A\x528\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B"+
		"\xB3\x3\x2\x2\x2\x52C\x52A\x3\x2\x2\x2\x52D\x52E\ah\x2\x2\x52E\x52F\x5"+
		"\x1BE\xE0\x2\x52F\x530\x5\x17C\xBF\x2\x530\xB5\x3\x2\x2\x2\x531\x532\x5"+
		"\x17A\xBE\x2\x532\x533\x5\x1BE\xE0\x2\x533\x535\x3\x2\x2\x2\x534\x531"+
		"\x3\x2\x2\x2\x534\x535\x3\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536\x537\ai"+
		"\x2\x2\x537\x538\x5\x1BE\xE0\x2\x538\x53A\x5\x154\xAB\x2\x539\x53B\x5"+
		"\x1BE\xE0\x2\x53A\x539\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53C\x3"+
		"\x2\x2\x2\x53C\x53D\x5\x90I\x2\x53D\xB7\x3\x2\x2\x2\x53E\x53F\t\v\x2\x2"+
		"\x53F\xB9\x3\x2\x2\x2\x540\x541\aq\x2\x2\x541\x542\x5\x1BE\xE0\x2\x542"+
		"\x543\aX\x2\x2\x543\x544\x5\x1BE\xE0\x2\x544\x545\x5\x17C\xBF\x2\x545"+
		"\x546\x5\x1BE\xE0\x2\x546\x547\az\x2\x2\x547\x548\x5\x1BE\xE0\x2\x548"+
		"\x549\x5\x17C\xBF\x2\x549\x54A\x5\x1A8\xD5\x2\x54A\x54C\x5\x1E\x10\x2"+
		"\x54B\x54D\x5\x16A\xB6\x2\x54C\x54B\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2"+
		"\x54D\x54F\x3\x2\x2\x2\x54E\x550\x5\x1BE\xE0\x2\x54F\x54E\x3\x2\x2\x2"+
		"\x54F\x550\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\x555\a\x8D\x2\x2\x552"+
		"\x553\x5\x1BE\xE0\x2\x553\x554\x5\x17C\xBF\x2\x554\x556\x3\x2\x2\x2\x555"+
		"\x552\x3\x2\x2\x2\x555\x556\x3\x2\x2\x2\x556\xBB\x3\x2\x2\x2\x557\x558"+
		"\aq\x2\x2\x558\x559\x5\x1BE\xE0\x2\x559\x55A\x5\x17C\xBF\x2\x55A\x55B"+
		"\x5\x1BE\xE0\x2\x55B\x55C\a\xC0\x2\x2\x55C\x55D\x5\x1BE\xE0\x2\x55D\x563"+
		"\x5\x17C\xBF\x2\x55E\x55F\x5\x1BE\xE0\x2\x55F\x560\a\xB9\x2\x2\x560\x561"+
		"\x5\x1BE\xE0\x2\x561\x562\x5\x17C\xBF\x2\x562\x564\x3\x2\x2\x2\x563\x55E"+
		"\x3\x2\x2\x2\x563\x564\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x566\x5"+
		"\x1A8\xD5\x2\x566\x568\x5\x1E\x10\x2\x567\x569\x5\x16A\xB6\x2\x568\x567"+
		"\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56B\x3\x2\x2\x2\x56A\x56C\x5"+
		"\x1BE\xE0\x2\x56B\x56A\x3\x2\x2\x2\x56B\x56C\x3\x2\x2\x2\x56C\x56D\x3"+
		"\x2\x2\x2\x56D\x571\a\x8D\x2\x2\x56E\x56F\x5\x1BE\xE0\x2\x56F\x570\x5"+
		"\x17C\xBF\x2\x570\x572\x3\x2\x2\x2\x571\x56E\x3\x2\x2\x2\x571\x572\x3"+
		"\x2\x2\x2\x572\xBD\x3\x2\x2\x2\x573\x574\x5\x17A\xBE\x2\x574\x575\x5\x1BE"+
		"\xE0\x2\x575\x577\x3\x2\x2\x2\x576\x573\x3\x2\x2\x2\x576\x577\x3\x2\x2"+
		"\x2\x577\x57A\x3\x2\x2\x2\x578\x579\a\xB8\x2\x2\x579\x57B\x5\x1BE\xE0"+
		"\x2\x57A\x578\x3\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2"+
		"\x57C\x57E\ar\x2\x2\x57D\x57F\x5\x1BE\xE0\x2\x57E\x57D\x3\x2\x2\x2\x57E"+
		"\x57F\x3\x2\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x585\x5\xC0\x61\x2\x581\x583"+
		"\x5\x1BE\xE0\x2\x582\x581\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2\x583\x584"+
		"\x3\x2\x2\x2\x584\x586\x5\x90I\x2\x585\x582\x3\x2\x2\x2\x585\x586\x3\x2"+
		"\x2\x2\x586\x58B\x3\x2\x2\x2\x587\x589\x5\x1BE\xE0\x2\x588\x587\x3\x2"+
		"\x2\x2\x588\x589\x3\x2\x2\x2\x589\x58A\x3\x2\x2\x2\x58A\x58C\x5\x160\xB1"+
		"\x2\x58B\x588\x3\x2\x2\x2\x58B\x58C\x3\x2\x2\x2\x58C\x58D\x3\x2\x2\x2"+
		"\x58D\x58E\x5\x1A8\xD5\x2\x58E\x590\x5\x1E\x10\x2\x58F\x591\x5\x16A\xB6"+
		"\x2\x590\x58F\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x593\x3\x2\x2\x2"+
		"\x592\x594\x5\x1BE\xE0\x2\x593\x592\x3\x2\x2\x2\x593\x594\x3\x2\x2\x2"+
		"\x594\x595\x3\x2\x2\x2\x595\x59B\a]\x2\x2\x596\x597\x5\x1A6\xD4\x2\x597"+
		"\x598\x5\xE\b\x2\x598\x59A\x3\x2\x2\x2\x599\x596\x3\x2\x2\x2\x59A\x59D"+
		"\x3\x2\x2\x2\x59B\x599\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C\xBF\x3\x2"+
		"\x2\x2\x59D\x59B\x3\x2\x2\x2\x59E\x59F\x5\x154\xAB\x2\x59F\xC1\x3\x2\x2"+
		"\x2\x5A0\x5A1\au\x2\x2\x5A1\x5A2\x5\x1BE\xE0\x2\x5A2\x5A3\x5\x17C\xBF"+
		"\x2\x5A3\xC3\x3\x2\x2\x2\x5A4\x5A5\av\x2\x2\x5A5\x5A6\x5\x1BE\xE0\x2\x5A6"+
		"\x5A7\x5\x17C\xBF\x2\x5A7\xC5\x3\x2\x2\x2\x5A8\x5A9\aw\x2\x2\x5A9\x5AA"+
		"\x5\x1BE\xE0\x2\x5AA\x5AB\x5\xD8m\x2\x5AB\x5AC\x5\x1BE\xE0\x2\x5AC\x5AD"+
		"\a\xBF\x2\x2\x5AD\x5AE\x5\x1A8\xD5\x2\x5AE\x5B8\x5\x1E\x10\x2\x5AF\x5B1"+
		"\x5\x16A\xB6\x2\x5B0\x5AF\x3\x2\x2\x2\x5B0\x5B1\x3\x2\x2\x2\x5B1\x5B3"+
		"\x3\x2\x2\x2\x5B2\x5B4\x5\x1BE\xE0\x2\x5B3\x5B2\x3\x2\x2\x2\x5B3\x5B4"+
		"\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5B7\x5\xC8\x65\x2\x5B6\x5B0\x3"+
		"\x2\x2\x2\x5B7\x5BA\x3\x2\x2\x2\x5B8\x5B6\x3\x2\x2\x2\x5B8\x5B9\x3\x2"+
		"\x2\x2\x5B9\x5BC\x3\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2\x5BB\x5BD\x5\x16A\xB6"+
		"\x2\x5BC\x5BB\x3\x2\x2\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5BF\x3\x2\x2\x2"+
		"\x5BE\x5C0\x5\x1BE\xE0\x2\x5BF\x5BE\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2"+
		"\x5C0\x5C2\x3\x2\x2\x2\x5C1\x5C3\x5\xCA\x66\x2\x5C2\x5C1\x3\x2\x2\x2\x5C2"+
		"\x5C3\x3\x2\x2\x2\x5C3\x5C5\x3\x2\x2\x2\x5C4\x5C6\x5\x16A\xB6\x2\x5C5"+
		"\x5C4\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C8\x3\x2\x2\x2\x5C7\x5C9"+
		"\x5\x1BE\xE0\x2\x5C8\x5C7\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x5CA"+
		"\x3\x2\x2\x2\x5CA\x5CB\a^\x2\x2\x5CB\xC7\x3\x2\x2\x2\x5CC\x5CD\aZ\x2\x2"+
		"\x5CD\x5CE\x5\x1BE\xE0\x2\x5CE\x5CF\x5\xD8m\x2\x5CF\x5D0\x5\x1BE\xE0\x2"+
		"\x5D0\x5D1\a\xBF\x2\x2\x5D1\x5D2\x5\x1A8\xD5\x2\x5D2\x5D3\x5\x1E\x10\x2"+
		"\x5D3\x5DF\x3\x2\x2\x2\x5D4\x5D5\aZ\x2\x2\x5D5\x5D6\x5\x1BE\xE0\x2\x5D6"+
		"\x5D7\x5\xD8m\x2\x5D7\x5D8\x5\x1BE\xE0\x2\x5D8\x5DA\a\xBF\x2\x2\x5D9\x5DB"+
		"\x5\x1BE\xE0\x2\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DC"+
		"\x3\x2\x2\x2\x5DC\x5DD\x5\x1E\x10\x2\x5DD\x5DF\x3\x2\x2\x2\x5DE\x5CC\x3"+
		"\x2\x2\x2\x5DE\x5D4\x3\x2\x2\x2\x5DF\xC9\x3\x2\x2\x2\x5E0\x5E1\aY\x2\x2"+
		"\x5E1\x5E2\x5\x1A8\xD5\x2\x5E2\x5E3\x5\x1E\x10\x2\x5E3\xCB\x3\x2\x2\x2"+
		"\x5E4\x5E7\x5\xCEh\x2\x5E5\x5E7\x5\xD0i\x2\x5E6\x5E4\x3\x2\x2\x2\x5E6"+
		"\x5E5\x3\x2\x2\x2\x5E7\xCD\x3\x2\x2\x2\x5E8\x5EA\aw\x2\x2\x5E9\x5EB\x5"+
		"\x1BE\xE0\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB\x5EC\x3"+
		"\x2\x2\x2\x5EC\x5EE\x5\xD8m\x2\x5ED\x5EF\x5\x1BE\xE0\x2\x5EE\x5ED\x3\x2"+
		"\x2\x2\x5EE\x5EF\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2\x2\x5F0\x5F2\a\xBF\x2"+
		"\x2\x5F1\x5F3\x5\x1BE\xE0\x2\x5F2\x5F1\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2"+
		"\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F8\x5\xD4k\x2\x5F5\x5F6\x5\x1BE\xE0\x2"+
		"\x5F6\x5F7\x5\xD2j\x2\x5F7\x5F9\x3\x2\x2\x2\x5F8\x5F5\x3\x2\x2\x2\x5F8"+
		"\x5F9\x3\x2\x2\x2\x5F9\xCF\x3\x2\x2\x2\x5FA\x5FC\aw\x2\x2\x5FB\x5FD\x5"+
		"\x1BE\xE0\x2\x5FC\x5FB\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x5FE\x3"+
		"\x2\x2\x2\x5FE\x600\x5\xD8m\x2\x5FF\x601\x5\x1BE\xE0\x2\x600\x5FF\x3\x2"+
		"\x2\x2\x600\x601\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2\x602\x604\a\xBF\x2"+
		"\x2\x603\x605\x5\x1A8\xD5\x2\x604\x603\x3\x2\x2\x2\x604\x605\x3\x2\x2"+
		"\x2\x605\x607\x3\x2\x2\x2\x606\x608\x5\x1BE\xE0\x2\x607\x606\x3\x2\x2"+
		"\x2\x607\x608\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\x60A\x5\xD2j\x2\x60A"+
		"\xD1\x3\x2\x2\x2\x60B\x60D\aY\x2\x2\x60C\x60E\x5\x1BE\xE0\x2\x60D\x60C"+
		"\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x610\x3\x2\x2\x2\x60F\x611\x5"+
		"\xD4k\x2\x610\x60F\x3\x2\x2\x2\x610\x611\x3\x2\x2\x2\x611\xD3\x3\x2\x2"+
		"\x2\x612\x61F\x5\x172\xBA\x2\x613\x615\x5\x1BE\xE0\x2\x614\x613\x3\x2"+
		"\x2\x2\x614\x615\x3\x2\x2\x2\x615\x616\x3\x2\x2\x2\x616\x618\a*\x2\x2"+
		"\x617\x619\x5\x1BE\xE0\x2\x618\x617\x3\x2\x2\x2\x618\x619\x3\x2\x2\x2"+
		"\x619\x61B\x3\x2\x2\x2\x61A\x61C\x5\xD6l\x2\x61B\x61A\x3\x2\x2\x2\x61B"+
		"\x61C\x3\x2\x2\x2\x61C\x61E\x3\x2\x2\x2\x61D\x614\x3\x2\x2\x2\x61E\x621"+
		"\x3\x2\x2\x2\x61F\x61D\x3\x2\x2\x2\x61F\x620\x3\x2\x2\x2\x620\x639\x3"+
		"\x2\x2\x2\x621\x61F\x3\x2\x2\x2\x622\x624\a*\x2\x2\x623\x625\x5\x1BE\xE0"+
		"\x2\x624\x623\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625\x627\x3\x2\x2\x2"+
		"\x626\x622\x3\x2\x2\x2\x626\x627\x3\x2\x2\x2\x627\x628\x3\x2\x2\x2\x628"+
		"\x635\x5\xD6l\x2\x629\x62B\x5\x1BE\xE0\x2\x62A\x629\x3\x2\x2\x2\x62A\x62B"+
		"\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62E\a*\x2\x2\x62D\x62F\x5\x1BE"+
		"\xE0\x2\x62E\x62D\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2\x62F\x631\x3\x2\x2"+
		"\x2\x630\x632\x5\xD6l\x2\x631\x630\x3\x2\x2\x2\x631\x632\x3\x2\x2\x2\x632"+
		"\x634\x3\x2\x2\x2\x633\x62A\x3\x2\x2\x2\x634\x637\x3\x2\x2\x2\x635\x633"+
		"\x3\x2\x2\x2\x635\x636\x3\x2\x2\x2\x636\x639\x3\x2\x2\x2\x637\x635\x3"+
		"\x2\x2\x2\x638\x612\x3\x2\x2\x2\x638\x626\x3\x2\x2\x2\x639\xD5\x3\x2\x2"+
		"\x2\x63A\x63B\x5 \x11\x2\x63B\xD7\x3\x2\x2\x2\x63C\x63D\x5\x17C\xBF\x2"+
		"\x63D\xD9\x3\x2\x2\x2\x63E\x63F\ay\x2\x2\x63F\x640\x5\x1BE\xE0\x2\x640"+
		"\x641\x5\x17C\xBF\x2\x641\xDB\x3\x2\x2\x2\x642\x643\a\x81\x2\x2\x643\x645"+
		"\x5\x1BE\xE0\x2\x644\x642\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2\x645\x646"+
		"\x3\x2\x2\x2\x646\x648\x5\x188\xC5\x2\x647\x649\x5\x1BE\xE0\x2\x648\x647"+
		"\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64C\a\xD2"+
		"\x2\x2\x64B\x64D\x5\x1BE\xE0\x2\x64C\x64B\x3\x2\x2\x2\x64C\x64D\x3\x2"+
		"\x2\x2\x64D\x64E\x3\x2\x2\x2\x64E\x64F\x5\x17C\xBF\x2\x64F\xDD\x3\x2\x2"+
		"\x2\x650\x651\a\x88\x2\x2\x651\x652\x5\x1BE\xE0\x2\x652\x654\x5\x17C\xBF"+
		"\x2\x653\x655\x5\x1BE\xE0\x2\x654\x653\x3\x2\x2\x2\x654\x655\x3\x2\x2"+
		"\x2\x655\x656\x3\x2\x2\x2\x656\x658\a\xD2\x2\x2\x657\x659\x5\x1BE\xE0"+
		"\x2\x658\x657\x3\x2\x2\x2\x658\x659\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2"+
		"\x65A\x65B\x5\x17C\xBF\x2\x65B\xDF\x3\x2\x2\x2\x65C\x65D\t\f\x2\x2\x65D"+
		"\x666\x5\x1BE\xE0\x2\x65E\x65F\av\x2\x2\x65F\x660\x5\x1BE\xE0\x2\x660"+
		"\x661\x5\x17C\xBF\x2\x661\x667\x3\x2\x2\x2\x662\x663\a\xAF\x2\x2\x663"+
		"\x664\x5\x1BE\xE0\x2\x664\x665\a\x8D\x2\x2\x665\x667\x3\x2\x2\x2\x666"+
		"\x65E\x3\x2\x2\x2\x666\x662\x3\x2\x2\x2\x667\xE1\x3\x2\x2\x2\x668\x669"+
		"\a\x93\x2\x2\x669\x66A\x5\x1BE\xE0\x2\x66A\x66B\x5\x17C\xBF\x2\x66B\x66C"+
		"\x5\x1BE\xE0\x2\x66C\x66D\av\x2\x2\x66D\x66E\x5\x1BE\xE0\x2\x66E\x679"+
		"\x5\x17C\xBF\x2\x66F\x671\x5\x1BE\xE0\x2\x670\x66F\x3\x2\x2\x2\x670\x671"+
		"\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x674\a)\x2\x2\x673\x675\x5\x1BE"+
		"\xE0\x2\x674\x673\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2\x675\x676\x3\x2\x2"+
		"\x2\x676\x678\x5\x17C\xBF\x2\x677\x670\x3\x2\x2\x2\x678\x67B\x3\x2\x2"+
		"\x2\x679\x677\x3\x2\x2\x2\x679\x67A\x3\x2\x2\x2\x67A\xE3\x3\x2\x2\x2\x67B"+
		"\x679\x3\x2\x2\x2\x67C\x67D\a\x93\x2\x2\x67D\x67E\x5\x1BE\xE0\x2\x67E"+
		"\x67F\x5\x17C\xBF\x2\x67F\x680\x5\x1BE\xE0\x2\x680\x681\au\x2\x2\x681"+
		"\x682\x5\x1BE\xE0\x2\x682\x68D\x5\x17C\xBF\x2\x683\x685\x5\x1BE\xE0\x2"+
		"\x684\x683\x3\x2\x2\x2\x684\x685\x3\x2\x2\x2\x685\x686\x3\x2\x2\x2\x686"+
		"\x688\a)\x2\x2\x687\x689\x5\x1BE\xE0\x2\x688\x687\x3\x2\x2\x2\x688\x689"+
		"\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2\x68A\x68C\x5\x17C\xBF\x2\x68B\x684"+
		"\x3\x2\x2\x2\x68C\x68F\x3\x2\x2\x2\x68D\x68B\x3\x2\x2\x2\x68D\x68E\x3"+
		"\x2\x2\x2\x68E\xE5\x3\x2\x2\x2\x68F\x68D\x3\x2\x2\x2\x690\x691\x5\x17A"+
		"\xBE\x2\x691\x692\x5\x1BE\xE0\x2\x692\x694\x3\x2\x2\x2\x693\x690\x3\x2"+
		"\x2\x2\x693\x694\x3\x2\x2\x2\x694\x697\x3\x2\x2\x2\x695\x696\a\xB8\x2"+
		"\x2\x696\x698\x5\x1BE\xE0\x2\x697\x695\x3\x2\x2\x2\x697\x698\x3\x2\x2"+
		"\x2\x698\x699\x3\x2\x2\x2\x699\x69A\a\xA2\x2\x2\x69A\x69B\x5\x1BE\xE0"+
		"\x2\x69B\x6A0\x5\xC0\x61\x2\x69C\x69E\x5\x1BE\xE0\x2\x69D\x69C\x3\x2\x2"+
		"\x2\x69D\x69E\x3\x2\x2\x2\x69E\x69F\x3\x2\x2\x2\x69F\x6A1\x5\x90I\x2\x6A0"+
		"\x69D\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A5\x3\x2\x2\x2\x6A2\x6A3"+
		"\x5\x1BE\xE0\x2\x6A3\x6A4\x5\x160\xB1\x2\x6A4\x6A6\x3\x2\x2\x2\x6A5\x6A2"+
		"\x3\x2\x2\x2\x6A5\x6A6\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2\x2\x6A7\x6A8\x5"+
		"\x1A8\xD5\x2\x6A8\x6AA\x5\x1E\x10\x2\x6A9\x6AB\x5\x16A\xB6\x2\x6AA\x6A9"+
		"\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AD\x3\x2\x2\x2\x6AC\x6AE\x5"+
		"\x1BE\xE0\x2\x6AD\x6AC\x3\x2\x2\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE\x6AF\x3"+
		"\x2\x2\x2\x6AF\x6B5\a_\x2\x2\x6B0\x6B1\x5\x1A6\xD4\x2\x6B1\x6B2\x5\xE"+
		"\b\x2\x6B2\x6B4\x3\x2\x2\x2\x6B3\x6B0\x3\x2\x2\x2\x6B4\x6B7\x3\x2\x2\x2"+
		"\x6B5\x6B3\x3\x2\x2\x2\x6B5\x6B6\x3\x2\x2\x2\x6B6\xE7\x3\x2\x2\x2\x6B7"+
		"\x6B5\x3\x2\x2\x2\x6B8\x6B9\x5\x17A\xBE\x2\x6B9\x6BA\x5\x1BE\xE0\x2\x6BA"+
		"\x6BC\x3\x2\x2\x2\x6BB\x6B8\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2\x2\x6BC\x6BF"+
		"\x3\x2\x2\x2\x6BD\x6BE\a\xB8\x2\x2\x6BE\x6C0\x5\x1BE\xE0\x2\x6BF\x6BD"+
		"\x3\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2\x6C0\x6C1\x3\x2\x2\x2\x6C1\x6C2\a\xA4"+
		"\x2\x2\x6C2\x6C3\x5\x1BE\xE0\x2\x6C3\x6C8\x5\x11C\x8F\x2\x6C4\x6C6\x5"+
		"\x1BE\xE0\x2\x6C5\x6C4\x3\x2\x2\x2\x6C5\x6C6\x3\x2\x2\x2\x6C6\x6C7\x3"+
		"\x2\x2\x2\x6C7\x6C9\x5\x90I\x2\x6C8\x6C5\x3\x2\x2\x2\x6C8\x6C9\x3\x2\x2"+
		"\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6CB\x5\x1A8\xD5\x2\x6CB\x6CD\x5\x1E\x10"+
		"\x2\x6CC\x6CE\x5\x16A\xB6\x2\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2"+
		"\x2\x6CE\x6D0\x3\x2\x2\x2\x6CF\x6D1\x5\x1BE\xE0\x2\x6D0\x6CF\x3\x2\x2"+
		"\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D8\a_\x2\x2\x6D3"+
		"\x6D4\x5\x1A6\xD4\x2\x6D4\x6D5\x5\xE\b\x2\x6D5\x6D7\x3\x2\x2\x2\x6D6\x6D3"+
		"\x3\x2\x2\x2\x6D7\x6DA\x3\x2\x2\x2\x6D8\x6D6\x3\x2\x2\x2\x6D8\x6D9\x3"+
		"\x2\x2\x2\x6D9\xE9\x3\x2\x2\x2\x6DA\x6D8\x3\x2\x2\x2\x6DB\x6DC\x5\x17A"+
		"\xBE\x2\x6DC\x6DD\x5\x1BE\xE0\x2\x6DD\x6DF\x3\x2\x2\x2\x6DE\x6DB\x3\x2"+
		"\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E2\x3\x2\x2\x2\x6E0\x6E1\a\xB8\x2"+
		"\x2\x6E1\x6E3\x5\x1BE\xE0\x2\x6E2\x6E0\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2"+
		"\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6E5\a\xA3\x2\x2\x6E5\x6E6\x5\x1BE\xE0"+
		"\x2\x6E6\x6EB\x5\x11C\x8F\x2\x6E7\x6E9\x5\x1BE\xE0\x2\x6E8\x6E7\x3\x2"+
		"\x2\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EC\x5\x90I\x2"+
		"\x6EB\x6E8\x3\x2\x2\x2\x6EB\x6EC\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2\x6ED"+
		"\x6EE\x5\x1A8\xD5\x2\x6EE\x6F0\x5\x1E\x10\x2\x6EF\x6F1\x5\x16A\xB6\x2"+
		"\x6F0\x6EF\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1\x6F3\x3\x2\x2\x2\x6F2"+
		"\x6F4\x5\x1BE\xE0\x2\x6F3\x6F2\x3\x2\x2\x2\x6F3\x6F4\x3\x2\x2\x2\x6F4"+
		"\x6F5\x3\x2\x2\x2\x6F5\x6FB\a_\x2\x2\x6F6\x6F7\x5\x1A6\xD4\x2\x6F7\x6F8"+
		"\x5\xE\b\x2\x6F8\x6FA\x3\x2\x2\x2\x6F9\x6F6\x3\x2\x2\x2\x6FA\x6FD\x3\x2"+
		"\x2\x2\x6FB\x6F9\x3\x2\x2\x2\x6FB\x6FC\x3\x2\x2\x2\x6FC\xEB\x3\x2\x2\x2"+
		"\x6FD\x6FB\x3\x2\x2\x2\x6FE\x6FF\a\xA9\x2\x2\x6FF\x700\x5\x1BE\xE0\x2"+
		"\x700\x70F\x5\x154\xAB\x2\x701\x703\x5\x1BE\xE0\x2\x702\x701\x3\x2\x2"+
		"\x2\x702\x703\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x706\a\xD6\x2\x2"+
		"\x705\x707\x5\x1BE\xE0\x2\x706\x705\x3\x2\x2\x2\x706\x707\x3\x2\x2\x2"+
		"\x707\x709\x3\x2\x2\x2\x708\x70A\x5\xEEx\x2\x709\x708\x3\x2\x2\x2\x709"+
		"\x70A\x3\x2\x2\x2\x70A\x70C\x3\x2\x2\x2\x70B\x70D\x5\x1BE\xE0\x2\x70C"+
		"\x70B\x3\x2\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x710"+
		"\a\xDD\x2\x2\x70F\x702\x3\x2\x2\x2\x70F\x710\x3\x2\x2\x2\x710\xED\x3\x2"+
		"\x2\x2\x711\x71C\x5\xF0y\x2\x712\x714\x5\x1BE\xE0\x2\x713\x712\x3\x2\x2"+
		"\x2\x713\x714\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2\x715\x717\a)\x2\x2\x716"+
		"\x718\x5\x1BE\xE0\x2\x717\x716\x3\x2\x2\x2\x717\x718\x3\x2\x2\x2\x718"+
		"\x719\x3\x2\x2\x2\x719\x71B\x5\xF0y\x2\x71A\x713\x3\x2\x2\x2\x71B\x71E"+
		"\x3\x2\x2\x2\x71C\x71A\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\xEF\x3\x2"+
		"\x2\x2\x71E\x71C\x3\x2\x2\x2\x71F\x720\a=\x2\x2\x720\x722\x5\x1BE\xE0"+
		"\x2\x721\x71F\x3\x2\x2\x2\x721\x722\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2"+
		"\x723\x724\x5\x17C\xBF\x2\x724\xF1\x3\x2\x2\x2\x725\x726\a\xAC\x2\x2\x726"+
		"\x729\x5\x1BE\xE0\x2\x727\x728\a\x9F\x2\x2\x728\x72A\x5\x1BE\xE0\x2\x729"+
		"\x727\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x72B\x3\x2\x2\x2\x72B\x72C"+
		"\x5\xF4{\x2\x72C\xF3\x3\x2\x2\x2\x72D\x738\x5\xF6|\x2\x72E\x730\x5\x1BE"+
		"\xE0\x2\x72F\x72E\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x731\x3\x2\x2"+
		"\x2\x731\x733\a)\x2\x2\x732\x734\x5\x1BE\xE0\x2\x733\x732\x3\x2\x2\x2"+
		"\x733\x734\x3\x2\x2\x2\x734\x735\x3\x2\x2\x2\x735\x737\x5\xF6|\x2\x736"+
		"\x72F\x3\x2\x2\x2\x737\x73A\x3\x2\x2\x2\x738\x736\x3\x2\x2\x2\x738\x739"+
		"\x3\x2\x2\x2\x739\xF5\x3\x2\x2\x2\x73A\x738\x3\x2\x2\x2\x73B\x73F\x5\x17C"+
		"\xBF\x2\x73C\x73D\x5\x1BE\xE0\x2\x73D\x73E\x5\x160\xB1\x2\x73E\x740\x3"+
		"\x2\x2\x2\x73F\x73C\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\xF7\x3\x2\x2"+
		"\x2\x741\x742\x5\xFA~\x2\x742\x744\a\xD6\x2\x2\x743\x745\x5\x1BE\xE0\x2"+
		"\x744\x743\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x746\x3\x2\x2\x2\x746"+
		"\x748\x5\x188\xC5\x2\x747\x749\x5\x1BE\xE0\x2\x748\x747\x3\x2\x2\x2\x748"+
		"\x749\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74C\a)\x2\x2\x74B\x74D\x5"+
		"\x1BE\xE0\x2\x74C\x74B\x3\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\x3"+
		"\x2\x2\x2\x74E\x750\x5\x188\xC5\x2\x74F\x751\x5\x1BE\xE0\x2\x750\x74F"+
		"\x3\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751\x75A\x3\x2\x2\x2\x752\x754\a)"+
		"\x2\x2\x753\x755\x5\x1BE\xE0\x2\x754\x753\x3\x2\x2\x2\x754\x755\x3\x2"+
		"\x2\x2\x755\x756\x3\x2\x2\x2\x756\x758\x5\x188\xC5\x2\x757\x759\x5\x1BE"+
		"\xE0\x2\x758\x757\x3\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75B\x3\x2\x2"+
		"\x2\x75A\x752\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75C\x3\x2\x2\x2"+
		"\x75C\x75E\a\xDD\x2\x2\x75D\x75F\x5\x1BE\xE0\x2\x75E\x75D\x3\x2\x2\x2"+
		"\x75E\x75F\x3\x2\x2\x2\x75F\x760\x3\x2\x2\x2\x760\x762\a\xCF\x2\x2\x761"+
		"\x763\x5\x1BE\xE0\x2\x762\x761\x3\x2\x2\x2\x762\x763\x3\x2\x2\x2\x763"+
		"\x764\x3\x2\x2\x2\x764\x765\x5\x17C\xBF\x2\x765\xF9\x3\x2\x2\x2\x766\x768"+
		"\t\r\x2\x2\x767\x769\a\x31\x2\x2\x768\x767\x3\x2\x2\x2\x768\x769\x3\x2"+
		"\x2\x2\x769\xFB\x3\x2\x2\x2\x76A\x76B\x5\x17C\xBF\x2\x76B\xFD\x3\x2\x2"+
		"\x2\x76C\x76D\a@\x2\x2\x76D\x76E\x5\x1BE\xE0\x2\x76E\x76F\x5\x188\xC5"+
		"\x2\x76F\x777\x3\x2\x2\x2\x770\x774\x5\x188\xC5\x2\x771\x772\x5\x1BE\xE0"+
		"\x2\x772\x773\x5\x18C\xC7\x2\x773\x775\x3\x2\x2\x2\x774\x771\x3\x2\x2"+
		"\x2\x774\x775\x3\x2\x2\x2\x775\x777\x3\x2\x2\x2\x776\x76C\x3\x2\x2\x2"+
		"\x776\x770\x3\x2\x2\x2\x777\xFF\x3\x2\x2\x2\x778\x77E\a\xAF\x2\x2\x779"+
		"\x77C\x5\x1BE\xE0\x2\x77A\x77D\a\x8D\x2\x2\x77B\x77D\x5\x17C\xBF\x2\x77C"+
		"\x77A\x3\x2\x2\x2\x77C\x77B\x3\x2\x2\x2\x77D\x77F\x3\x2\x2\x2\x77E\x779"+
		"\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F\x101\x3\x2\x2\x2\x780\x781\a\xB0"+
		"\x2\x2\x781\x103\x3\x2\x2\x2\x782\x783\a\xB1\x2\x2\x783\x784\x5\x1BE\xE0"+
		"\x2\x784\x786\x5\x17C\xBF\x2\x785\x787\x5\x1BE\xE0\x2\x786\x785\x3\x2"+
		"\x2\x2\x786\x787\x3\x2\x2\x2\x787\x788\x3\x2\x2\x2\x788\x78A\a\xD2\x2"+
		"\x2\x789\x78B\x5\x1BE\xE0\x2\x78A\x789\x3\x2\x2\x2\x78A\x78B\x3\x2\x2"+
		"\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78D\x5\x17C\xBF\x2\x78D\x105\x3\x2\x2"+
		"\x2\x78E\x78F\a\xBA\x2\x2\x78F\x107\x3\x2\x2\x2\x790\x791\a\x8C\x2\x2"+
		"\x791\x792\x5\x1BE\xE0\x2\x792\x793\x5\x17C\xBF\x2\x793\x794\x5\x1BE\xE0"+
		"\x2\x794\x795\a\x39\x2\x2\x795\x796\x5\x1BE\xE0\x2\x796\x797\x5\x17C\xBF"+
		"\x2\x797\x109\x3\x2\x2\x2\x798\x79A\a\xB3\x2\x2\x799\x79B\x5\x1BE\xE0"+
		"\x2\x79A\x799\x3\x2\x2\x2\x79A\x79B\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2"+
		"\x79C\x79E\a\x41\x2\x2\x79D\x79F\x5\x1BE\xE0\x2\x79E\x79D\x3\x2\x2\x2"+
		"\x79E\x79F\x3\x2\x2\x2\x79F\x7A0\x3\x2\x2\x2\x7A0\x7A1\x5\x10C\x87\x2"+
		"\x7A1\x7AB\x5\x1A8\xD5\x2\x7A2\x7A4\x5\x16A\xB6\x2\x7A3\x7A2\x3\x2\x2"+
		"\x2\x7A3\x7A4\x3\x2\x2\x2\x7A4\x7A6\x3\x2\x2\x2\x7A5\x7A7\x5\x1BE\xE0"+
		"\x2\x7A6\x7A5\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2"+
		"\x7A8\x7AA\x5\x10E\x88\x2\x7A9\x7A3\x3\x2\x2\x2\x7AA\x7AD\x3\x2\x2\x2"+
		"\x7AB\x7A9\x3\x2\x2\x2\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7AF\x3\x2\x2\x2\x7AD"+
		"\x7AB\x3\x2\x2\x2\x7AE\x7B0\x5\x16A\xB6\x2\x7AF\x7AE\x3\x2\x2\x2\x7AF"+
		"\x7B0\x3\x2\x2\x2\x7B0\x7B2\x3\x2\x2\x2\x7B1\x7B3\x5\x1BE\xE0\x2\x7B2"+
		"\x7B1\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B5\x3\x2\x2\x2\x7B4\x7B6"+
		"\x5\x110\x89\x2\x7B5\x7B4\x3\x2\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x7B8"+
		"\x3\x2\x2\x2\x7B7\x7B9\x5\x16A\xB6\x2\x7B8\x7B7\x3\x2\x2\x2\x7B8\x7B9"+
		"\x3\x2\x2\x2\x7B9\x7BB\x3\x2\x2\x2\x7BA\x7BC\x5\x1BE\xE0\x2\x7BB\x7BA"+
		"\x3\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BD\x3\x2\x2\x2\x7BD\x7BE\a`"+
		"\x2\x2\x7BE\x10B\x3\x2\x2\x2\x7BF\x7C0\x5\x17C\xBF\x2\x7C0\x10D\x3\x2"+
		"\x2\x2\x7C1\x7C2\a\x41\x2\x2\x7C2\x7C3\x5\x1BE\xE0\x2\x7C3\x7CE\x5\x112"+
		"\x8A\x2\x7C4\x7C6\x5\x1BE\xE0\x2\x7C5\x7C4\x3\x2\x2\x2\x7C5\x7C6\x3\x2"+
		"\x2\x2\x7C6\x7C7\x3\x2\x2\x2\x7C7\x7C9\a)\x2\x2\x7C8\x7CA\x5\x1BE\xE0"+
		"\x2\x7C9\x7C8\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2\x2"+
		"\x7CB\x7CD\x5\x112\x8A\x2\x7CC\x7C5\x3\x2\x2\x2\x7CD\x7D0\x3\x2\x2\x2"+
		"\x7CE\x7CC\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D1\x3\x2\x2\x2\x7D0"+
		"\x7CE\x3\x2\x2\x2\x7D1\x7D2\x5\x1A8\xD5\x2\x7D2\x7D3\x5\x1E\x10\x2\x7D3"+
		"\x10F\x3\x2\x2\x2\x7D4\x7D6\a\x41\x2\x2\x7D5\x7D7\x5\x1BE\xE0\x2\x7D6"+
		"\x7D5\x3\x2\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x7D9"+
		"\aY\x2\x2\x7D9\x7DA\x5\x1A8\xD5\x2\x7DA\x7DB\x5\x1E\x10\x2\x7DB\x111\x3"+
		"\x2\x2\x2\x7DC\x7DE\a|\x2\x2\x7DD\x7DF\x5\x1BE\xE0\x2\x7DE\x7DD\x3\x2"+
		"\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x7E1\x3\x2\x2\x2\x7E0\x7DC\x3\x2\x2"+
		"\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7E4\x5\x164\xB3"+
		"\x2\x7E3\x7E5\x5\x1BE\xE0\x2\x7E4\x7E3\x3\x2\x2\x2\x7E4\x7E5\x3\x2\x2"+
		"\x2\x7E5\x7E6\x3\x2\x2\x2\x7E6\x7E7\x5\x17C\xBF\x2\x7E7\x7F0\x3\x2\x2"+
		"\x2\x7E8\x7E9\x5\x114\x8B\x2\x7E9\x7EA\x5\x1BE\xE0\x2\x7EA\x7EB\a\xC0"+
		"\x2\x2\x7EB\x7EC\x5\x1BE\xE0\x2\x7EC\x7ED\x5\x116\x8C\x2\x7ED\x7F0\x3"+
		"\x2\x2\x2\x7EE\x7F0\x5\x17C\xBF\x2\x7EF\x7E0\x3\x2\x2\x2\x7EF\x7E8\x3"+
		"\x2\x2\x2\x7EF\x7EE\x3\x2\x2\x2\x7F0\x113\x3\x2\x2\x2\x7F1\x7F2\x5\x17C"+
		"\xBF\x2\x7F2\x115\x3\x2\x2\x2\x7F3\x7F4\x5\x17C\xBF\x2\x7F4\x117\x3\x2"+
		"\x2\x2\x7F5\x7F6\a\xB4\x2\x2\x7F6\x7F7\x5\x1BE\xE0\x2\x7F7\x7F9\x5\x188"+
		"\xC5\x2\x7F8\x7FA\x5\x1BE\xE0\x2\x7F9\x7F8\x3\x2\x2\x2\x7F9\x7FA\x3\x2"+
		"\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\x7FD\a\xD2\x2\x2\x7FC\x7FE\x5\x1BE\xE0"+
		"\x2\x7FD\x7FC\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2"+
		"\x7FF\x800\x5\x17C\xBF\x2\x800\x119\x3\x2\x2\x2\x801\x802\x5\x17A\xBE"+
		"\x2\x802\x803\x5\x1BE\xE0\x2\x803\x805\x3\x2\x2\x2\x804\x801\x3\x2\x2"+
		"\x2\x804\x805\x3\x2\x2\x2\x805\x808\x3\x2\x2\x2\x806\x807\a\xB8\x2\x2"+
		"\x807\x809\x5\x1BE\xE0\x2\x808\x806\x3\x2\x2\x2\x808\x809\x3\x2\x2\x2"+
		"\x809\x80A\x3\x2\x2\x2\x80A\x80C\a\xBC\x2\x2\x80B\x80D\x5\x1BE\xE0\x2"+
		"\x80C\x80B\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E"+
		"\x813\x5\x11C\x8F\x2\x80F\x811\x5\x1BE\xE0\x2\x810\x80F\x3\x2\x2\x2\x810"+
		"\x811\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812\x814\x5\x90I\x2\x813\x810"+
		"\x3\x2\x2\x2\x813\x814\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815\x816\x5"+
		"\x1A8\xD5\x2\x816\x818\x5\x1E\x10\x2\x817\x819\x5\x16A\xB6\x2\x818\x817"+
		"\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819\x81B\x3\x2\x2\x2\x81A\x81C\x5"+
		"\x1BE\xE0\x2\x81B\x81A\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C\x81D\x3"+
		"\x2\x2\x2\x81D\x823\a\x61\x2\x2\x81E\x81F\x5\x1A6\xD4\x2\x81F\x820\x5"+
		"\xE\b\x2\x820\x822\x3\x2\x2\x2\x821\x81E\x3\x2\x2\x2\x822\x825\x3\x2\x2"+
		"\x2\x823\x821\x3\x2\x2\x2\x823\x824\x3\x2\x2\x2\x824\x11B\x3\x2\x2\x2"+
		"\x825\x823\x3\x2\x2\x2\x826\x827\x5\x154\xAB\x2\x827\x11D\x3\x2\x2\x2"+
		"\x828\x829\t\xE\x2\x2\x829\x82B\x5\x1BE\xE0\x2\x82A\x828\x3\x2\x2\x2\x82A"+
		"\x82B\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x82D\x5\x122\x92\x2\x82D"+
		"\x11F\x3\x2\x2\x2\x82E\x82F\a\xA1\x2\x2\x82F\x830\x5\x1BE\xE0\x2\x830"+
		"\x831\x5\x122\x92\x2\x831\x121\x3\x2\x2\x2\x832\x833\a\xC2\x2\x2\x833"+
		"\x834\x5\x1BE\xE0\x2\x834\x835\x5\x156\xAC\x2\x835\x836\x5\x1A8\xD5\x2"+
		"\x836\x837\x5\x124\x93\x2\x837\x838\x5\x1A8\xD5\x2\x838\x839\a\x62\x2"+
		"\x2\x839\x123\x3\x2\x2\x2\x83A\x840\x5\x126\x94\x2\x83B\x83C\x5\x1A8\xD5"+
		"\x2\x83C\x83D\x5\x126\x94\x2\x83D\x83F\x3\x2\x2\x2\x83E\x83B\x3\x2\x2"+
		"\x2\x83F\x842\x3\x2\x2\x2\x840\x83E\x3\x2\x2\x2\x840\x841\x3\x2\x2\x2"+
		"\x841\x125\x3\x2\x2\x2\x842\x840\x3\x2\x2\x2\x843\x846\x5\x12A\x96\x2"+
		"\x844\x846\x5\x128\x95\x2\x845\x843\x3\x2\x2\x2\x845\x844\x3\x2\x2\x2"+
		"\x846\x127\x3\x2\x2\x2\x847\x849\x5\x156\xAC\x2\x848\x84A\x5\x1BE\xE0"+
		"\x2\x849\x848\x3\x2\x2\x2\x849\x84A\x3\x2\x2\x2\x84A\x84B\x3\x2\x2\x2"+
		"\x84B\x84C\x5\x12C\x97\x2\x84C\x129\x3\x2\x2\x2\x84D\x84E\x5\x152\xAA"+
		"\x2\x84E\x84F\x5\x1BE\xE0\x2\x84F\x850\x5\x160\xB1\x2\x850\x12B\x3\x2"+
		"\x2\x2\x851\x852\x5\x12E\x98\x2\x852\x853\x5\x1BE\xE0\x2\x853\x855\x3"+
		"\x2\x2\x2\x854\x851\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\x856\x3\x2"+
		"\x2\x2\x856\x857\x5\x160\xB1\x2\x857\x12D\x3\x2\x2\x2\x858\x85A\a\xD6"+
		"\x2\x2\x859\x85B\x5\x1BE\xE0\x2\x85A\x859\x3\x2\x2\x2\x85A\x85B\x3\x2"+
		"\x2\x2\x85B\x85D\x3\x2\x2\x2\x85C\x85E\x5\x130\x99\x2\x85D\x85C\x3\x2"+
		"\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x860\x3\x2\x2\x2\x85F\x861\x5\x1BE\xE0"+
		"\x2\x860\x85F\x3\x2\x2\x2\x860\x861\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2"+
		"\x862\x863\a\xDD\x2\x2\x863\x12F\x3\x2\x2\x2\x864\x86F\x5\x132\x9A\x2"+
		"\x865\x867\x5\x1BE\xE0\x2\x866\x865\x3\x2\x2\x2\x866\x867\x3\x2\x2\x2"+
		"\x867\x868\x3\x2\x2\x2\x868\x86A\a)\x2\x2\x869\x86B\x5\x1BE\xE0\x2\x86A"+
		"\x869\x3\x2\x2\x2\x86A\x86B\x3\x2\x2\x2\x86B\x86C\x3\x2\x2\x2\x86C\x86E"+
		"\x5\x132\x9A\x2\x86D\x866\x3\x2\x2\x2\x86E\x871\x3\x2\x2\x2\x86F\x86D"+
		"\x3\x2\x2\x2\x86F\x870\x3\x2\x2\x2\x870\x131\x3\x2\x2\x2\x871\x86F\x3"+
		"\x2\x2\x2\x872\x874\x5\x134\x9B\x2\x873\x875\x5\x1BE\xE0\x2\x874\x873"+
		"\x3\x2\x2\x2\x874\x875\x3\x2\x2\x2\x875\x877\x3\x2\x2\x2\x876\x872\x3"+
		"\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\x879\x5\x136"+
		"\x9C\x2\x879\x133\x3\x2\x2\x2\x87A\x87C\x5\x138\x9D\x2\x87B\x87D\x5\x1BE"+
		"\xE0\x2\x87C\x87B\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x87E\x3\x2\x2"+
		"\x2\x87E\x87F\a\xC0\x2\x2\x87F\x135\x3\x2\x2\x2\x880\x881\x5\x138\x9D"+
		"\x2\x881\x137\x3\x2\x2\x2\x882\x883\x5\x17C\xBF\x2\x883\x139\x3\x2\x2"+
		"\x2\x884\x888\aU\x2\x2\x885\x888\a\xB8\x2\x2\x886\x888\x5\x17A\xBE\x2"+
		"\x887\x884\x3\x2\x2\x2\x887\x885\x3\x2\x2\x2\x887\x886\x3\x2\x2\x2\x888"+
		"\x889\x3\x2\x2\x2\x889\x88C\x5\x1BE\xE0\x2\x88A\x88B\a\xCC\x2\x2\x88B"+
		"\x88D\x5\x1BE\xE0\x2\x88C\x88A\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D"+
		"\x88E\x3\x2\x2\x2\x88E\x88F\x5\x13C\x9F\x2\x88F\x13B\x3\x2\x2\x2\x890"+
		"\x89B\x5\x13E\xA0\x2\x891\x893\x5\x1BE\xE0\x2\x892\x891\x3\x2\x2\x2\x892"+
		"\x893\x3\x2\x2\x2\x893\x894\x3\x2\x2\x2\x894\x896\a)\x2\x2\x895\x897\x5"+
		"\x1BE\xE0\x2\x896\x895\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2\x897\x898\x3"+
		"\x2\x2\x2\x898\x89A\x5\x13E\xA0\x2\x899\x892\x3\x2\x2\x2\x89A\x89D\x3"+
		"\x2\x2\x2\x89B\x899\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2\x89C\x13D\x3\x2"+
		"\x2\x2\x89D\x89B\x3\x2\x2\x2\x89E\x8B0\x5\x154\xAB\x2\x89F\x8A1\x5\x1BE"+
		"\xE0\x2\x8A0\x89F\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2\x2\x8A1\x8A2\x3\x2\x2"+
		"\x2\x8A2\x8A4\a\xD6\x2\x2\x8A3\x8A5\x5\x1BE\xE0\x2\x8A4\x8A3\x3\x2\x2"+
		"\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x8AA\x3\x2\x2\x2\x8A6\x8A8\x5\x14E\xA8"+
		"\x2\x8A7\x8A9\x5\x1BE\xE0\x2\x8A8\x8A7\x3\x2\x2\x2\x8A8\x8A9\x3\x2\x2"+
		"\x2\x8A9\x8AB\x3\x2\x2\x2\x8AA\x8A6\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2"+
		"\x8AB\x8AC\x3\x2\x2\x2\x8AC\x8AE\a\xDD\x2\x2\x8AD\x8AF\x5\x1BE\xE0\x2"+
		"\x8AE\x8AD\x3\x2\x2\x2\x8AE\x8AF\x3\x2\x2\x2\x8AF\x8B1\x3\x2\x2\x2\x8B0"+
		"\x8A0\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2\x8B1\x8B5\x3\x2\x2\x2\x8B2\x8B3"+
		"\x5\x1BE\xE0\x2\x8B3\x8B4\x5\x160\xB1\x2\x8B4\x8B6\x3\x2\x2\x2\x8B5\x8B2"+
		"\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2\x8B6\x13F\x3\x2\x2\x2\x8B7\x8B8\a\xC9"+
		"\x2\x2\x8B8\x8B9\x5\x1BE\xE0\x2\x8B9\x8BA\x5\x17C\xBF\x2\x8BA\x8BB\x5"+
		"\x1A8\xD5\x2\x8BB\x8BD\x5\x1E\x10\x2\x8BC\x8BE\x5\x16A\xB6\x2\x8BD\x8BC"+
		"\x3\x2\x2\x2\x8BD\x8BE\x3\x2\x2\x2\x8BE\x8C0\x3\x2\x2\x2\x8BF\x8C1\x5"+
		"\x1BE\xE0\x2\x8C0\x8BF\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8C2\x3"+
		"\x2\x2\x2\x8C2\x8C3\a\xC8\x2\x2\x8C3\x141\x3\x2\x2\x2\x8C4\x8C5\a\xCB"+
		"\x2\x2\x8C5\x8C6\x5\x1BE\xE0\x2\x8C6\x8C7\x5\x17C\xBF\x2\x8C7\x8C8\x5"+
		"\x1A8\xD5\x2\x8C8\x8CA\x5\x1E\x10\x2\x8C9\x8CB\x5\x16A\xB6\x2\x8CA\x8C9"+
		"\x3\x2\x2\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB\x8CD\x3\x2\x2\x2\x8CC\x8CE\x5"+
		"\x1BE\xE0\x2\x8CD\x8CC\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8CF\x3"+
		"\x2\x2\x2\x8CF\x8D0\a\x63\x2\x2\x8D0\x143\x3\x2\x2\x2\x8D1\x8D2\x5\x17C"+
		"\xBF\x2\x8D2\x8D7\x5\x1BE\xE0\x2\x8D3\x8D5\a\xB9\x2\x2\x8D4\x8D6\x5\x1BE"+
		"\xE0\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D8\x3\x2\x2"+
		"\x2\x8D7\x8D3\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2"+
		"\x8D9\x8DA\x5\x14A\xA6\x2\x8DA\x8DF\a\xD8\x2\x2\x8DB\x8DD\a\xB9\x2\x2"+
		"\x8DC\x8DE\x5\x1BE\xE0\x2\x8DD\x8DC\x3\x2\x2\x2\x8DD\x8DE\x3\x2\x2\x2"+
		"\x8DE\x8E0\x3\x2\x2\x2\x8DF\x8DB\x3\x2\x2\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0"+
		"\x8E1\x3\x2\x2\x2\x8E1\x8E3\x5\x14A\xA6\x2\x8E2\x8E4\x5\x1BE\xE0\x2\x8E3"+
		"\x8E2\x3\x2\x2\x2\x8E3\x8E4\x3\x2\x2\x2\x8E4\x8EA\x3\x2\x2\x2\x8E5\x8E7"+
		"\a)\x2\x2\x8E6\x8E8\x5\x1BE\xE0\x2\x8E7\x8E6\x3\x2\x2\x2\x8E7\x8E8\x3"+
		"\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EB\x5\x17C\xBF\x2\x8EA\x8E5\x3"+
		"\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\x8ED\x3\x2\x2\x2\x8EC\x8EE\x5\x1BE"+
		"\xE0\x2\x8ED\x8EC\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8F4\x3\x2\x2"+
		"\x2\x8EF\x8F1\a)\x2\x2\x8F0\x8F2\x5\x1BE\xE0\x2\x8F1\x8F0\x3\x2\x2\x2"+
		"\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F5\x5\x14C\xA7\x2"+
		"\x8F4\x8EF\x3\x2\x2\x2\x8F4\x8F5\x3\x2\x2\x2\x8F5\x145\x3\x2\x2\x2\x8F6"+
		"\x8F8\x5\x17C\xBF\x2\x8F7\x8F9\x5\x1BE\xE0\x2\x8F8\x8F7\x3\x2\x2\x2\x8F8"+
		"\x8F9\x3\x2\x2\x2\x8F9\x8FA\x3\x2\x2\x2\x8FA\x8FC\a-\x2\x2\x8FB\x8FD\x5"+
		"\x1BE\xE0\x2\x8FC\x8FB\x3\x2\x2\x2\x8FC\x8FD\x3\x2\x2\x2\x8FD\x8FF\x3"+
		"\x2\x2\x2\x8FE\x8F6\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\x3\x2"+
		"\x2\x2\x900\x901\a\xF\x2\x2\x901\x906\x5\x1BE\xE0\x2\x902\x904\a\xB9\x2"+
		"\x2\x903\x905\x5\x1BE\xE0\x2\x904\x903\x3\x2\x2\x2\x904\x905\x3\x2\x2"+
		"\x2\x905\x907\x3\x2\x2\x2\x906\x902\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2"+
		"\x907\x908\x3\x2\x2\x2\x908\x911\x5\x14A\xA6\x2\x909\x90B\x5\x1BE\xE0"+
		"\x2\x90A\x909\x3\x2\x2\x2\x90A\x90B\x3\x2\x2\x2\x90B\x90C\x3\x2\x2\x2"+
		"\x90C\x90E\a)\x2\x2\x90D\x90F\x5\x1BE\xE0\x2\x90E\x90D\x3\x2\x2\x2\x90E"+
		"\x90F\x3\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x912\x5\x17C\xBF\x2\x911"+
		"\x90A\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x911\x3\x2\x2\x2\x913\x914"+
		"\x3\x2\x2\x2\x914\x147\x3\x2\x2\x2\x915\x917\x5\x17C\xBF\x2\x916\x918"+
		"\x5\x1BE\xE0\x2\x917\x916\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x919"+
		"\x3\x2\x2\x2\x919\x91B\a-\x2\x2\x91A\x91C\x5\x1BE\xE0\x2\x91B\x91A\x3"+
		"\x2\x2\x2\x91B\x91C\x3\x2\x2\x2\x91C\x91E\x3\x2\x2\x2\x91D\x915\x3\x2"+
		"\x2\x2\x91D\x91E\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x920\a&\x2\x2"+
		"\x920\x921\x5\x1BE\xE0\x2\x921\x923\x5\x14A\xA6\x2\x922\x924\x5\x1BE\xE0"+
		"\x2\x923\x922\x3\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2"+
		"\x925\x927\a\xD8\x2\x2\x926\x928\x5\x1BE\xE0\x2\x927\x926\x3\x2\x2\x2"+
		"\x927\x928\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92A\x5\x14A\xA6\x2"+
		"\x92A\x149\x3\x2\x2\x2\x92B\x92D\a\xD6\x2\x2\x92C\x92E\x5\x1BE\xE0\x2"+
		"\x92D\x92C\x3\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E\x92F\x3\x2\x2\x2\x92F"+
		"\x931\x5\x17C\xBF\x2\x930\x932\x5\x1BE\xE0\x2\x931\x930\x3\x2\x2\x2\x931"+
		"\x932\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x935\a)\x2\x2\x934\x936\x5"+
		"\x1BE\xE0\x2\x935\x934\x3\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\x937\x3"+
		"\x2\x2\x2\x937\x939\x5\x17C\xBF\x2\x938\x93A\x5\x1BE\xE0\x2\x939\x938"+
		"\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93C\a\xDD"+
		"\x2\x2\x93C\x14B\x3\x2\x2\x2\x93D\x93E\t\xF\x2\x2\x93E\x14D\x3\x2\x2\x2"+
		"\x93F\x94A\x5\x150\xA9\x2\x940\x942\x5\x1BE\xE0\x2\x941\x940\x3\x2\x2"+
		"\x2\x941\x942\x3\x2\x2\x2\x942\x943\x3\x2\x2\x2\x943\x945\a)\x2\x2\x944"+
		"\x946\x5\x1BE\xE0\x2\x945\x944\x3\x2\x2\x2\x945\x946\x3\x2\x2\x2\x946"+
		"\x947\x3\x2\x2\x2\x947\x949\x5\x150\xA9\x2\x948\x941\x3\x2\x2\x2\x949"+
		"\x94C\x3\x2\x2\x2\x94A\x948\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x14F"+
		"\x3\x2\x2\x2\x94C\x94A\x3\x2\x2\x2\x94D\x94E\x5\x17C\xBF\x2\x94E\x94F"+
		"\x5\x1BE\xE0\x2\x94F\x950\a\xC0\x2\x2\x950\x951\x5\x1BE\xE0\x2\x951\x953"+
		"\x3\x2\x2\x2\x952\x94D\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953\x954\x3"+
		"\x2\x2\x2\x954\x955\x5\x17C\xBF\x2\x955\x151\x3\x2\x2\x2\x956\x95A\x5"+
		"\x154\xAB\x2\x957\x95A\x5\x1A4\xD3\x2\x958\x95A\x5\x1A2\xD2\x2\x959\x956"+
		"\x3\x2\x2\x2\x959\x957\x3\x2\x2\x2\x959\x958\x3\x2\x2\x2\x95A\x153\x3"+
		"\x2\x2\x2\x95B\x95E\x5\x158\xAD\x2\x95C\x95E\x5\x156\xAC\x2\x95D\x95B"+
		"\x3\x2\x2\x2\x95D\x95C\x3\x2\x2\x2\x95E\x155\x3\x2\x2\x2\x95F\x960\x5"+
		"\x15A\xAE\x2\x960\x157\x3\x2\x2\x2\x961\x962\x5\x156\xAC\x2\x962\x963"+
		"\x5\x178\xBD\x2\x963\x159\x3\x2\x2\x2\x964\x969\a\xEB\x2\x2\x965\x969"+
		"\x5\x1A0\xD1\x2\x966\x969\x5\x15C\xAF\x2\x967\x969\a\a\x2\x2\x968\x964"+
		"\x3\x2\x2\x2\x968\x965\x3\x2\x2\x2\x968\x966\x3\x2\x2\x2\x968\x967\x3"+
		"\x2\x2\x2\x969\x15B\x3\x2\x2\x2\x96A\x96E\a\xDE\x2\x2\x96B\x96D\x5\x15E"+
		"\xB0\x2\x96C\x96B\x3\x2\x2\x2\x96D\x970\x3\x2\x2\x2\x96E\x96C\x3\x2\x2"+
		"\x2\x96E\x96F\x3\x2\x2\x2\x96F\x971\x3\x2\x2\x2\x970\x96E\x3\x2\x2\x2"+
		"\x971\x972\a\xDF\x2\x2\x972\x15D\x3\x2\x2\x2\x973\x976\n\x10\x2\x2\x974"+
		"\x976\x5\x15C\xAF\x2\x975\x973\x3\x2\x2\x2\x975\x974\x3\x2\x2\x2\x976"+
		"\x15F\x3\x2\x2\x2\x977\x979\a\x39\x2\x2\x978\x97A\x5\x1BE\xE0\x2\x979"+
		"\x978\x3\x2\x2\x2\x979\x97A\x3\x2\x2\x2\x97A\x97D\x3\x2\x2\x2\x97B\x97C"+
		"\a\x8E\x2\x2\x97C\x97E\x5\x1BE\xE0\x2\x97D\x97B\x3\x2\x2\x2\x97D\x97E"+
		"\x3\x2\x2\x2\x97E\x97F\x3\x2\x2\x2\x97F\x984\x5\x176\xBC\x2\x980\x982"+
		"\x5\x1BE\xE0\x2\x981\x980\x3\x2\x2\x2\x981\x982\x3\x2\x2\x2\x982\x983"+
		"\x3\x2\x2\x2\x983\x985\x5\x168\xB5\x2\x984\x981\x3\x2\x2\x2\x984\x985"+
		"\x3\x2\x2\x2\x985\x161\x3\x2\x2\x2\x986\x987\t\x11\x2\x2\x987\x163\x3"+
		"\x2\x2\x2\x988\x989\t\x12\x2\x2\x989\x165\x3\x2\x2\x2\x98A\x9A2\x5\x17E"+
		"\xC0\x2\x98B\x9A2\x5\x188\xC5\x2\x98C\x9A2\x5\x18A\xC6\x2\x98D\x98F\a"+
		"\xD6\x2\x2\x98E\x990\x5\x1BE\xE0\x2\x98F\x98E\x3\x2\x2\x2\x98F\x990\x3"+
		"\x2\x2\x2\x990\x991\x3\x2\x2\x2\x991\x993\x5\x166\xB4\x2\x992\x994\x5"+
		"\x1BE\xE0\x2\x993\x992\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994\x995\x3"+
		"\x2\x2\x2\x995\x996\a\xDD\x2\x2\x996\x9A2\x3\x2\x2\x2\x997\x998\a\xC3"+
		"\x2\x2\x998\x999\x5\x1BE\xE0\x2\x999\x99A\x5\x166\xB4\x2\x99A\x9A2\x3"+
		"\x2\x2\x2\x99B\x99C\a\x8E\x2\x2\x99C\x99D\x5\x1BE\xE0\x2\x99D\x99E\x5"+
		"\x166\xB4\x2\x99E\x9A2\x3\x2\x2\x2\x99F\x9A0\a.\x2\x2\x9A0\x9A2\x5\x17C"+
		"\xBF\x2\x9A1\x98A\x3\x2\x2\x2\x9A1\x98B\x3\x2\x2\x2\x9A1\x98C\x3\x2\x2"+
		"\x2\x9A1\x98D\x3\x2\x2\x2\x9A1\x997\x3\x2\x2\x2\x9A1\x99B\x3\x2\x2\x2"+
		"\x9A1\x99F\x3\x2\x2\x2\x9A2\x167\x3\x2\x2\x2\x9A3\x9A5\a\xD9\x2\x2\x9A4"+
		"\x9A6\x5\x1BE\xE0\x2\x9A5\x9A4\x3\x2\x2\x2\x9A5\x9A6\x3\x2\x2\x2\x9A6"+
		"\x9A9\x3\x2\x2\x2\x9A7\x9AA\x5\x174\xBB\x2\x9A8\x9AA\x5\x15A\xAE\x2\x9A9"+
		"\x9A7\x3\x2\x2\x2\x9A9\x9A8\x3\x2\x2\x2\x9AA\x169\x3\x2\x2\x2\x9AB\x9AF"+
		"\x6\xB6\x4\x2\x9AC\x9B0\x5\x170\xB9\x2\x9AD\x9B0\x5\x16C\xB7\x2\x9AE\x9B0"+
		"\x5\x16E\xB8\x2\x9AF\x9AC\x3\x2\x2\x2\x9AF\x9AD\x3\x2\x2\x2\x9AF\x9AE"+
		"\x3\x2\x2\x2\x9B0\x16B\x3\x2\x2\x2\x9B1\x9B3\x5\x152\xAA\x2\x9B2\x9B4"+
		"\x5\x1BE\xE0\x2\x9B3\x9B2\x3\x2\x2\x2\x9B3\x9B4\x3\x2\x2\x2\x9B4\x9B5"+
		"\x3\x2\x2\x2\x9B5\x9B6\a*\x2\x2\x9B6\x16D\x3\x2\x2\x2\x9B7\x9B9\x5\x172"+
		"\xBA\x2\x9B8\x9BA\x5\x1BE\xE0\x2\x9B9\x9B8\x3\x2\x2\x2\x9B9\x9BA\x3\x2"+
		"\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BC\a*\x2\x2\x9BC\x9BF\x3\x2\x2\x2"+
		"\x9BD\x9BF\x5\x172\xBA\x2\x9BE\x9B7\x3\x2\x2\x2\x9BE\x9BD\x3\x2\x2\x2"+
		"\x9BF\x16F\x3\x2\x2\x2\x9C0\x9C1\x5\x172\xBA\x2\x9C1\x9C2\x5\x1BE\xE0"+
		"\x2\x9C2\x9C3\x5\x16C\xB7\x2\x9C3\x171\x3\x2\x2\x2\x9C4\x9C5\x5\x174\xBB"+
		"\x2\x9C5\x173\x3\x2\x2\x2\x9C6\x9C7\t\x13\x2\x2\x9C7\x175\x3\x2\x2\x2"+
		"\x9C8\x9CB\x5\x162\xB2\x2\x9C9\x9CB\x5\x166\xB4\x2\x9CA\x9C8\x3\x2\x2"+
		"\x2\x9CA\x9C9\x3\x2\x2\x2\x9CB\x9D4\x3\x2\x2\x2\x9CC\x9CE\x5\x1BE\xE0"+
		"\x2\x9CD\x9CC\x3\x2\x2\x2\x9CD\x9CE\x3\x2\x2\x2\x9CE\x9CF\x3\x2\x2\x2"+
		"\x9CF\x9D1\a\xD6\x2\x2\x9D0\x9D2\x5\x1BE\xE0\x2\x9D1\x9D0\x3\x2\x2\x2"+
		"\x9D1\x9D2\x3\x2\x2\x2\x9D2\x9D3\x3\x2\x2\x2\x9D3\x9D5\a\xDD\x2\x2\x9D4"+
		"\x9CD\x3\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5\x177\x3\x2\x2\x2\x9D6\x9D7"+
		"\t\x14\x2\x2\x9D7\x179\x3\x2\x2\x2\x9D8\x9D9\t\x15\x2\x2\x9D9\x17B\x3"+
		"\x2\x2\x2\x9DA\x9DB\b\xBF\x1\x2\x9DB\x9DC\a\xC3\x2\x2\x9DC\x9DD\x5\x1BE"+
		"\xE0\x2\x9DD\x9DE\x5\x17C\xBF\x13\x9DE\xA00\x3\x2\x2\x2\x9DF\x9E0\a\x8E"+
		"\x2\x2\x9E0\x9E1\x5\x1BE\xE0\x2\x9E1\x9E2\x5\x17C\xBF\x12\x9E2\xA00\x3"+
		"\x2\x2\x2\x9E3\x9E5\a\xD8\x2\x2\x9E4\x9E6\x5\x1BE\xE0\x2\x9E5\x9E4\x3"+
		"\x2\x2\x2\x9E5\x9E6\x3\x2\x2\x2\x9E6\x9E7\x3\x2\x2\x2\x9E7\xA00\x5\x17C"+
		"\xBF\x10\x9E8\x9EA\a\x8F\x2\x2\x9E9\x9EB\x5\x1BE\xE0\x2\x9EA\x9E9\x3\x2"+
		"\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9EC\x3\x2\x2\x2\x9EC\xA00\x5\x17C\xBF"+
		"\t\x9ED\x9EE\a.\x2\x2\x9EE\xA00\x5\x17C\xBF\x3\x9EF\x9F1\x5\x1BE\xE0\x2"+
		"\x9F0\x9EF\x3\x2\x2\x2\x9F0\x9F1\x3\x2\x2\x2\x9F1\x9F2\x3\x2\x2\x2\x9F2"+
		"\x9F4\a\xD6\x2\x2\x9F3\x9F5\x5\x1BE\xE0\x2\x9F4\x9F3\x3\x2\x2\x2\x9F4"+
		"\x9F5\x3\x2\x2\x2\x9F5\x9F6\x3\x2\x2\x2\x9F6\x9F8\x5\x17C\xBF\x2\x9F7"+
		"\x9F9\x5\x1BE\xE0\x2\x9F8\x9F7\x3\x2\x2\x2\x9F8\x9F9\x3\x2\x2\x2\x9F9"+
		"\x9FA\x3\x2\x2\x2\x9FA\x9FB\a\xDD\x2\x2\x9FB\xA00\x3\x2\x2\x2\x9FC\xA00"+
		"\x5\x17E\xC0\x2\x9FD\xA00\x5\x188\xC5\x2\x9FE\xA00\x5\x18A\xC6\x2\x9FF"+
		"\x9DA\x3\x2\x2\x2\x9FF\x9DF\x3\x2\x2\x2\x9FF\x9E3\x3\x2\x2\x2\x9FF\x9E8"+
		"\x3\x2\x2\x2\x9FF\x9ED\x3\x2\x2\x2\x9FF\x9F0\x3\x2\x2\x2\x9FF\x9FC\x3"+
		"\x2\x2\x2\x9FF\x9FD\x3\x2\x2\x2\x9FF\x9FE\x3\x2\x2\x2\xA00\xA6F\x3\x2"+
		"\x2\x2\xA01\xA03\f\x11\x2\x2\xA02\xA04\x5\x1BE\xE0\x2\xA03\xA02\x3\x2"+
		"\x2\x2\xA03\xA04\x3\x2\x2\x2\xA04\xA05\x3\x2\x2\x2\xA05\xA07\a\xDC\x2"+
		"\x2\xA06\xA08\x5\x1BE\xE0\x2\xA07\xA06\x3\x2\x2\x2\xA07\xA08\x3\x2\x2"+
		"\x2\xA08\xA09\x3\x2\x2\x2\xA09\xA6E\x5\x17C\xBF\x12\xA0A\xA0C\f\xF\x2"+
		"\x2\xA0B\xA0D\x5\x1BE\xE0\x2\xA0C\xA0B\x3\x2\x2\x2\xA0C\xA0D\x3\x2\x2"+
		"\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E\xA10\t\x16\x2\x2\xA0F\xA11\x5\x1BE\xE0"+
		"\x2\xA10\xA0F\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2\xA11\xA12\x3\x2\x2\x2"+
		"\xA12\xA6E\x5\x17C\xBF\x10\xA13\xA15\f\xE\x2\x2\xA14\xA16\x5\x1BE\xE0"+
		"\x2\xA15\xA14\x3\x2\x2\x2\xA15\xA16\x3\x2\x2\x2\xA16\xA17\x3\x2\x2\x2"+
		"\xA17\xA19\a\xD1\x2\x2\xA18\xA1A\x5\x1BE\xE0\x2\xA19\xA18\x3\x2\x2\x2"+
		"\xA19\xA1A\x3\x2\x2\x2\xA1A\xA1B\x3\x2\x2\x2\xA1B\xA6E\x5\x17C\xBF\xF"+
		"\xA1C\xA1E\f\r\x2\x2\xA1D\xA1F\x5\x1BE\xE0\x2\xA1E\xA1D\x3\x2\x2\x2\xA1E"+
		"\xA1F\x3\x2\x2\x2\xA1F\xA20\x3\x2\x2\x2\xA20\xA22\a\x8B\x2\x2\xA21\xA23"+
		"\x5\x1BE\xE0\x2\xA22\xA21\x3\x2\x2\x2\xA22\xA23\x3\x2\x2\x2\xA23\xA24"+
		"\x3\x2\x2\x2\xA24\xA6E\x5\x17C\xBF\xE\xA25\xA27\f\f\x2\x2\xA26\xA28\x5"+
		"\x1BE\xE0\x2\xA27\xA26\x3\x2\x2\x2\xA27\xA28\x3\x2\x2\x2\xA28\xA29\x3"+
		"\x2\x2\x2\xA29\xA2B\t\x17\x2\x2\xA2A\xA2C\x5\x1BE\xE0\x2\xA2B\xA2A\x3"+
		"\x2\x2\x2\xA2B\xA2C\x3\x2\x2\x2\xA2C\xA2D\x3\x2\x2\x2\xA2D\xA6E\x5\x17C"+
		"\xBF\r\xA2E\xA30\f\v\x2\x2\xA2F\xA31\x5\x1BE\xE0\x2\xA30\xA2F\x3\x2\x2"+
		"\x2\xA30\xA31\x3\x2\x2\x2\xA31\xA32\x3\x2\x2\x2\xA32\xA34\a\x32\x2\x2"+
		"\xA33\xA35\x5\x1BE\xE0\x2\xA34\xA33\x3\x2\x2\x2\xA34\xA35\x3\x2\x2\x2"+
		"\xA35\xA36\x3\x2\x2\x2\xA36\xA6E\x5\x17C\xBF\f\xA37\xA39\f\n\x2\x2\xA38"+
		"\xA3A\x5\x1BE\xE0\x2\xA39\xA38\x3\x2\x2\x2\xA39\xA3A\x3\x2\x2\x2\xA3A"+
		"\xA3B\x3\x2\x2\x2\xA3B\xA3D\t\x12\x2\x2\xA3C\xA3E\x5\x1BE\xE0\x2\xA3D"+
		"\xA3C\x3\x2\x2\x2\xA3D\xA3E\x3\x2\x2\x2\xA3E\xA3F\x3\x2\x2\x2\xA3F\xA6E"+
		"\x5\x17C\xBF\v\xA40\xA42\f\b\x2\x2\xA41\xA43\x5\x1BE\xE0\x2\xA42\xA41"+
		"\x3\x2\x2\x2\xA42\xA43\x3\x2\x2\x2\xA43\xA44\x3\x2\x2\x2\xA44\xA46\a\x36"+
		"\x2\x2\xA45\xA47\x5\x1BE\xE0\x2\xA46\xA45\x3\x2\x2\x2\xA46\xA47\x3\x2"+
		"\x2\x2\xA47\xA48\x3\x2\x2\x2\xA48\xA6E\x5\x17C\xBF\t\xA49\xA4B\f\a\x2"+
		"\x2\xA4A\xA4C\x5\x1BE\xE0\x2\xA4B\xA4A\x3\x2\x2\x2\xA4B\xA4C\x3\x2\x2"+
		"\x2\xA4C\xA4D\x3\x2\x2\x2\xA4D\xA4F\a\x9C\x2\x2\xA4E\xA50\x5\x1BE\xE0"+
		"\x2\xA4F\xA4E\x3\x2\x2\x2\xA4F\xA50\x3\x2\x2\x2\xA50\xA51\x3\x2\x2\x2"+
		"\xA51\xA6E\x5\x17C\xBF\b\xA52\xA54\f\x6\x2\x2\xA53\xA55\x5\x1BE\xE0\x2"+
		"\xA54\xA53\x3\x2\x2\x2\xA54\xA55\x3\x2\x2\x2\xA55\xA56\x3\x2\x2\x2\xA56"+
		"\xA58\a\xCE\x2\x2\xA57\xA59\x5\x1BE\xE0\x2\xA58\xA57\x3\x2\x2\x2\xA58"+
		"\xA59\x3\x2\x2\x2\xA59\xA5A\x3\x2\x2\x2\xA5A\xA6E\x5\x17C\xBF\a\xA5B\xA5D"+
		"\f\x5\x2\x2\xA5C\xA5E\x5\x1BE\xE0\x2\xA5D\xA5C\x3\x2\x2\x2\xA5D\xA5E\x3"+
		"\x2\x2\x2\xA5E\xA5F\x3\x2\x2\x2\xA5F\xA61\a\x66\x2\x2\xA60\xA62\x5\x1BE"+
		"\xE0\x2\xA61\xA60\x3\x2\x2\x2\xA61\xA62\x3\x2\x2\x2\xA62\xA63\x3\x2\x2"+
		"\x2\xA63\xA6E\x5\x17C\xBF\x6\xA64\xA66\f\x4\x2\x2\xA65\xA67\x5\x1BE\xE0"+
		"\x2\xA66\xA65\x3\x2\x2\x2\xA66\xA67\x3\x2\x2\x2\xA67\xA68\x3\x2\x2\x2"+
		"\xA68\xA6A\ax\x2\x2\xA69\xA6B\x5\x1BE\xE0\x2\xA6A\xA69\x3\x2\x2\x2\xA6A"+
		"\xA6B\x3\x2\x2\x2\xA6B\xA6C\x3\x2\x2\x2\xA6C\xA6E\x5\x17C\xBF\x5\xA6D"+
		"\xA01\x3\x2\x2\x2\xA6D\xA0A\x3\x2\x2\x2\xA6D\xA13\x3\x2\x2\x2\xA6D\xA1C"+
		"\x3\x2\x2\x2\xA6D\xA25\x3\x2\x2\x2\xA6D\xA2E\x3\x2\x2\x2\xA6D\xA37\x3"+
		"\x2\x2\x2\xA6D\xA40\x3\x2\x2\x2\xA6D\xA49\x3\x2\x2\x2\xA6D\xA52\x3\x2"+
		"\x2\x2\xA6D\xA5B\x3\x2\x2\x2\xA6D\xA64\x3\x2\x2\x2\xA6E\xA71\x3\x2\x2"+
		"\x2\xA6F\xA6D\x3\x2\x2\x2\xA6F\xA70\x3\x2\x2\x2\xA70\x17D\x3\x2\x2\x2"+
		"\xA71\xA6F\x3\x2\x2\x2\xA72\xA7A\x5\x174\xBB\x2\xA73\xA7A\a\xE5\x2\x2"+
		"\xA74\xA7A\a\xE0\x2\x2\xA75\xA77\x5\x180\xC1\x2\xA76\xA78\x5\x178\xBD"+
		"\x2\xA77\xA76\x3\x2\x2\x2\xA77\xA78\x3\x2\x2\x2\xA78\xA7A\x3\x2\x2\x2"+
		"\xA79\xA72\x3\x2\x2\x2\xA79\xA73\x3\x2\x2\x2\xA79\xA74\x3\x2\x2\x2\xA79"+
		"\xA75\x3\x2\x2\x2\xA7A\x17F\x3\x2\x2\x2\xA7B\xA7F\x5\x182\xC2\x2\xA7C"+
		"\xA7F\x5\x184\xC3\x2\xA7D\xA7F\x5\x186\xC4\x2\xA7E\xA7B\x3\x2\x2\x2\xA7E"+
		"\xA7C\x3\x2\x2\x2\xA7E\xA7D\x3\x2\x2\x2\xA7F\x181\x3\x2\x2\x2\xA80\xA81"+
		"\t\x18\x2\x2\xA81\x183\x3\x2\x2\x2\xA82\xA83\a\x90\x2\x2\xA83\x185\x3"+
		"\x2\x2\x2\xA84\xA85\t\x19\x2\x2\xA85\x187\x3\x2\x2\x2\xA86\xA87\b\xC5"+
		"\x1\x2\xA87\xA94\a\x89\x2\x2\xA88\xA94\x5\x154\xAB\x2\xA89\xA8B\a-\x2"+
		"\x2\xA8A\xA8C\x5\x1BC\xDF\x2\xA8B\xA8A\x3\x2\x2\x2\xA8B\xA8C\x3\x2\x2"+
		"\x2\xA8C\xA8D\x3\x2\x2\x2\xA8D\xA94\x5\x152\xAA\x2\xA8E\xA90\a,\x2\x2"+
		"\xA8F\xA91\x5\x1BC\xDF\x2\xA90\xA8F\x3\x2\x2\x2\xA90\xA91\x3\x2\x2\x2"+
		"\xA91\xA92\x3\x2\x2\x2\xA92\xA94\x5\x152\xAA\x2\xA93\xA86\x3\x2\x2\x2"+
		"\xA93\xA88\x3\x2\x2\x2\xA93\xA89\x3\x2\x2\x2\xA93\xA8E\x3\x2\x2\x2\xA94"+
		"\xAC6\x3\x2\x2\x2\xA95\xA96\f\n\x2\x2\xA96\xA98\a\xD6\x2\x2\xA97\xA99"+
		"\x5\x1BE\xE0\x2\xA98\xA97\x3\x2\x2\x2\xA98\xA99\x3\x2\x2\x2\xA99\xA9B"+
		"\x3\x2\x2\x2\xA9A\xA9C\x5\x18C\xC7\x2\xA9B\xA9A\x3\x2\x2\x2\xA9B\xA9C"+
		"\x3\x2\x2\x2\xA9C\xA9E\x3\x2\x2\x2\xA9D\xA9F\x5\x1BE\xE0\x2\xA9E\xA9D"+
		"\x3\x2\x2\x2\xA9E\xA9F\x3\x2\x2\x2\xA9F\xAA0\x3\x2\x2\x2\xAA0\xAC5\a\xDD"+
		"\x2\x2\xAA1\xAA3\f\t\x2\x2\xAA2\xAA4\x5\x1BC\xDF\x2\xAA3\xAA2\x3\x2\x2"+
		"\x2\xAA3\xAA4\x3\x2\x2\x2\xAA4\xAA5\x3\x2\x2\x2\xAA5\xAA7\a-\x2\x2\xAA6"+
		"\xAA8\x5\x1BC\xDF\x2\xAA7\xAA6\x3\x2\x2\x2\xAA7\xAA8\x3\x2\x2\x2\xAA8"+
		"\xAA9\x3\x2\x2\x2\xAA9\xAC5\x5\x152\xAA\x2\xAAA\xAAC\f\b\x2\x2\xAAB\xAAD"+
		"\x5\x1BC\xDF\x2\xAAC\xAAB\x3\x2\x2\x2\xAAC\xAAD\x3\x2\x2\x2\xAAD\xAAE"+
		"\x3\x2\x2\x2\xAAE\xAB0\a,\x2\x2\xAAF\xAB1\x5\x1BC\xDF\x2\xAB0\xAAF\x3"+
		"\x2\x2\x2\xAB0\xAB1\x3\x2\x2\x2\xAB1\xAB2\x3\x2\x2\x2\xAB2\xAC5\x5\x152"+
		"\xAA\x2\xAB3\xAB4\f\x3\x2\x2\xAB4\xAB6\x5\x1BC\xDF\x2\xAB5\xAB7\x5\x1BE"+
		"\xE0\x2\xAB6\xAB5\x3\x2\x2\x2\xAB6\xAB7\x3\x2\x2\x2\xAB7\xAB8\x3\x2\x2"+
		"\x2\xAB8\xABA\a\xD6\x2\x2\xAB9\xABB\x5\x1BE\xE0\x2\xABA\xAB9\x3\x2\x2"+
		"\x2\xABA\xABB\x3\x2\x2\x2\xABB\xABD\x3\x2\x2\x2\xABC\xABE\x5\x18C\xC7"+
		"\x2\xABD\xABC\x3\x2\x2\x2\xABD\xABE\x3\x2\x2\x2\xABE\xAC0\x3\x2\x2\x2"+
		"\xABF\xAC1\x5\x1BE\xE0\x2\xAC0\xABF\x3\x2\x2\x2\xAC0\xAC1\x3\x2\x2\x2"+
		"\xAC1\xAC2\x3\x2\x2\x2\xAC2\xAC3\a\xDD\x2\x2\xAC3\xAC5\x3\x2\x2\x2\xAC4"+
		"\xA95\x3\x2\x2\x2\xAC4\xAA1\x3\x2\x2\x2\xAC4\xAAA\x3\x2\x2\x2\xAC4\xAB3"+
		"\x3\x2\x2\x2\xAC5\xAC8\x3\x2\x2\x2\xAC6\xAC4\x3\x2\x2\x2\xAC6\xAC7\x3"+
		"\x2\x2\x2\xAC7\x189\x3\x2\x2\x2\xAC8\xAC6\x3\x2\x2\x2\xAC9\xADF\x5\x162"+
		"\xB2\x2\xACA\xACC\a\xDE\x2\x2\xACB\xACD\x5\x1BE\xE0\x2\xACC\xACB\x3\x2"+
		"\x2\x2\xACC\xACD\x3\x2\x2\x2\xACD\xACE\x3\x2\x2\x2\xACE\xAD0\x5\x162\xB2"+
		"\x2\xACF\xAD1\x5\x1BE\xE0\x2\xAD0\xACF\x3\x2\x2\x2\xAD0\xAD1\x3\x2\x2"+
		"\x2\xAD1\xAD2\x3\x2\x2\x2\xAD2\xAD3\a\xDF\x2\x2\xAD3\xADF\x3\x2\x2\x2"+
		"\xAD4\xADF\a\x92\x2\x2\xAD5\xAD7\a\xDE\x2\x2\xAD6\xAD8\x5\x1BE\xE0\x2"+
		"\xAD7\xAD6\x3\x2\x2\x2\xAD7\xAD8\x3\x2\x2\x2\xAD8\xAD9\x3\x2\x2\x2\xAD9"+
		"\xADB\a\x92\x2\x2\xADA\xADC\x5\x1BE\xE0\x2\xADB\xADA\x3\x2\x2\x2\xADB"+
		"\xADC\x3\x2\x2\x2\xADC\xADD\x3\x2\x2\x2\xADD\xADF\a\xDF\x2\x2\xADE\xAC9"+
		"\x3\x2\x2\x2\xADE\xACA\x3\x2\x2\x2\xADE\xAD4\x3\x2\x2\x2\xADE\xAD5\x3"+
		"\x2\x2\x2\xADF\x18B\x3\x2\x2\x2\xAE0\xAE2\x5\x1BE\xE0\x2\xAE1\xAE0\x3"+
		"\x2\x2\x2\xAE1\xAE2\x3\x2\x2\x2\xAE2\xAF3\x3\x2\x2\x2\xAE3\xAE5\x5\x190"+
		"\xC9\x2\xAE4\xAE3\x3\x2\x2\x2\xAE4\xAE5\x3\x2\x2\x2\xAE5\xAF0\x3\x2\x2"+
		"\x2\xAE6\xAE8\x5\x1BE\xE0\x2\xAE7\xAE6\x3\x2\x2\x2\xAE7\xAE8\x3\x2\x2"+
		"\x2\xAE8\xAE9\x3\x2\x2\x2\xAE9\xAEB\a)\x2\x2\xAEA\xAEC\x5\x1BE\xE0\x2"+
		"\xAEB\xAEA\x3\x2\x2\x2\xAEB\xAEC\x3\x2\x2\x2\xAEC\xAED\x3\x2\x2\x2\xAED"+
		"\xAEF\x5\x190\xC9\x2\xAEE\xAE7\x3\x2\x2\x2\xAEF\xAF2\x3\x2\x2\x2\xAF0"+
		"\xAEE\x3\x2\x2\x2\xAF0\xAF1\x3\x2\x2\x2\xAF1\xAF4\x3\x2\x2\x2\xAF2\xAF0"+
		"\x3\x2\x2\x2\xAF3\xAF4\x3\x2\x2\x2\xAF3\xAE4\x3\x2\x2\x2\xAF4\x18D\x3"+
		"\x2\x2\x2\xAF5\xAF6\x5\x190\xC9\x2\xAF6\x18F\x3\x2\x2\x2\xAF7\xAFB\x5"+
		"\x192\xCA\x2\xAF8\xAFB\x5\x194\xCB\x2\xAF9\xAFB\x5\x196\xCC\x2\xAFA\xAF7"+
		"\x3\x2\x2\x2\xAFA\xAF8\x3\x2\x2\x2\xAFA\xAF9\x3\x2\x2\x2\xAFB\x191\x3"+
		"\x2\x2\x2\xAFC\xAFD\x5\x198\xCD\x2\xAFD\x193\x3\x2\x2\x2\xAFE\xB00\x5"+
		"\x152\xAA\x2\xAFF\xB01\x5\x1BE\xE0\x2\xB00\xAFF\x3\x2\x2\x2\xB00\xB01"+
		"\x3\x2\x2\x2\xB01\xB02\x3\x2\x2\x2\xB02\xB04\a\xCF\x2\x2\xB03\xB05\x5"+
		"\x1BE\xE0\x2\xB04\xB03\x3\x2\x2\x2\xB04\xB05\x3\x2\x2\x2\xB05\xB06\x3"+
		"\x2\x2\x2\xB06\xB07\x5\x198\xCD\x2\xB07\x195\x3\x2\x2\x2\xB08\xB09\x3"+
		"\x2\x2\x2\xB09\x197\x3\x2\x2\x2\xB0A\xB0B\a=\x2\x2\xB0B\xB0D\x5\x1BE\xE0"+
		"\x2\xB0C\xB0A\x3\x2\x2\x2\xB0C\xB0D\x3\x2\x2\x2\xB0D\xB0E\x3\x2\x2\x2"+
		"\xB0E\xB17\x5\x17C\xBF\x2\xB0F\xB17\x5\x19E\xD0\x2\xB10\xB11\x5\x19A\xCE"+
		"\x2\xB11\xB12\x5\x1BE\xE0\x2\xB12\xB13\a\xC0\x2\x2\xB13\xB14\x5\x1BE\xE0"+
		"\x2\xB14\xB15\x5\x19C\xCF\x2\xB15\xB17\x3\x2\x2\x2\xB16\xB0C\x3\x2\x2"+
		"\x2\xB16\xB0F\x3\x2\x2\x2\xB16\xB10\x3\x2\x2\x2\xB17\x199\x3\x2\x2\x2"+
		"\xB18\xB19\x5\x17C\xBF\x2\xB19\x19B\x3\x2\x2\x2\xB1A\xB1B\x5\x17C\xBF"+
		"\x2\xB1B\x19D\x3\x2\x2\x2\xB1C\xB1D\a\x34\x2\x2\xB1D\xB1E\x5\x1BE\xE0"+
		"\x2\xB1E\xB1F\x5\x17C\xBF\x2\xB1F\x19F\x3\x2\x2\x2\xB20\xB21\t\x1A\x2"+
		"\x2\xB21\x1A1\x3\x2\x2\x2\xB22\xB23\a\x39\x2\x2\xB23\x1A3\x3\x2\x2\x2"+
		"\xB24\xB25\t\x1B\x2\x2\xB25\x1A5\x3\x2\x2\x2\xB26\xB28\x5\x1BE\xE0\x2"+
		"\xB27\xB26\x3\x2\x2\x2\xB27\xB28\x3\x2\x2\x2\xB28\xB29\x3\x2\x2\x2\xB29"+
		"\xB2B\a\xE6\x2\x2\xB2A\xB2C\x5\x1BE\xE0\x2\xB2B\xB2A\x3\x2\x2\x2\xB2B"+
		"\xB2C\x3\x2\x2\x2\xB2C\xB32\x3\x2\x2\x2\xB2D\xB2F\x5\x1BE\xE0\x2\xB2E"+
		"\xB2D\x3\x2\x2\x2\xB2E\xB2F\x3\x2\x2\x2\xB2F\xB30\x3\x2\x2\x2\xB30\xB32"+
		"\x5\x1AA\xD6\x2\xB31\xB27\x3\x2\x2\x2\xB31\xB2E\x3\x2\x2\x2\xB32\x1A7"+
		"\x3\x2\x2\x2\xB33\xB3C\x5\x1A6\xD4\x2\xB34\xB36\x5\x1BE\xE0\x2\xB35\xB34"+
		"\x3\x2\x2\x2\xB35\xB36\x3\x2\x2\x2\xB36\xB37\x3\x2\x2\x2\xB37\xB39\a*"+
		"\x2\x2\xB38\xB3A\x5\x1BE\xE0\x2\xB39\xB38\x3\x2\x2\x2\xB39\xB3A\x3\x2"+
		"\x2\x2\xB3A\xB3C\x3\x2\x2\x2\xB3B\xB33\x3\x2\x2\x2\xB3B\xB35\x3\x2\x2"+
		"\x2\xB3C\xB3D\x3\x2\x2\x2\xB3D\xB3B\x3\x2\x2\x2\xB3D\xB3E\x3\x2\x2\x2"+
		"\xB3E\xB44\x3\x2\x2\x2\xB3F\xB41\x5\x1BE\xE0\x2\xB40\xB3F\x3\x2\x2\x2"+
		"\xB40\xB41\x3\x2\x2\x2\xB41\xB42\x3\x2\x2\x2\xB42\xB44\a\x2\x2\x3\xB43"+
		"\xB3B\x3\x2\x2\x2\xB43\xB40\x3\x2\x2\x2\xB44\x1A9\x3\x2\x2\x2\xB45\xB49"+
		"\x5\x1B2\xDA\x2\xB46\xB49\x5\x1AC\xD7\x2\xB47\xB49\x5\x1AE\xD8\x2\xB48"+
		"\xB45\x3\x2\x2\x2\xB48\xB46\x3\x2\x2\x2\xB48\xB47\x3\x2\x2\x2\xB49\x1AB"+
		"\x3\x2\x2\x2\xB4A\xB4C\a\xAD\x2\x2\xB4B\xB4D\x5\x1BE\xE0\x2\xB4C\xB4B"+
		"\x3\x2\x2\x2\xB4C\xB4D\x3\x2\x2\x2\xB4D\xB4E\x3\x2\x2\x2\xB4E\xB4F\x5"+
		"\x1B0\xD9\x2\xB4F\x1AD\x3\x2\x2\x2\xB50\xB51\a\xE7\x2\x2\xB51\xB52\x5"+
		"\x1B0\xD9\x2\xB52\x1AF\x3\x2\x2\x2\xB53\xB56\a\xEC\x2\x2\xB54\xB56\n\x1C"+
		"\x2\x2\xB55\xB53\x3\x2\x2\x2\xB55\xB54\x3\x2\x2\x2\xB56\xB59\x3\x2\x2"+
		"\x2\xB57\xB55\x3\x2\x2\x2\xB57\xB58\x3\x2\x2\x2\xB58\x1B1\x3\x2\x2\x2"+
		"\xB59\xB57\x3\x2\x2\x2\xB5A\xB60\a\xE7\x2\x2\xB5B\xB5C\a/\x2\x2\xB5C\xB5E"+
		"\x5\x1B4\xDB\x2\xB5D\xB5F\x5\x1BE\xE0\x2\xB5E\xB5D\x3\x2\x2\x2\xB5E\xB5F"+
		"\x3\x2\x2\x2\xB5F\xB61\x3\x2\x2\x2\xB60\xB5B\x3\x2\x2\x2\xB61\xB62\x3"+
		"\x2\x2\x2\xB62\xB60\x3\x2\x2\x2\xB62\xB63\x3\x2\x2\x2\xB63\xB69\x3\x2"+
		"\x2\x2\xB64\xB66\x5\x1BE\xE0\x2\xB65\xB64\x3\x2\x2\x2\xB65\xB66\x3\x2"+
		"\x2\x2\xB66\xB67\x3\x2\x2\x2\xB67\xB68\a*\x2\x2\xB68\xB6A\x5\x1B0\xD9"+
		"\x2\xB69\xB65\x3\x2\x2\x2\xB69\xB6A\x3\x2\x2\x2\xB6A\x1B3\x3\x2\x2\x2"+
		"\xB6B\xB6D\x5\x1B6\xDC\x2\xB6C\xB6E\x5\x1B8\xDD\x2\xB6D\xB6C\x3\x2\x2"+
		"\x2\xB6D\xB6E\x3\x2\x2\x2\xB6E\x1B5\x3\x2\x2\x2\xB6F\xB70\x5\x152\xAA"+
		"\x2\xB70\x1B7\x3\x2\x2\x2\xB71\xB72\x5\x1BE\xE0\x2\xB72\xB73\x5\x1BA\xDE"+
		"\x2\xB73\xBAE\x3\x2\x2\x2\xB74\xB75\x5\x1BE\xE0\x2\xB75\xB7E\x5\x1BA\xDE"+
		"\x2\xB76\xB78\x5\x1BE\xE0\x2\xB77\xB76\x3\x2\x2\x2\xB77\xB78\x3\x2\x2"+
		"\x2\xB78\xB79\x3\x2\x2\x2\xB79\xB7B\a)\x2\x2\xB7A\xB7C\x5\x1BE\xE0\x2"+
		"\xB7B\xB7A\x3\x2\x2\x2\xB7B\xB7C\x3\x2\x2\x2\xB7C\xB7D\x3\x2\x2\x2\xB7D"+
		"\xB7F\x5\x1BA\xDE\x2\xB7E\xB77\x3\x2\x2\x2\xB7F\xB80\x3\x2\x2\x2\xB80"+
		"\xB7E\x3\x2\x2\x2\xB80\xB81\x3\x2\x2\x2\xB81\xBAE\x3\x2\x2\x2\xB82\xB84"+
		"\x5\x1BE\xE0\x2\xB83\xB82\x3\x2\x2\x2\xB83\xB84\x3\x2\x2\x2\xB84\xB85"+
		"\x3\x2\x2\x2\xB85\xB87\a\xD6\x2\x2\xB86\xB88\x5\x1BE\xE0\x2\xB87\xB86"+
		"\x3\x2\x2\x2\xB87\xB88\x3\x2\x2\x2\xB88\xB89\x3\x2\x2\x2\xB89\xBAE\a\xDD"+
		"\x2\x2\xB8A\xB8C\x5\x1BE\xE0\x2\xB8B\xB8A\x3\x2\x2\x2\xB8B\xB8C\x3\x2"+
		"\x2\x2\xB8C\xB8D\x3\x2\x2\x2\xB8D\xB8F\a\xD6\x2\x2\xB8E\xB90\x5\x1BE\xE0"+
		"\x2\xB8F\xB8E\x3\x2\x2\x2\xB8F\xB90\x3\x2\x2\x2\xB90\xB91\x3\x2\x2\x2"+
		"\xB91\xB93\x5\x1BA\xDE\x2\xB92\xB94\x5\x1BE\xE0\x2\xB93\xB92\x3\x2\x2"+
		"\x2\xB93\xB94\x3\x2\x2\x2\xB94\xB95\x3\x2\x2\x2\xB95\xB96\a\xDD\x2\x2"+
		"\xB96\xBAE\x3\x2\x2\x2\xB97\xB99\x5\x1BE\xE0\x2\xB98\xB97\x3\x2\x2\x2"+
		"\xB98\xB99\x3\x2\x2\x2\xB99\xB9A\x3\x2\x2\x2\xB9A\xB9B\a\xD6\x2\x2\xB9B"+
		"\xBA4\x5\x1BA\xDE\x2\xB9C\xB9E\x5\x1BE\xE0\x2\xB9D\xB9C\x3\x2\x2\x2\xB9D"+
		"\xB9E\x3\x2\x2\x2\xB9E\xB9F\x3\x2\x2\x2\xB9F\xBA1\a)\x2\x2\xBA0\xBA2\x5"+
		"\x1BE\xE0\x2\xBA1\xBA0\x3\x2\x2\x2\xBA1\xBA2\x3\x2\x2\x2\xBA2\xBA3\x3"+
		"\x2\x2\x2\xBA3\xBA5\x5\x1BA\xDE\x2\xBA4\xB9D\x3\x2\x2\x2\xBA5\xBA6\x3"+
		"\x2\x2\x2\xBA6\xBA4\x3\x2\x2\x2\xBA6\xBA7\x3\x2\x2\x2\xBA7\xBA9\x3\x2"+
		"\x2\x2\xBA8\xBAA\x5\x1BE\xE0\x2\xBA9\xBA8\x3\x2\x2\x2\xBA9\xBAA\x3\x2"+
		"\x2\x2\xBAA\xBAB\x3\x2\x2\x2\xBAB\xBAC\a\xDD\x2\x2\xBAC\xBAE\x3\x2\x2"+
		"\x2\xBAD\xB71\x3\x2\x2\x2\xBAD\xB74\x3\x2\x2\x2\xBAD\xB83\x3\x2\x2\x2"+
		"\xBAD\xB8B\x3\x2\x2\x2\xBAD\xB98\x3\x2\x2\x2\xBAE\x1B9\x3\x2\x2\x2\xBAF"+
		"\xBB0\x5\x17C\xBF\x2\xBB0\x1BB\x3\x2\x2\x2\xBB1\xBB5\a\xEC\x2\x2\xBB2"+
		"\xBB4\a\xE9\x2\x2\xBB3\xBB2\x3\x2\x2\x2\xBB4\xBB7\x3\x2\x2\x2\xBB5\xBB3"+
		"\x3\x2\x2\x2\xBB5\xBB6\x3\x2\x2\x2\xBB6\x1BD\x3\x2\x2\x2\xBB7\xBB5\x3"+
		"\x2\x2\x2\xBB8\xBBA\t\x1D\x2\x2\xBB9\xBB8\x3\x2\x2\x2\xBBA\xBBB\x3\x2"+
		"\x2\x2\xBBB\xBB9\x3\x2\x2\x2\xBBB\xBBC\x3\x2\x2\x2\xBBC\x1BF\x3\x2\x2"+
		"\x2\x1DB\x1C4\x1C8\x1CC\x1D4\x1DA\x1DD\x1E7\x1E9\x1EF\x1F8\x1FF\x205\x20E"+
		"\x215\x219\x21D\x221\x226\x232\x23F\x242\x24F\x252\x259\x261\x268\x26D"+
		"\x270\x273\x299\x2A9\x2B1\x2B6\x2BB\x2C4\x2D8\x2DC\x2E4\x2EF\x2F5\x2F9"+
		"\x2FE\x305\x309\x313\x317\x31A\x320\x326\x330\x334\x337\x33D\x341\x34B"+
		"\x34F\x359\x35D\x361\x36D\x371\x374\x378\x37D\x384\x388\x38D\x395\x399"+
		"\x39D\x3A5\x3A8\x3AC\x3B0\x3BA\x3BE\x3C1\x3C7\x3CB\x3D1\x3D5\x3DA\x3E3"+
		"\x3E7\x3EA\x3ED\x3F1\x3FD\x401\x404\x407\x40B\x414\x41A\x41E\x423\x42A"+
		"\x42D\x431\x438\x43E\x44C\x44F\x452\x457\x45B\x45F\x463\x468\x46B\x46E"+
		"\x474\x478\x47C\x480\x484\x487\x48A\x48D\x490\x493\x497\x49F\x4A3\x4A8"+
		"\x4B0\x4B6\x4BA\x4C6\x4CA\x4D6\x4D9\x4E5\x4E8\x4F0\x4F3\x4FB\x500\x509"+
		"\x510\x514\x517\x521\x525\x52A\x534\x53A\x54C\x54F\x555\x563\x568\x56B"+
		"\x571\x576\x57A\x57E\x582\x585\x588\x58B\x590\x593\x59B\x5B0\x5B3\x5B8"+
		"\x5BC\x5BF\x5C2\x5C5\x5C8\x5DA\x5DE\x5E6\x5EA\x5EE\x5F2\x5F8\x5FC\x600"+
		"\x604\x607\x60D\x610\x614\x618\x61B\x61F\x624\x626\x62A\x62E\x631\x635"+
		"\x638\x644\x648\x64C\x654\x658\x666\x670\x674\x679\x684\x688\x68D\x693"+
		"\x697\x69D\x6A0\x6A5\x6AA\x6AD\x6B5\x6BB\x6BF\x6C5\x6C8\x6CD\x6D0\x6D8"+
		"\x6DE\x6E2\x6E8\x6EB\x6F0\x6F3\x6FB\x702\x706\x709\x70C\x70F\x713\x717"+
		"\x71C\x721\x729\x72F\x733\x738\x73F\x744\x748\x74C\x750\x754\x758\x75A"+
		"\x75E\x762\x768\x774\x776\x77C\x77E\x786\x78A\x79A\x79E\x7A3\x7A6\x7AB"+
		"\x7AF\x7B2\x7B5\x7B8\x7BB\x7C5\x7C9\x7CE\x7D6\x7DE\x7E0\x7E4\x7EF\x7F9"+
		"\x7FD\x804\x808\x80C\x810\x813\x818\x81B\x823\x82A\x840\x845\x849\x854"+
		"\x85A\x85D\x860\x866\x86A\x86F\x874\x876\x87C\x887\x88C\x892\x896\x89B"+
		"\x8A0\x8A4\x8A8\x8AA\x8AE\x8B0\x8B5\x8BD\x8C0\x8CA\x8CD\x8D5\x8D7\x8DD"+
		"\x8DF\x8E3\x8E7\x8EA\x8ED\x8F1\x8F4\x8F8\x8FC\x8FE\x904\x906\x90A\x90E"+
		"\x913\x917\x91B\x91D\x923\x927\x92D\x931\x935\x939\x941\x945\x94A\x952"+
		"\x959\x95D\x968\x96E\x975\x979\x97D\x981\x984\x98F\x993\x9A1\x9A5\x9A9"+
		"\x9AF\x9B3\x9B9\x9BE\x9CA\x9CD\x9D1\x9D4\x9E5\x9EA\x9F0\x9F4\x9F8\x9FF"+
		"\xA03\xA07\xA0C\xA10\xA15\xA19\xA1E\xA22\xA27\xA2B\xA30\xA34\xA39\xA3D"+
		"\xA42\xA46\xA4B\xA4F\xA54\xA58\xA5D\xA61\xA66\xA6A\xA6D\xA6F\xA77\xA79"+
		"\xA7E\xA8B\xA90\xA93\xA98\xA9B\xA9E\xAA3\xAA7\xAAC\xAB0\xAB6\xABA\xABD"+
		"\xAC0\xAC4\xAC6\xACC\xAD0\xAD7\xADB\xADE\xAE1\xAE4\xAE7\xAEB\xAF0\xAF3"+
		"\xAFA\xB00\xB04\xB0C\xB16\xB27\xB2B\xB2E\xB31\xB35\xB39\xB3B\xB3D\xB40"+
		"\xB43\xB48\xB4C\xB55\xB57\xB5E\xB62\xB65\xB69\xB6D\xB77\xB7B\xB80\xB83"+
		"\xB87\xB8B\xB8F\xB93\xB98\xB9D\xBA1\xBA6\xBA9\xBAD\xBB5\xBBB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
