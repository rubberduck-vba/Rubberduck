//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\TestProj\TestProj\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar
{
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections.Generic;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
    [System.CLSCompliant(false)]
    public partial class VBAParser : Parser
    {
        public const int
            T__7 = 1, T__6 = 2, T__5 = 3, T__4 = 4, T__3 = 5, T__2 = 6, T__1 = 7, T__0 = 8, ACCESS = 9,
            ADDRESSOF = 10, ALIAS = 11, AND = 12, ATTRIBUTE = 13, APPACTIVATE = 14, APPEND = 15,
            AS = 16, BEGIN = 17, BEEP = 18, BINARY = 19, BOOLEAN = 20, BYVAL = 21, BYREF = 22, BYTE = 23,
            CALL = 24, CASE = 25, CHDIR = 26, CHDRIVE = 27, CLASS = 28, CLOSE = 29, COLLECTION = 30,
            CONST = 31, DATABASE = 32, DATE = 33, DECLARE = 34, DEFBOOL = 35, DEFBYTE = 36, DEFDATE = 37,
            DEFDBL = 38, DEFDEC = 39, DEFCUR = 40, DEFINT = 41, DEFLNG = 42, DEFOBJ = 43, DEFSNG = 44,
            DEFSTR = 45, DEFVAR = 46, DELETESETTING = 47, DIM = 48, DO = 49, DOUBLE = 50, EACH = 51,
            ELSE = 52, ELSEIF = 53, END_ENUM = 54, END_FUNCTION = 55, END_IF = 56, END_PROPERTY = 57,
            END_SELECT = 58, END_SUB = 59, END_TYPE = 60, END_WITH = 61, END = 62, ENUM = 63,
            EQV = 64, ERASE = 65, ERROR = 66, EVENT = 67, EXIT_DO = 68, EXIT_FOR = 69, EXIT_FUNCTION = 70,
            EXIT_PROPERTY = 71, EXIT_SUB = 72, FALSE = 73, FILECOPY = 74, FRIEND = 75, FOR = 76,
            FUNCTION = 77, GET = 78, GLOBAL = 79, GOSUB = 80, GOTO = 81, IF = 82, IMP = 83, IMPLEMENTS = 84,
            IN = 85, INPUT = 86, IS = 87, INTEGER = 88, KILL = 89, LOAD = 90, LOCK = 91, LONG = 92,
            LOOP = 93, LEN = 94, LET = 95, LIB = 96, LIKE = 97, LINE_INPUT = 98, LOCK_READ = 99,
            LOCK_WRITE = 100, LOCK_READ_WRITE = 101, LSET = 102, MACRO_CONST = 103, MACRO_IF = 104,
            MACRO_ELSEIF = 105, MACRO_ELSE = 106, MACRO_END_IF = 107, ME = 108, MID = 109, MKDIR = 110,
            MOD = 111, NAME = 112, NEXT = 113, NEW = 114, NOT = 115, NOTHING = 116, NULL = 117,
            ON = 118, ON_ERROR = 119, ON_LOCAL_ERROR = 120, OPEN = 121, OPTIONAL = 122, OPTION_BASE = 123,
            OPTION_EXPLICIT = 124, OPTION_COMPARE = 125, OPTION_PRIVATE_MODULE = 126, OR = 127,
            OUTPUT = 128, PARAMARRAY = 129, PRESERVE = 130, PRINT = 131, PRIVATE = 132, PROPERTY_GET = 133,
            PROPERTY_LET = 134, PROPERTY_SET = 135, PTRSAFE = 136, PUBLIC = 137, PUT = 138,
            RANDOM = 139, RANDOMIZE = 140, RAISEEVENT = 141, READ = 142, READ_WRITE = 143, REDIM = 144,
            REM = 145, RESET = 146, RESUME = 147, RETURN = 148, RMDIR = 149, RSET = 150, SAVEPICTURE = 151,
            SAVESETTING = 152, SEEK = 153, SELECT = 154, SENDKEYS = 155, SET = 156, SETATTR = 157,
            SHARED = 158, SINGLE = 159, SPC = 160, STATIC = 161, STEP = 162, STOP = 163, STRING = 164,
            SUB = 165, TAB = 166, TEXT = 167, THEN = 168, TIME = 169, TO = 170, TRUE = 171, TYPE = 172,
            TYPEOF = 173, UNLOAD = 174, UNLOCK = 175, UNTIL = 176, VARIANT = 177, VERSION = 178,
            WEND = 179, WHILE = 180, WIDTH = 181, WITH = 182, WITHEVENTS = 183, WRITE = 184, XOR = 185,
            AMPERSAND = 186, ASSIGN = 187, DIV = 188, INTDIV = 189, EQ = 190, GEQ = 191, GT = 192,
            LEQ = 193, LPAREN = 194, LT = 195, MINUS = 196, MULT = 197, NEQ = 198, PLUS = 199, POW = 200,
            RPAREN = 201, L_SQUARE_BRACKET = 202, R_SQUARE_BRACKET = 203, STRINGLITERAL = 204,
            OCTLITERAL = 205, HEXLITERAL = 206, SHORTLITERAL = 207, INTEGERLITERAL = 208,
            DOUBLELITERAL = 209, DATELITERAL = 210, LINE_CONTINUATION = 211, NEWLINE = 212,
            REMCOMMENT = 213, COMMENT = 214, SINGLEQUOTE = 215, COLON = 216, UNDERSCORE = 217,
            WS = 218, IDENTIFIER = 219;
        public static readonly string[] tokenNames = {
        "<INVALID>", "'@'", "'!'", "'#'", "'$'", "'%'", "';'", "','", "'.'", "ACCESS",
        "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS",
        "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL",
        "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", "DATABASE",
        "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC",
        "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR",
        "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "END_ENUM",
        "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", "END_TYPE",
        "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO",
        "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY",
        "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP",
        "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", "LOCK",
        "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ",
        "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", "MACRO_IF", "MACRO_ELSEIF",
        "MACRO_ELSE", "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT",
        "NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN",
        "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE",
        "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET",
        "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM",
        "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", "RESET",
        "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK",
        "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", "SINGLE", "SPC", "STATIC",
        "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TIME", "TO",
        "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION",
        "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "'&'",
        "':='", "'/'", "'\\'", "'='", "'>='", "'>'", "'<='", "'('", "'<'", "'-'",
        "'*'", "'<>'", "'+'", "'^'", "')'", "'['", "']'", "STRINGLITERAL", "OCTLITERAL",
        "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", "DATELITERAL",
        "LINE_CONTINUATION", "NEWLINE", "REMCOMMENT", "COMMENT", "'''", "':'",
        "'_'", "WS", "IDENTIFIER"
    };
        public const int
            RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3,
            RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6,
            RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_macroStmt = 9,
            RULE_moduleBody = 10, RULE_moduleBodyElement = 11, RULE_attributeStmt = 12,
            RULE_block = 13, RULE_blockStmt = 14, RULE_appactivateStmt = 15, RULE_beepStmt = 16,
            RULE_chdirStmt = 17, RULE_chdriveStmt = 18, RULE_closeStmt = 19, RULE_constStmt = 20,
            RULE_constSubStmt = 21, RULE_dateStmt = 22, RULE_declareStmt = 23, RULE_deftypeStmt = 24,
            RULE_deleteSettingStmt = 25, RULE_doLoopStmt = 26, RULE_endStmt = 27,
            RULE_enumerationStmt = 28, RULE_enumerationStmt_Constant = 29, RULE_eraseStmt = 30,
            RULE_errorStmt = 31, RULE_eventStmt = 32, RULE_exitStmt = 33, RULE_filecopyStmt = 34,
            RULE_forEachStmt = 35, RULE_forNextStmt = 36, RULE_functionStmt = 37,
            RULE_getStmt = 38, RULE_goSubStmt = 39, RULE_goToStmt = 40, RULE_ifThenElseStmt = 41,
            RULE_ifBlockStmt = 42, RULE_ifConditionStmt = 43, RULE_ifElseIfBlockStmt = 44,
            RULE_ifElseBlockStmt = 45, RULE_implementsStmt = 46, RULE_inputStmt = 47,
            RULE_killStmt = 48, RULE_letStmt = 49, RULE_lineInputStmt = 50, RULE_loadStmt = 51,
            RULE_lockStmt = 52, RULE_lsetStmt = 53, RULE_macroConstStmt = 54, RULE_macroIfThenElseStmt = 55,
            RULE_macroIfBlockStmt = 56, RULE_macroElseIfBlockStmt = 57, RULE_macroElseBlockStmt = 58,
            RULE_midStmt = 59, RULE_mkdirStmt = 60, RULE_nameStmt = 61, RULE_onErrorStmt = 62,
            RULE_onGoToStmt = 63, RULE_onGoSubStmt = 64, RULE_openStmt = 65, RULE_outputList = 66,
            RULE_outputList_Expression = 67, RULE_printStmt = 68, RULE_propertyGetStmt = 69,
            RULE_propertySetStmt = 70, RULE_propertyLetStmt = 71, RULE_putStmt = 72,
            RULE_raiseEventStmt = 73, RULE_randomizeStmt = 74, RULE_redimStmt = 75,
            RULE_redimSubStmt = 76, RULE_resetStmt = 77, RULE_resumeStmt = 78, RULE_returnStmt = 79,
            RULE_rmdirStmt = 80, RULE_rsetStmt = 81, RULE_savepictureStmt = 82, RULE_saveSettingStmt = 83,
            RULE_seekStmt = 84, RULE_selectCaseStmt = 85, RULE_sC_Selection = 86,
            RULE_sC_Case = 87, RULE_sC_Cond = 88, RULE_sendkeysStmt = 89, RULE_setattrStmt = 90,
            RULE_setStmt = 91, RULE_stopStmt = 92, RULE_subStmt = 93, RULE_timeStmt = 94,
            RULE_typeStmt = 95, RULE_typeStmt_Element = 96, RULE_typeOfStmt = 97,
            RULE_unloadStmt = 98, RULE_unlockStmt = 99, RULE_valueStmt = 100, RULE_variableStmt = 101,
            RULE_variableListStmt = 102, RULE_variableSubStmt = 103, RULE_whileWendStmt = 104,
            RULE_widthStmt = 105, RULE_withStmt = 106, RULE_writeStmt = 107, RULE_fileNumber = 108,
            RULE_explicitCallStmt = 109, RULE_eCS_ProcedureCall = 110, RULE_eCS_MemberProcedureCall = 111,
            RULE_implicitCallStmt_InBlock = 112, RULE_iCS_B_MemberProcedureCall = 113,
            RULE_iCS_B_ProcedureCall = 114, RULE_implicitCallStmt_InStmt = 115, RULE_iCS_S_VariableOrProcedureCall = 116,
            RULE_iCS_S_ProcedureOrArrayCall = 117, RULE_iCS_S_MembersCall = 118, RULE_iCS_S_MemberCall = 119,
            RULE_iCS_S_DictionaryCall = 120, RULE_argsCall = 121, RULE_argCall = 122,
            RULE_dictionaryCallStmt = 123, RULE_argList = 124, RULE_arg = 125, RULE_argDefaultValue = 126,
            RULE_subscripts = 127, RULE_subscript = 128, RULE_ambiguousIdentifier = 129,
            RULE_asTypeClause = 130, RULE_baseType = 131, RULE_certainIdentifier = 132,
            RULE_comparisonOperator = 133, RULE_complexType = 134, RULE_fieldLength = 135,
            RULE_letterrange = 136, RULE_lineLabel = 137, RULE_literal = 138, RULE_type = 139,
            RULE_typeHint = 140, RULE_visibility = 141, RULE_ambiguousKeyword = 142,
            RULE_remComment = 143, RULE_comment = 144, RULE_endOfLine = 145, RULE_endOfStatement = 146;
        public static readonly string[] ruleNames = {
        "startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement",
        "moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement",
        "macroStmt", "moduleBody", "moduleBodyElement", "attributeStmt", "block",
        "blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt",
        "closeStmt", "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt",
        "deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant",
        "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt",
        "forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt",
        "ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt",
        "implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt",
        "loadStmt", "lockStmt", "lsetStmt", "macroConstStmt", "macroIfThenElseStmt",
        "macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt",
        "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt",
        "outputList", "outputList_Expression", "printStmt", "propertyGetStmt",
        "propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt",
        "redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt",
        "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt",
        "selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt",
        "setattrStmt", "setStmt", "stopStmt", "subStmt", "timeStmt", "typeStmt",
        "typeStmt_Element", "typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt",
        "variableStmt", "variableListStmt", "variableSubStmt", "whileWendStmt",
        "widthStmt", "withStmt", "writeStmt", "fileNumber", "explicitCallStmt",
        "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock",
        "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt",
        "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall",
        "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt",
        "argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier",
        "asTypeClause", "baseType", "certainIdentifier", "comparisonOperator",
        "complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type",
        "typeHint", "visibility", "ambiguousKeyword", "remComment", "comment",
        "endOfLine", "endOfStatement"
    };

        public override string GrammarFileName { get { return "VBA.g4"; } }

        public override string[] TokenNames { get { return tokenNames; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return _serializedATN; } }

        public VBAParser(ITokenStream input)
            : base(input)
        {
            _interp = new ParserATNSimulator(this, _ATN);
        }
        public partial class StartRuleContext : ParserRuleContext
        {
            public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
            public ModuleContext module()
            {
                return GetRuleContext<ModuleContext>(0);
            }
            public StartRuleContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_startRule; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterStartRule(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitStartRule(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StartRuleContext startRule()
        {
            StartRuleContext _localctx = new StartRuleContext(_ctx, State);
            EnterRule(_localctx, 0, RULE_startRule);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 294; module();
                    State = 295; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleContext : ParserRuleContext
        {
            public EndOfStatementContext endOfStatement(int i)
            {
                return GetRuleContext<EndOfStatementContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ModuleHeaderContext moduleHeader()
            {
                return GetRuleContext<ModuleHeaderContext>(0);
            }
            public ModuleConfigContext moduleConfig()
            {
                return GetRuleContext<ModuleConfigContext>(0);
            }
            public ModuleAttributesContext moduleAttributes()
            {
                return GetRuleContext<ModuleAttributesContext>(0);
            }
            public ModuleBodyContext moduleBody()
            {
                return GetRuleContext<ModuleBodyContext>(0);
            }
            public ModuleDeclarationsContext moduleDeclarations()
            {
                return GetRuleContext<ModuleDeclarationsContext>(0);
            }
            public IReadOnlyList<EndOfStatementContext> endOfStatement()
            {
                return GetRuleContexts<EndOfStatementContext>();
            }
            public ModuleContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_module; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModule(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModule(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModule(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleContext module()
        {
            ModuleContext _localctx = new ModuleContext(_ctx, State);
            EnterRule(_localctx, 2, RULE_module);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 298;
                    switch (Interpreter.AdaptivePredict(_input, 0, _ctx))
                    {
                        case 1:
                            {
                                State = 297; Match(WS);
                            }
                            break;
                    }
                    State = 300; endOfStatement();
                    State = 304;
                    switch (Interpreter.AdaptivePredict(_input, 1, _ctx))
                    {
                        case 1:
                            {
                                State = 301; moduleHeader();
                                State = 302; endOfStatement();
                            }
                            break;
                    }
                    State = 307;
                    switch (Interpreter.AdaptivePredict(_input, 2, _ctx))
                    {
                        case 1:
                            {
                                State = 306; moduleConfig();
                            }
                            break;
                    }
                    State = 309; endOfStatement();
                    State = 311;
                    switch (Interpreter.AdaptivePredict(_input, 3, _ctx))
                    {
                        case 1:
                            {
                                State = 310; moduleAttributes();
                            }
                            break;
                    }
                    State = 313; endOfStatement();
                    State = 315;
                    switch (Interpreter.AdaptivePredict(_input, 4, _ctx))
                    {
                        case 1:
                            {
                                State = 314; moduleDeclarations();
                            }
                            break;
                    }
                    State = 317; endOfStatement();
                    State = 319;
                    switch (Interpreter.AdaptivePredict(_input, 5, _ctx))
                    {
                        case 1:
                            {
                                State = 318; moduleBody();
                            }
                            break;
                    }
                    State = 321; endOfStatement();
                    State = 323;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 322; Match(WS);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleHeaderContext : ParserRuleContext
        {
            public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
            public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
            public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleHeader; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleHeader(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleHeader(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleHeaderContext moduleHeader()
        {
            ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
            EnterRule(_localctx, 4, RULE_moduleHeader);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 325; Match(VERSION);
                    State = 326; Match(WS);
                    State = 327; Match(DOUBLELITERAL);
                    State = 328; Match(WS);
                    State = 329; Match(CLASS);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleConfigContext : ParserRuleContext
        {
            public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement()
            {
                return GetRuleContexts<ModuleConfigElementContext>();
            }
            public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public ModuleConfigElementContext moduleConfigElement(int i)
            {
                return GetRuleContext<ModuleConfigElementContext>(i);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public ModuleConfigContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleConfig; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleConfig(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleConfig(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleConfigContext moduleConfig()
        {
            ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
            EnterRule(_localctx, 6, RULE_moduleConfig);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 331; Match(BEGIN);
                    State = 332; endOfStatement();
                    State = 334;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 333; moduleConfigElement();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 336;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 7, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                    State = 338; Match(END);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleConfigElementContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleConfigElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleConfigElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleConfigElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleConfigElementContext moduleConfigElement()
        {
            ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
            EnterRule(_localctx, 8, RULE_moduleConfigElement);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 340; ambiguousIdentifier();
                    State = 342;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 341; Match(WS);
                        }
                    }

                    State = 344; Match(EQ);
                    State = 346;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 345; Match(WS);
                        }
                    }

                    State = 348; literal();
                    State = 349; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleAttributesContext : ParserRuleContext
        {
            public EndOfStatementContext endOfStatement(int i)
            {
                return GetRuleContext<EndOfStatementContext>(i);
            }
            public AttributeStmtContext attributeStmt(int i)
            {
                return GetRuleContext<AttributeStmtContext>(i);
            }
            public IReadOnlyList<EndOfStatementContext> endOfStatement()
            {
                return GetRuleContexts<EndOfStatementContext>();
            }
            public IReadOnlyList<AttributeStmtContext> attributeStmt()
            {
                return GetRuleContexts<AttributeStmtContext>();
            }
            public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleAttributes; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleAttributes(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleAttributes(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleAttributesContext moduleAttributes()
        {
            ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
            EnterRule(_localctx, 10, RULE_moduleAttributes);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 354;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 351; attributeStmt();
                                        State = 352; endOfStatement();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 356;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 10, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleDeclarationsContext : ParserRuleContext
        {
            public EndOfStatementContext endOfStatement(int i)
            {
                return GetRuleContext<EndOfStatementContext>(i);
            }
            public ModuleDeclarationsElementContext moduleDeclarationsElement(int i)
            {
                return GetRuleContext<ModuleDeclarationsElementContext>(i);
            }
            public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement()
            {
                return GetRuleContexts<ModuleDeclarationsElementContext>();
            }
            public IReadOnlyList<EndOfStatementContext> endOfStatement()
            {
                return GetRuleContexts<EndOfStatementContext>();
            }
            public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleDeclarations; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleDeclarations(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleDeclarations(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleDeclarationsContext moduleDeclarations()
        {
            ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
            EnterRule(_localctx, 12, RULE_moduleDeclarations);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 358; moduleDeclarationsElement();
                    State = 364;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 11, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 359; endOfStatement();
                                    State = 360; moduleDeclarationsElement();
                                }
                            }
                        }
                        State = 366;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 11, _ctx);
                    }
                    State = 367; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleOptionContext : ParserRuleContext
        {
            public ModuleOptionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleOption; } }

            public ModuleOptionContext() { }
            public virtual void CopyFrom(ModuleOptionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class OptionExplicitStmtContext : ModuleOptionContext
        {
            public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
            public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionBaseStmtContext : ModuleOptionContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
            public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
            public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionPrivateModuleStmtContext : ModuleOptionContext
        {
            public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
            public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionCompareStmtContext : ModuleOptionContext
        {
            public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
            public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleOptionContext moduleOption()
        {
            ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
            EnterRule(_localctx, 14, RULE_moduleOption);
            int _la;
            try
            {
                State = 377;
                switch (_input.La(1))
                {
                    case OPTION_BASE:
                        _localctx = new OptionBaseStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 369; Match(OPTION_BASE);
                            State = 370; Match(WS);
                            State = 371; Match(SHORTLITERAL);
                        }
                        break;
                    case OPTION_COMPARE:
                        _localctx = new OptionCompareStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 372; Match(OPTION_COMPARE);
                            State = 373; Match(WS);
                            State = 374;
                            _la = _input.La(1);
                            if (!(_la == BINARY || _la == DATABASE || _la == TEXT))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                        }
                        break;
                    case OPTION_EXPLICIT:
                        _localctx = new OptionExplicitStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 375; Match(OPTION_EXPLICIT);
                        }
                        break;
                    case OPTION_PRIVATE_MODULE:
                        _localctx = new OptionPrivateModuleStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 376; Match(OPTION_PRIVATE_MODULE);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleDeclarationsElementContext : ParserRuleContext
        {
            public CommentContext comment()
            {
                return GetRuleContext<CommentContext>(0);
            }
            public EnumerationStmtContext enumerationStmt()
            {
                return GetRuleContext<EnumerationStmtContext>(0);
            }
            public ConstStmtContext constStmt()
            {
                return GetRuleContext<ConstStmtContext>(0);
            }
            public TypeStmtContext typeStmt()
            {
                return GetRuleContext<TypeStmtContext>(0);
            }
            public EventStmtContext eventStmt()
            {
                return GetRuleContext<EventStmtContext>(0);
            }
            public VariableStmtContext variableStmt()
            {
                return GetRuleContext<VariableStmtContext>(0);
            }
            public ImplementsStmtContext implementsStmt()
            {
                return GetRuleContext<ImplementsStmtContext>(0);
            }
            public ModuleOptionContext moduleOption()
            {
                return GetRuleContext<ModuleOptionContext>(0);
            }
            public DeclareStmtContext declareStmt()
            {
                return GetRuleContext<DeclareStmtContext>(0);
            }
            public MacroStmtContext macroStmt()
            {
                return GetRuleContext<MacroStmtContext>(0);
            }
            public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleDeclarationsElementContext moduleDeclarationsElement()
        {
            ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
            EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
            try
            {
                State = 389;
                switch (Interpreter.AdaptivePredict(_input, 13, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 379; comment();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 380; declareStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 381; enumerationStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 382; eventStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 383; constStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 384; implementsStmt();
                        }
                        break;

                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 385; variableStmt();
                        }
                        break;

                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 386; moduleOption();
                        }
                        break;

                    case 9:
                        EnterOuterAlt(_localctx, 9);
                        {
                            State = 387; typeStmt();
                        }
                        break;

                    case 10:
                        EnterOuterAlt(_localctx, 10);
                        {
                            State = 388; macroStmt();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroStmtContext : ParserRuleContext
        {
            public MacroConstStmtContext macroConstStmt()
            {
                return GetRuleContext<MacroConstStmtContext>(0);
            }
            public MacroIfThenElseStmtContext macroIfThenElseStmt()
            {
                return GetRuleContext<MacroIfThenElseStmtContext>(0);
            }
            public MacroStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroStmtContext macroStmt()
        {
            MacroStmtContext _localctx = new MacroStmtContext(_ctx, State);
            EnterRule(_localctx, 18, RULE_macroStmt);
            try
            {
                State = 393;
                switch (_input.La(1))
                {
                    case MACRO_CONST:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 391; macroConstStmt();
                        }
                        break;
                    case MACRO_IF:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 392; macroIfThenElseStmt();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleBodyContext : ParserRuleContext
        {
            public EndOfStatementContext endOfStatement(int i)
            {
                return GetRuleContext<EndOfStatementContext>(i);
            }
            public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement()
            {
                return GetRuleContexts<ModuleBodyElementContext>();
            }
            public IReadOnlyList<EndOfStatementContext> endOfStatement()
            {
                return GetRuleContexts<EndOfStatementContext>();
            }
            public ModuleBodyElementContext moduleBodyElement(int i)
            {
                return GetRuleContext<ModuleBodyElementContext>(i);
            }
            public ModuleBodyContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleBody; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleBody(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleBody(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleBodyContext moduleBody()
        {
            ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
            EnterRule(_localctx, 20, RULE_moduleBody);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 395; moduleBodyElement();
                    State = 401;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 15, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 396; endOfStatement();
                                    State = 397; moduleBodyElement();
                                }
                            }
                        }
                        State = 403;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 15, _ctx);
                    }
                    State = 404; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleBodyElementContext : ParserRuleContext
        {
            public PropertySetStmtContext propertySetStmt()
            {
                return GetRuleContext<PropertySetStmtContext>(0);
            }
            public PropertyLetStmtContext propertyLetStmt()
            {
                return GetRuleContext<PropertyLetStmtContext>(0);
            }
            public PropertyGetStmtContext propertyGetStmt()
            {
                return GetRuleContext<PropertyGetStmtContext>(0);
            }
            public MacroStmtContext macroStmt()
            {
                return GetRuleContext<MacroStmtContext>(0);
            }
            public SubStmtContext subStmt()
            {
                return GetRuleContext<SubStmtContext>(0);
            }
            public FunctionStmtContext functionStmt()
            {
                return GetRuleContext<FunctionStmtContext>(0);
            }
            public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleBodyElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleBodyElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleBodyElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleBodyElementContext moduleBodyElement()
        {
            ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
            EnterRule(_localctx, 22, RULE_moduleBodyElement);
            try
            {
                State = 412;
                switch (Interpreter.AdaptivePredict(_input, 16, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 406; functionStmt();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 407; propertyGetStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 408; propertySetStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 409; propertyLetStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 410; subStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 411; macroStmt();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AttributeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public LiteralContext literal(int i)
            {
                return GetRuleContext<LiteralContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<LiteralContext> literal()
            {
                return GetRuleContexts<LiteralContext>();
            }
            public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public AttributeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_attributeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAttributeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAttributeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AttributeStmtContext attributeStmt()
        {
            AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
            EnterRule(_localctx, 24, RULE_attributeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 414; Match(ATTRIBUTE);
                    State = 415; Match(WS);
                    State = 416; implicitCallStmt_InStmt();
                    State = 418;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 417; Match(WS);
                        }
                    }

                    State = 420; Match(EQ);
                    State = 422;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 421; Match(WS);
                        }
                    }

                    State = 424; literal();
                    State = 435;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 21, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 426;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 425; Match(WS);
                                        }
                                    }

                                    State = 428; Match(T__1);
                                    State = 430;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 429; Match(WS);
                                        }
                                    }

                                    State = 432; literal();
                                }
                            }
                        }
                        State = 437;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 21, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockContext : ParserRuleContext
        {
            public EndOfStatementContext endOfStatement(int i)
            {
                return GetRuleContext<EndOfStatementContext>(i);
            }
            public IReadOnlyList<BlockStmtContext> blockStmt()
            {
                return GetRuleContexts<BlockStmtContext>();
            }
            public IReadOnlyList<EndOfStatementContext> endOfStatement()
            {
                return GetRuleContexts<EndOfStatementContext>();
            }
            public BlockStmtContext blockStmt(int i)
            {
                return GetRuleContext<BlockStmtContext>(i);
            }
            public BlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_block; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BlockContext block()
        {
            BlockContext _localctx = new BlockContext(_ctx, State);
            EnterRule(_localctx, 26, RULE_block);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 438; blockStmt();
                    State = 444;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 22, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 439; endOfStatement();
                                    State = 440; blockStmt();
                                }
                            }
                        }
                        State = 446;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 22, _ctx);
                    }
                    State = 447; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockStmtContext : ParserRuleContext
        {
            public GoToStmtContext goToStmt()
            {
                return GetRuleContext<GoToStmtContext>(0);
            }
            public LoadStmtContext loadStmt()
            {
                return GetRuleContext<LoadStmtContext>(0);
            }
            public ChdriveStmtContext chdriveStmt()
            {
                return GetRuleContext<ChdriveStmtContext>(0);
            }
            public EndStmtContext endStmt()
            {
                return GetRuleContext<EndStmtContext>(0);
            }
            public LetStmtContext letStmt()
            {
                return GetRuleContext<LetStmtContext>(0);
            }
            public FilecopyStmtContext filecopyStmt()
            {
                return GetRuleContext<FilecopyStmtContext>(0);
            }
            public RmdirStmtContext rmdirStmt()
            {
                return GetRuleContext<RmdirStmtContext>(0);
            }
            public RsetStmtContext rsetStmt()
            {
                return GetRuleContext<RsetStmtContext>(0);
            }
            public EraseStmtContext eraseStmt()
            {
                return GetRuleContext<EraseStmtContext>(0);
            }
            public ChdirStmtContext chdirStmt()
            {
                return GetRuleContext<ChdirStmtContext>(0);
            }
            public WriteStmtContext writeStmt()
            {
                return GetRuleContext<WriteStmtContext>(0);
            }
            public ExplicitCallStmtContext explicitCallStmt()
            {
                return GetRuleContext<ExplicitCallStmtContext>(0);
            }
            public RandomizeStmtContext randomizeStmt()
            {
                return GetRuleContext<RandomizeStmtContext>(0);
            }
            public ConstStmtContext constStmt()
            {
                return GetRuleContext<ConstStmtContext>(0);
            }
            public SelectCaseStmtContext selectCaseStmt()
            {
                return GetRuleContext<SelectCaseStmtContext>(0);
            }
            public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock()
            {
                return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
            }
            public MkdirStmtContext mkdirStmt()
            {
                return GetRuleContext<MkdirStmtContext>(0);
            }
            public RaiseEventStmtContext raiseEventStmt()
            {
                return GetRuleContext<RaiseEventStmtContext>(0);
            }
            public SavepictureStmtContext savepictureStmt()
            {
                return GetRuleContext<SavepictureStmtContext>(0);
            }
            public ExitStmtContext exitStmt()
            {
                return GetRuleContext<ExitStmtContext>(0);
            }
            public IfThenElseStmtContext ifThenElseStmt()
            {
                return GetRuleContext<IfThenElseStmtContext>(0);
            }
            public OpenStmtContext openStmt()
            {
                return GetRuleContext<OpenStmtContext>(0);
            }
            public SetattrStmtContext setattrStmt()
            {
                return GetRuleContext<SetattrStmtContext>(0);
            }
            public SaveSettingStmtContext saveSettingStmt()
            {
                return GetRuleContext<SaveSettingStmtContext>(0);
            }
            public AttributeStmtContext attributeStmt()
            {
                return GetRuleContext<AttributeStmtContext>(0);
            }
            public ForEachStmtContext forEachStmt()
            {
                return GetRuleContext<ForEachStmtContext>(0);
            }
            public ForNextStmtContext forNextStmt()
            {
                return GetRuleContext<ForNextStmtContext>(0);
            }
            public RedimStmtContext redimStmt()
            {
                return GetRuleContext<RedimStmtContext>(0);
            }
            public TimeStmtContext timeStmt()
            {
                return GetRuleContext<TimeStmtContext>(0);
            }
            public OnGoSubStmtContext onGoSubStmt()
            {
                return GetRuleContext<OnGoSubStmtContext>(0);
            }
            public SendkeysStmtContext sendkeysStmt()
            {
                return GetRuleContext<SendkeysStmtContext>(0);
            }
            public DeleteSettingStmtContext deleteSettingStmt()
            {
                return GetRuleContext<DeleteSettingStmtContext>(0);
            }
            public ErrorStmtContext errorStmt()
            {
                return GetRuleContext<ErrorStmtContext>(0);
            }
            public SetStmtContext setStmt()
            {
                return GetRuleContext<SetStmtContext>(0);
            }
            public WithStmtContext withStmt()
            {
                return GetRuleContext<WithStmtContext>(0);
            }
            public OnErrorStmtContext onErrorStmt()
            {
                return GetRuleContext<OnErrorStmtContext>(0);
            }
            public WhileWendStmtContext whileWendStmt()
            {
                return GetRuleContext<WhileWendStmtContext>(0);
            }
            public UnlockStmtContext unlockStmt()
            {
                return GetRuleContext<UnlockStmtContext>(0);
            }
            public StopStmtContext stopStmt()
            {
                return GetRuleContext<StopStmtContext>(0);
            }
            public NameStmtContext nameStmt()
            {
                return GetRuleContext<NameStmtContext>(0);
            }
            public LineInputStmtContext lineInputStmt()
            {
                return GetRuleContext<LineInputStmtContext>(0);
            }
            public DateStmtContext dateStmt()
            {
                return GetRuleContext<DateStmtContext>(0);
            }
            public InputStmtContext inputStmt()
            {
                return GetRuleContext<InputStmtContext>(0);
            }
            public ResetStmtContext resetStmt()
            {
                return GetRuleContext<ResetStmtContext>(0);
            }
            public ImplementsStmtContext implementsStmt()
            {
                return GetRuleContext<ImplementsStmtContext>(0);
            }
            public CloseStmtContext closeStmt()
            {
                return GetRuleContext<CloseStmtContext>(0);
            }
            public GoSubStmtContext goSubStmt()
            {
                return GetRuleContext<GoSubStmtContext>(0);
            }
            public KillStmtContext killStmt()
            {
                return GetRuleContext<KillStmtContext>(0);
            }
            public DeftypeStmtContext deftypeStmt()
            {
                return GetRuleContext<DeftypeStmtContext>(0);
            }
            public ReturnStmtContext returnStmt()
            {
                return GetRuleContext<ReturnStmtContext>(0);
            }
            public LockStmtContext lockStmt()
            {
                return GetRuleContext<LockStmtContext>(0);
            }
            public DoLoopStmtContext doLoopStmt()
            {
                return GetRuleContext<DoLoopStmtContext>(0);
            }
            public LineLabelContext lineLabel()
            {
                return GetRuleContext<LineLabelContext>(0);
            }
            public BeepStmtContext beepStmt()
            {
                return GetRuleContext<BeepStmtContext>(0);
            }
            public AppactivateStmtContext appactivateStmt()
            {
                return GetRuleContext<AppactivateStmtContext>(0);
            }
            public LsetStmtContext lsetStmt()
            {
                return GetRuleContext<LsetStmtContext>(0);
            }
            public MidStmtContext midStmt()
            {
                return GetRuleContext<MidStmtContext>(0);
            }
            public GetStmtContext getStmt()
            {
                return GetRuleContext<GetStmtContext>(0);
            }
            public OnGoToStmtContext onGoToStmt()
            {
                return GetRuleContext<OnGoToStmtContext>(0);
            }
            public WidthStmtContext widthStmt()
            {
                return GetRuleContext<WidthStmtContext>(0);
            }
            public PrintStmtContext printStmt()
            {
                return GetRuleContext<PrintStmtContext>(0);
            }
            public MacroStmtContext macroStmt()
            {
                return GetRuleContext<MacroStmtContext>(0);
            }
            public SeekStmtContext seekStmt()
            {
                return GetRuleContext<SeekStmtContext>(0);
            }
            public ResumeStmtContext resumeStmt()
            {
                return GetRuleContext<ResumeStmtContext>(0);
            }
            public VariableStmtContext variableStmt()
            {
                return GetRuleContext<VariableStmtContext>(0);
            }
            public PutStmtContext putStmt()
            {
                return GetRuleContext<PutStmtContext>(0);
            }
            public UnloadStmtContext unloadStmt()
            {
                return GetRuleContext<UnloadStmtContext>(0);
            }
            public BlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_blockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BlockStmtContext blockStmt()
        {
            BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
            EnterRule(_localctx, 28, RULE_blockStmt);
            try
            {
                State = 516;
                switch (Interpreter.AdaptivePredict(_input, 23, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 449; lineLabel();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 450; appactivateStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 451; attributeStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 452; beepStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 453; chdirStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 454; chdriveStmt();
                        }
                        break;

                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 455; closeStmt();
                        }
                        break;

                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 456; constStmt();
                        }
                        break;

                    case 9:
                        EnterOuterAlt(_localctx, 9);
                        {
                            State = 457; dateStmt();
                        }
                        break;

                    case 10:
                        EnterOuterAlt(_localctx, 10);
                        {
                            State = 458; deleteSettingStmt();
                        }
                        break;

                    case 11:
                        EnterOuterAlt(_localctx, 11);
                        {
                            State = 459; deftypeStmt();
                        }
                        break;

                    case 12:
                        EnterOuterAlt(_localctx, 12);
                        {
                            State = 460; doLoopStmt();
                        }
                        break;

                    case 13:
                        EnterOuterAlt(_localctx, 13);
                        {
                            State = 461; endStmt();
                        }
                        break;

                    case 14:
                        EnterOuterAlt(_localctx, 14);
                        {
                            State = 462; eraseStmt();
                        }
                        break;

                    case 15:
                        EnterOuterAlt(_localctx, 15);
                        {
                            State = 463; errorStmt();
                        }
                        break;

                    case 16:
                        EnterOuterAlt(_localctx, 16);
                        {
                            State = 464; exitStmt();
                        }
                        break;

                    case 17:
                        EnterOuterAlt(_localctx, 17);
                        {
                            State = 465; explicitCallStmt();
                        }
                        break;

                    case 18:
                        EnterOuterAlt(_localctx, 18);
                        {
                            State = 466; filecopyStmt();
                        }
                        break;

                    case 19:
                        EnterOuterAlt(_localctx, 19);
                        {
                            State = 467; forEachStmt();
                        }
                        break;

                    case 20:
                        EnterOuterAlt(_localctx, 20);
                        {
                            State = 468; forNextStmt();
                        }
                        break;

                    case 21:
                        EnterOuterAlt(_localctx, 21);
                        {
                            State = 469; getStmt();
                        }
                        break;

                    case 22:
                        EnterOuterAlt(_localctx, 22);
                        {
                            State = 470; goSubStmt();
                        }
                        break;

                    case 23:
                        EnterOuterAlt(_localctx, 23);
                        {
                            State = 471; goToStmt();
                        }
                        break;

                    case 24:
                        EnterOuterAlt(_localctx, 24);
                        {
                            State = 472; ifThenElseStmt();
                        }
                        break;

                    case 25:
                        EnterOuterAlt(_localctx, 25);
                        {
                            State = 473; implementsStmt();
                        }
                        break;

                    case 26:
                        EnterOuterAlt(_localctx, 26);
                        {
                            State = 474; inputStmt();
                        }
                        break;

                    case 27:
                        EnterOuterAlt(_localctx, 27);
                        {
                            State = 475; killStmt();
                        }
                        break;

                    case 28:
                        EnterOuterAlt(_localctx, 28);
                        {
                            State = 476; letStmt();
                        }
                        break;

                    case 29:
                        EnterOuterAlt(_localctx, 29);
                        {
                            State = 477; lineInputStmt();
                        }
                        break;

                    case 30:
                        EnterOuterAlt(_localctx, 30);
                        {
                            State = 478; loadStmt();
                        }
                        break;

                    case 31:
                        EnterOuterAlt(_localctx, 31);
                        {
                            State = 479; lockStmt();
                        }
                        break;

                    case 32:
                        EnterOuterAlt(_localctx, 32);
                        {
                            State = 480; lsetStmt();
                        }
                        break;

                    case 33:
                        EnterOuterAlt(_localctx, 33);
                        {
                            State = 481; macroStmt();
                        }
                        break;

                    case 34:
                        EnterOuterAlt(_localctx, 34);
                        {
                            State = 482; midStmt();
                        }
                        break;

                    case 35:
                        EnterOuterAlt(_localctx, 35);
                        {
                            State = 483; mkdirStmt();
                        }
                        break;

                    case 36:
                        EnterOuterAlt(_localctx, 36);
                        {
                            State = 484; nameStmt();
                        }
                        break;

                    case 37:
                        EnterOuterAlt(_localctx, 37);
                        {
                            State = 485; onErrorStmt();
                        }
                        break;

                    case 38:
                        EnterOuterAlt(_localctx, 38);
                        {
                            State = 486; onGoToStmt();
                        }
                        break;

                    case 39:
                        EnterOuterAlt(_localctx, 39);
                        {
                            State = 487; onGoSubStmt();
                        }
                        break;

                    case 40:
                        EnterOuterAlt(_localctx, 40);
                        {
                            State = 488; openStmt();
                        }
                        break;

                    case 41:
                        EnterOuterAlt(_localctx, 41);
                        {
                            State = 489; printStmt();
                        }
                        break;

                    case 42:
                        EnterOuterAlt(_localctx, 42);
                        {
                            State = 490; putStmt();
                        }
                        break;

                    case 43:
                        EnterOuterAlt(_localctx, 43);
                        {
                            State = 491; raiseEventStmt();
                        }
                        break;

                    case 44:
                        EnterOuterAlt(_localctx, 44);
                        {
                            State = 492; randomizeStmt();
                        }
                        break;

                    case 45:
                        EnterOuterAlt(_localctx, 45);
                        {
                            State = 493; redimStmt();
                        }
                        break;

                    case 46:
                        EnterOuterAlt(_localctx, 46);
                        {
                            State = 494; resetStmt();
                        }
                        break;

                    case 47:
                        EnterOuterAlt(_localctx, 47);
                        {
                            State = 495; resumeStmt();
                        }
                        break;

                    case 48:
                        EnterOuterAlt(_localctx, 48);
                        {
                            State = 496; returnStmt();
                        }
                        break;

                    case 49:
                        EnterOuterAlt(_localctx, 49);
                        {
                            State = 497; rmdirStmt();
                        }
                        break;

                    case 50:
                        EnterOuterAlt(_localctx, 50);
                        {
                            State = 498; rsetStmt();
                        }
                        break;

                    case 51:
                        EnterOuterAlt(_localctx, 51);
                        {
                            State = 499; savepictureStmt();
                        }
                        break;

                    case 52:
                        EnterOuterAlt(_localctx, 52);
                        {
                            State = 500; saveSettingStmt();
                        }
                        break;

                    case 53:
                        EnterOuterAlt(_localctx, 53);
                        {
                            State = 501; seekStmt();
                        }
                        break;

                    case 54:
                        EnterOuterAlt(_localctx, 54);
                        {
                            State = 502; selectCaseStmt();
                        }
                        break;

                    case 55:
                        EnterOuterAlt(_localctx, 55);
                        {
                            State = 503; sendkeysStmt();
                        }
                        break;

                    case 56:
                        EnterOuterAlt(_localctx, 56);
                        {
                            State = 504; setattrStmt();
                        }
                        break;

                    case 57:
                        EnterOuterAlt(_localctx, 57);
                        {
                            State = 505; setStmt();
                        }
                        break;

                    case 58:
                        EnterOuterAlt(_localctx, 58);
                        {
                            State = 506; stopStmt();
                        }
                        break;

                    case 59:
                        EnterOuterAlt(_localctx, 59);
                        {
                            State = 507; timeStmt();
                        }
                        break;

                    case 60:
                        EnterOuterAlt(_localctx, 60);
                        {
                            State = 508; unloadStmt();
                        }
                        break;

                    case 61:
                        EnterOuterAlt(_localctx, 61);
                        {
                            State = 509; unlockStmt();
                        }
                        break;

                    case 62:
                        EnterOuterAlt(_localctx, 62);
                        {
                            State = 510; variableStmt();
                        }
                        break;

                    case 63:
                        EnterOuterAlt(_localctx, 63);
                        {
                            State = 511; whileWendStmt();
                        }
                        break;

                    case 64:
                        EnterOuterAlt(_localctx, 64);
                        {
                            State = 512; widthStmt();
                        }
                        break;

                    case 65:
                        EnterOuterAlt(_localctx, 65);
                        {
                            State = 513; withStmt();
                        }
                        break;

                    case 66:
                        EnterOuterAlt(_localctx, 66);
                        {
                            State = 514; writeStmt();
                        }
                        break;

                    case 67:
                        EnterOuterAlt(_localctx, 67);
                        {
                            State = 515; implicitCallStmt_InBlock();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AppactivateStmtContext : ParserRuleContext
        {
            public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_appactivateStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAppactivateStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAppactivateStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AppactivateStmtContext appactivateStmt()
        {
            AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
            EnterRule(_localctx, 30, RULE_appactivateStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 518; Match(APPACTIVATE);
                    State = 519; Match(WS);
                    State = 520; valueStmt(0);
                    State = 529;
                    switch (Interpreter.AdaptivePredict(_input, 26, _ctx))
                    {
                        case 1:
                            {
                                State = 522;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 521; Match(WS);
                                    }
                                }

                                State = 524; Match(T__1);
                                State = 526;
                                switch (Interpreter.AdaptivePredict(_input, 25, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 525; Match(WS);
                                        }
                                        break;
                                }
                                State = 528; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BeepStmtContext : ParserRuleContext
        {
            public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
            public BeepStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_beepStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBeepStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBeepStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BeepStmtContext beepStmt()
        {
            BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
            EnterRule(_localctx, 32, RULE_beepStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 531; Match(BEEP);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ChdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
            public ChdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_chdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterChdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitChdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ChdirStmtContext chdirStmt()
        {
            ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
            EnterRule(_localctx, 34, RULE_chdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 533; Match(CHDIR);
                    State = 534; Match(WS);
                    State = 535; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ChdriveStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
            public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_chdriveStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterChdriveStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitChdriveStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ChdriveStmtContext chdriveStmt()
        {
            ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
            EnterRule(_localctx, 36, RULE_chdriveStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 537; Match(CHDRIVE);
                    State = 538; Match(WS);
                    State = 539; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CloseStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
            public IReadOnlyList<FileNumberContext> fileNumber()
            {
                return GetRuleContexts<FileNumberContext>();
            }
            public FileNumberContext fileNumber(int i)
            {
                return GetRuleContext<FileNumberContext>(i);
            }
            public CloseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_closeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCloseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCloseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CloseStmtContext closeStmt()
        {
            CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
            EnterRule(_localctx, 38, RULE_closeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 541; Match(CLOSE);
                    State = 557;
                    switch (Interpreter.AdaptivePredict(_input, 30, _ctx))
                    {
                        case 1:
                            {
                                State = 542; Match(WS);
                                State = 543; fileNumber();
                                State = 554;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 29, _ctx);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 545;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 544; Match(WS);
                                                    }
                                                }

                                                State = 547; Match(T__1);
                                                State = 549;
                                                switch (Interpreter.AdaptivePredict(_input, 28, _ctx))
                                                {
                                                    case 1:
                                                        {
                                                            State = 548; Match(WS);
                                                        }
                                                        break;
                                                }
                                                State = 551; fileNumber();
                                            }
                                        }
                                    }
                                    State = 556;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 29, _ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ConstStmtContext : ParserRuleContext
        {
            public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ConstSubStmtContext> constSubStmt()
            {
                return GetRuleContexts<ConstSubStmtContext>();
            }
            public ConstSubStmtContext constSubStmt(int i)
            {
                return GetRuleContext<ConstSubStmtContext>(i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ConstStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_constStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterConstStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitConstStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ConstStmtContext constStmt()
        {
            ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
            EnterRule(_localctx, 40, RULE_constStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 562;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 559; visibility();
                            State = 560; Match(WS);
                        }
                    }

                    State = 564; Match(CONST);
                    State = 565; Match(WS);
                    State = 566; constSubStmt();
                    State = 577;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 34, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 568;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 567; Match(WS);
                                        }
                                    }

                                    State = 570; Match(T__1);
                                    State = 572;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 571; Match(WS);
                                        }
                                    }

                                    State = 574; constSubStmt();
                                }
                            }
                        }
                        State = 579;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 34, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ConstSubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_constSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterConstSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitConstSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ConstSubStmtContext constSubStmt()
        {
            ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
            EnterRule(_localctx, 42, RULE_constSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 580; ambiguousIdentifier();
                    State = 582;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 581; typeHint();
                        }
                    }

                    State = 586;
                    switch (Interpreter.AdaptivePredict(_input, 36, _ctx))
                    {
                        case 1:
                            {
                                State = 584; Match(WS);
                                State = 585; asTypeClause();
                            }
                            break;
                    }
                    State = 589;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 588; Match(WS);
                        }
                    }

                    State = 591; Match(EQ);
                    State = 593;
                    switch (Interpreter.AdaptivePredict(_input, 38, _ctx))
                    {
                        case 1:
                            {
                                State = 592; Match(WS);
                            }
                            break;
                    }
                    State = 595; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DateStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public DateStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_dateStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDateStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDateStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DateStmtContext dateStmt()
        {
            DateStmtContext _localctx = new DateStmtContext(_ctx, State);
            EnterRule(_localctx, 44, RULE_dateStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 597; Match(DATE);
                    State = 599;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 598; Match(WS);
                        }
                    }

                    State = 601; Match(EQ);
                    State = 603;
                    switch (Interpreter.AdaptivePredict(_input, 40, _ctx))
                    {
                        case 1:
                            {
                                State = 602; Match(WS);
                            }
                            break;
                    }
                    State = 605; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeclareStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode STRINGLITERAL(int i)
            {
                return GetToken(VBAParser.STRINGLITERAL, i);
            }
            public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
            public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public TypeHintContext typeHint(int i)
            {
                return GetRuleContext<TypeHintContext>(i);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<TypeHintContext> typeHint()
            {
                return GetRuleContexts<TypeHintContext>();
            }
            public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
            public DeclareStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_declareStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeclareStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeclareStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeclareStmtContext declareStmt()
        {
            DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
            EnterRule(_localctx, 46, RULE_declareStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 610;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 607; visibility();
                            State = 608; Match(WS);
                        }
                    }

                    State = 612; Match(DECLARE);
                    State = 613; Match(WS);
                    State = 616;
                    _la = _input.La(1);
                    if (_la == PTRSAFE)
                    {
                        {
                            State = 614; Match(PTRSAFE);
                            State = 615; Match(WS);
                        }
                    }

                    State = 623;
                    switch (_input.La(1))
                    {
                        case FUNCTION:
                            {
                                {
                                    State = 618; Match(FUNCTION);
                                    State = 620;
                                    _la = _input.La(1);
                                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                                    {
                                        {
                                            State = 619; typeHint();
                                        }
                                    }

                                }
                            }
                            break;
                        case SUB:
                            {
                                State = 622; Match(SUB);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 625; Match(WS);
                    State = 626; ambiguousIdentifier();
                    State = 628;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 627; typeHint();
                        }
                    }

                    State = 630; Match(WS);
                    State = 631; Match(LIB);
                    State = 632; Match(WS);
                    State = 633; Match(STRINGLITERAL);
                    State = 638;
                    switch (Interpreter.AdaptivePredict(_input, 46, _ctx))
                    {
                        case 1:
                            {
                                State = 634; Match(WS);
                                State = 635; Match(ALIAS);
                                State = 636; Match(WS);
                                State = 637; Match(STRINGLITERAL);
                            }
                            break;
                    }
                    State = 644;
                    switch (Interpreter.AdaptivePredict(_input, 48, _ctx))
                    {
                        case 1:
                            {
                                State = 641;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 640; Match(WS);
                                    }
                                }

                                State = 643; argList();
                            }
                            break;
                    }
                    State = 648;
                    switch (Interpreter.AdaptivePredict(_input, 49, _ctx))
                    {
                        case 1:
                            {
                                State = 646; Match(WS);
                                State = 647; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeftypeStmtContext : ParserRuleContext
        {
            public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
            public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
            public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
            public IReadOnlyList<LetterrangeContext> letterrange()
            {
                return GetRuleContexts<LetterrangeContext>();
            }
            public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
            public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
            public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
            public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
            public LetterrangeContext letterrange(int i)
            {
                return GetRuleContext<LetterrangeContext>(i);
            }
            public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
            public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
            public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
            public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
            public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_deftypeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeftypeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeftypeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeftypeStmtContext deftypeStmt()
        {
            DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
            EnterRule(_localctx, 48, RULE_deftypeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 650;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 651; Match(WS);
                    State = 652; letterrange();
                    State = 663;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 52, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 654;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 653; Match(WS);
                                        }
                                    }

                                    State = 656; Match(T__1);
                                    State = 658;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 657; Match(WS);
                                        }
                                    }

                                    State = 660; letterrange();
                                }
                            }
                        }
                        State = 665;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 52, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeleteSettingStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeleteSettingStmtContext deleteSettingStmt()
        {
            DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
            EnterRule(_localctx, 50, RULE_deleteSettingStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 666; Match(DELETESETTING);
                    State = 667; Match(WS);
                    State = 668; valueStmt(0);
                    State = 670;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 669; Match(WS);
                        }
                    }

                    State = 672; Match(T__1);
                    State = 674;
                    switch (Interpreter.AdaptivePredict(_input, 54, _ctx))
                    {
                        case 1:
                            {
                                State = 673; Match(WS);
                            }
                            break;
                    }
                    State = 676; valueStmt(0);
                    State = 685;
                    switch (Interpreter.AdaptivePredict(_input, 57, _ctx))
                    {
                        case 1:
                            {
                                State = 678;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 677; Match(WS);
                                    }
                                }

                                State = 680; Match(T__1);
                                State = 682;
                                switch (Interpreter.AdaptivePredict(_input, 56, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 681; Match(WS);
                                        }
                                        break;
                                }
                                State = 684; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DoLoopStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
            public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_doLoopStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDoLoopStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDoLoopStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DoLoopStmtContext doLoopStmt()
        {
            DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
            EnterRule(_localctx, 52, RULE_doLoopStmt);
            int _la;
            try
            {
                State = 714;
                switch (Interpreter.AdaptivePredict(_input, 60, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 687; Match(DO);
                            State = 688; endOfStatement();
                            State = 690;
                            switch (Interpreter.AdaptivePredict(_input, 58, _ctx))
                            {
                                case 1:
                                    {
                                        State = 689; block();
                                    }
                                    break;
                            }
                            State = 692; Match(LOOP);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 694; Match(DO);
                            State = 695; Match(WS);
                            State = 696;
                            _la = _input.La(1);
                            if (!(_la == UNTIL || _la == WHILE))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 697; Match(WS);
                            State = 698; valueStmt(0);
                            State = 699; endOfStatement();
                            State = 701;
                            switch (Interpreter.AdaptivePredict(_input, 59, _ctx))
                            {
                                case 1:
                                    {
                                        State = 700; block();
                                    }
                                    break;
                            }
                            State = 703; Match(LOOP);
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 705; Match(DO);
                            State = 706; endOfStatement();
                            State = 707; block();
                            State = 708; Match(LOOP);
                            State = 709; Match(WS);
                            State = 710;
                            _la = _input.La(1);
                            if (!(_la == UNTIL || _la == WHILE))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 711; Match(WS);
                            State = 712; valueStmt(0);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EndStmtContext : ParserRuleContext
        {
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public EndStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEndStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEndStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EndStmtContext endStmt()
        {
            EndStmtContext _localctx = new EndStmtContext(_ctx, State);
            EnterRule(_localctx, 54, RULE_endStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 716; Match(END);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EnumerationStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant()
            {
                return GetRuleContexts<EnumerationStmt_ConstantContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i)
            {
                return GetRuleContext<EnumerationStmt_ConstantContext>(i);
            }
            public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
            public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_enumerationStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEnumerationStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEnumerationStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EnumerationStmtContext enumerationStmt()
        {
            EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
            EnterRule(_localctx, 56, RULE_enumerationStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 721;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 718; visibility();
                            State = 719; Match(WS);
                        }
                    }

                    State = 723; Match(ENUM);
                    State = 724; Match(WS);
                    State = 725; ambiguousIdentifier();
                    State = 726; endOfStatement();
                    State = 730;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 727; enumerationStmt_Constant();
                            }
                        }
                        State = 732;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 733; Match(END_ENUM);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EnumerationStmt_ConstantContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EnumerationStmt_ConstantContext enumerationStmt_Constant()
        {
            EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
            EnterRule(_localctx, 58, RULE_enumerationStmt_Constant);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 735; ambiguousIdentifier();
                    State = 744;
                    switch (Interpreter.AdaptivePredict(_input, 65, _ctx))
                    {
                        case 1:
                            {
                                State = 737;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 736; Match(WS);
                                    }
                                }

                                State = 739; Match(EQ);
                                State = 741;
                                switch (Interpreter.AdaptivePredict(_input, 64, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 740; Match(WS);
                                        }
                                        break;
                                }
                                State = 743; valueStmt(0);
                            }
                            break;
                    }
                    State = 746; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EraseStmtContext : ParserRuleContext
        {
            public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public EraseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eraseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEraseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEraseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EraseStmtContext eraseStmt()
        {
            EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
            EnterRule(_localctx, 60, RULE_eraseStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 748; Match(ERASE);
                    State = 749; Match(WS);
                    State = 750; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ErrorStmtContext : ParserRuleContext
        {
            public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ErrorStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_errorStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterErrorStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitErrorStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ErrorStmtContext errorStmt()
        {
            ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
            EnterRule(_localctx, 62, RULE_errorStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 752; Match(ERROR);
                    State = 753; Match(WS);
                    State = 754; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EventStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
            public EventStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eventStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEventStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEventStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EventStmtContext eventStmt()
        {
            EventStmtContext _localctx = new EventStmtContext(_ctx, State);
            EnterRule(_localctx, 64, RULE_eventStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 759;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 756; visibility();
                            State = 757; Match(WS);
                        }
                    }

                    State = 761; Match(EVENT);
                    State = 762; Match(WS);
                    State = 763; ambiguousIdentifier();
                    State = 765;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 764; Match(WS);
                        }
                    }

                    State = 767; argList();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExitStmtContext : ParserRuleContext
        {
            public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
            public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
            public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
            public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
            public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
            public ExitStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_exitStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterExitStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitExitStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExitStmtContext exitStmt()
        {
            ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
            EnterRule(_localctx, 66, RULE_exitStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 769;
                    _la = _input.La(1);
                    if (!(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (EXIT_DO - 68)) | (1L << (EXIT_FOR - 68)) | (1L << (EXIT_FUNCTION - 68)) | (1L << (EXIT_PROPERTY - 68)) | (1L << (EXIT_SUB - 68)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FilecopyStmtContext : ParserRuleContext
        {
            public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_filecopyStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFilecopyStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFilecopyStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FilecopyStmtContext filecopyStmt()
        {
            FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
            EnterRule(_localctx, 68, RULE_filecopyStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 771; Match(FILECOPY);
                    State = 772; Match(WS);
                    State = 773; valueStmt(0);
                    State = 775;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 774; Match(WS);
                        }
                    }

                    State = 777; Match(T__1);
                    State = 779;
                    switch (Interpreter.AdaptivePredict(_input, 69, _ctx))
                    {
                        case 1:
                            {
                                State = 778; Match(WS);
                            }
                            break;
                    }
                    State = 781; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ForEachStmtContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
            public ForEachStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_forEachStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterForEachStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitForEachStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ForEachStmtContext forEachStmt()
        {
            ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
            EnterRule(_localctx, 70, RULE_forEachStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 783; Match(FOR);
                    State = 784; Match(WS);
                    State = 785; Match(EACH);
                    State = 786; Match(WS);
                    State = 787; ambiguousIdentifier();
                    State = 789;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 788; typeHint();
                        }
                    }

                    State = 791; Match(WS);
                    State = 792; Match(IN);
                    State = 793; Match(WS);
                    State = 794; valueStmt(0);
                    State = 795; endOfStatement();
                    State = 797;
                    switch (Interpreter.AdaptivePredict(_input, 71, _ctx))
                    {
                        case 1:
                            {
                                State = 796; block();
                            }
                            break;
                    }
                    State = 799; Match(NEXT);
                    State = 802;
                    switch (Interpreter.AdaptivePredict(_input, 72, _ctx))
                    {
                        case 1:
                            {
                                State = 800; Match(WS);
                                State = 801; ambiguousIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ForNextStmtContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ForNextStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_forNextStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterForNextStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitForNextStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ForNextStmtContext forNextStmt()
        {
            ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
            EnterRule(_localctx, 72, RULE_forNextStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 804; Match(FOR);
                    State = 805; Match(WS);
                    State = 806; ambiguousIdentifier();
                    State = 808;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 807; typeHint();
                        }
                    }

                    State = 812;
                    switch (Interpreter.AdaptivePredict(_input, 74, _ctx))
                    {
                        case 1:
                            {
                                State = 810; Match(WS);
                                State = 811; asTypeClause();
                            }
                            break;
                    }
                    State = 815;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 814; Match(WS);
                        }
                    }

                    State = 817; Match(EQ);
                    State = 819;
                    switch (Interpreter.AdaptivePredict(_input, 76, _ctx))
                    {
                        case 1:
                            {
                                State = 818; Match(WS);
                            }
                            break;
                    }
                    State = 821; valueStmt(0);
                    State = 822; Match(WS);
                    State = 823; Match(TO);
                    State = 824; Match(WS);
                    State = 825; valueStmt(0);
                    State = 830;
                    switch (Interpreter.AdaptivePredict(_input, 77, _ctx))
                    {
                        case 1:
                            {
                                State = 826; Match(WS);
                                State = 827; Match(STEP);
                                State = 828; Match(WS);
                                State = 829; valueStmt(0);
                            }
                            break;
                    }
                    State = 832; endOfStatement();
                    State = 834;
                    switch (Interpreter.AdaptivePredict(_input, 78, _ctx))
                    {
                        case 1:
                            {
                                State = 833; block();
                            }
                            break;
                    }
                    State = 836; Match(NEXT);
                    State = 839;
                    switch (Interpreter.AdaptivePredict(_input, 79, _ctx))
                    {
                        case 1:
                            {
                                State = 837; Match(WS);
                                State = 838; ambiguousIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FunctionStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public FunctionStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_functionStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFunctionStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFunctionStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FunctionStmtContext functionStmt()
        {
            FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
            EnterRule(_localctx, 74, RULE_functionStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 844;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 841; visibility();
                            State = 842; Match(WS);
                        }
                    }

                    State = 848;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 846; Match(STATIC);
                            State = 847; Match(WS);
                        }
                    }

                    State = 850; Match(FUNCTION);
                    State = 852;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 851; Match(WS);
                        }
                    }

                    State = 854; ambiguousIdentifier();
                    State = 856;
                    switch (Interpreter.AdaptivePredict(_input, 83, _ctx))
                    {
                        case 1:
                            {
                                State = 855; typeHint();
                            }
                            break;
                    }
                    State = 862;
                    switch (Interpreter.AdaptivePredict(_input, 85, _ctx))
                    {
                        case 1:
                            {
                                State = 859;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 858; Match(WS);
                                    }
                                }

                                State = 861; argList();
                            }
                            break;
                    }
                    State = 868;
                    switch (Interpreter.AdaptivePredict(_input, 87, _ctx))
                    {
                        case 1:
                            {
                                State = 865;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 864; Match(WS);
                                    }
                                }

                                State = 867; asTypeClause();
                            }
                            break;
                    }
                    State = 870; endOfStatement();
                    State = 872;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == WS || _la == IDENTIFIER)
                    {
                        {
                            State = 871; block();
                        }
                    }

                    State = 874; Match(END_FUNCTION);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public GetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_getStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GetStmtContext getStmt()
        {
            GetStmtContext _localctx = new GetStmtContext(_ctx, State);
            EnterRule(_localctx, 76, RULE_getStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 876; Match(GET);
                    State = 877; Match(WS);
                    State = 878; fileNumber();
                    State = 880;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 879; Match(WS);
                        }
                    }

                    State = 882; Match(T__1);
                    State = 884;
                    switch (Interpreter.AdaptivePredict(_input, 90, _ctx))
                    {
                        case 1:
                            {
                                State = 883; Match(WS);
                            }
                            break;
                    }
                    State = 887;
                    switch (Interpreter.AdaptivePredict(_input, 91, _ctx))
                    {
                        case 1:
                            {
                                State = 886; valueStmt(0);
                            }
                            break;
                    }
                    State = 890;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 889; Match(WS);
                        }
                    }

                    State = 892; Match(T__1);
                    State = 894;
                    switch (Interpreter.AdaptivePredict(_input, 93, _ctx))
                    {
                        case 1:
                            {
                                State = 893; Match(WS);
                            }
                            break;
                    }
                    State = 896; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GoSubStmtContext : ParserRuleContext
        {
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public GoSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_goSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGoSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGoSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GoSubStmtContext goSubStmt()
        {
            GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
            EnterRule(_localctx, 78, RULE_goSubStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 898; Match(GOSUB);
                    State = 899; Match(WS);
                    State = 900; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GoToStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public GoToStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_goToStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGoToStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGoToStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GoToStmtContext goToStmt()
        {
            GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
            EnterRule(_localctx, 80, RULE_goToStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 902; Match(GOTO);
                    State = 903; Match(WS);
                    State = 904; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfThenElseStmtContext : ParserRuleContext
        {
            public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifThenElseStmt; } }

            public IfThenElseStmtContext() { }
            public virtual void CopyFrom(IfThenElseStmtContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class BlockIfThenElseContext : IfThenElseStmtContext
        {
            public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i)
            {
                return GetRuleContext<IfElseIfBlockStmtContext>(i);
            }
            public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
            public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt()
            {
                return GetRuleContexts<IfElseIfBlockStmtContext>();
            }
            public IfBlockStmtContext ifBlockStmt()
            {
                return GetRuleContext<IfBlockStmtContext>(0);
            }
            public IfElseBlockStmtContext ifElseBlockStmt()
            {
                return GetRuleContext<IfElseBlockStmtContext>(0);
            }
            public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class InlineIfThenElseContext : IfThenElseStmtContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<BlockStmtContext> blockStmt()
            {
                return GetRuleContexts<BlockStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public BlockStmtContext blockStmt(int i)
            {
                return GetRuleContext<BlockStmtContext>(i);
            }
            public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfThenElseStmtContext ifThenElseStmt()
        {
            IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
            EnterRule(_localctx, 82, RULE_ifThenElseStmt);
            int _la;
            try
            {
                State = 931;
                switch (Interpreter.AdaptivePredict(_input, 97, _ctx))
                {
                    case 1:
                        _localctx = new InlineIfThenElseContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 906; Match(IF);
                            State = 907; Match(WS);
                            State = 908; ifConditionStmt();
                            State = 909; Match(WS);
                            State = 910; Match(THEN);
                            State = 911; Match(WS);
                            State = 912; blockStmt();
                            State = 917;
                            switch (Interpreter.AdaptivePredict(_input, 94, _ctx))
                            {
                                case 1:
                                    {
                                        State = 913; Match(WS);
                                        State = 914; Match(ELSE);
                                        State = 915; Match(WS);
                                        State = 916; blockStmt();
                                    }
                                    break;
                            }
                        }
                        break;

                    case 2:
                        _localctx = new BlockIfThenElseContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 919; ifBlockStmt();
                            State = 923;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            while (_la == ELSEIF)
                            {
                                {
                                    {
                                        State = 920; ifElseIfBlockStmt();
                                    }
                                }
                                State = 925;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            }
                            State = 927;
                            _la = _input.La(1);
                            if (_la == ELSE)
                            {
                                {
                                    State = 926; ifElseBlockStmt();
                                }
                            }

                            State = 929; Match(END_IF);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfBlockStmtContext ifBlockStmt()
        {
            IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 84, RULE_ifBlockStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 933; Match(IF);
                    State = 934; Match(WS);
                    State = 935; ifConditionStmt();
                    State = 936; Match(WS);
                    State = 937; Match(THEN);
                    State = 938; endOfStatement();
                    State = 940;
                    switch (Interpreter.AdaptivePredict(_input, 98, _ctx))
                    {
                        case 1:
                            {
                                State = 939; block();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfConditionStmtContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifConditionStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfConditionStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfConditionStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfConditionStmtContext ifConditionStmt()
        {
            IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
            EnterRule(_localctx, 86, RULE_ifConditionStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 942; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfElseIfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfElseIfBlockStmtContext ifElseIfBlockStmt()
        {
            IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 88, RULE_ifElseIfBlockStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 944; Match(ELSEIF);
                    State = 945; Match(WS);
                    State = 946; ifConditionStmt();
                    State = 947; Match(WS);
                    State = 948; Match(THEN);
                    State = 949; endOfStatement();
                    State = 951;
                    switch (Interpreter.AdaptivePredict(_input, 99, _ctx))
                    {
                        case 1:
                            {
                                State = 950; block();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfElseBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfElseBlockStmtContext ifElseBlockStmt()
        {
            IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 90, RULE_ifElseBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 953; Match(ELSE);
                    State = 954; endOfStatement();
                    State = 956;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == WS || _la == IDENTIFIER)
                    {
                        {
                            State = 955; block();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplementsStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
            public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implementsStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplementsStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplementsStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplementsStmtContext implementsStmt()
        {
            ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
            EnterRule(_localctx, 92, RULE_implementsStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 958; Match(IMPLEMENTS);
                    State = 959; Match(WS);
                    State = 960; ambiguousIdentifier();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class InputStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public InputStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_inputStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterInputStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitInputStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public InputStmtContext inputStmt()
        {
            InputStmtContext _localctx = new InputStmtContext(_ctx, State);
            EnterRule(_localctx, 94, RULE_inputStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 962; Match(INPUT);
                    State = 963; Match(WS);
                    State = 964; fileNumber();
                    State = 973;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 966;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 965; Match(WS);
                                            }
                                        }

                                        State = 968; Match(T__1);
                                        State = 970;
                                        switch (Interpreter.AdaptivePredict(_input, 102, _ctx))
                                        {
                                            case 1:
                                                {
                                                    State = 969; Match(WS);
                                                }
                                                break;
                                        }
                                        State = 972; valueStmt(0);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 975;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 103, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class KillStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
            public KillStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_killStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterKillStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitKillStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public KillStmtContext killStmt()
        {
            KillStmtContext _localctx = new KillStmtContext(_ctx, State);
            EnterRule(_localctx, 96, RULE_killStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 977; Match(KILL);
                    State = 978; Match(WS);
                    State = 979; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
            public LetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_letStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LetStmtContext letStmt()
        {
            LetStmtContext _localctx = new LetStmtContext(_ctx, State);
            EnterRule(_localctx, 98, RULE_letStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 983;
                    switch (Interpreter.AdaptivePredict(_input, 104, _ctx))
                    {
                        case 1:
                            {
                                State = 981; Match(LET);
                                State = 982; Match(WS);
                            }
                            break;
                    }
                    State = 985; implicitCallStmt_InStmt();
                    State = 987;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 986; Match(WS);
                        }
                    }

                    State = 989; Match(EQ);
                    State = 991;
                    switch (Interpreter.AdaptivePredict(_input, 106, _ctx))
                    {
                        case 1:
                            {
                                State = 990; Match(WS);
                            }
                            break;
                    }
                    State = 993; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LineInputStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
            public LineInputStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lineInputStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLineInputStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLineInputStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LineInputStmtContext lineInputStmt()
        {
            LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
            EnterRule(_localctx, 100, RULE_lineInputStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 995; Match(LINE_INPUT);
                    State = 996; Match(WS);
                    State = 997; fileNumber();
                    State = 999;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 998; Match(WS);
                        }
                    }

                    State = 1001; Match(T__1);
                    State = 1003;
                    switch (Interpreter.AdaptivePredict(_input, 108, _ctx))
                    {
                        case 1:
                            {
                                State = 1002; Match(WS);
                            }
                            break;
                    }
                    State = 1005; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LoadStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
            public LoadStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_loadStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLoadStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLoadStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LoadStmtContext loadStmt()
        {
            LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
            EnterRule(_localctx, 102, RULE_loadStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1007; Match(LOAD);
                    State = 1008; Match(WS);
                    State = 1009; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public LockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LockStmtContext lockStmt()
        {
            LockStmtContext _localctx = new LockStmtContext(_ctx, State);
            EnterRule(_localctx, 104, RULE_lockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1011; Match(LOCK);
                    State = 1012; Match(WS);
                    State = 1013; valueStmt(0);
                    State = 1028;
                    switch (Interpreter.AdaptivePredict(_input, 112, _ctx))
                    {
                        case 1:
                            {
                                State = 1015;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1014; Match(WS);
                                    }
                                }

                                State = 1017; Match(T__1);
                                State = 1019;
                                switch (Interpreter.AdaptivePredict(_input, 110, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1018; Match(WS);
                                        }
                                        break;
                                }
                                State = 1021; valueStmt(0);
                                State = 1026;
                                switch (Interpreter.AdaptivePredict(_input, 111, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1022; Match(WS);
                                            State = 1023; Match(TO);
                                            State = 1024; Match(WS);
                                            State = 1025; valueStmt(0);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LsetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public LsetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lsetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLsetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLsetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LsetStmtContext lsetStmt()
        {
            LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
            EnterRule(_localctx, 106, RULE_lsetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1030; Match(LSET);
                    State = 1031; Match(WS);
                    State = 1032; implicitCallStmt_InStmt();
                    State = 1034;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1033; Match(WS);
                        }
                    }

                    State = 1036; Match(EQ);
                    State = 1038;
                    switch (Interpreter.AdaptivePredict(_input, 114, _ctx))
                    {
                        case 1:
                            {
                                State = 1037; Match(WS);
                            }
                            break;
                    }
                    State = 1040; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroConstStmtContext : ParserRuleContext
        {
            public ITerminalNode MACRO_CONST() { return GetToken(VBAParser.MACRO_CONST, 0); }
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public MacroConstStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroConstStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroConstStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroConstStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroConstStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroConstStmtContext macroConstStmt()
        {
            MacroConstStmtContext _localctx = new MacroConstStmtContext(_ctx, State);
            EnterRule(_localctx, 108, RULE_macroConstStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1042; Match(MACRO_CONST);
                    State = 1044;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1043; Match(WS);
                        }
                    }

                    State = 1046; ambiguousIdentifier();
                    State = 1048;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1047; Match(WS);
                        }
                    }

                    State = 1050; Match(EQ);
                    State = 1052;
                    switch (Interpreter.AdaptivePredict(_input, 117, _ctx))
                    {
                        case 1:
                            {
                                State = 1051; Match(WS);
                            }
                            break;
                    }
                    State = 1054; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroIfThenElseStmtContext : ParserRuleContext
        {
            public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt()
            {
                return GetRuleContexts<MacroElseIfBlockStmtContext>();
            }
            public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
            public MacroIfBlockStmtContext macroIfBlockStmt()
            {
                return GetRuleContext<MacroIfBlockStmtContext>(0);
            }
            public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i)
            {
                return GetRuleContext<MacroElseIfBlockStmtContext>(i);
            }
            public MacroElseBlockStmtContext macroElseBlockStmt()
            {
                return GetRuleContext<MacroElseBlockStmtContext>(0);
            }
            public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroIfThenElseStmtContext macroIfThenElseStmt()
        {
            MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
            EnterRule(_localctx, 110, RULE_macroIfThenElseStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1056; macroIfBlockStmt();
                    State = 1060;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == MACRO_ELSEIF)
                    {
                        {
                            {
                                State = 1057; macroElseIfBlockStmt();
                            }
                        }
                        State = 1062;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1064;
                    _la = _input.La(1);
                    if (_la == MACRO_ELSE)
                    {
                        {
                            State = 1063; macroElseBlockStmt();
                        }
                    }

                    State = 1066; Match(MACRO_END_IF);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroIfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public ModuleDeclarationsContext moduleDeclarations(int i)
            {
                return GetRuleContext<ModuleDeclarationsContext>(i);
            }
            public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations()
            {
                return GetRuleContexts<ModuleDeclarationsContext>();
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroIfBlockStmtContext macroIfBlockStmt()
        {
            MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 112, RULE_macroIfBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1068; Match(MACRO_IF);
                    State = 1070;
                    switch (Interpreter.AdaptivePredict(_input, 120, _ctx))
                    {
                        case 1:
                            {
                                State = 1069; Match(WS);
                            }
                            break;
                    }
                    State = 1072; ifConditionStmt();
                    State = 1073; Match(WS);
                    State = 1074; Match(THEN);
                    State = 1075; endOfStatement();
                    State = 1081;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (COMMENT - 214)) | (1L << (WS - 214)) | (1L << (IDENTIFIER - 214)))) != 0))
                    {
                        {
                            State = 1079;
                            switch (Interpreter.AdaptivePredict(_input, 121, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1076; moduleDeclarations();
                                    }
                                    break;

                                case 2:
                                    {
                                        State = 1077; moduleBody();
                                    }
                                    break;

                                case 3:
                                    {
                                        State = 1078; block();
                                    }
                                    break;
                            }
                        }
                        State = 1083;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroElseIfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public ModuleDeclarationsContext moduleDeclarations(int i)
            {
                return GetRuleContext<ModuleDeclarationsContext>(i);
            }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations()
            {
                return GetRuleContexts<ModuleDeclarationsContext>();
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroElseIfBlockStmtContext macroElseIfBlockStmt()
        {
            MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 114, RULE_macroElseIfBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1084; Match(MACRO_ELSEIF);
                    State = 1086;
                    switch (Interpreter.AdaptivePredict(_input, 123, _ctx))
                    {
                        case 1:
                            {
                                State = 1085; Match(WS);
                            }
                            break;
                    }
                    State = 1088; ifConditionStmt();
                    State = 1089; Match(WS);
                    State = 1090; Match(THEN);
                    State = 1091; endOfStatement();
                    State = 1097;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (COMMENT - 214)) | (1L << (WS - 214)) | (1L << (IDENTIFIER - 214)))) != 0))
                    {
                        {
                            State = 1095;
                            switch (Interpreter.AdaptivePredict(_input, 124, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1092; moduleDeclarations();
                                    }
                                    break;

                                case 2:
                                    {
                                        State = 1093; moduleBody();
                                    }
                                    break;

                                case 3:
                                    {
                                        State = 1094; block();
                                    }
                                    break;
                            }
                        }
                        State = 1099;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroElseBlockStmtContext : ParserRuleContext
        {
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
            public ModuleDeclarationsContext moduleDeclarations(int i)
            {
                return GetRuleContext<ModuleDeclarationsContext>(i);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations()
            {
                return GetRuleContexts<ModuleDeclarationsContext>();
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroElseBlockStmtContext macroElseBlockStmt()
        {
            MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 116, RULE_macroElseBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1100; Match(MACRO_ELSE);
                    State = 1101; endOfStatement();
                    State = 1107;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (COMMENT - 214)) | (1L << (WS - 214)) | (1L << (IDENTIFIER - 214)))) != 0))
                    {
                        {
                            State = 1105;
                            switch (Interpreter.AdaptivePredict(_input, 126, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1102; moduleDeclarations();
                                    }
                                    break;

                                case 2:
                                    {
                                        State = 1103; moduleBody();
                                    }
                                    break;

                                case 3:
                                    {
                                        State = 1104; block();
                                    }
                                    break;
                            }
                        }
                        State = 1109;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MidStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
            public MidStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_midStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMidStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMidStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MidStmtContext midStmt()
        {
            MidStmtContext _localctx = new MidStmtContext(_ctx, State);
            EnterRule(_localctx, 118, RULE_midStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1110; Match(MID);
                    State = 1112;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1111; Match(WS);
                        }
                    }

                    State = 1114; Match(LPAREN);
                    State = 1116;
                    switch (Interpreter.AdaptivePredict(_input, 129, _ctx))
                    {
                        case 1:
                            {
                                State = 1115; Match(WS);
                            }
                            break;
                    }
                    State = 1118; argsCall();
                    State = 1120;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1119; Match(WS);
                        }
                    }

                    State = 1122; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MkdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
            public MkdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_mkdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMkdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMkdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MkdirStmtContext mkdirStmt()
        {
            MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
            EnterRule(_localctx, 120, RULE_mkdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1124; Match(MKDIR);
                    State = 1125; Match(WS);
                    State = 1126; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class NameStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public NameStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_nameStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterNameStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitNameStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public NameStmtContext nameStmt()
        {
            NameStmtContext _localctx = new NameStmtContext(_ctx, State);
            EnterRule(_localctx, 122, RULE_nameStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1128; Match(NAME);
                    State = 1129; Match(WS);
                    State = 1130; valueStmt(0);
                    State = 1131; Match(WS);
                    State = 1132; Match(AS);
                    State = 1133; Match(WS);
                    State = 1134; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnErrorStmtContext : ParserRuleContext
        {
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
            public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onErrorStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnErrorStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnErrorStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnErrorStmtContext onErrorStmt()
        {
            OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
            EnterRule(_localctx, 124, RULE_onErrorStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1136;
                    _la = _input.La(1);
                    if (!(_la == ON_ERROR || _la == ON_LOCAL_ERROR))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 1137; Match(WS);
                    State = 1144;
                    switch (_input.La(1))
                    {
                        case GOTO:
                            {
                                State = 1138; Match(GOTO);
                                State = 1139; Match(WS);
                                State = 1140; valueStmt(0);
                            }
                            break;
                        case RESUME:
                            {
                                State = 1141; Match(RESUME);
                                State = 1142; Match(WS);
                                State = 1143; Match(NEXT);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnGoToStmtContext : ParserRuleContext
        {
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onGoToStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnGoToStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnGoToStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnGoToStmtContext onGoToStmt()
        {
            OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
            EnterRule(_localctx, 126, RULE_onGoToStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1146; Match(ON);
                    State = 1147; Match(WS);
                    State = 1148; valueStmt(0);
                    State = 1149; Match(WS);
                    State = 1150; Match(GOTO);
                    State = 1151; Match(WS);
                    State = 1152; valueStmt(0);
                    State = 1163;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 134, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1154;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1153; Match(WS);
                                        }
                                    }

                                    State = 1156; Match(T__1);
                                    State = 1158;
                                    switch (Interpreter.AdaptivePredict(_input, 133, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 1157; Match(WS);
                                            }
                                            break;
                                    }
                                    State = 1160; valueStmt(0);
                                }
                            }
                        }
                        State = 1165;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 134, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnGoSubStmtContext : ParserRuleContext
        {
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onGoSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnGoSubStmtContext onGoSubStmt()
        {
            OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
            EnterRule(_localctx, 128, RULE_onGoSubStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1166; Match(ON);
                    State = 1167; Match(WS);
                    State = 1168; valueStmt(0);
                    State = 1169; Match(WS);
                    State = 1170; Match(GOSUB);
                    State = 1171; Match(WS);
                    State = 1172; valueStmt(0);
                    State = 1183;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 137, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1174;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1173; Match(WS);
                                        }
                                    }

                                    State = 1176; Match(T__1);
                                    State = 1178;
                                    switch (Interpreter.AdaptivePredict(_input, 136, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 1177; Match(WS);
                                            }
                                            break;
                                    }
                                    State = 1180; valueStmt(0);
                                }
                            }
                        }
                        State = 1185;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 137, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OpenStmtContext : ParserRuleContext
        {
            public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
            public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
            public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
            public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OpenStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_openStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOpenStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOpenStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OpenStmtContext openStmt()
        {
            OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
            EnterRule(_localctx, 130, RULE_openStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1186; Match(OPEN);
                    State = 1187; Match(WS);
                    State = 1188; valueStmt(0);
                    State = 1189; Match(WS);
                    State = 1190; Match(FOR);
                    State = 1191; Match(WS);
                    State = 1192;
                    _la = _input.La(1);
                    if (!(_la == APPEND || _la == BINARY || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (INPUT - 86)) | (1L << (OUTPUT - 86)) | (1L << (RANDOM - 86)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 1197;
                    switch (Interpreter.AdaptivePredict(_input, 138, _ctx))
                    {
                        case 1:
                            {
                                State = 1193; Match(WS);
                                State = 1194; Match(ACCESS);
                                State = 1195; Match(WS);
                                State = 1196;
                                _la = _input.La(1);
                                if (!(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (READ - 142)) | (1L << (READ_WRITE - 142)) | (1L << (WRITE - 142)))) != 0)))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                            }
                            break;
                    }
                    State = 1201;
                    switch (Interpreter.AdaptivePredict(_input, 139, _ctx))
                    {
                        case 1:
                            {
                                State = 1199; Match(WS);
                                State = 1200;
                                _la = _input.La(1);
                                if (!(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (LOCK_READ - 99)) | (1L << (LOCK_WRITE - 99)) | (1L << (LOCK_READ_WRITE - 99)) | (1L << (SHARED - 99)))) != 0)))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                            }
                            break;
                    }
                    State = 1203; Match(WS);
                    State = 1204; Match(AS);
                    State = 1205; Match(WS);
                    State = 1206; fileNumber();
                    State = 1217;
                    switch (Interpreter.AdaptivePredict(_input, 142, _ctx))
                    {
                        case 1:
                            {
                                State = 1207; Match(WS);
                                State = 1208; Match(LEN);
                                State = 1210;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1209; Match(WS);
                                    }
                                }

                                State = 1212; Match(EQ);
                                State = 1214;
                                switch (Interpreter.AdaptivePredict(_input, 141, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1213; Match(WS);
                                        }
                                        break;
                                }
                                State = 1216; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OutputListContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression()
            {
                return GetRuleContexts<OutputList_ExpressionContext>();
            }
            public OutputList_ExpressionContext outputList_Expression(int i)
            {
                return GetRuleContext<OutputList_ExpressionContext>(i);
            }
            public OutputListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_outputList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOutputList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOutputList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OutputListContext outputList()
        {
            OutputListContext _localctx = new OutputListContext(_ctx, State);
            EnterRule(_localctx, 132, RULE_outputList);
            int _la;
            try
            {
                int _alt;
                State = 1252;
                switch (Interpreter.AdaptivePredict(_input, 152, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1219; outputList_Expression();
                            State = 1232;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 146, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 1221;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1220; Match(WS);
                                                }
                                            }

                                            State = 1223;
                                            _la = _input.La(1);
                                            if (!(_la == T__2 || _la == T__1))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1225;
                                            switch (Interpreter.AdaptivePredict(_input, 144, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1224; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1228;
                                            switch (Interpreter.AdaptivePredict(_input, 145, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1227; outputList_Expression();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                }
                                State = 1234;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 146, _ctx);
                            }
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1236;
                            switch (Interpreter.AdaptivePredict(_input, 147, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1235; outputList_Expression();
                                    }
                                    break;
                            }
                            State = 1248;
                            _errHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            {
                                                State = 1239;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 1238; Match(WS);
                                                    }
                                                }

                                                State = 1241;
                                                _la = _input.La(1);
                                                if (!(_la == T__2 || _la == T__1))
                                                {
                                                    _errHandler.RecoverInline(this);
                                                }
                                                Consume();
                                                State = 1243;
                                                switch (Interpreter.AdaptivePredict(_input, 149, _ctx))
                                                {
                                                    case 1:
                                                        {
                                                            State = 1242; Match(WS);
                                                        }
                                                        break;
                                                }
                                                State = 1246;
                                                switch (Interpreter.AdaptivePredict(_input, 150, _ctx))
                                                {
                                                    case 1:
                                                        {
                                                            State = 1245; outputList_Expression();
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 1250;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 151, _ctx);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OutputList_ExpressionContext : ParserRuleContext
        {
            public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_outputList_Expression; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOutputList_Expression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOutputList_Expression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OutputList_ExpressionContext outputList_Expression()
        {
            OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
            EnterRule(_localctx, 134, RULE_outputList_Expression);
            int _la;
            try
            {
                State = 1271;
                switch (Interpreter.AdaptivePredict(_input, 157, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1254; valueStmt(0);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1255;
                            _la = _input.La(1);
                            if (!(_la == SPC || _la == TAB))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 1269;
                            switch (Interpreter.AdaptivePredict(_input, 156, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1257;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1256; Match(WS);
                                            }
                                        }

                                        State = 1259; Match(LPAREN);
                                        State = 1261;
                                        switch (Interpreter.AdaptivePredict(_input, 154, _ctx))
                                        {
                                            case 1:
                                                {
                                                    State = 1260; Match(WS);
                                                }
                                                break;
                                        }
                                        State = 1263; argsCall();
                                        State = 1265;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1264; Match(WS);
                                            }
                                        }

                                        State = 1267; Match(RPAREN);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PrintStmtContext : ParserRuleContext
        {
            public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public OutputListContext outputList()
            {
                return GetRuleContext<OutputListContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public PrintStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_printStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPrintStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPrintStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PrintStmtContext printStmt()
        {
            PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
            EnterRule(_localctx, 136, RULE_printStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1273; Match(PRINT);
                    State = 1274; Match(WS);
                    State = 1275; fileNumber();
                    State = 1277;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1276; Match(WS);
                        }
                    }

                    State = 1279; Match(T__1);
                    State = 1284;
                    switch (Interpreter.AdaptivePredict(_input, 160, _ctx))
                    {
                        case 1:
                            {
                                State = 1281;
                                switch (Interpreter.AdaptivePredict(_input, 159, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1280; Match(WS);
                                        }
                                        break;
                                }
                                State = 1283; outputList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyGetStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyGetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyGetStmtContext propertyGetStmt()
        {
            PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
            EnterRule(_localctx, 138, RULE_propertyGetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1289;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1286; visibility();
                            State = 1287; Match(WS);
                        }
                    }

                    State = 1293;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1291; Match(STATIC);
                            State = 1292; Match(WS);
                        }
                    }

                    State = 1295; Match(PROPERTY_GET);
                    State = 1296; Match(WS);
                    State = 1297; ambiguousIdentifier();
                    State = 1299;
                    switch (Interpreter.AdaptivePredict(_input, 163, _ctx))
                    {
                        case 1:
                            {
                                State = 1298; typeHint();
                            }
                            break;
                    }
                    State = 1305;
                    switch (Interpreter.AdaptivePredict(_input, 165, _ctx))
                    {
                        case 1:
                            {
                                State = 1302;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1301; Match(WS);
                                    }
                                }

                                State = 1304; argList();
                            }
                            break;
                    }
                    State = 1309;
                    switch (Interpreter.AdaptivePredict(_input, 166, _ctx))
                    {
                        case 1:
                            {
                                State = 1307; Match(WS);
                                State = 1308; asTypeClause();
                            }
                            break;
                    }
                    State = 1311; endOfStatement();
                    State = 1313;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == WS || _la == IDENTIFIER)
                    {
                        {
                            State = 1312; block();
                        }
                    }

                    State = 1315; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertySetStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertySetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertySetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertySetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertySetStmtContext propertySetStmt()
        {
            PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
            EnterRule(_localctx, 140, RULE_propertySetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1320;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1317; visibility();
                            State = 1318; Match(WS);
                        }
                    }

                    State = 1324;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1322; Match(STATIC);
                            State = 1323; Match(WS);
                        }
                    }

                    State = 1326; Match(PROPERTY_SET);
                    State = 1327; Match(WS);
                    State = 1328; ambiguousIdentifier();
                    State = 1333;
                    switch (Interpreter.AdaptivePredict(_input, 171, _ctx))
                    {
                        case 1:
                            {
                                State = 1330;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1329; Match(WS);
                                    }
                                }

                                State = 1332; argList();
                            }
                            break;
                    }
                    State = 1335; endOfStatement();
                    State = 1337;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == WS || _la == IDENTIFIER)
                    {
                        {
                            State = 1336; block();
                        }
                    }

                    State = 1339; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyLetStmtContext : ParserRuleContext
        {
            public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyLetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyLetStmtContext propertyLetStmt()
        {
            PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
            EnterRule(_localctx, 142, RULE_propertyLetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1344;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1341; visibility();
                            State = 1342; Match(WS);
                        }
                    }

                    State = 1348;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1346; Match(STATIC);
                            State = 1347; Match(WS);
                        }
                    }

                    State = 1350; Match(PROPERTY_LET);
                    State = 1351; Match(WS);
                    State = 1352; ambiguousIdentifier();
                    State = 1357;
                    switch (Interpreter.AdaptivePredict(_input, 176, _ctx))
                    {
                        case 1:
                            {
                                State = 1354;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1353; Match(WS);
                                    }
                                }

                                State = 1356; argList();
                            }
                            break;
                    }
                    State = 1359; endOfStatement();
                    State = 1361;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == WS || _la == IDENTIFIER)
                    {
                        {
                            State = 1360; block();
                        }
                    }

                    State = 1363; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PutStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public PutStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_putStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPutStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPutStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PutStmtContext putStmt()
        {
            PutStmtContext _localctx = new PutStmtContext(_ctx, State);
            EnterRule(_localctx, 144, RULE_putStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1365; Match(PUT);
                    State = 1366; Match(WS);
                    State = 1367; fileNumber();
                    State = 1369;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1368; Match(WS);
                        }
                    }

                    State = 1371; Match(T__1);
                    State = 1373;
                    switch (Interpreter.AdaptivePredict(_input, 179, _ctx))
                    {
                        case 1:
                            {
                                State = 1372; Match(WS);
                            }
                            break;
                    }
                    State = 1376;
                    switch (Interpreter.AdaptivePredict(_input, 180, _ctx))
                    {
                        case 1:
                            {
                                State = 1375; valueStmt(0);
                            }
                            break;
                    }
                    State = 1379;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1378; Match(WS);
                        }
                    }

                    State = 1381; Match(T__1);
                    State = 1383;
                    switch (Interpreter.AdaptivePredict(_input, 182, _ctx))
                    {
                        case 1:
                            {
                                State = 1382; Match(WS);
                            }
                            break;
                    }
                    State = 1385; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RaiseEventStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_raiseEventStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RaiseEventStmtContext raiseEventStmt()
        {
            RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
            EnterRule(_localctx, 146, RULE_raiseEventStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1387; Match(RAISEEVENT);
                    State = 1388; Match(WS);
                    State = 1389; ambiguousIdentifier();
                    State = 1404;
                    switch (Interpreter.AdaptivePredict(_input, 187, _ctx))
                    {
                        case 1:
                            {
                                State = 1391;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1390; Match(WS);
                                    }
                                }

                                State = 1393; Match(LPAREN);
                                State = 1395;
                                switch (Interpreter.AdaptivePredict(_input, 184, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1394; Match(WS);
                                        }
                                        break;
                                }
                                State = 1401;
                                switch (Interpreter.AdaptivePredict(_input, 186, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1397; argsCall();
                                            State = 1399;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1398; Match(WS);
                                                }
                                            }

                                        }
                                        break;
                                }
                                State = 1403; Match(RPAREN);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RandomizeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
            public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_randomizeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRandomizeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRandomizeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RandomizeStmtContext randomizeStmt()
        {
            RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
            EnterRule(_localctx, 148, RULE_randomizeStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1406; Match(RANDOMIZE);
                    State = 1409;
                    switch (Interpreter.AdaptivePredict(_input, 188, _ctx))
                    {
                        case 1:
                            {
                                State = 1407; Match(WS);
                                State = 1408; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RedimStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<RedimSubStmtContext> redimSubStmt()
            {
                return GetRuleContexts<RedimSubStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
            public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
            public RedimSubStmtContext redimSubStmt(int i)
            {
                return GetRuleContext<RedimSubStmtContext>(i);
            }
            public RedimStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_redimStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRedimStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRedimStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RedimStmtContext redimStmt()
        {
            RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
            EnterRule(_localctx, 150, RULE_redimStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1411; Match(REDIM);
                    State = 1412; Match(WS);
                    State = 1415;
                    switch (Interpreter.AdaptivePredict(_input, 189, _ctx))
                    {
                        case 1:
                            {
                                State = 1413; Match(PRESERVE);
                                State = 1414; Match(WS);
                            }
                            break;
                    }
                    State = 1417; redimSubStmt();
                    State = 1428;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 192, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1419;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1418; Match(WS);
                                        }
                                    }

                                    State = 1421; Match(T__1);
                                    State = 1423;
                                    switch (Interpreter.AdaptivePredict(_input, 191, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 1422; Match(WS);
                                            }
                                            break;
                                    }
                                    State = 1425; redimSubStmt();
                                }
                            }
                        }
                        State = 1430;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 192, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RedimSubStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_redimSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRedimSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRedimSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RedimSubStmtContext redimSubStmt()
        {
            RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
            EnterRule(_localctx, 152, RULE_redimSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1431; implicitCallStmt_InStmt();
                    State = 1433;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1432; Match(WS);
                        }
                    }

                    State = 1435; Match(LPAREN);
                    State = 1437;
                    switch (Interpreter.AdaptivePredict(_input, 194, _ctx))
                    {
                        case 1:
                            {
                                State = 1436; Match(WS);
                            }
                            break;
                    }
                    State = 1439; subscripts();
                    State = 1441;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1440; Match(WS);
                        }
                    }

                    State = 1443; Match(RPAREN);
                    State = 1446;
                    switch (Interpreter.AdaptivePredict(_input, 196, _ctx))
                    {
                        case 1:
                            {
                                State = 1444; Match(WS);
                                State = 1445; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ResetStmtContext : ParserRuleContext
        {
            public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
            public ResetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_resetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterResetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitResetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ResetStmtContext resetStmt()
        {
            ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
            EnterRule(_localctx, 154, RULE_resetStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1448; Match(RESET);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ResumeStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ResumeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_resumeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterResumeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitResumeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ResumeStmtContext resumeStmt()
        {
            ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
            EnterRule(_localctx, 156, RULE_resumeStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1450; Match(RESUME);
                    State = 1456;
                    switch (Interpreter.AdaptivePredict(_input, 198, _ctx))
                    {
                        case 1:
                            {
                                State = 1451; Match(WS);
                                State = 1454;
                                switch (Interpreter.AdaptivePredict(_input, 197, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1452; Match(NEXT);
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 1453; ambiguousIdentifier();
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ReturnStmtContext : ParserRuleContext
        {
            public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
            public ReturnStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_returnStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterReturnStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitReturnStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ReturnStmtContext returnStmt()
        {
            ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
            EnterRule(_localctx, 158, RULE_returnStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1458; Match(RETURN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RmdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
            public RmdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rmdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRmdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRmdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RmdirStmtContext rmdirStmt()
        {
            RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
            EnterRule(_localctx, 160, RULE_rmdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1460; Match(RMDIR);
                    State = 1461; Match(WS);
                    State = 1462; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RsetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public RsetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rsetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRsetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRsetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RsetStmtContext rsetStmt()
        {
            RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
            EnterRule(_localctx, 162, RULE_rsetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1464; Match(RSET);
                    State = 1465; Match(WS);
                    State = 1466; implicitCallStmt_InStmt();
                    State = 1468;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1467; Match(WS);
                        }
                    }

                    State = 1470; Match(EQ);
                    State = 1472;
                    switch (Interpreter.AdaptivePredict(_input, 200, _ctx))
                    {
                        case 1:
                            {
                                State = 1471; Match(WS);
                            }
                            break;
                    }
                    State = 1474; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SavepictureStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_savepictureStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSavepictureStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSavepictureStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SavepictureStmtContext savepictureStmt()
        {
            SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
            EnterRule(_localctx, 164, RULE_savepictureStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1476; Match(SAVEPICTURE);
                    State = 1477; Match(WS);
                    State = 1478; valueStmt(0);
                    State = 1480;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1479; Match(WS);
                        }
                    }

                    State = 1482; Match(T__1);
                    State = 1484;
                    switch (Interpreter.AdaptivePredict(_input, 202, _ctx))
                    {
                        case 1:
                            {
                                State = 1483; Match(WS);
                            }
                            break;
                    }
                    State = 1486; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SaveSettingStmtContext : ParserRuleContext
        {
            public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_saveSettingStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SaveSettingStmtContext saveSettingStmt()
        {
            SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
            EnterRule(_localctx, 166, RULE_saveSettingStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1488; Match(SAVESETTING);
                    State = 1489; Match(WS);
                    State = 1490; valueStmt(0);
                    State = 1492;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1491; Match(WS);
                        }
                    }

                    State = 1494; Match(T__1);
                    State = 1496;
                    switch (Interpreter.AdaptivePredict(_input, 204, _ctx))
                    {
                        case 1:
                            {
                                State = 1495; Match(WS);
                            }
                            break;
                    }
                    State = 1498; valueStmt(0);
                    State = 1500;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1499; Match(WS);
                        }
                    }

                    State = 1502; Match(T__1);
                    State = 1504;
                    switch (Interpreter.AdaptivePredict(_input, 206, _ctx))
                    {
                        case 1:
                            {
                                State = 1503; Match(WS);
                            }
                            break;
                    }
                    State = 1506; valueStmt(0);
                    State = 1508;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1507; Match(WS);
                        }
                    }

                    State = 1510; Match(T__1);
                    State = 1512;
                    switch (Interpreter.AdaptivePredict(_input, 208, _ctx))
                    {
                        case 1:
                            {
                                State = 1511; Match(WS);
                            }
                            break;
                    }
                    State = 1514; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SeekStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
            public SeekStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_seekStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSeekStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSeekStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SeekStmtContext seekStmt()
        {
            SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
            EnterRule(_localctx, 168, RULE_seekStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1516; Match(SEEK);
                    State = 1517; Match(WS);
                    State = 1518; fileNumber();
                    State = 1520;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1519; Match(WS);
                        }
                    }

                    State = 1522; Match(T__1);
                    State = 1524;
                    switch (Interpreter.AdaptivePredict(_input, 210, _ctx))
                    {
                        case 1:
                            {
                                State = 1523; Match(WS);
                            }
                            break;
                    }
                    State = 1526; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SelectCaseStmtContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public SC_CaseContext sC_Case(int i)
            {
                return GetRuleContext<SC_CaseContext>(i);
            }
            public IReadOnlyList<SC_CaseContext> sC_Case()
            {
                return GetRuleContexts<SC_CaseContext>();
            }
            public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_selectCaseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SelectCaseStmtContext selectCaseStmt()
        {
            SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
            EnterRule(_localctx, 170, RULE_selectCaseStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1528; Match(SELECT);
                    State = 1529; Match(WS);
                    State = 1530; Match(CASE);
                    State = 1531; Match(WS);
                    State = 1532; valueStmt(0);
                    State = 1533; endOfStatement();
                    State = 1537;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == CASE)
                    {
                        {
                            {
                                State = 1534; sC_Case();
                            }
                        }
                        State = 1539;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1540; Match(END_SELECT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_SelectionContext : ParserRuleContext
        {
            public SC_SelectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Selection; } }

            public SC_SelectionContext() { }
            public virtual void CopyFrom(SC_SelectionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class CaseCondValueContext : SC_SelectionContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondValue(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondValue(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondToContext : SC_SelectionContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondTo(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondTo(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondIsContext : SC_SelectionContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ComparisonOperatorContext comparisonOperator()
            {
                return GetRuleContext<ComparisonOperatorContext>(0);
            }
            public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondIs(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondIs(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_SelectionContext sC_Selection()
        {
            SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
            EnterRule(_localctx, 172, RULE_sC_Selection);
            int _la;
            try
            {
                State = 1559;
                switch (Interpreter.AdaptivePredict(_input, 214, _ctx))
                {
                    case 1:
                        _localctx = new CaseCondIsContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1542; Match(IS);
                            State = 1544;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1543; Match(WS);
                                }
                            }

                            State = 1546; comparisonOperator();
                            State = 1548;
                            switch (Interpreter.AdaptivePredict(_input, 213, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1547; Match(WS);
                                    }
                                    break;
                            }
                            State = 1550; valueStmt(0);
                        }
                        break;

                    case 2:
                        _localctx = new CaseCondToContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1552; valueStmt(0);
                            State = 1553; Match(WS);
                            State = 1554; Match(TO);
                            State = 1555; Match(WS);
                            State = 1556; valueStmt(0);
                        }
                        break;

                    case 3:
                        _localctx = new CaseCondValueContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 1558; valueStmt(0);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_CaseContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public SC_CondContext sC_Cond()
            {
                return GetRuleContext<SC_CondContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public SC_CaseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Case; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSC_Case(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSC_Case(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_CaseContext sC_Case()
        {
            SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
            EnterRule(_localctx, 174, RULE_sC_Case);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1561; Match(CASE);
                    State = 1562; Match(WS);
                    State = 1563; sC_Cond();
                    State = 1564; endOfStatement();
                    State = 1566;
                    switch (Interpreter.AdaptivePredict(_input, 215, _ctx))
                    {
                        case 1:
                            {
                                State = 1565; block();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_CondContext : ParserRuleContext
        {
            public SC_CondContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Cond; } }

            public SC_CondContext() { }
            public virtual void CopyFrom(SC_CondContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class CaseCondSelectionContext : SC_CondContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<SC_SelectionContext> sC_Selection()
            {
                return GetRuleContexts<SC_SelectionContext>();
            }
            public SC_SelectionContext sC_Selection(int i)
            {
                return GetRuleContext<SC_SelectionContext>(i);
            }
            public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondSelection(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondSelection(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondElseContext : SC_CondContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_CondContext sC_Cond()
        {
            SC_CondContext _localctx = new SC_CondContext(_ctx, State);
            EnterRule(_localctx, 176, RULE_sC_Cond);
            int _la;
            try
            {
                int _alt;
                State = 1583;
                switch (Interpreter.AdaptivePredict(_input, 219, _ctx))
                {
                    case 1:
                        _localctx = new CaseCondElseContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1568; Match(ELSE);
                        }
                        break;

                    case 2:
                        _localctx = new CaseCondSelectionContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1569; sC_Selection();
                            State = 1580;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 218, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 1571;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1570; Match(WS);
                                                }
                                            }

                                            State = 1573; Match(T__1);
                                            State = 1575;
                                            switch (Interpreter.AdaptivePredict(_input, 217, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1574; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1577; sC_Selection();
                                        }
                                    }
                                }
                                State = 1582;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 218, _ctx);
                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SendkeysStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sendkeysStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSendkeysStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSendkeysStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SendkeysStmtContext sendkeysStmt()
        {
            SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
            EnterRule(_localctx, 178, RULE_sendkeysStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1585; Match(SENDKEYS);
                    State = 1586; Match(WS);
                    State = 1587; valueStmt(0);
                    State = 1596;
                    switch (Interpreter.AdaptivePredict(_input, 222, _ctx))
                    {
                        case 1:
                            {
                                State = 1589;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1588; Match(WS);
                                    }
                                }

                                State = 1591; Match(T__1);
                                State = 1593;
                                switch (Interpreter.AdaptivePredict(_input, 221, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1592; Match(WS);
                                        }
                                        break;
                                }
                                State = 1595; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetattrStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SetattrStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setattrStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSetattrStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSetattrStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SetattrStmtContext setattrStmt()
        {
            SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
            EnterRule(_localctx, 180, RULE_setattrStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1598; Match(SETATTR);
                    State = 1599; Match(WS);
                    State = 1600; valueStmt(0);
                    State = 1602;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1601; Match(WS);
                        }
                    }

                    State = 1604; Match(T__1);
                    State = 1606;
                    switch (Interpreter.AdaptivePredict(_input, 224, _ctx))
                    {
                        case 1:
                            {
                                State = 1605; Match(WS);
                            }
                            break;
                    }
                    State = 1608; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
            public SetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SetStmtContext setStmt()
        {
            SetStmtContext _localctx = new SetStmtContext(_ctx, State);
            EnterRule(_localctx, 182, RULE_setStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1610; Match(SET);
                    State = 1611; Match(WS);
                    State = 1612; implicitCallStmt_InStmt();
                    State = 1614;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1613; Match(WS);
                        }
                    }

                    State = 1616; Match(EQ);
                    State = 1618;
                    switch (Interpreter.AdaptivePredict(_input, 226, _ctx))
                    {
                        case 1:
                            {
                                State = 1617; Match(WS);
                            }
                            break;
                    }
                    State = 1620; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class StopStmtContext : ParserRuleContext
        {
            public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
            public StopStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_stopStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterStopStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitStopStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StopStmtContext stopStmt()
        {
            StopStmtContext _localctx = new StopStmtContext(_ctx, State);
            EnterRule(_localctx, 184, RULE_stopStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1622; Match(STOP);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public SubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubStmtContext subStmt()
        {
            SubStmtContext _localctx = new SubStmtContext(_ctx, State);
            EnterRule(_localctx, 186, RULE_subStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1627;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1624; visibility();
                            State = 1625; Match(WS);
                        }
                    }

                    State = 1631;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1629; Match(STATIC);
                            State = 1630; Match(WS);
                        }
                    }

                    State = 1633; Match(SUB);
                    State = 1635;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1634; Match(WS);
                        }
                    }

                    State = 1637; ambiguousIdentifier();
                    State = 1642;
                    switch (Interpreter.AdaptivePredict(_input, 231, _ctx))
                    {
                        case 1:
                            {
                                State = 1639;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1638; Match(WS);
                                    }
                                }

                                State = 1641; argList();
                            }
                            break;
                    }
                    State = 1644; endOfStatement();
                    State = 1646;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == WS || _la == IDENTIFIER)
                    {
                        {
                            State = 1645; block();
                        }
                    }

                    State = 1648; Match(END_SUB);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TimeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public TimeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_timeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTimeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTimeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TimeStmtContext timeStmt()
        {
            TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
            EnterRule(_localctx, 188, RULE_timeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1650; Match(TIME);
                    State = 1652;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1651; Match(WS);
                        }
                    }

                    State = 1654; Match(EQ);
                    State = 1656;
                    switch (Interpreter.AdaptivePredict(_input, 234, _ctx))
                    {
                        case 1:
                            {
                                State = 1655; Match(WS);
                            }
                            break;
                    }
                    State = 1658; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element()
            {
                return GetRuleContexts<TypeStmt_ElementContext>();
            }
            public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeStmt_ElementContext typeStmt_Element(int i)
            {
                return GetRuleContext<TypeStmt_ElementContext>(i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
            public TypeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeStmtContext typeStmt()
        {
            TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
            EnterRule(_localctx, 190, RULE_typeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1663;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1660; visibility();
                            State = 1661; Match(WS);
                        }
                    }

                    State = 1665; Match(TYPE);
                    State = 1666; Match(WS);
                    State = 1667; ambiguousIdentifier();
                    State = 1668; endOfStatement();
                    State = 1672;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 1669; typeStmt_Element();
                            }
                        }
                        State = 1674;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1675; Match(END_TYPE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeStmt_ElementContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeStmt_Element; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeStmt_ElementContext typeStmt_Element()
        {
            TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
            EnterRule(_localctx, 192, RULE_typeStmt_Element);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1677; ambiguousIdentifier();
                    State = 1692;
                    switch (Interpreter.AdaptivePredict(_input, 241, _ctx))
                    {
                        case 1:
                            {
                                State = 1679;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1678; Match(WS);
                                    }
                                }

                                State = 1681; Match(LPAREN);
                                State = 1686;
                                switch (Interpreter.AdaptivePredict(_input, 239, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1683;
                                            switch (Interpreter.AdaptivePredict(_input, 238, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1682; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1685; subscripts();
                                        }
                                        break;
                                }
                                State = 1689;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1688; Match(WS);
                                    }
                                }

                                State = 1691; Match(RPAREN);
                            }
                            break;
                    }
                    State = 1696;
                    switch (Interpreter.AdaptivePredict(_input, 242, _ctx))
                    {
                        case 1:
                            {
                                State = 1694; Match(WS);
                                State = 1695; asTypeClause();
                            }
                            break;
                    }
                    State = 1698; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeOfStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeOfStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeOfStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeOfStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeOfStmtContext typeOfStmt()
        {
            TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
            EnterRule(_localctx, 194, RULE_typeOfStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1700; Match(TYPEOF);
                    State = 1701; Match(WS);
                    State = 1702; valueStmt(0);
                    State = 1707;
                    switch (Interpreter.AdaptivePredict(_input, 243, _ctx))
                    {
                        case 1:
                            {
                                State = 1703; Match(WS);
                                State = 1704; Match(IS);
                                State = 1705; Match(WS);
                                State = 1706; type();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class UnloadStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
            public UnloadStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unloadStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterUnloadStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitUnloadStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public UnloadStmtContext unloadStmt()
        {
            UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
            EnterRule(_localctx, 196, RULE_unloadStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1709; Match(UNLOAD);
                    State = 1710; Match(WS);
                    State = 1711; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class UnlockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public UnlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterUnlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitUnlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public UnlockStmtContext unlockStmt()
        {
            UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
            EnterRule(_localctx, 198, RULE_unlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1713; Match(UNLOCK);
                    State = 1714; Match(WS);
                    State = 1715; fileNumber();
                    State = 1730;
                    switch (Interpreter.AdaptivePredict(_input, 247, _ctx))
                    {
                        case 1:
                            {
                                State = 1717;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1716; Match(WS);
                                    }
                                }

                                State = 1719; Match(T__1);
                                State = 1721;
                                switch (Interpreter.AdaptivePredict(_input, 245, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1720; Match(WS);
                                        }
                                        break;
                                }
                                State = 1723; valueStmt(0);
                                State = 1728;
                                switch (Interpreter.AdaptivePredict(_input, 246, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1724; Match(WS);
                                            State = 1725; Match(TO);
                                            State = 1726; Match(WS);
                                            State = 1727; valueStmt(0);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ValueStmtContext : ParserRuleContext
        {
            public ValueStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_valueStmt; } }

            public ValueStmtContext() { }
            public virtual void CopyFrom(ValueStmtContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class VsAssignContext : ValueStmtContext
        {
            public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAssign(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAssign(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNotContext : ValueStmtContext
        {
            public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNot(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNot(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsStructContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsStruct(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsStruct(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsTypeOfContext : ValueStmtContext
        {
            public TypeOfStmtContext typeOfStmt()
            {
                return GetRuleContext<TypeOfStmtContext>(0);
            }
            public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsTypeOf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsTypeOf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsICSContext : ValueStmtContext
        {
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsICS(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsICS(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsRelationalContext : ValueStmtContext
        {
            public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
            public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
            public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsRelational(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsRelational(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsXorContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsXor(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsXor(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAndContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAnd(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAnd(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsPowContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
            public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsPow(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsPow(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAddContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAdd(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAdd(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsModContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsModContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMod(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMod(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsIntDivContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsIntDiv(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsIntDiv(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAmpContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAmp(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAmp(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAddressOfContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
            public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAddressOf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAddressOf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNewContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNew(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNew(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsOrContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsOr(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsOr(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsMultContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
            public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMult(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMult(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsLiteralContext : ValueStmtContext
        {
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsEqvContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsEqv(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsEqv(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNegationContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNegation(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNegation(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsImpContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsImp(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsImp(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsMidContext : ValueStmtContext
        {
            public MidStmtContext midStmt()
            {
                return GetRuleContext<MidStmtContext>(0);
            }
            public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMid(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMid(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ValueStmtContext valueStmt()
        {
            return valueStmt(0);
        }

        private ValueStmtContext valueStmt(int _p)
        {
            ParserRuleContext _parentctx = _ctx;
            int _parentState = State;
            ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
            ValueStmtContext _prevctx = _localctx;
            int _startState = 200;
            EnterRecursionRule(_localctx, 200, RULE_valueStmt, _p);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1787;
                    switch (Interpreter.AdaptivePredict(_input, 258, _ctx))
                    {
                        case 1:
                            {
                                _localctx = new VsNewContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;

                                State = 1733; Match(NEW);
                                State = 1735;
                                switch (Interpreter.AdaptivePredict(_input, 248, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1734; Match(WS);
                                        }
                                        break;
                                }
                                State = 1737; valueStmt(19);
                            }
                            break;

                        case 2:
                            {
                                _localctx = new VsAddressOfContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1738; Match(ADDRESSOF);
                                State = 1740;
                                switch (Interpreter.AdaptivePredict(_input, 249, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1739; Match(WS);
                                        }
                                        break;
                                }
                                State = 1742; valueStmt(16);
                            }
                            break;

                        case 3:
                            {
                                _localctx = new VsAssignContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1743; implicitCallStmt_InStmt();
                                State = 1745;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1744; Match(WS);
                                    }
                                }

                                State = 1747; Match(ASSIGN);
                                State = 1749;
                                switch (Interpreter.AdaptivePredict(_input, 251, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1748; Match(WS);
                                        }
                                        break;
                                }
                                State = 1751; valueStmt(15);
                            }
                            break;

                        case 4:
                            {
                                _localctx = new VsNegationContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1753; Match(MINUS);
                                State = 1755;
                                switch (Interpreter.AdaptivePredict(_input, 252, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1754; Match(WS);
                                        }
                                        break;
                                }
                                State = 1757; valueStmt(13);
                            }
                            break;

                        case 5:
                            {
                                _localctx = new VsNotContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1758; Match(NOT);
                                State = 1760;
                                switch (Interpreter.AdaptivePredict(_input, 253, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1759; Match(WS);
                                        }
                                        break;
                                }
                                State = 1762; valueStmt(6);
                            }
                            break;

                        case 6:
                            {
                                _localctx = new VsLiteralContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1763; literal();
                            }
                            break;

                        case 7:
                            {
                                _localctx = new VsICSContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1764; implicitCallStmt_InStmt();
                            }
                            break;

                        case 8:
                            {
                                _localctx = new VsStructContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1765; Match(LPAREN);
                                State = 1767;
                                switch (Interpreter.AdaptivePredict(_input, 254, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1766; Match(WS);
                                        }
                                        break;
                                }
                                State = 1769; valueStmt(0);
                                State = 1780;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == T__1 || _la == WS)
                                {
                                    {
                                        {
                                            State = 1771;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1770; Match(WS);
                                                }
                                            }

                                            State = 1773; Match(T__1);
                                            State = 1775;
                                            switch (Interpreter.AdaptivePredict(_input, 256, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1774; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1777; valueStmt(0);
                                        }
                                    }
                                    State = 1782;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                                State = 1783; Match(RPAREN);
                            }
                            break;

                        case 9:
                            {
                                _localctx = new VsTypeOfContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1785; typeOfStmt();
                            }
                            break;

                        case 10:
                            {
                                _localctx = new VsMidContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1786; midStmt();
                            }
                            break;
                    }
                    _ctx.stop = _input.Lt(-1);
                    State = 1899;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 284, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            if (_parseListeners != null) TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                State = 1897;
                                switch (Interpreter.AdaptivePredict(_input, 283, _ctx))
                                {
                                    case 1:
                                        {
                                            _localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1789;
                                            if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
                                            State = 1791;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1790; Match(WS);
                                                }
                                            }

                                            State = 1793; Match(POW);
                                            State = 1795;
                                            switch (Interpreter.AdaptivePredict(_input, 260, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1794; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1797; valueStmt(15);
                                        }
                                        break;

                                    case 2:
                                        {
                                            _localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1798;
                                            if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
                                            State = 1800;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1799; Match(WS);
                                                }
                                            }

                                            State = 1802;
                                            _la = _input.La(1);
                                            if (!(_la == DIV || _la == MULT))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1804;
                                            switch (Interpreter.AdaptivePredict(_input, 262, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1803; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1806; valueStmt(13);
                                        }
                                        break;

                                    case 3:
                                        {
                                            _localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1807;
                                            if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
                                            State = 1809;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1808; Match(WS);
                                                }
                                            }

                                            State = 1811; Match(INTDIV);
                                            State = 1813;
                                            switch (Interpreter.AdaptivePredict(_input, 264, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1812; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1815; valueStmt(12);
                                        }
                                        break;

                                    case 4:
                                        {
                                            _localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1816;
                                            if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
                                            State = 1818;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1817; Match(WS);
                                                }
                                            }

                                            State = 1820; Match(MOD);
                                            State = 1822;
                                            switch (Interpreter.AdaptivePredict(_input, 266, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1821; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1824; valueStmt(11);
                                        }
                                        break;

                                    case 5:
                                        {
                                            _localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1825;
                                            if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
                                            State = 1827;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1826; Match(WS);
                                                }
                                            }

                                            State = 1829;
                                            _la = _input.La(1);
                                            if (!(_la == MINUS || _la == PLUS))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1831;
                                            switch (Interpreter.AdaptivePredict(_input, 268, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1830; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1833; valueStmt(10);
                                        }
                                        break;

                                    case 6:
                                        {
                                            _localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1834;
                                            if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
                                            State = 1836;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1835; Match(WS);
                                                }
                                            }

                                            State = 1838; Match(AMPERSAND);
                                            State = 1840;
                                            switch (Interpreter.AdaptivePredict(_input, 270, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1839; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1842; valueStmt(9);
                                        }
                                        break;

                                    case 7:
                                        {
                                            _localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1843;
                                            if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
                                            State = 1845;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1844; Match(WS);
                                                }
                                            }

                                            State = 1847;
                                            _la = _input.La(1);
                                            if (!(_la == IS || _la == LIKE || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (EQ - 190)) | (1L << (GEQ - 190)) | (1L << (GT - 190)) | (1L << (LEQ - 190)) | (1L << (LT - 190)) | (1L << (NEQ - 190)))) != 0)))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1849;
                                            switch (Interpreter.AdaptivePredict(_input, 272, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1848; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1851; valueStmt(8);
                                        }
                                        break;

                                    case 8:
                                        {
                                            _localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1852;
                                            if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
                                            State = 1854;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1853; Match(WS);
                                                }
                                            }

                                            State = 1856; Match(AND);
                                            State = 1858;
                                            switch (Interpreter.AdaptivePredict(_input, 274, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1857; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1860; valueStmt(6);
                                        }
                                        break;

                                    case 9:
                                        {
                                            _localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1861;
                                            if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
                                            State = 1863;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1862; Match(WS);
                                                }
                                            }

                                            State = 1865; Match(OR);
                                            State = 1867;
                                            switch (Interpreter.AdaptivePredict(_input, 276, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1866; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1869; valueStmt(5);
                                        }
                                        break;

                                    case 10:
                                        {
                                            _localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1870;
                                            if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
                                            State = 1872;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1871; Match(WS);
                                                }
                                            }

                                            State = 1874; Match(XOR);
                                            State = 1876;
                                            switch (Interpreter.AdaptivePredict(_input, 278, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1875; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1878; valueStmt(4);
                                        }
                                        break;

                                    case 11:
                                        {
                                            _localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1879;
                                            if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
                                            State = 1881;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1880; Match(WS);
                                                }
                                            }

                                            State = 1883; Match(EQV);
                                            State = 1885;
                                            switch (Interpreter.AdaptivePredict(_input, 280, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1884; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1887; valueStmt(3);
                                        }
                                        break;

                                    case 12:
                                        {
                                            _localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1888;
                                            if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
                                            State = 1890;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1889; Match(WS);
                                                }
                                            }

                                            State = 1892; Match(IMP);
                                            State = 1894;
                                            switch (Interpreter.AdaptivePredict(_input, 282, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1893; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1896; valueStmt(2);
                                        }
                                        break;
                                }
                            }
                        }
                        State = 1901;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 284, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class VariableStmtContext : ParserRuleContext
        {
            public VariableListStmtContext variableListStmt()
            {
                return GetRuleContext<VariableListStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
            public VariableStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableStmtContext variableStmt()
        {
            VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
            EnterRule(_localctx, 202, RULE_variableStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1905;
                    switch (_input.La(1))
                    {
                        case DIM:
                            {
                                State = 1902; Match(DIM);
                            }
                            break;
                        case STATIC:
                            {
                                State = 1903; Match(STATIC);
                            }
                            break;
                        case FRIEND:
                        case GLOBAL:
                        case PRIVATE:
                        case PUBLIC:
                            {
                                State = 1904; visibility();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 1907; Match(WS);
                    State = 1910;
                    switch (Interpreter.AdaptivePredict(_input, 286, _ctx))
                    {
                        case 1:
                            {
                                State = 1908; Match(WITHEVENTS);
                                State = 1909; Match(WS);
                            }
                            break;
                    }
                    State = 1912; variableListStmt();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableListStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<VariableSubStmtContext> variableSubStmt()
            {
                return GetRuleContexts<VariableSubStmtContext>();
            }
            public VariableSubStmtContext variableSubStmt(int i)
            {
                return GetRuleContext<VariableSubStmtContext>(i);
            }
            public VariableListStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableListStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableListStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableListStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableListStmtContext variableListStmt()
        {
            VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
            EnterRule(_localctx, 204, RULE_variableListStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1914; variableSubStmt();
                    State = 1925;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 289, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1916;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1915; Match(WS);
                                        }
                                    }

                                    State = 1918; Match(T__1);
                                    State = 1920;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1919; Match(WS);
                                        }
                                    }

                                    State = 1922; variableSubStmt();
                                }
                            }
                        }
                        State = 1927;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 289, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableSubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableSubStmtContext variableSubStmt()
        {
            VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
            EnterRule(_localctx, 206, RULE_variableSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1928; ambiguousIdentifier();
                    State = 1946;
                    switch (Interpreter.AdaptivePredict(_input, 295, _ctx))
                    {
                        case 1:
                            {
                                State = 1930;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1929; Match(WS);
                                    }
                                }

                                State = 1932; Match(LPAREN);
                                State = 1934;
                                switch (Interpreter.AdaptivePredict(_input, 291, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1933; Match(WS);
                                        }
                                        break;
                                }
                                State = 1940;
                                _la = _input.La(1);
                                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (WS - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                                {
                                    {
                                        State = 1936; subscripts();
                                        State = 1938;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1937; Match(WS);
                                            }
                                        }

                                    }
                                }

                                State = 1942; Match(RPAREN);
                                State = 1944;
                                switch (Interpreter.AdaptivePredict(_input, 294, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1943; Match(WS);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                    State = 1949;
                    switch (Interpreter.AdaptivePredict(_input, 296, _ctx))
                    {
                        case 1:
                            {
                                State = 1948; typeHint();
                            }
                            break;
                    }
                    State = 1953;
                    switch (Interpreter.AdaptivePredict(_input, 297, _ctx))
                    {
                        case 1:
                            {
                                State = 1951; Match(WS);
                                State = 1952; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WhileWendStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_whileWendStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWhileWendStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWhileWendStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WhileWendStmtContext whileWendStmt()
        {
            WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
            EnterRule(_localctx, 208, RULE_whileWendStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1955; Match(WHILE);
                    State = 1956; Match(WS);
                    State = 1957; valueStmt(0);
                    State = 1958; endOfStatement();
                    State = 1960;
                    switch (Interpreter.AdaptivePredict(_input, 298, _ctx))
                    {
                        case 1:
                            {
                                State = 1959; block();
                            }
                            break;
                    }
                    State = 1962; Match(WEND);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WidthStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public WidthStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_widthStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWidthStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWidthStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WidthStmtContext widthStmt()
        {
            WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
            EnterRule(_localctx, 210, RULE_widthStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1964; Match(WIDTH);
                    State = 1965; Match(WS);
                    State = 1966; fileNumber();
                    State = 1968;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1967; Match(WS);
                        }
                    }

                    State = 1970; Match(T__1);
                    State = 1972;
                    switch (Interpreter.AdaptivePredict(_input, 300, _ctx))
                    {
                        case 1:
                            {
                                State = 1971; Match(WS);
                            }
                            break;
                    }
                    State = 1974; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WithStmtContext : ParserRuleContext
        {
            public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public WithStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_withStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWithStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWithStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WithStmtContext withStmt()
        {
            WithStmtContext _localctx = new WithStmtContext(_ctx, State);
            EnterRule(_localctx, 212, RULE_withStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1976; Match(WITH);
                    State = 1977; Match(WS);
                    State = 1982;
                    switch (Interpreter.AdaptivePredict(_input, 301, _ctx))
                    {
                        case 1:
                            {
                                State = 1978; implicitCallStmt_InStmt();
                            }
                            break;

                        case 2:
                            {
                                {
                                    State = 1979; Match(NEW);
                                    State = 1980; Match(WS);
                                    State = 1981; type();
                                }
                            }
                            break;
                    }
                    State = 1984; endOfStatement();
                    State = 1986;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == WS || _la == IDENTIFIER)
                    {
                        {
                            State = 1985; block();
                        }
                    }

                    State = 1988; Match(END_WITH);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WriteStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public OutputListContext outputList()
            {
                return GetRuleContext<OutputListContext>(0);
            }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public WriteStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_writeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWriteStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWriteStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WriteStmtContext writeStmt()
        {
            WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
            EnterRule(_localctx, 214, RULE_writeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1990; Match(WRITE);
                    State = 1991; Match(WS);
                    State = 1992; fileNumber();
                    State = 1994;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1993; Match(WS);
                        }
                    }

                    State = 1996; Match(T__1);
                    State = 2001;
                    switch (Interpreter.AdaptivePredict(_input, 305, _ctx))
                    {
                        case 1:
                            {
                                State = 1998;
                                switch (Interpreter.AdaptivePredict(_input, 304, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1997; Match(WS);
                                        }
                                        break;
                                }
                                State = 2000; outputList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FileNumberContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_fileNumber; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFileNumber(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFileNumber(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FileNumberContext fileNumber()
        {
            FileNumberContext _localctx = new FileNumberContext(_ctx, State);
            EnterRule(_localctx, 216, RULE_fileNumber);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2004;
                    _la = _input.La(1);
                    if (_la == T__5)
                    {
                        {
                            State = 2003; Match(T__5);
                        }
                    }

                    State = 2006; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExplicitCallStmtContext : ParserRuleContext
        {
            public ECS_ProcedureCallContext eCS_ProcedureCall()
            {
                return GetRuleContext<ECS_ProcedureCallContext>(0);
            }
            public ECS_MemberProcedureCallContext eCS_MemberProcedureCall()
            {
                return GetRuleContext<ECS_MemberProcedureCallContext>(0);
            }
            public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_explicitCallStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExplicitCallStmtContext explicitCallStmt()
        {
            ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
            EnterRule(_localctx, 218, RULE_explicitCallStmt);
            try
            {
                State = 2010;
                switch (Interpreter.AdaptivePredict(_input, 307, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2008; eCS_ProcedureCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2009; eCS_MemberProcedureCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ECS_ProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ECS_ProcedureCallContext eCS_ProcedureCall()
        {
            ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 220, RULE_eCS_ProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2012; Match(CALL);
                    State = 2013; Match(WS);
                    State = 2014; ambiguousIdentifier();
                    State = 2016;
                    switch (Interpreter.AdaptivePredict(_input, 308, _ctx))
                    {
                        case 1:
                            {
                                State = 2015; typeHint();
                            }
                            break;
                    }
                    State = 2031;
                    switch (Interpreter.AdaptivePredict(_input, 312, _ctx))
                    {
                        case 1:
                            {
                                State = 2019;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2018; Match(WS);
                                    }
                                }

                                State = 2021; Match(LPAREN);
                                State = 2023;
                                switch (Interpreter.AdaptivePredict(_input, 310, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2022; Match(WS);
                                        }
                                        break;
                                }
                                State = 2025; argsCall();
                                State = 2027;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2026; Match(WS);
                                    }
                                }

                                State = 2029; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2042;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 314, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2034;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2033; Match(WS);
                                        }
                                    }

                                    State = 2036; Match(LPAREN);
                                    State = 2037; subscripts();
                                    State = 2038; Match(RPAREN);
                                }
                            }
                        }
                        State = 2044;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 314, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ECS_MemberProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ECS_MemberProcedureCallContext eCS_MemberProcedureCall()
        {
            ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 222, RULE_eCS_MemberProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2045; Match(CALL);
                    State = 2046; Match(WS);
                    State = 2048;
                    switch (Interpreter.AdaptivePredict(_input, 315, _ctx))
                    {
                        case 1:
                            {
                                State = 2047; implicitCallStmt_InStmt();
                            }
                            break;
                    }
                    State = 2050; Match(T__0);
                    State = 2051; ambiguousIdentifier();
                    State = 2053;
                    switch (Interpreter.AdaptivePredict(_input, 316, _ctx))
                    {
                        case 1:
                            {
                                State = 2052; typeHint();
                            }
                            break;
                    }
                    State = 2068;
                    switch (Interpreter.AdaptivePredict(_input, 320, _ctx))
                    {
                        case 1:
                            {
                                State = 2056;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2055; Match(WS);
                                    }
                                }

                                State = 2058; Match(LPAREN);
                                State = 2060;
                                switch (Interpreter.AdaptivePredict(_input, 318, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2059; Match(WS);
                                        }
                                        break;
                                }
                                State = 2062; argsCall();
                                State = 2064;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2063; Match(WS);
                                    }
                                }

                                State = 2066; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2079;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 322, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2071;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2070; Match(WS);
                                        }
                                    }

                                    State = 2073; Match(LPAREN);
                                    State = 2074; subscripts();
                                    State = 2075; Match(RPAREN);
                                }
                            }
                        }
                        State = 2081;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 322, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext
        {
            public ICS_B_ProcedureCallContext iCS_B_ProcedureCall()
            {
                return GetRuleContext<ICS_B_ProcedureCallContext>(0);
            }
            public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall()
            {
                return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
            }
            public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock()
        {
            ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
            EnterRule(_localctx, 224, RULE_implicitCallStmt_InBlock);
            try
            {
                State = 2084;
                switch (Interpreter.AdaptivePredict(_input, 323, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2082; iCS_B_MemberProcedureCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2083; iCS_B_ProcedureCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall()
        {
            ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 226, RULE_iCS_B_MemberProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2087;
                    switch (Interpreter.AdaptivePredict(_input, 324, _ctx))
                    {
                        case 1:
                            {
                                State = 2086; implicitCallStmt_InStmt();
                            }
                            break;
                    }
                    State = 2089; Match(T__0);
                    State = 2090; ambiguousIdentifier();
                    State = 2092;
                    switch (Interpreter.AdaptivePredict(_input, 325, _ctx))
                    {
                        case 1:
                            {
                                State = 2091; typeHint();
                            }
                            break;
                    }
                    State = 2096;
                    switch (Interpreter.AdaptivePredict(_input, 326, _ctx))
                    {
                        case 1:
                            {
                                State = 2094; Match(WS);
                                State = 2095; argsCall();
                            }
                            break;
                    }
                    State = 2102;
                    switch (Interpreter.AdaptivePredict(_input, 328, _ctx))
                    {
                        case 1:
                            {
                                State = 2099;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2098; Match(WS);
                                    }
                                }

                                State = 2101; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2113;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 330, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2105;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2104; Match(WS);
                                        }
                                    }

                                    State = 2107; Match(LPAREN);
                                    State = 2108; subscripts();
                                    State = 2109; Match(RPAREN);
                                }
                            }
                        }
                        State = 2115;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 330, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_B_ProcedureCallContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public CertainIdentifierContext certainIdentifier()
            {
                return GetRuleContext<CertainIdentifierContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_B_ProcedureCallContext iCS_B_ProcedureCall()
        {
            ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 228, RULE_iCS_B_ProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2116; certainIdentifier();
                    State = 2119;
                    switch (Interpreter.AdaptivePredict(_input, 331, _ctx))
                    {
                        case 1:
                            {
                                State = 2117; Match(WS);
                                State = 2118; argsCall();
                            }
                            break;
                    }
                    State = 2130;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 333, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2122;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2121; Match(WS);
                                        }
                                    }

                                    State = 2124; Match(LPAREN);
                                    State = 2125; subscripts();
                                    State = 2126; Match(RPAREN);
                                }
                            }
                        }
                        State = 2132;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 333, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext
        {
            public ICS_S_MembersCallContext iCS_S_MembersCall()
            {
                return GetRuleContext<ICS_S_MembersCallContext>(0);
            }
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ICS_S_DictionaryCallContext iCS_S_DictionaryCall()
            {
                return GetRuleContext<ICS_S_DictionaryCallContext>(0);
            }
            public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
        {
            ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
            EnterRule(_localctx, 230, RULE_implicitCallStmt_InStmt);
            try
            {
                State = 2137;
                switch (Interpreter.AdaptivePredict(_input, 334, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2133; iCS_S_MembersCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2134; iCS_S_VariableOrProcedureCall();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 2135; iCS_S_ProcedureOrArrayCall();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 2136; iCS_S_DictionaryCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
        {
            ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 232, RULE_iCS_S_VariableOrProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2139; ambiguousIdentifier();
                    State = 2141;
                    switch (Interpreter.AdaptivePredict(_input, 335, _ctx))
                    {
                        case 1:
                            {
                                State = 2140; typeHint();
                            }
                            break;
                    }
                    State = 2147;
                    switch (Interpreter.AdaptivePredict(_input, 337, _ctx))
                    {
                        case 1:
                            {
                                State = 2144;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2143; Match(WS);
                                    }
                                }

                                State = 2146; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2158;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 339, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2150;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2149; Match(WS);
                                        }
                                    }

                                    State = 2152; Match(LPAREN);
                                    State = 2153; subscripts();
                                    State = 2154; Match(RPAREN);
                                }
                            }
                        }
                        State = 2160;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 339, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public BaseTypeContext baseType()
            {
                return GetRuleContext<BaseTypeContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
        {
            ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
            EnterRule(_localctx, 234, RULE_iCS_S_ProcedureOrArrayCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2163;
                    switch (Interpreter.AdaptivePredict(_input, 340, _ctx))
                    {
                        case 1:
                            {
                                State = 2161; ambiguousIdentifier();
                            }
                            break;

                        case 2:
                            {
                                State = 2162; baseType();
                            }
                            break;
                    }
                    State = 2166;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 2165; typeHint();
                        }
                    }

                    State = 2169;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2168; Match(WS);
                        }
                    }

                    State = 2171; Match(LPAREN);
                    State = 2173;
                    switch (Interpreter.AdaptivePredict(_input, 343, _ctx))
                    {
                        case 1:
                            {
                                State = 2172; Match(WS);
                            }
                            break;
                    }
                    State = 2179;
                    switch (Interpreter.AdaptivePredict(_input, 345, _ctx))
                    {
                        case 1:
                            {
                                State = 2175; argsCall();
                                State = 2177;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2176; Match(WS);
                                    }
                                }

                            }
                            break;
                    }
                    State = 2181; Match(RPAREN);
                    State = 2186;
                    switch (Interpreter.AdaptivePredict(_input, 347, _ctx))
                    {
                        case 1:
                            {
                                State = 2183;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2182; Match(WS);
                                    }
                                }

                                State = 2185; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2197;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 349, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2189;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2188; Match(WS);
                                        }
                                    }

                                    State = 2191; Match(LPAREN);
                                    State = 2192; subscripts();
                                    State = 2193; Match(RPAREN);
                                }
                            }
                        }
                        State = 2199;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 349, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_MembersCallContext : ParserRuleContext
        {
            public ICS_S_MemberCallContext iCS_S_MemberCall(int i)
            {
                return GetRuleContext<ICS_S_MemberCallContext>(i);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall()
            {
                return GetRuleContexts<ICS_S_MemberCallContext>();
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_MembersCallContext iCS_S_MembersCall()
        {
            ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
            EnterRule(_localctx, 236, RULE_iCS_S_MembersCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2202;
                    switch (Interpreter.AdaptivePredict(_input, 350, _ctx))
                    {
                        case 1:
                            {
                                State = 2200; iCS_S_VariableOrProcedureCall();
                            }
                            break;

                        case 2:
                            {
                                State = 2201; iCS_S_ProcedureOrArrayCall();
                            }
                            break;
                    }
                    State = 2208;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 2204; iCS_S_MemberCall();
                                        State = 2206;
                                        switch (Interpreter.AdaptivePredict(_input, 351, _ctx))
                                        {
                                            case 1:
                                                {
                                                    State = 2205; Match(WS);
                                                }
                                                break;
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2210;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 352, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                    State = 2216;
                    switch (Interpreter.AdaptivePredict(_input, 354, _ctx))
                    {
                        case 1:
                            {
                                State = 2213;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2212; Match(WS);
                                    }
                                }

                                State = 2215; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2227;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 356, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2219;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2218; Match(WS);
                                        }
                                    }

                                    State = 2221; Match(LPAREN);
                                    State = 2222; subscripts();
                                    State = 2223; Match(RPAREN);
                                }
                            }
                        }
                        State = 2229;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 356, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_MemberCallContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_MemberCallContext iCS_S_MemberCall()
        {
            ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
            EnterRule(_localctx, 238, RULE_iCS_S_MemberCall);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2230;
                    _la = _input.La(1);
                    if (!(_la == T__6 || _la == T__0))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 2232;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2231; Match(WS);
                        }
                    }

                    State = 2236;
                    switch (Interpreter.AdaptivePredict(_input, 358, _ctx))
                    {
                        case 1:
                            {
                                State = 2234; iCS_S_VariableOrProcedureCall();
                            }
                            break;

                        case 2:
                            {
                                State = 2235; iCS_S_ProcedureOrArrayCall();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_DictionaryCallContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_DictionaryCallContext iCS_S_DictionaryCall()
        {
            ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
            EnterRule(_localctx, 240, RULE_iCS_S_DictionaryCall);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2239;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2238; Match(WS);
                        }
                    }

                    State = 2241; dictionaryCallStmt();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgsCallContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ArgCallContext> argCall()
            {
                return GetRuleContexts<ArgCallContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ArgCallContext argCall(int i)
            {
                return GetRuleContext<ArgCallContext>(i);
            }
            public ArgsCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argsCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgsCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgsCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgsCallContext argsCall()
        {
            ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
            EnterRule(_localctx, 242, RULE_argsCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2255;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 363, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2244;
                                    switch (Interpreter.AdaptivePredict(_input, 360, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2243; argCall();
                                            }
                                            break;
                                    }
                                    State = 2247;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2246; Match(WS);
                                        }
                                    }

                                    State = 2249;
                                    _la = _input.La(1);
                                    if (!(_la == T__2 || _la == T__1))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2251;
                                    switch (Interpreter.AdaptivePredict(_input, 362, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2250; Match(WS);
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                        State = 2257;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 363, _ctx);
                    }
                    State = 2258; argCall();
                    State = 2271;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 367, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2260;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2259; Match(WS);
                                        }
                                    }

                                    State = 2262;
                                    _la = _input.La(1);
                                    if (!(_la == T__2 || _la == T__1))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2264;
                                    switch (Interpreter.AdaptivePredict(_input, 365, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2263; Match(WS);
                                            }
                                            break;
                                    }
                                    State = 2267;
                                    switch (Interpreter.AdaptivePredict(_input, 366, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2266; argCall();
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                        State = 2273;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 367, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgCallContext : ParserRuleContext
        {
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ArgCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgCallContext argCall()
        {
            ArgCallContext _localctx = new ArgCallContext(_ctx, State);
            EnterRule(_localctx, 244, RULE_argCall);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2275;
                    switch (Interpreter.AdaptivePredict(_input, 368, _ctx))
                    {
                        case 1:
                            {
                                State = 2274; Match(LPAREN);
                            }
                            break;
                    }
                    State = 2279;
                    switch (Interpreter.AdaptivePredict(_input, 369, _ctx))
                    {
                        case 1:
                            {
                                State = 2277;
                                _la = _input.La(1);
                                if (!(_la == BYVAL || _la == BYREF || _la == PARAMARRAY))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                                State = 2278; Match(WS);
                            }
                            break;
                    }
                    State = 2282;
                    _la = _input.La(1);
                    if (_la == RPAREN)
                    {
                        {
                            State = 2281; Match(RPAREN);
                        }
                    }

                    State = 2284; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DictionaryCallStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DictionaryCallStmtContext dictionaryCallStmt()
        {
            DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
            EnterRule(_localctx, 246, RULE_dictionaryCallStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2286; Match(T__6);
                    State = 2288;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2287; Match(WS);
                        }
                    }

                    State = 2290; ambiguousIdentifier();
                    State = 2292;
                    switch (Interpreter.AdaptivePredict(_input, 372, _ctx))
                    {
                        case 1:
                            {
                                State = 2291; typeHint();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgListContext : ParserRuleContext
        {
            public ArgContext arg(int i)
            {
                return GetRuleContext<ArgContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public IReadOnlyList<ArgContext> arg()
            {
                return GetRuleContexts<ArgContext>();
            }
            public ArgListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgListContext argList()
        {
            ArgListContext _localctx = new ArgListContext(_ctx, State);
            EnterRule(_localctx, 248, RULE_argList);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2294; Match(LPAREN);
                    State = 2312;
                    switch (Interpreter.AdaptivePredict(_input, 377, _ctx))
                    {
                        case 1:
                            {
                                State = 2296;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2295; Match(WS);
                                    }
                                }

                                State = 2298; arg();
                                State = 2309;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 376, _ctx);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 2300;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 2299; Match(WS);
                                                    }
                                                }

                                                State = 2302; Match(T__1);
                                                State = 2304;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 2303; Match(WS);
                                                    }
                                                }

                                                State = 2306; arg();
                                            }
                                        }
                                    }
                                    State = 2311;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 376, _ctx);
                                }
                            }
                            break;
                    }
                    State = 2315;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2314; Match(WS);
                        }
                    }

                    State = 2317; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgDefaultValueContext argDefaultValue()
            {
                return GetRuleContext<ArgDefaultValueContext>(0);
            }
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ArgContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_arg; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArg(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArg(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArg(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgContext arg()
        {
            ArgContext _localctx = new ArgContext(_ctx, State);
            EnterRule(_localctx, 250, RULE_arg);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2321;
                    switch (Interpreter.AdaptivePredict(_input, 379, _ctx))
                    {
                        case 1:
                            {
                                State = 2319; Match(OPTIONAL);
                                State = 2320; Match(WS);
                            }
                            break;
                    }
                    State = 2325;
                    switch (Interpreter.AdaptivePredict(_input, 380, _ctx))
                    {
                        case 1:
                            {
                                State = 2323;
                                _la = _input.La(1);
                                if (!(_la == BYVAL || _la == BYREF))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                                State = 2324; Match(WS);
                            }
                            break;
                    }
                    State = 2329;
                    switch (Interpreter.AdaptivePredict(_input, 381, _ctx))
                    {
                        case 1:
                            {
                                State = 2327; Match(PARAMARRAY);
                                State = 2328; Match(WS);
                            }
                            break;
                    }
                    State = 2331; ambiguousIdentifier();
                    State = 2333;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 2332; typeHint();
                        }
                    }

                    State = 2343;
                    switch (Interpreter.AdaptivePredict(_input, 385, _ctx))
                    {
                        case 1:
                            {
                                State = 2336;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2335; Match(WS);
                                    }
                                }

                                State = 2338; Match(LPAREN);
                                State = 2340;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2339; Match(WS);
                                    }
                                }

                                State = 2342; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2349;
                    switch (Interpreter.AdaptivePredict(_input, 387, _ctx))
                    {
                        case 1:
                            {
                                State = 2346;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2345; Match(WS);
                                    }
                                }

                                State = 2348; asTypeClause();
                            }
                            break;
                    }
                    State = 2355;
                    switch (Interpreter.AdaptivePredict(_input, 389, _ctx))
                    {
                        case 1:
                            {
                                State = 2352;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2351; Match(WS);
                                    }
                                }

                                State = 2354; argDefaultValue();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgDefaultValueContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argDefaultValue; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgDefaultValue(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgDefaultValue(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgDefaultValueContext argDefaultValue()
        {
            ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
            EnterRule(_localctx, 252, RULE_argDefaultValue);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2357; Match(EQ);
                    State = 2359;
                    switch (Interpreter.AdaptivePredict(_input, 390, _ctx))
                    {
                        case 1:
                            {
                                State = 2358; Match(WS);
                            }
                            break;
                    }
                    State = 2361; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubscriptsContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<SubscriptContext> subscript()
            {
                return GetRuleContexts<SubscriptContext>();
            }
            public SubscriptContext subscript(int i)
            {
                return GetRuleContext<SubscriptContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public SubscriptsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subscripts; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubscripts(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubscripts(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubscriptsContext subscripts()
        {
            SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
            EnterRule(_localctx, 254, RULE_subscripts);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2363; subscript();
                    State = 2374;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 393, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2365;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2364; Match(WS);
                                        }
                                    }

                                    State = 2367; Match(T__1);
                                    State = 2369;
                                    switch (Interpreter.AdaptivePredict(_input, 392, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2368; Match(WS);
                                            }
                                            break;
                                    }
                                    State = 2371; subscript();
                                }
                            }
                        }
                        State = 2376;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 393, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubscriptContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SubscriptContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subscript; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubscript(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubscript(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubscriptContext subscript()
        {
            SubscriptContext _localctx = new SubscriptContext(_ctx, State);
            EnterRule(_localctx, 256, RULE_subscript);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2382;
                    switch (Interpreter.AdaptivePredict(_input, 394, _ctx))
                    {
                        case 1:
                            {
                                State = 2377; valueStmt(0);
                                State = 2378; Match(WS);
                                State = 2379; Match(TO);
                                State = 2380; Match(WS);
                            }
                            break;
                    }
                    State = 2384; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AmbiguousIdentifierContext : ParserRuleContext
        {
            public AmbiguousKeywordContext ambiguousKeyword(int i)
            {
                return GetRuleContext<AmbiguousKeywordContext>(i);
            }
            public ITerminalNode IDENTIFIER(int i)
            {
                return GetToken(VBAParser.IDENTIFIER, i);
            }
            public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword()
            {
                return GetRuleContexts<AmbiguousKeywordContext>();
            }
            public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
            public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AmbiguousIdentifierContext ambiguousIdentifier()
        {
            AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
            EnterRule(_localctx, 258, RULE_ambiguousIdentifier);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2388;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    State = 2388;
                                    switch (_input.La(1))
                                    {
                                        case IDENTIFIER:
                                            {
                                                State = 2386; Match(IDENTIFIER);
                                            }
                                            break;
                                        case ACCESS:
                                        case ADDRESSOF:
                                        case ALIAS:
                                        case AND:
                                        case ATTRIBUTE:
                                        case APPACTIVATE:
                                        case APPEND:
                                        case AS:
                                        case BEGIN:
                                        case BEEP:
                                        case BINARY:
                                        case BOOLEAN:
                                        case BYVAL:
                                        case BYREF:
                                        case BYTE:
                                        case CALL:
                                        case CASE:
                                        case CHDIR:
                                        case CHDRIVE:
                                        case CLASS:
                                        case CLOSE:
                                        case COLLECTION:
                                        case CONST:
                                        case DATABASE:
                                        case DATE:
                                        case DECLARE:
                                        case DEFBOOL:
                                        case DEFBYTE:
                                        case DEFDATE:
                                        case DEFDBL:
                                        case DEFDEC:
                                        case DEFCUR:
                                        case DEFINT:
                                        case DEFLNG:
                                        case DEFOBJ:
                                        case DEFSNG:
                                        case DEFSTR:
                                        case DEFVAR:
                                        case DELETESETTING:
                                        case DIM:
                                        case DO:
                                        case DOUBLE:
                                        case EACH:
                                        case ELSE:
                                        case ELSEIF:
                                        case END:
                                        case ENUM:
                                        case EQV:
                                        case ERASE:
                                        case ERROR:
                                        case EVENT:
                                        case FALSE:
                                        case FILECOPY:
                                        case FRIEND:
                                        case FOR:
                                        case FUNCTION:
                                        case GET:
                                        case GLOBAL:
                                        case GOSUB:
                                        case GOTO:
                                        case IF:
                                        case IMP:
                                        case IMPLEMENTS:
                                        case IN:
                                        case INPUT:
                                        case IS:
                                        case INTEGER:
                                        case KILL:
                                        case LOAD:
                                        case LOCK:
                                        case LONG:
                                        case LOOP:
                                        case LEN:
                                        case LET:
                                        case LIB:
                                        case LIKE:
                                        case LSET:
                                        case ME:
                                        case MID:
                                        case MKDIR:
                                        case MOD:
                                        case NAME:
                                        case NEXT:
                                        case NEW:
                                        case NOT:
                                        case NOTHING:
                                        case NULL:
                                        case ON:
                                        case OPEN:
                                        case OPTIONAL:
                                        case OR:
                                        case OUTPUT:
                                        case PARAMARRAY:
                                        case PRESERVE:
                                        case PRINT:
                                        case PRIVATE:
                                        case PUBLIC:
                                        case PUT:
                                        case RANDOM:
                                        case RANDOMIZE:
                                        case RAISEEVENT:
                                        case READ:
                                        case REDIM:
                                        case REM:
                                        case RESET:
                                        case RESUME:
                                        case RETURN:
                                        case RMDIR:
                                        case RSET:
                                        case SAVEPICTURE:
                                        case SAVESETTING:
                                        case SEEK:
                                        case SELECT:
                                        case SENDKEYS:
                                        case SET:
                                        case SETATTR:
                                        case SHARED:
                                        case SINGLE:
                                        case SPC:
                                        case STATIC:
                                        case STEP:
                                        case STOP:
                                        case STRING:
                                        case SUB:
                                        case TAB:
                                        case TEXT:
                                        case THEN:
                                        case TIME:
                                        case TO:
                                        case TRUE:
                                        case TYPE:
                                        case TYPEOF:
                                        case UNLOAD:
                                        case UNLOCK:
                                        case UNTIL:
                                        case VARIANT:
                                        case VERSION:
                                        case WEND:
                                        case WHILE:
                                        case WIDTH:
                                        case WITH:
                                        case WITHEVENTS:
                                        case WRITE:
                                        case XOR:
                                            {
                                                State = 2387; ambiguousKeyword();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2390;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 396, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AsTypeClauseContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public FieldLengthContext fieldLength()
            {
                return GetRuleContext<FieldLengthContext>(0);
            }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_asTypeClause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAsTypeClause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAsTypeClause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AsTypeClauseContext asTypeClause()
        {
            AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
            EnterRule(_localctx, 260, RULE_asTypeClause);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2392; Match(AS);
                    State = 2394;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2393; Match(WS);
                        }
                    }

                    State = 2398;
                    switch (Interpreter.AdaptivePredict(_input, 398, _ctx))
                    {
                        case 1:
                            {
                                State = 2396; Match(NEW);
                                State = 2397; Match(WS);
                            }
                            break;
                    }
                    State = 2400; type();
                    State = 2405;
                    switch (Interpreter.AdaptivePredict(_input, 400, _ctx))
                    {
                        case 1:
                            {
                                State = 2402;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2401; Match(WS);
                                    }
                                }

                                State = 2404; fieldLength();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BaseTypeContext : ParserRuleContext
        {
            public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
            public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
            public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
            public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
            public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
            public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
            public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
            public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
            public BaseTypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_baseType; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBaseType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBaseType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BaseTypeContext baseType()
        {
            BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
            EnterRule(_localctx, 262, RULE_baseType);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2407;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la == INTEGER || _la == LONG || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (SINGLE - 159)) | (1L << (STRING - 159)) | (1L << (VARIANT - 159)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CertainIdentifierContext : ParserRuleContext
        {
            public AmbiguousKeywordContext ambiguousKeyword(int i)
            {
                return GetRuleContext<AmbiguousKeywordContext>(i);
            }
            public ITerminalNode IDENTIFIER(int i)
            {
                return GetToken(VBAParser.IDENTIFIER, i);
            }
            public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword()
            {
                return GetRuleContexts<AmbiguousKeywordContext>();
            }
            public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
            public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_certainIdentifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCertainIdentifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCertainIdentifier(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CertainIdentifierContext certainIdentifier()
        {
            CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
            EnterRule(_localctx, 264, RULE_certainIdentifier);
            try
            {
                int _alt;
                State = 2424;
                switch (_input.La(1))
                {
                    case IDENTIFIER:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2409; Match(IDENTIFIER);
                            State = 2414;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 402, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        State = 2412;
                                        switch (_input.La(1))
                                        {
                                            case ACCESS:
                                            case ADDRESSOF:
                                            case ALIAS:
                                            case AND:
                                            case ATTRIBUTE:
                                            case APPACTIVATE:
                                            case APPEND:
                                            case AS:
                                            case BEGIN:
                                            case BEEP:
                                            case BINARY:
                                            case BOOLEAN:
                                            case BYVAL:
                                            case BYREF:
                                            case BYTE:
                                            case CALL:
                                            case CASE:
                                            case CHDIR:
                                            case CHDRIVE:
                                            case CLASS:
                                            case CLOSE:
                                            case COLLECTION:
                                            case CONST:
                                            case DATABASE:
                                            case DATE:
                                            case DECLARE:
                                            case DEFBOOL:
                                            case DEFBYTE:
                                            case DEFDATE:
                                            case DEFDBL:
                                            case DEFDEC:
                                            case DEFCUR:
                                            case DEFINT:
                                            case DEFLNG:
                                            case DEFOBJ:
                                            case DEFSNG:
                                            case DEFSTR:
                                            case DEFVAR:
                                            case DELETESETTING:
                                            case DIM:
                                            case DO:
                                            case DOUBLE:
                                            case EACH:
                                            case ELSE:
                                            case ELSEIF:
                                            case END:
                                            case ENUM:
                                            case EQV:
                                            case ERASE:
                                            case ERROR:
                                            case EVENT:
                                            case FALSE:
                                            case FILECOPY:
                                            case FRIEND:
                                            case FOR:
                                            case FUNCTION:
                                            case GET:
                                            case GLOBAL:
                                            case GOSUB:
                                            case GOTO:
                                            case IF:
                                            case IMP:
                                            case IMPLEMENTS:
                                            case IN:
                                            case INPUT:
                                            case IS:
                                            case INTEGER:
                                            case KILL:
                                            case LOAD:
                                            case LOCK:
                                            case LONG:
                                            case LOOP:
                                            case LEN:
                                            case LET:
                                            case LIB:
                                            case LIKE:
                                            case LSET:
                                            case ME:
                                            case MID:
                                            case MKDIR:
                                            case MOD:
                                            case NAME:
                                            case NEXT:
                                            case NEW:
                                            case NOT:
                                            case NOTHING:
                                            case NULL:
                                            case ON:
                                            case OPEN:
                                            case OPTIONAL:
                                            case OR:
                                            case OUTPUT:
                                            case PARAMARRAY:
                                            case PRESERVE:
                                            case PRINT:
                                            case PRIVATE:
                                            case PUBLIC:
                                            case PUT:
                                            case RANDOM:
                                            case RANDOMIZE:
                                            case RAISEEVENT:
                                            case READ:
                                            case REDIM:
                                            case REM:
                                            case RESET:
                                            case RESUME:
                                            case RETURN:
                                            case RMDIR:
                                            case RSET:
                                            case SAVEPICTURE:
                                            case SAVESETTING:
                                            case SEEK:
                                            case SELECT:
                                            case SENDKEYS:
                                            case SET:
                                            case SETATTR:
                                            case SHARED:
                                            case SINGLE:
                                            case SPC:
                                            case STATIC:
                                            case STEP:
                                            case STOP:
                                            case STRING:
                                            case SUB:
                                            case TAB:
                                            case TEXT:
                                            case THEN:
                                            case TIME:
                                            case TO:
                                            case TRUE:
                                            case TYPE:
                                            case TYPEOF:
                                            case UNLOAD:
                                            case UNLOCK:
                                            case UNTIL:
                                            case VARIANT:
                                            case VERSION:
                                            case WEND:
                                            case WHILE:
                                            case WIDTH:
                                            case WITH:
                                            case WITHEVENTS:
                                            case WRITE:
                                            case XOR:
                                                {
                                                    State = 2410; ambiguousKeyword();
                                                }
                                                break;
                                            case IDENTIFIER:
                                                {
                                                    State = 2411; Match(IDENTIFIER);
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                    }
                                }
                                State = 2416;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 402, _ctx);
                            }
                        }
                        break;
                    case ACCESS:
                    case ADDRESSOF:
                    case ALIAS:
                    case AND:
                    case ATTRIBUTE:
                    case APPACTIVATE:
                    case APPEND:
                    case AS:
                    case BEGIN:
                    case BEEP:
                    case BINARY:
                    case BOOLEAN:
                    case BYVAL:
                    case BYREF:
                    case BYTE:
                    case CALL:
                    case CASE:
                    case CHDIR:
                    case CHDRIVE:
                    case CLASS:
                    case CLOSE:
                    case COLLECTION:
                    case CONST:
                    case DATABASE:
                    case DATE:
                    case DECLARE:
                    case DEFBOOL:
                    case DEFBYTE:
                    case DEFDATE:
                    case DEFDBL:
                    case DEFDEC:
                    case DEFCUR:
                    case DEFINT:
                    case DEFLNG:
                    case DEFOBJ:
                    case DEFSNG:
                    case DEFSTR:
                    case DEFVAR:
                    case DELETESETTING:
                    case DIM:
                    case DO:
                    case DOUBLE:
                    case EACH:
                    case ELSE:
                    case ELSEIF:
                    case END:
                    case ENUM:
                    case EQV:
                    case ERASE:
                    case ERROR:
                    case EVENT:
                    case FALSE:
                    case FILECOPY:
                    case FRIEND:
                    case FOR:
                    case FUNCTION:
                    case GET:
                    case GLOBAL:
                    case GOSUB:
                    case GOTO:
                    case IF:
                    case IMP:
                    case IMPLEMENTS:
                    case IN:
                    case INPUT:
                    case IS:
                    case INTEGER:
                    case KILL:
                    case LOAD:
                    case LOCK:
                    case LONG:
                    case LOOP:
                    case LEN:
                    case LET:
                    case LIB:
                    case LIKE:
                    case LSET:
                    case ME:
                    case MID:
                    case MKDIR:
                    case MOD:
                    case NAME:
                    case NEXT:
                    case NEW:
                    case NOT:
                    case NOTHING:
                    case NULL:
                    case ON:
                    case OPEN:
                    case OPTIONAL:
                    case OR:
                    case OUTPUT:
                    case PARAMARRAY:
                    case PRESERVE:
                    case PRINT:
                    case PRIVATE:
                    case PUBLIC:
                    case PUT:
                    case RANDOM:
                    case RANDOMIZE:
                    case RAISEEVENT:
                    case READ:
                    case REDIM:
                    case REM:
                    case RESET:
                    case RESUME:
                    case RETURN:
                    case RMDIR:
                    case RSET:
                    case SAVEPICTURE:
                    case SAVESETTING:
                    case SEEK:
                    case SELECT:
                    case SENDKEYS:
                    case SET:
                    case SETATTR:
                    case SHARED:
                    case SINGLE:
                    case SPC:
                    case STATIC:
                    case STEP:
                    case STOP:
                    case STRING:
                    case SUB:
                    case TAB:
                    case TEXT:
                    case THEN:
                    case TIME:
                    case TO:
                    case TRUE:
                    case TYPE:
                    case TYPEOF:
                    case UNLOAD:
                    case UNLOCK:
                    case UNTIL:
                    case VARIANT:
                    case VERSION:
                    case WEND:
                    case WHILE:
                    case WIDTH:
                    case WITH:
                    case WITHEVENTS:
                    case WRITE:
                    case XOR:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2417; ambiguousKeyword();
                            State = 2420;
                            _errHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            State = 2420;
                                            switch (_input.La(1))
                                            {
                                                case ACCESS:
                                                case ADDRESSOF:
                                                case ALIAS:
                                                case AND:
                                                case ATTRIBUTE:
                                                case APPACTIVATE:
                                                case APPEND:
                                                case AS:
                                                case BEGIN:
                                                case BEEP:
                                                case BINARY:
                                                case BOOLEAN:
                                                case BYVAL:
                                                case BYREF:
                                                case BYTE:
                                                case CALL:
                                                case CASE:
                                                case CHDIR:
                                                case CHDRIVE:
                                                case CLASS:
                                                case CLOSE:
                                                case COLLECTION:
                                                case CONST:
                                                case DATABASE:
                                                case DATE:
                                                case DECLARE:
                                                case DEFBOOL:
                                                case DEFBYTE:
                                                case DEFDATE:
                                                case DEFDBL:
                                                case DEFDEC:
                                                case DEFCUR:
                                                case DEFINT:
                                                case DEFLNG:
                                                case DEFOBJ:
                                                case DEFSNG:
                                                case DEFSTR:
                                                case DEFVAR:
                                                case DELETESETTING:
                                                case DIM:
                                                case DO:
                                                case DOUBLE:
                                                case EACH:
                                                case ELSE:
                                                case ELSEIF:
                                                case END:
                                                case ENUM:
                                                case EQV:
                                                case ERASE:
                                                case ERROR:
                                                case EVENT:
                                                case FALSE:
                                                case FILECOPY:
                                                case FRIEND:
                                                case FOR:
                                                case FUNCTION:
                                                case GET:
                                                case GLOBAL:
                                                case GOSUB:
                                                case GOTO:
                                                case IF:
                                                case IMP:
                                                case IMPLEMENTS:
                                                case IN:
                                                case INPUT:
                                                case IS:
                                                case INTEGER:
                                                case KILL:
                                                case LOAD:
                                                case LOCK:
                                                case LONG:
                                                case LOOP:
                                                case LEN:
                                                case LET:
                                                case LIB:
                                                case LIKE:
                                                case LSET:
                                                case ME:
                                                case MID:
                                                case MKDIR:
                                                case MOD:
                                                case NAME:
                                                case NEXT:
                                                case NEW:
                                                case NOT:
                                                case NOTHING:
                                                case NULL:
                                                case ON:
                                                case OPEN:
                                                case OPTIONAL:
                                                case OR:
                                                case OUTPUT:
                                                case PARAMARRAY:
                                                case PRESERVE:
                                                case PRINT:
                                                case PRIVATE:
                                                case PUBLIC:
                                                case PUT:
                                                case RANDOM:
                                                case RANDOMIZE:
                                                case RAISEEVENT:
                                                case READ:
                                                case REDIM:
                                                case REM:
                                                case RESET:
                                                case RESUME:
                                                case RETURN:
                                                case RMDIR:
                                                case RSET:
                                                case SAVEPICTURE:
                                                case SAVESETTING:
                                                case SEEK:
                                                case SELECT:
                                                case SENDKEYS:
                                                case SET:
                                                case SETATTR:
                                                case SHARED:
                                                case SINGLE:
                                                case SPC:
                                                case STATIC:
                                                case STEP:
                                                case STOP:
                                                case STRING:
                                                case SUB:
                                                case TAB:
                                                case TEXT:
                                                case THEN:
                                                case TIME:
                                                case TO:
                                                case TRUE:
                                                case TYPE:
                                                case TYPEOF:
                                                case UNLOAD:
                                                case UNLOCK:
                                                case UNTIL:
                                                case VARIANT:
                                                case VERSION:
                                                case WEND:
                                                case WHILE:
                                                case WIDTH:
                                                case WITH:
                                                case WITHEVENTS:
                                                case WRITE:
                                                case XOR:
                                                    {
                                                        State = 2418; ambiguousKeyword();
                                                    }
                                                    break;
                                                case IDENTIFIER:
                                                    {
                                                        State = 2419; Match(IDENTIFIER);
                                                    }
                                                    break;
                                                default:
                                                    throw new NoViableAltException(this);
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 2422;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 404, _ctx);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ComparisonOperatorContext : ParserRuleContext
        {
            public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
            public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
            public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
            public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_comparisonOperator; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComparisonOperator(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComparisonOperator(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ComparisonOperatorContext comparisonOperator()
        {
            ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
            EnterRule(_localctx, 266, RULE_comparisonOperator);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2426;
                    _la = _input.La(1);
                    if (!(_la == IS || _la == LIKE || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (EQ - 190)) | (1L << (GEQ - 190)) | (1L << (GT - 190)) | (1L << (LEQ - 190)) | (1L << (LT - 190)) | (1L << (NEQ - 190)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ComplexTypeContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public ComplexTypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_complexType; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComplexType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComplexType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ComplexTypeContext complexType()
        {
            ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
            EnterRule(_localctx, 268, RULE_complexType);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2428; ambiguousIdentifier();
                    State = 2433;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 406, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2429;
                                    _la = _input.La(1);
                                    if (!(_la == T__6 || _la == T__0))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2430; ambiguousIdentifier();
                                }
                            }
                        }
                        State = 2435;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 406, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FieldLengthContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
            public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public FieldLengthContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_fieldLength; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFieldLength(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFieldLength(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FieldLengthContext fieldLength()
        {
            FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
            EnterRule(_localctx, 270, RULE_fieldLength);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2436; Match(MULT);
                    State = 2438;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2437; Match(WS);
                        }
                    }

                    State = 2442;
                    switch (_input.La(1))
                    {
                        case INTEGERLITERAL:
                            {
                                State = 2440; Match(INTEGERLITERAL);
                            }
                            break;
                        case ACCESS:
                        case ADDRESSOF:
                        case ALIAS:
                        case AND:
                        case ATTRIBUTE:
                        case APPACTIVATE:
                        case APPEND:
                        case AS:
                        case BEGIN:
                        case BEEP:
                        case BINARY:
                        case BOOLEAN:
                        case BYVAL:
                        case BYREF:
                        case BYTE:
                        case CALL:
                        case CASE:
                        case CHDIR:
                        case CHDRIVE:
                        case CLASS:
                        case CLOSE:
                        case COLLECTION:
                        case CONST:
                        case DATABASE:
                        case DATE:
                        case DECLARE:
                        case DEFBOOL:
                        case DEFBYTE:
                        case DEFDATE:
                        case DEFDBL:
                        case DEFDEC:
                        case DEFCUR:
                        case DEFINT:
                        case DEFLNG:
                        case DEFOBJ:
                        case DEFSNG:
                        case DEFSTR:
                        case DEFVAR:
                        case DELETESETTING:
                        case DIM:
                        case DO:
                        case DOUBLE:
                        case EACH:
                        case ELSE:
                        case ELSEIF:
                        case END:
                        case ENUM:
                        case EQV:
                        case ERASE:
                        case ERROR:
                        case EVENT:
                        case FALSE:
                        case FILECOPY:
                        case FRIEND:
                        case FOR:
                        case FUNCTION:
                        case GET:
                        case GLOBAL:
                        case GOSUB:
                        case GOTO:
                        case IF:
                        case IMP:
                        case IMPLEMENTS:
                        case IN:
                        case INPUT:
                        case IS:
                        case INTEGER:
                        case KILL:
                        case LOAD:
                        case LOCK:
                        case LONG:
                        case LOOP:
                        case LEN:
                        case LET:
                        case LIB:
                        case LIKE:
                        case LSET:
                        case ME:
                        case MID:
                        case MKDIR:
                        case MOD:
                        case NAME:
                        case NEXT:
                        case NEW:
                        case NOT:
                        case NOTHING:
                        case NULL:
                        case ON:
                        case OPEN:
                        case OPTIONAL:
                        case OR:
                        case OUTPUT:
                        case PARAMARRAY:
                        case PRESERVE:
                        case PRINT:
                        case PRIVATE:
                        case PUBLIC:
                        case PUT:
                        case RANDOM:
                        case RANDOMIZE:
                        case RAISEEVENT:
                        case READ:
                        case REDIM:
                        case REM:
                        case RESET:
                        case RESUME:
                        case RETURN:
                        case RMDIR:
                        case RSET:
                        case SAVEPICTURE:
                        case SAVESETTING:
                        case SEEK:
                        case SELECT:
                        case SENDKEYS:
                        case SET:
                        case SETATTR:
                        case SHARED:
                        case SINGLE:
                        case SPC:
                        case STATIC:
                        case STEP:
                        case STOP:
                        case STRING:
                        case SUB:
                        case TAB:
                        case TEXT:
                        case THEN:
                        case TIME:
                        case TO:
                        case TRUE:
                        case TYPE:
                        case TYPEOF:
                        case UNLOAD:
                        case UNLOCK:
                        case UNTIL:
                        case VARIANT:
                        case VERSION:
                        case WEND:
                        case WHILE:
                        case WIDTH:
                        case WITH:
                        case WITHEVENTS:
                        case WRITE:
                        case XOR:
                        case IDENTIFIER:
                            {
                                State = 2441; ambiguousIdentifier();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LetterrangeContext : ParserRuleContext
        {
            public CertainIdentifierContext certainIdentifier(int i)
            {
                return GetRuleContext<CertainIdentifierContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<CertainIdentifierContext> certainIdentifier()
            {
                return GetRuleContexts<CertainIdentifierContext>();
            }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public LetterrangeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_letterrange; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLetterrange(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLetterrange(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LetterrangeContext letterrange()
        {
            LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
            EnterRule(_localctx, 272, RULE_letterrange);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2444; certainIdentifier();
                    State = 2453;
                    switch (Interpreter.AdaptivePredict(_input, 411, _ctx))
                    {
                        case 1:
                            {
                                State = 2446;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2445; Match(WS);
                                    }
                                }

                                State = 2448; Match(MINUS);
                                State = 2450;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2449; Match(WS);
                                    }
                                }

                                State = 2452; certainIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LineLabelContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public LineLabelContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lineLabel; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLineLabel(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLineLabel(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LineLabelContext lineLabel()
        {
            LineLabelContext _localctx = new LineLabelContext(_ctx, State);
            EnterRule(_localctx, 274, RULE_lineLabel);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2455; ambiguousIdentifier();
                    State = 2456; Match(COLON);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LiteralContext : ParserRuleContext
        {
            public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
            public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
            public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
            public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
            public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
            public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
            public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
            public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
            public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
            public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
            public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
            public LiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_literal; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LiteralContext literal()
        {
            LiteralContext _localctx = new LiteralContext(_ctx, State);
            EnterRule(_localctx, 276, RULE_literal);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2458;
                    _la = _input.La(1);
                    if (!(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (FALSE - 73)) | (1L << (NOTHING - 73)) | (1L << (NULL - 73)))) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (TRUE - 171)) | (1L << (STRINGLITERAL - 171)) | (1L << (OCTLITERAL - 171)) | (1L << (HEXLITERAL - 171)) | (1L << (SHORTLITERAL - 171)) | (1L << (INTEGERLITERAL - 171)) | (1L << (DOUBLELITERAL - 171)) | (1L << (DATELITERAL - 171)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public BaseTypeContext baseType()
            {
                return GetRuleContext<BaseTypeContext>(0);
            }
            public ComplexTypeContext complexType()
            {
                return GetRuleContext<ComplexTypeContext>(0);
            }
            public TypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_type; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeContext type()
        {
            TypeContext _localctx = new TypeContext(_ctx, State);
            EnterRule(_localctx, 278, RULE_type);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2462;
                    switch (Interpreter.AdaptivePredict(_input, 412, _ctx))
                    {
                        case 1:
                            {
                                State = 2460; baseType();
                            }
                            break;

                        case 2:
                            {
                                State = 2461; complexType();
                            }
                            break;
                    }
                    State = 2472;
                    switch (Interpreter.AdaptivePredict(_input, 415, _ctx))
                    {
                        case 1:
                            {
                                State = 2465;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2464; Match(WS);
                                    }
                                }

                                State = 2467; Match(LPAREN);
                                State = 2469;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2468; Match(WS);
                                    }
                                }

                                State = 2471; Match(RPAREN);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeHintContext : ParserRuleContext
        {
            public TypeHintContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeHint; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeHint(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeHint(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeHintContext typeHint()
        {
            TypeHintContext _localctx = new TypeHintContext(_ctx, State);
            EnterRule(_localctx, 280, RULE_typeHint);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2474;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VisibilityContext : ParserRuleContext
        {
            public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
            public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
            public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
            public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
            public VisibilityContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_visibility; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVisibility(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVisibility(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VisibilityContext visibility()
        {
            VisibilityContext _localctx = new VisibilityContext(_ctx, State);
            EnterRule(_localctx, 282, RULE_visibility);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2476;
                    _la = _input.La(1);
                    if (!(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AmbiguousKeywordContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
            public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
            public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
            public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
            public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
            public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
            public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
            public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
            public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
            public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
            public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
            public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
            public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
            public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
            public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
            public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
            public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
            public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
            public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
            public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
            public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
            public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
            public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
            public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
            public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
            public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
            public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
            public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
            public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
            public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
            public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
            public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
            public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
            public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
            public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
            public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
            public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
            public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
            public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
            public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
            public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
            public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
            public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
            public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
            public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
            public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
            public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
            public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
            public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
            public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
            public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
            public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
            public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
            public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
            public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
            public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
            public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
            public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
            public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
            public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
            public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
            public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
            public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
            public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
            public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
            public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
            public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
            public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
            public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
            public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
            public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
            public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
            public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
            public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
            public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
            public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
            public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
            public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
            public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
            public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
            public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
            public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
            public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
            public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
            public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
            public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
            public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
            public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
            public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
            public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
            public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
            public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AmbiguousKeywordContext ambiguousKeyword()
        {
            AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
            EnterRule(_localctx, 284, RULE_ambiguousKeyword);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2478;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RemCommentContext : ParserRuleContext
        {
            public ITerminalNode REMCOMMENT() { return GetToken(VBAParser.REMCOMMENT, 0); }
            public RemCommentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_remComment; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRemComment(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRemComment(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RemCommentContext remComment()
        {
            RemCommentContext _localctx = new RemCommentContext(_ctx, State);
            EnterRule(_localctx, 286, RULE_remComment);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2480; Match(REMCOMMENT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CommentContext : ParserRuleContext
        {
            public ITerminalNode COMMENT() { return GetToken(VBAParser.COMMENT, 0); }
            public CommentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_comment; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComment(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComment(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CommentContext comment()
        {
            CommentContext _localctx = new CommentContext(_ctx, State);
            EnterRule(_localctx, 288, RULE_comment);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2482; Match(COMMENT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EndOfLineContext : ParserRuleContext
        {
            public CommentContext comment()
            {
                return GetRuleContext<CommentContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
            public RemCommentContext remComment()
            {
                return GetRuleContext<RemCommentContext>(0);
            }
            public EndOfLineContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endOfLine; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEndOfLine(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEndOfLine(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EndOfLineContext endOfLine()
        {
            EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
            EnterRule(_localctx, 290, RULE_endOfLine);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2485;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2484; Match(WS);
                        }
                    }

                    State = 2490;
                    switch (_input.La(1))
                    {
                        case NEWLINE:
                            {
                                State = 2487; Match(NEWLINE);
                            }
                            break;
                        case COMMENT:
                            {
                                State = 2488; comment();
                            }
                            break;
                        case REMCOMMENT:
                            {
                                State = 2489; remComment();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 2493;
                    switch (Interpreter.AdaptivePredict(_input, 418, _ctx))
                    {
                        case 1:
                            {
                                State = 2492; Match(WS);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EndOfStatementContext : ParserRuleContext
        {
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode COLON(int i)
            {
                return GetToken(VBAParser.COLON, i);
            }
            public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
            public EndOfStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endOfStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEndOfStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEndOfStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EndOfStatementContext endOfStatement()
        {
            EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
            EnterRule(_localctx, 292, RULE_endOfStatement);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2505;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 422, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                State = 2503;
                                switch (Interpreter.AdaptivePredict(_input, 421, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2495; endOfLine();
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 2497;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2496; Match(WS);
                                                }
                                            }

                                            State = 2499; Match(COLON);
                                            State = 2501;
                                            switch (Interpreter.AdaptivePredict(_input, 420, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 2500; Match(WS);
                                                    }
                                                    break;
                                            }
                                        }
                                        break;
                                }
                            }
                        }
                        State = 2507;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 422, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
        {
            switch (ruleIndex)
            {
                case 100: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
            }
            return true;
        }
        private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 0: return Precpred(_ctx, 14);

                case 1: return Precpred(_ctx, 12);

                case 2: return Precpred(_ctx, 11);

                case 3: return Precpred(_ctx, 10);

                case 4: return Precpred(_ctx, 9);

                case 5: return Precpred(_ctx, 8);

                case 6: return Precpred(_ctx, 7);

                case 7: return Precpred(_ctx, 5);

                case 8: return Precpred(_ctx, 4);

                case 9: return Precpred(_ctx, 3);

                case 10: return Precpred(_ctx, 2);

                case 11: return Precpred(_ctx, 1);
            }
            return true;
        }

        public static readonly string _serializedATN =
            "\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xDD\x9CF\x4\x2" +
            "\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4" +
            "\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10" +
            "\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15" +
            "\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B" +
            "\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!" +
            "\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t" +
            "*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32" +
            "\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37" +
            "\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4" +
            "@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45" +
            "\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN" +
            "\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t" +
            "X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61" +
            "\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g" +
            "\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4" +
            "q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4" +
            "{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82" +
            "\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87" +
            "\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D" +
            "\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92" +
            "\x4\x93\t\x93\x4\x94\t\x94\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x12D\n\x3\x3" +
            "\x3\x3\x3\x3\x3\x3\x3\x5\x3\x133\n\x3\x3\x3\x5\x3\x136\n\x3\x3\x3\x3\x3" +
            "\x5\x3\x13A\n\x3\x3\x3\x3\x3\x5\x3\x13E\n\x3\x3\x3\x3\x3\x5\x3\x142\n" +
            "\x3\x3\x3\x3\x3\x5\x3\x146\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3" +
            "\x5\x3\x5\x3\x5\x6\x5\x151\n\x5\r\x5\xE\x5\x152\x3\x5\x3\x5\x3\x6\x3\x6" +
            "\x5\x6\x159\n\x6\x3\x6\x3\x6\x5\x6\x15D\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3" +
            "\a\x3\a\x6\a\x165\n\a\r\a\xE\a\x166\x3\b\x3\b\x3\b\x3\b\a\b\x16D\n\b\f" +
            "\b\xE\b\x170\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5" +
            "\t\x17C\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x188" +
            "\n\n\x3\v\x3\v\x5\v\x18C\n\v\x3\f\x3\f\x3\f\x3\f\a\f\x192\n\f\f\f\xE\f" +
            "\x195\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x19F\n\r\x3\xE" +
            "\x3\xE\x3\xE\x3\xE\x5\xE\x1A5\n\xE\x3\xE\x3\xE\x5\xE\x1A9\n\xE\x3\xE\x3" +
            "\xE\x5\xE\x1AD\n\xE\x3\xE\x3\xE\x5\xE\x1B1\n\xE\x3\xE\a\xE\x1B4\n\xE\f" +
            "\xE\xE\xE\x1B7\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x1BD\n\xF\f\xF\xE\xF" +
            "\x1C0\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x5\x10\x207\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x20D\n\x11\x3\x11" +
            "\x3\x11\x5\x11\x211\n\x11\x3\x11\x5\x11\x214\n\x11\x3\x12\x3\x12\x3\x13" +
            "\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15" +
            "\x3\x15\x5\x15\x224\n\x15\x3\x15\x3\x15\x5\x15\x228\n\x15\x3\x15\a\x15" +
            "\x22B\n\x15\f\x15\xE\x15\x22E\v\x15\x5\x15\x230\n\x15\x3\x16\x3\x16\x3" +
            "\x16\x5\x16\x235\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x23B\n\x16\x3" +
            "\x16\x3\x16\x5\x16\x23F\n\x16\x3\x16\a\x16\x242\n\x16\f\x16\xE\x16\x245" +
            "\v\x16\x3\x17\x3\x17\x5\x17\x249\n\x17\x3\x17\x3\x17\x5\x17\x24D\n\x17" +
            "\x3\x17\x5\x17\x250\n\x17\x3\x17\x3\x17\x5\x17\x254\n\x17\x3\x17\x3\x17" +
            "\x3\x18\x3\x18\x5\x18\x25A\n\x18\x3\x18\x3\x18\x5\x18\x25E\n\x18\x3\x18" +
            "\x3\x18\x3\x19\x3\x19\x3\x19\x5\x19\x265\n\x19\x3\x19\x3\x19\x3\x19\x3" +
            "\x19\x5\x19\x26B\n\x19\x3\x19\x3\x19\x5\x19\x26F\n\x19\x3\x19\x5\x19\x272" +
            "\n\x19\x3\x19\x3\x19\x3\x19\x5\x19\x277\n\x19\x3\x19\x3\x19\x3\x19\x3" +
            "\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x281\n\x19\x3\x19\x5\x19\x284" +
            "\n\x19\x3\x19\x5\x19\x287\n\x19\x3\x19\x3\x19\x5\x19\x28B\n\x19\x3\x1A" +
            "\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x291\n\x1A\x3\x1A\x3\x1A\x5\x1A\x295\n\x1A" +
            "\x3\x1A\a\x1A\x298\n\x1A\f\x1A\xE\x1A\x29B\v\x1A\x3\x1B\x3\x1B\x3\x1B" +
            "\x3\x1B\x5\x1B\x2A1\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2A5\n\x1B\x3\x1B\x3\x1B" +
            "\x5\x1B\x2A9\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2AD\n\x1B\x3\x1B\x5\x1B\x2B0" +
            "\n\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2B5\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3" +
            "\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2C0\n\x1C\x3\x1C\x3\x1C" +
            "\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C" +
            "\x2CD\n\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2D4\n\x1E\x3\x1E" +
            "\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x2DB\n\x1E\f\x1E\xE\x1E\x2DE\v\x1E" +
            "\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x2E4\n\x1F\x3\x1F\x3\x1F\x5\x1F\x2E8" +
            "\n\x1F\x3\x1F\x5\x1F\x2EB\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!" +
            "\x3!\x3!\x3\"\x3\"\x3\"\x5\"\x2FA\n\"\x3\"\x3\"\x3\"\x3\"\x5\"\x300\n" +
            "\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x30A\n$\x3$\x3$\x5$\x30E\n$\x3" +
            "$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x318\n%\x3%\x3%\x3%\x3%\x3%\x3%\x5%" +
            "\x320\n%\x3%\x3%\x3%\x5%\x325\n%\x3&\x3&\x3&\x3&\x5&\x32B\n&\x3&\x3&\x5" +
            "&\x32F\n&\x3&\x5&\x332\n&\x3&\x3&\x5&\x336\n&\x3&\x3&\x3&\x3&\x3&\x3&" +
            "\x3&\x3&\x3&\x5&\x341\n&\x3&\x3&\x5&\x345\n&\x3&\x3&\x3&\x5&\x34A\n&\x3" +
            "\'\x3\'\x3\'\x5\'\x34F\n\'\x3\'\x3\'\x5\'\x353\n\'\x3\'\x3\'\x5\'\x357" +
            "\n\'\x3\'\x3\'\x5\'\x35B\n\'\x3\'\x5\'\x35E\n\'\x3\'\x5\'\x361\n\'\x3" +
            "\'\x5\'\x364\n\'\x3\'\x5\'\x367\n\'\x3\'\x3\'\x5\'\x36B\n\'\x3\'\x3\'" +
            "\x3(\x3(\x3(\x3(\x5(\x373\n(\x3(\x3(\x5(\x377\n(\x3(\x5(\x37A\n(\x3(\x5" +
            "(\x37D\n(\x3(\x3(\x5(\x381\n(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*" +
            "\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x398\n+\x3+\x3+\a+\x39C" +
            "\n+\f+\xE+\x39F\v+\x3+\x5+\x3A2\n+\x3+\x3+\x5+\x3A6\n+\x3,\x3,\x3,\x3" +
            ",\x3,\x3,\x3,\x5,\x3AF\n,\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x3BA" +
            "\n.\x3/\x3/\x3/\x5/\x3BF\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31" +
            "\x3\x31\x3\x31\x5\x31\x3C9\n\x31\x3\x31\x3\x31\x5\x31\x3CD\n\x31\x3\x31" +
            "\x6\x31\x3D0\n\x31\r\x31\xE\x31\x3D1\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33" +
            "\x3\x33\x5\x33\x3DA\n\x33\x3\x33\x3\x33\x5\x33\x3DE\n\x33\x3\x33\x3\x33" +
            "\x5\x33\x3E2\n\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x3EA" +
            "\n\x34\x3\x34\x3\x34\x5\x34\x3EE\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3" +
            "\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x3FA\n\x36\x3\x36\x3\x36" +
            "\x5\x36\x3FE\n\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x405\n\x36" +
            "\x5\x36\x407\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x40D\n\x37\x3\x37" +
            "\x3\x37\x5\x37\x411\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x5\x38\x417\n\x38" +
            "\x3\x38\x3\x38\x5\x38\x41B\n\x38\x3\x38\x3\x38\x5\x38\x41F\n\x38\x3\x38" +
            "\x3\x38\x3\x39\x3\x39\a\x39\x425\n\x39\f\x39\xE\x39\x428\v\x39\x3\x39" +
            "\x5\x39\x42B\n\x39\x3\x39\x3\x39\x3:\x3:\x5:\x431\n:\x3:\x3:\x3:\x3:\x3" +
            ":\x3:\x3:\a:\x43A\n:\f:\xE:\x43D\v:\x3;\x3;\x5;\x441\n;\x3;\x3;\x3;\x3" +
            ";\x3;\x3;\x3;\a;\x44A\n;\f;\xE;\x44D\v;\x3<\x3<\x3<\x3<\x3<\a<\x454\n" +
            "<\f<\xE<\x457\v<\x3=\x3=\x5=\x45B\n=\x3=\x3=\x5=\x45F\n=\x3=\x3=\x5=\x463" +
            "\n=\x3=\x3=\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3" +
            "@\x3@\x3@\x3@\x3@\x3@\x5@\x47B\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3" +
            "\x41\x3\x41\x3\x41\x5\x41\x485\n\x41\x3\x41\x3\x41\x5\x41\x489\n\x41\x3" +
            "\x41\a\x41\x48C\n\x41\f\x41\xE\x41\x48F\v\x41\x3\x42\x3\x42\x3\x42\x3" +
            "\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x499\n\x42\x3\x42\x3\x42\x5\x42" +
            "\x49D\n\x42\x3\x42\a\x42\x4A0\n\x42\f\x42\xE\x42\x4A3\v\x42\x3\x43\x3" +
            "\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5" +
            "\x43\x4B0\n\x43\x3\x43\x3\x43\x5\x43\x4B4\n\x43\x3\x43\x3\x43\x3\x43\x3" +
            "\x43\x3\x43\x3\x43\x3\x43\x5\x43\x4BD\n\x43\x3\x43\x3\x43\x5\x43\x4C1" +
            "\n\x43\x3\x43\x5\x43\x4C4\n\x43\x3\x44\x3\x44\x5\x44\x4C8\n\x44\x3\x44" +
            "\x3\x44\x5\x44\x4CC\n\x44\x3\x44\x5\x44\x4CF\n\x44\a\x44\x4D1\n\x44\f" +
            "\x44\xE\x44\x4D4\v\x44\x3\x44\x5\x44\x4D7\n\x44\x3\x44\x5\x44\x4DA\n\x44" +
            "\x3\x44\x3\x44\x5\x44\x4DE\n\x44\x3\x44\x5\x44\x4E1\n\x44\x6\x44\x4E3" +
            "\n\x44\r\x44\xE\x44\x4E4\x5\x44\x4E7\n\x44\x3\x45\x3\x45\x3\x45\x5\x45" +
            "\x4EC\n\x45\x3\x45\x3\x45\x5\x45\x4F0\n\x45\x3\x45\x3\x45\x5\x45\x4F4" +
            "\n\x45\x3\x45\x3\x45\x5\x45\x4F8\n\x45\x5\x45\x4FA\n\x45\x3\x46\x3\x46" +
            "\x3\x46\x3\x46\x5\x46\x500\n\x46\x3\x46\x3\x46\x5\x46\x504\n\x46\x3\x46" +
            "\x5\x46\x507\n\x46\x3G\x3G\x3G\x5G\x50C\nG\x3G\x3G\x5G\x510\nG\x3G\x3" +
            "G\x3G\x3G\x5G\x516\nG\x3G\x5G\x519\nG\x3G\x5G\x51C\nG\x3G\x3G\x5G\x520" +
            "\nG\x3G\x3G\x5G\x524\nG\x3G\x3G\x3H\x3H\x3H\x5H\x52B\nH\x3H\x3H\x5H\x52F" +
            "\nH\x3H\x3H\x3H\x3H\x5H\x535\nH\x3H\x5H\x538\nH\x3H\x3H\x5H\x53C\nH\x3" +
            "H\x3H\x3I\x3I\x3I\x5I\x543\nI\x3I\x3I\x5I\x547\nI\x3I\x3I\x3I\x3I\x5I" +
            "\x54D\nI\x3I\x5I\x550\nI\x3I\x3I\x5I\x554\nI\x3I\x3I\x3J\x3J\x3J\x3J\x5" +
            "J\x55C\nJ\x3J\x3J\x5J\x560\nJ\x3J\x5J\x563\nJ\x3J\x5J\x566\nJ\x3J\x3J" +
            "\x5J\x56A\nJ\x3J\x3J\x3K\x3K\x3K\x3K\x5K\x572\nK\x3K\x3K\x5K\x576\nK\x3" +
            "K\x3K\x5K\x57A\nK\x5K\x57C\nK\x3K\x5K\x57F\nK\x3L\x3L\x3L\x5L\x584\nL" +
            "\x3M\x3M\x3M\x3M\x5M\x58A\nM\x3M\x3M\x5M\x58E\nM\x3M\x3M\x5M\x592\nM\x3" +
            "M\aM\x595\nM\fM\xEM\x598\vM\x3N\x3N\x5N\x59C\nN\x3N\x3N\x5N\x5A0\nN\x3" +
            "N\x3N\x5N\x5A4\nN\x3N\x3N\x3N\x5N\x5A9\nN\x3O\x3O\x3P\x3P\x3P\x3P\x5P" +
            "\x5B1\nP\x5P\x5B3\nP\x3Q\x3Q\x3R\x3R\x3R\x3R\x3S\x3S\x3S\x3S\x5S\x5BF" +
            "\nS\x3S\x3S\x5S\x5C3\nS\x3S\x3S\x3T\x3T\x3T\x3T\x5T\x5CB\nT\x3T\x3T\x5" +
            "T\x5CF\nT\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x5D7\nU\x3U\x3U\x5U\x5DB\nU\x3U" +
            "\x3U\x5U\x5DF\nU\x3U\x3U\x5U\x5E3\nU\x3U\x3U\x5U\x5E7\nU\x3U\x3U\x5U\x5EB" +
            "\nU\x3U\x3U\x3V\x3V\x3V\x3V\x5V\x5F3\nV\x3V\x3V\x5V\x5F7\nV\x3V\x3V\x3" +
            "W\x3W\x3W\x3W\x3W\x3W\x3W\aW\x602\nW\fW\xEW\x605\vW\x3W\x3W\x3X\x3X\x5" +
            "X\x60B\nX\x3X\x3X\x5X\x60F\nX\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x5X" +
            "\x61A\nX\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x621\nY\x3Z\x3Z\x3Z\x5Z\x626\nZ\x3Z\x3" +
            "Z\x5Z\x62A\nZ\x3Z\aZ\x62D\nZ\fZ\xEZ\x630\vZ\x5Z\x632\nZ\x3[\x3[\x3[\x3" +
            "[\x5[\x638\n[\x3[\x3[\x5[\x63C\n[\x3[\x5[\x63F\n[\x3\\\x3\\\x3\\\x3\\" +
            "\x5\\\x645\n\\\x3\\\x3\\\x5\\\x649\n\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x5]\x651" +
            "\n]\x3]\x3]\x5]\x655\n]\x3]\x3]\x3^\x3^\x3_\x3_\x3_\x5_\x65E\n_\x3_\x3" +
            "_\x5_\x662\n_\x3_\x3_\x5_\x666\n_\x3_\x3_\x5_\x66A\n_\x3_\x5_\x66D\n_" +
            "\x3_\x3_\x5_\x671\n_\x3_\x3_\x3`\x3`\x5`\x677\n`\x3`\x3`\x5`\x67B\n`\x3" +
            "`\x3`\x3\x61\x3\x61\x3\x61\x5\x61\x682\n\x61\x3\x61\x3\x61\x3\x61\x3\x61" +
            "\x3\x61\a\x61\x689\n\x61\f\x61\xE\x61\x68C\v\x61\x3\x61\x3\x61\x3\x62" +
            "\x3\x62\x5\x62\x692\n\x62\x3\x62\x3\x62\x5\x62\x696\n\x62\x3\x62\x5\x62" +
            "\x699\n\x62\x3\x62\x5\x62\x69C\n\x62\x3\x62\x5\x62\x69F\n\x62\x3\x62\x3" +
            "\x62\x5\x62\x6A3\n\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63" +
            "\x3\x63\x3\x63\x5\x63\x6AE\n\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3" +
            "\x65\x3\x65\x3\x65\x5\x65\x6B8\n\x65\x3\x65\x3\x65\x5\x65\x6BC\n\x65\x3" +
            "\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x6C3\n\x65\x5\x65\x6C5\n\x65\x3" +
            "\x66\x3\x66\x3\x66\x5\x66\x6CA\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6CF" +
            "\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6D4\n\x66\x3\x66\x3\x66\x5\x66\x6D8" +
            "\n\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6DE\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x6E3\n\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6EA" +
            "\n\x66\x3\x66\x3\x66\x5\x66\x6EE\n\x66\x3\x66\x3\x66\x5\x66\x6F2\n\x66" +
            "\x3\x66\a\x66\x6F5\n\x66\f\x66\xE\x66\x6F8\v\x66\x3\x66\x3\x66\x3\x66" +
            "\x3\x66\x5\x66\x6FE\n\x66\x3\x66\x3\x66\x5\x66\x702\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x706\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x70B\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x70F\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x714\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x718\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x71D\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x721\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x726\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x72A\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x72F\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x733\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x738\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x73C\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x741\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x745\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x74A\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x74E\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x753\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x757\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x75C\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x760\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x765\n\x66\x3\x66\x3\x66" +
            "\x5\x66\x769\n\x66\x3\x66\a\x66\x76C\n\x66\f\x66\xE\x66\x76F\v\x66\x3" +
            "g\x3g\x3g\x5g\x774\ng\x3g\x3g\x3g\x5g\x779\ng\x3g\x3g\x3h\x3h\x5h\x77F" +
            "\nh\x3h\x3h\x5h\x783\nh\x3h\ah\x786\nh\fh\xEh\x789\vh\x3i\x3i\x5i\x78D" +
            "\ni\x3i\x3i\x5i\x791\ni\x3i\x3i\x5i\x795\ni\x5i\x797\ni\x3i\x3i\x5i\x79B" +
            "\ni\x5i\x79D\ni\x3i\x5i\x7A0\ni\x3i\x3i\x5i\x7A4\ni\x3j\x3j\x3j\x3j\x3" +
            "j\x5j\x7AB\nj\x3j\x3j\x3k\x3k\x3k\x3k\x5k\x7B3\nk\x3k\x3k\x5k\x7B7\nk" +
            "\x3k\x3k\x3l\x3l\x3l\x3l\x3l\x3l\x5l\x7C1\nl\x3l\x3l\x5l\x7C5\nl\x3l\x3" +
            "l\x3m\x3m\x3m\x3m\x5m\x7CD\nm\x3m\x3m\x5m\x7D1\nm\x3m\x5m\x7D4\nm\x3n" +
            "\x5n\x7D7\nn\x3n\x3n\x3o\x3o\x5o\x7DD\no\x3p\x3p\x3p\x3p\x5p\x7E3\np\x3" +
            "p\x5p\x7E6\np\x3p\x3p\x5p\x7EA\np\x3p\x3p\x5p\x7EE\np\x3p\x3p\x5p\x7F2" +
            "\np\x3p\x5p\x7F5\np\x3p\x3p\x3p\x3p\ap\x7FB\np\fp\xEp\x7FE\vp\x3q\x3q" +
            "\x3q\x5q\x803\nq\x3q\x3q\x3q\x5q\x808\nq\x3q\x5q\x80B\nq\x3q\x3q\x5q\x80F" +
            "\nq\x3q\x3q\x5q\x813\nq\x3q\x3q\x5q\x817\nq\x3q\x5q\x81A\nq\x3q\x3q\x3" +
            "q\x3q\aq\x820\nq\fq\xEq\x823\vq\x3r\x3r\x5r\x827\nr\x3s\x5s\x82A\ns\x3" +
            "s\x3s\x3s\x5s\x82F\ns\x3s\x3s\x5s\x833\ns\x3s\x5s\x836\ns\x3s\x5s\x839" +
            "\ns\x3s\x5s\x83C\ns\x3s\x3s\x3s\x3s\as\x842\ns\fs\xEs\x845\vs\x3t\x3t" +
            "\x3t\x5t\x84A\nt\x3t\x5t\x84D\nt\x3t\x3t\x3t\x3t\at\x853\nt\ft\xEt\x856" +
            "\vt\x3u\x3u\x3u\x3u\x5u\x85C\nu\x3v\x3v\x5v\x860\nv\x3v\x5v\x863\nv\x3" +
            "v\x5v\x866\nv\x3v\x5v\x869\nv\x3v\x3v\x3v\x3v\av\x86F\nv\fv\xEv\x872\v" +
            "v\x3w\x3w\x5w\x876\nw\x3w\x5w\x879\nw\x3w\x5w\x87C\nw\x3w\x3w\x5w\x880" +
            "\nw\x3w\x3w\x5w\x884\nw\x5w\x886\nw\x3w\x3w\x5w\x88A\nw\x3w\x5w\x88D\n" +
            "w\x3w\x5w\x890\nw\x3w\x3w\x3w\x3w\aw\x896\nw\fw\xEw\x899\vw\x3x\x3x\x5" +
            "x\x89D\nx\x3x\x3x\x5x\x8A1\nx\x6x\x8A3\nx\rx\xEx\x8A4\x3x\x5x\x8A8\nx" +
            "\x3x\x5x\x8AB\nx\x3x\x5x\x8AE\nx\x3x\x3x\x3x\x3x\ax\x8B4\nx\fx\xEx\x8B7" +
            "\vx\x3y\x3y\x5y\x8BB\ny\x3y\x3y\x5y\x8BF\ny\x3z\x5z\x8C2\nz\x3z\x3z\x3" +
            "{\x5{\x8C7\n{\x3{\x5{\x8CA\n{\x3{\x3{\x5{\x8CE\n{\a{\x8D0\n{\f{\xE{\x8D3" +
            "\v{\x3{\x3{\x5{\x8D7\n{\x3{\x3{\x5{\x8DB\n{\x3{\x5{\x8DE\n{\a{\x8E0\n" +
            "{\f{\xE{\x8E3\v{\x3|\x5|\x8E6\n|\x3|\x3|\x5|\x8EA\n|\x3|\x5|\x8ED\n|\x3" +
            "|\x3|\x3}\x3}\x5}\x8F3\n}\x3}\x3}\x5}\x8F7\n}\x3~\x3~\x5~\x8FB\n~\x3~" +
            "\x3~\x5~\x8FF\n~\x3~\x3~\x5~\x903\n~\x3~\a~\x906\n~\f~\xE~\x909\v~\x5" +
            "~\x90B\n~\x3~\x5~\x90E\n~\x3~\x3~\x3\x7F\x3\x7F\x5\x7F\x914\n\x7F\x3\x7F" +
            "\x3\x7F\x5\x7F\x918\n\x7F\x3\x7F\x3\x7F\x5\x7F\x91C\n\x7F\x3\x7F\x3\x7F" +
            "\x5\x7F\x920\n\x7F\x3\x7F\x5\x7F\x923\n\x7F\x3\x7F\x3\x7F\x5\x7F\x927" +
            "\n\x7F\x3\x7F\x5\x7F\x92A\n\x7F\x3\x7F\x5\x7F\x92D\n\x7F\x3\x7F\x5\x7F" +
            "\x930\n\x7F\x3\x7F\x5\x7F\x933\n\x7F\x3\x7F\x5\x7F\x936\n\x7F\x3\x80\x3" +
            "\x80\x5\x80\x93A\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\x5\x81\x940\n\x81\x3" +
            "\x81\x3\x81\x5\x81\x944\n\x81\x3\x81\a\x81\x947\n\x81\f\x81\xE\x81\x94A" +
            "\v\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\x951\n\x82\x3\x82\x3" +
            "\x82\x3\x83\x3\x83\x6\x83\x957\n\x83\r\x83\xE\x83\x958\x3\x84\x3\x84\x5" +
            "\x84\x95D\n\x84\x3\x84\x3\x84\x5\x84\x961\n\x84\x3\x84\x3\x84\x5\x84\x965" +
            "\n\x84\x3\x84\x5\x84\x968\n\x84\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\a\x86" +
            "\x96F\n\x86\f\x86\xE\x86\x972\v\x86\x3\x86\x3\x86\x3\x86\x6\x86\x977\n" +
            "\x86\r\x86\xE\x86\x978\x5\x86\x97B\n\x86\x3\x87\x3\x87\x3\x88\x3\x88\x3" +
            "\x88\a\x88\x982\n\x88\f\x88\xE\x88\x985\v\x88\x3\x89\x3\x89\x5\x89\x989" +
            "\n\x89\x3\x89\x3\x89\x5\x89\x98D\n\x89\x3\x8A\x3\x8A\x5\x8A\x991\n\x8A" +
            "\x3\x8A\x3\x8A\x5\x8A\x995\n\x8A\x3\x8A\x5\x8A\x998\n\x8A\x3\x8B\x3\x8B" +
            "\x3\x8B\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x5\x8D\x9A1\n\x8D\x3\x8D\x5\x8D\x9A4" +
            "\n\x8D\x3\x8D\x3\x8D\x5\x8D\x9A8\n\x8D\x3\x8D\x5\x8D\x9AB\n\x8D\x3\x8E" +
            "\x3\x8E\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x91\x3\x91\x3\x92\x3\x92\x3\x93" +
            "\x5\x93\x9B8\n\x93\x3\x93\x3\x93\x3\x93\x5\x93\x9BD\n\x93\x3\x93\x5\x93" +
            "\x9C0\n\x93\x3\x94\x3\x94\x5\x94\x9C4\n\x94\x3\x94\x3\x94\x5\x94\x9C8" +
            "\n\x94\a\x94\x9CA\n\x94\f\x94\xE\x94\x9CD\v\x94\x3\x94\x2\x2\x3\xCA\x95" +
            "\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18" +
            "\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2" +
            "\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2" +
            "N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2" +
            "l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88" +
            "\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C" +
            "\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0" +
            "\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4" +
            "\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8" +
            "\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC" +
            "\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100" +
            "\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112" +
            "\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124" +
            "\x2\x126\x2\x2\x17\x5\x2\x15\x15\"\"\xA9\xA9\x3\x2%\x30\x4\x2\xB2\xB2" +
            "\xB6\xB6\x3\x2\x46J\x3\x2yz\a\x2\x11\x11\x15\x15XX\x82\x82\x8D\x8D\x4" +
            "\x2\x90\x91\xBA\xBA\x4\x2\x65g\xA0\xA0\x3\x2\b\t\x4\x2\xA2\xA2\xA8\xA8" +
            "\x4\x2\xBE\xBE\xC7\xC7\x4\x2\xC6\xC6\xC9\xC9\a\x2YY\x63\x63\xC0\xC3\xC5" +
            "\xC5\xC8\xC8\x4\x2\x4\x4\n\n\x4\x2\x17\x18\x83\x83\x3\x2\x17\x18\f\x2" +
            "\x16\x16\x19\x19  ##\x34\x34ZZ^^\xA1\xA1\xA6\xA6\xB3\xB3\x6\x2KKvw\xAD" +
            "\xAD\xCE\xD4\x4\x2\x3\a\xBC\xBC\x6\x2MMQQ\x86\x86\x8B\x8B\v\x2\v\x37@" +
            "\x45K\x63hhnx{|\x81\x86\x8B\x90\x92\xBB\xB4D\x2\x128\x3\x2\x2\x2\x4\x12C" +
            "\x3\x2\x2\x2\x6\x147\x3\x2\x2\x2\b\x14D\x3\x2\x2\x2\n\x156\x3\x2\x2\x2" +
            "\f\x164\x3\x2\x2\x2\xE\x168\x3\x2\x2\x2\x10\x17B\x3\x2\x2\x2\x12\x187" +
            "\x3\x2\x2\x2\x14\x18B\x3\x2\x2\x2\x16\x18D\x3\x2\x2\x2\x18\x19E\x3\x2" +
            "\x2\x2\x1A\x1A0\x3\x2\x2\x2\x1C\x1B8\x3\x2\x2\x2\x1E\x206\x3\x2\x2\x2" +
            " \x208\x3\x2\x2\x2\"\x215\x3\x2\x2\x2$\x217\x3\x2\x2\x2&\x21B\x3\x2\x2" +
            "\x2(\x21F\x3\x2\x2\x2*\x234\x3\x2\x2\x2,\x246\x3\x2\x2\x2.\x257\x3\x2" +
            "\x2\x2\x30\x264\x3\x2\x2\x2\x32\x28C\x3\x2\x2\x2\x34\x29C\x3\x2\x2\x2" +
            "\x36\x2CC\x3\x2\x2\x2\x38\x2CE\x3\x2\x2\x2:\x2D3\x3\x2\x2\x2<\x2E1\x3" +
            "\x2\x2\x2>\x2EE\x3\x2\x2\x2@\x2F2\x3\x2\x2\x2\x42\x2F9\x3\x2\x2\x2\x44" +
            "\x303\x3\x2\x2\x2\x46\x305\x3\x2\x2\x2H\x311\x3\x2\x2\x2J\x326\x3\x2\x2" +
            "\x2L\x34E\x3\x2\x2\x2N\x36E\x3\x2\x2\x2P\x384\x3\x2\x2\x2R\x388\x3\x2" +
            "\x2\x2T\x3A5\x3\x2\x2\x2V\x3A7\x3\x2\x2\x2X\x3B0\x3\x2\x2\x2Z\x3B2\x3" +
            "\x2\x2\x2\\\x3BB\x3\x2\x2\x2^\x3C0\x3\x2\x2\x2`\x3C4\x3\x2\x2\x2\x62\x3D3" +
            "\x3\x2\x2\x2\x64\x3D9\x3\x2\x2\x2\x66\x3E5\x3\x2\x2\x2h\x3F1\x3\x2\x2" +
            "\x2j\x3F5\x3\x2\x2\x2l\x408\x3\x2\x2\x2n\x414\x3\x2\x2\x2p\x422\x3\x2" +
            "\x2\x2r\x42E\x3\x2\x2\x2t\x43E\x3\x2\x2\x2v\x44E\x3\x2\x2\x2x\x458\x3" +
            "\x2\x2\x2z\x466\x3\x2\x2\x2|\x46A\x3\x2\x2\x2~\x472\x3\x2\x2\x2\x80\x47C" +
            "\x3\x2\x2\x2\x82\x490\x3\x2\x2\x2\x84\x4A4\x3\x2\x2\x2\x86\x4E6\x3\x2" +
            "\x2\x2\x88\x4F9\x3\x2\x2\x2\x8A\x4FB\x3\x2\x2\x2\x8C\x50B\x3\x2\x2\x2" +
            "\x8E\x52A\x3\x2\x2\x2\x90\x542\x3\x2\x2\x2\x92\x557\x3\x2\x2\x2\x94\x56D" +
            "\x3\x2\x2\x2\x96\x580\x3\x2\x2\x2\x98\x585\x3\x2\x2\x2\x9A\x599\x3\x2" +
            "\x2\x2\x9C\x5AA\x3\x2\x2\x2\x9E\x5AC\x3\x2\x2\x2\xA0\x5B4\x3\x2\x2\x2" +
            "\xA2\x5B6\x3\x2\x2\x2\xA4\x5BA\x3\x2\x2\x2\xA6\x5C6\x3\x2\x2\x2\xA8\x5D2" +
            "\x3\x2\x2\x2\xAA\x5EE\x3\x2\x2\x2\xAC\x5FA\x3\x2\x2\x2\xAE\x619\x3\x2" +
            "\x2\x2\xB0\x61B\x3\x2\x2\x2\xB2\x631\x3\x2\x2\x2\xB4\x633\x3\x2\x2\x2" +
            "\xB6\x640\x3\x2\x2\x2\xB8\x64C\x3\x2\x2\x2\xBA\x658\x3\x2\x2\x2\xBC\x65D" +
            "\x3\x2\x2\x2\xBE\x674\x3\x2\x2\x2\xC0\x681\x3\x2\x2\x2\xC2\x68F\x3\x2" +
            "\x2\x2\xC4\x6A6\x3\x2\x2\x2\xC6\x6AF\x3\x2\x2\x2\xC8\x6B3\x3\x2\x2\x2" +
            "\xCA\x6FD\x3\x2\x2\x2\xCC\x773\x3\x2\x2\x2\xCE\x77C\x3\x2\x2\x2\xD0\x78A" +
            "\x3\x2\x2\x2\xD2\x7A5\x3\x2\x2\x2\xD4\x7AE\x3\x2\x2\x2\xD6\x7BA\x3\x2" +
            "\x2\x2\xD8\x7C8\x3\x2\x2\x2\xDA\x7D6\x3\x2\x2\x2\xDC\x7DC\x3\x2\x2\x2" +
            "\xDE\x7DE\x3\x2\x2\x2\xE0\x7FF\x3\x2\x2\x2\xE2\x826\x3\x2\x2\x2\xE4\x829" +
            "\x3\x2\x2\x2\xE6\x846\x3\x2\x2\x2\xE8\x85B\x3\x2\x2\x2\xEA\x85D\x3\x2" +
            "\x2\x2\xEC\x875\x3\x2\x2\x2\xEE\x89C\x3\x2\x2\x2\xF0\x8B8\x3\x2\x2\x2" +
            "\xF2\x8C1\x3\x2\x2\x2\xF4\x8D1\x3\x2\x2\x2\xF6\x8E5\x3\x2\x2\x2\xF8\x8F0" +
            "\x3\x2\x2\x2\xFA\x8F8\x3\x2\x2\x2\xFC\x913\x3\x2\x2\x2\xFE\x937\x3\x2" +
            "\x2\x2\x100\x93D\x3\x2\x2\x2\x102\x950\x3\x2\x2\x2\x104\x956\x3\x2\x2" +
            "\x2\x106\x95A\x3\x2\x2\x2\x108\x969\x3\x2\x2\x2\x10A\x97A\x3\x2\x2\x2" +
            "\x10C\x97C\x3\x2\x2\x2\x10E\x97E\x3\x2\x2\x2\x110\x986\x3\x2\x2\x2\x112" +
            "\x98E\x3\x2\x2\x2\x114\x999\x3\x2\x2\x2\x116\x99C\x3\x2\x2\x2\x118\x9A0" +
            "\x3\x2\x2\x2\x11A\x9AC\x3\x2\x2\x2\x11C\x9AE\x3\x2\x2\x2\x11E\x9B0\x3" +
            "\x2\x2\x2\x120\x9B2\x3\x2\x2\x2\x122\x9B4\x3\x2\x2\x2\x124\x9B7\x3\x2" +
            "\x2\x2\x126\x9CB\x3\x2\x2\x2\x128\x129\x5\x4\x3\x2\x129\x12A\a\x2\x2\x3" +
            "\x12A\x3\x3\x2\x2\x2\x12B\x12D\a\xDC\x2\x2\x12C\x12B\x3\x2\x2\x2\x12C" +
            "\x12D\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x132\x5\x126\x94\x2\x12F" +
            "\x130\x5\x6\x4\x2\x130\x131\x5\x126\x94\x2\x131\x133\x3\x2\x2\x2\x132" +
            "\x12F\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x136" +
            "\x5\b\x5\x2\x135\x134\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x137\x3\x2" +
            "\x2\x2\x137\x139\x5\x126\x94\x2\x138\x13A\x5\f\a\x2\x139\x138\x3\x2\x2" +
            "\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13D\x5\x126\x94" +
            "\x2\x13C\x13E\x5\xE\b\x2\x13D\x13C\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E" +
            "\x13F\x3\x2\x2\x2\x13F\x141\x5\x126\x94\x2\x140\x142\x5\x16\f\x2\x141" +
            "\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x145" +
            "\x5\x126\x94\x2\x144\x146\a\xDC\x2\x2\x145\x144\x3\x2\x2\x2\x145\x146" +
            "\x3\x2\x2\x2\x146\x5\x3\x2\x2\x2\x147\x148\a\xB4\x2\x2\x148\x149\a\xDC" +
            "\x2\x2\x149\x14A\a\xD3\x2\x2\x14A\x14B\a\xDC\x2\x2\x14B\x14C\a\x1E\x2" +
            "\x2\x14C\a\x3\x2\x2\x2\x14D\x14E\a\x13\x2\x2\x14E\x150\x5\x126\x94\x2" +
            "\x14F\x151\x5\n\x6\x2\x150\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152" +
            "\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x155" +
            "\a@\x2\x2\x155\t\x3\x2\x2\x2\x156\x158\x5\x104\x83\x2\x157\x159\a\xDC" +
            "\x2\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15A\x3\x2\x2" +
            "\x2\x15A\x15C\a\xC0\x2\x2\x15B\x15D\a\xDC\x2\x2\x15C\x15B\x3\x2\x2\x2" +
            "\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x15F\x5\x116\x8C\x2" +
            "\x15F\x160\x5\x126\x94\x2\x160\v\x3\x2\x2\x2\x161\x162\x5\x1A\xE\x2\x162" +
            "\x163\x5\x126\x94\x2\x163\x165\x3\x2\x2\x2\x164\x161\x3\x2\x2\x2\x165" +
            "\x166\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167\r\x3" +
            "\x2\x2\x2\x168\x16E\x5\x12\n\x2\x169\x16A\x5\x126\x94\x2\x16A\x16B\x5" +
            "\x12\n\x2\x16B\x16D\x3\x2\x2\x2\x16C\x169\x3\x2\x2\x2\x16D\x170\x3\x2" +
            "\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x171\x3\x2\x2" +
            "\x2\x170\x16E\x3\x2\x2\x2\x171\x172\x5\x126\x94\x2\x172\xF\x3\x2\x2\x2" +
            "\x173\x174\a}\x2\x2\x174\x175\a\xDC\x2\x2\x175\x17C\a\xD1\x2\x2\x176\x177" +
            "\a\x7F\x2\x2\x177\x178\a\xDC\x2\x2\x178\x17C\t\x2\x2\x2\x179\x17C\a~\x2" +
            "\x2\x17A\x17C\a\x80\x2\x2\x17B\x173\x3\x2\x2\x2\x17B\x176\x3\x2\x2\x2" +
            "\x17B\x179\x3\x2\x2\x2\x17B\x17A\x3\x2\x2\x2\x17C\x11\x3\x2\x2\x2\x17D" +
            "\x188\x5\x122\x92\x2\x17E\x188\x5\x30\x19\x2\x17F\x188\x5:\x1E\x2\x180" +
            "\x188\x5\x42\"\x2\x181\x188\x5*\x16\x2\x182\x188\x5^\x30\x2\x183\x188" +
            "\x5\xCCg\x2\x184\x188\x5\x10\t\x2\x185\x188\x5\xC0\x61\x2\x186\x188\x5" +
            "\x14\v\x2\x187\x17D\x3\x2\x2\x2\x187\x17E\x3\x2\x2\x2\x187\x17F\x3\x2" +
            "\x2\x2\x187\x180\x3\x2\x2\x2\x187\x181\x3\x2\x2\x2\x187\x182\x3\x2\x2" +
            "\x2\x187\x183\x3\x2\x2\x2\x187\x184\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2" +
            "\x187\x186\x3\x2\x2\x2\x188\x13\x3\x2\x2\x2\x189\x18C\x5n\x38\x2\x18A" +
            "\x18C\x5p\x39\x2\x18B\x189\x3\x2\x2\x2\x18B\x18A\x3\x2\x2\x2\x18C\x15" +
            "\x3\x2\x2\x2\x18D\x193\x5\x18\r\x2\x18E\x18F\x5\x126\x94\x2\x18F\x190" +
            "\x5\x18\r\x2\x190\x192\x3\x2\x2\x2\x191\x18E\x3\x2\x2\x2\x192\x195\x3" +
            "\x2\x2\x2\x193\x191\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x196\x3\x2" +
            "\x2\x2\x195\x193\x3\x2\x2\x2\x196\x197\x5\x126\x94\x2\x197\x17\x3\x2\x2" +
            "\x2\x198\x19F\x5L\'\x2\x199\x19F\x5\x8CG\x2\x19A\x19F\x5\x8EH\x2\x19B" +
            "\x19F\x5\x90I\x2\x19C\x19F\x5\xBC_\x2\x19D\x19F\x5\x14\v\x2\x19E\x198" +
            "\x3\x2\x2\x2\x19E\x199\x3\x2\x2\x2\x19E\x19A\x3\x2\x2\x2\x19E\x19B\x3" +
            "\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19D\x3\x2\x2\x2\x19F\x19\x3\x2\x2" +
            "\x2\x1A0\x1A1\a\xF\x2\x2\x1A1\x1A2\a\xDC\x2\x2\x1A2\x1A4\x5\xE8u\x2\x1A3" +
            "\x1A5\a\xDC\x2\x2\x1A4\x1A3\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A6" +
            "\x3\x2\x2\x2\x1A6\x1A8\a\xC0\x2\x2\x1A7\x1A9\a\xDC\x2\x2\x1A8\x1A7\x3" +
            "\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1B5\x5\x116" +
            "\x8C\x2\x1AB\x1AD\a\xDC\x2\x2\x1AC\x1AB\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2" +
            "\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1B0\a\t\x2\x2\x1AF\x1B1\a\xDC\x2\x2\x1B0" +
            "\x1AF\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B4" +
            "\x5\x116\x8C\x2\x1B3\x1AC\x3\x2\x2\x2\x1B4\x1B7\x3\x2\x2\x2\x1B5\x1B3" +
            "\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B\x3\x2\x2\x2\x1B7\x1B5\x3\x2" +
            "\x2\x2\x1B8\x1BE\x5\x1E\x10\x2\x1B9\x1BA\x5\x126\x94\x2\x1BA\x1BB\x5\x1E" +
            "\x10\x2\x1BB\x1BD\x3\x2\x2\x2\x1BC\x1B9\x3\x2\x2\x2\x1BD\x1C0\x3\x2\x2" +
            "\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C1\x3\x2\x2\x2" +
            "\x1C0\x1BE\x3\x2\x2\x2\x1C1\x1C2\x5\x126\x94\x2\x1C2\x1D\x3\x2\x2\x2\x1C3" +
            "\x207\x5\x114\x8B\x2\x1C4\x207\x5 \x11\x2\x1C5\x207\x5\x1A\xE\x2\x1C6" +
            "\x207\x5\"\x12\x2\x1C7\x207\x5$\x13\x2\x1C8\x207\x5&\x14\x2\x1C9\x207" +
            "\x5(\x15\x2\x1CA\x207\x5*\x16\x2\x1CB\x207\x5.\x18\x2\x1CC\x207\x5\x34" +
            "\x1B\x2\x1CD\x207\x5\x32\x1A\x2\x1CE\x207\x5\x36\x1C\x2\x1CF\x207\x5\x38" +
            "\x1D\x2\x1D0\x207\x5> \x2\x1D1\x207\x5@!\x2\x1D2\x207\x5\x44#\x2\x1D3" +
            "\x207\x5\xDCo\x2\x1D4\x207\x5\x46$\x2\x1D5\x207\x5H%\x2\x1D6\x207\x5J" +
            "&\x2\x1D7\x207\x5N(\x2\x1D8\x207\x5P)\x2\x1D9\x207\x5R*\x2\x1DA\x207\x5" +
            "T+\x2\x1DB\x207\x5^\x30\x2\x1DC\x207\x5`\x31\x2\x1DD\x207\x5\x62\x32\x2" +
            "\x1DE\x207\x5\x64\x33\x2\x1DF\x207\x5\x66\x34\x2\x1E0\x207\x5h\x35\x2" +
            "\x1E1\x207\x5j\x36\x2\x1E2\x207\x5l\x37\x2\x1E3\x207\x5\x14\v\x2\x1E4" +
            "\x207\x5x=\x2\x1E5\x207\x5z>\x2\x1E6\x207\x5|?\x2\x1E7\x207\x5~@\x2\x1E8" +
            "\x207\x5\x80\x41\x2\x1E9\x207\x5\x82\x42\x2\x1EA\x207\x5\x84\x43\x2\x1EB" +
            "\x207\x5\x8A\x46\x2\x1EC\x207\x5\x92J\x2\x1ED\x207\x5\x94K\x2\x1EE\x207" +
            "\x5\x96L\x2\x1EF\x207\x5\x98M\x2\x1F0\x207\x5\x9CO\x2\x1F1\x207\x5\x9E" +
            "P\x2\x1F2\x207\x5\xA0Q\x2\x1F3\x207\x5\xA2R\x2\x1F4\x207\x5\xA4S\x2\x1F5" +
            "\x207\x5\xA6T\x2\x1F6\x207\x5\xA8U\x2\x1F7\x207\x5\xAAV\x2\x1F8\x207\x5" +
            "\xACW\x2\x1F9\x207\x5\xB4[\x2\x1FA\x207\x5\xB6\\\x2\x1FB\x207\x5\xB8]" +
            "\x2\x1FC\x207\x5\xBA^\x2\x1FD\x207\x5\xBE`\x2\x1FE\x207\x5\xC6\x64\x2" +
            "\x1FF\x207\x5\xC8\x65\x2\x200\x207\x5\xCCg\x2\x201\x207\x5\xD2j\x2\x202" +
            "\x207\x5\xD4k\x2\x203\x207\x5\xD6l\x2\x204\x207\x5\xD8m\x2\x205\x207\x5" +
            "\xE2r\x2\x206\x1C3\x3\x2\x2\x2\x206\x1C4\x3\x2\x2\x2\x206\x1C5\x3\x2\x2" +
            "\x2\x206\x1C6\x3\x2\x2\x2\x206\x1C7\x3\x2\x2\x2\x206\x1C8\x3\x2\x2\x2" +
            "\x206\x1C9\x3\x2\x2\x2\x206\x1CA\x3\x2\x2\x2\x206\x1CB\x3\x2\x2\x2\x206" +
            "\x1CC\x3\x2\x2\x2\x206\x1CD\x3\x2\x2\x2\x206\x1CE\x3\x2\x2\x2\x206\x1CF" +
            "\x3\x2\x2\x2\x206\x1D0\x3\x2\x2\x2\x206\x1D1\x3\x2\x2\x2\x206\x1D2\x3" +
            "\x2\x2\x2\x206\x1D3\x3\x2\x2\x2\x206\x1D4\x3\x2\x2\x2\x206\x1D5\x3\x2" +
            "\x2\x2\x206\x1D6\x3\x2\x2\x2\x206\x1D7\x3\x2\x2\x2\x206\x1D8\x3\x2\x2" +
            "\x2\x206\x1D9\x3\x2\x2\x2\x206\x1DA\x3\x2\x2\x2\x206\x1DB\x3\x2\x2\x2" +
            "\x206\x1DC\x3\x2\x2\x2\x206\x1DD\x3\x2\x2\x2\x206\x1DE\x3\x2\x2\x2\x206" +
            "\x1DF\x3\x2\x2\x2\x206\x1E0\x3\x2\x2\x2\x206\x1E1\x3\x2\x2\x2\x206\x1E2" +
            "\x3\x2\x2\x2\x206\x1E3\x3\x2\x2\x2\x206\x1E4\x3\x2\x2\x2\x206\x1E5\x3" +
            "\x2\x2\x2\x206\x1E6\x3\x2\x2\x2\x206\x1E7\x3\x2\x2\x2\x206\x1E8\x3\x2" +
            "\x2\x2\x206\x1E9\x3\x2\x2\x2\x206\x1EA\x3\x2\x2\x2\x206\x1EB\x3\x2\x2" +
            "\x2\x206\x1EC\x3\x2\x2\x2\x206\x1ED\x3\x2\x2\x2\x206\x1EE\x3\x2\x2\x2" +
            "\x206\x1EF\x3\x2\x2\x2\x206\x1F0\x3\x2\x2\x2\x206\x1F1\x3\x2\x2\x2\x206" +
            "\x1F2\x3\x2\x2\x2\x206\x1F3\x3\x2\x2\x2\x206\x1F4\x3\x2\x2\x2\x206\x1F5" +
            "\x3\x2\x2\x2\x206\x1F6\x3\x2\x2\x2\x206\x1F7\x3\x2\x2\x2\x206\x1F8\x3" +
            "\x2\x2\x2\x206\x1F9\x3\x2\x2\x2\x206\x1FA\x3\x2\x2\x2\x206\x1FB\x3\x2" +
            "\x2\x2\x206\x1FC\x3\x2\x2\x2\x206\x1FD\x3\x2\x2\x2\x206\x1FE\x3\x2\x2" +
            "\x2\x206\x1FF\x3\x2\x2\x2\x206\x200\x3\x2\x2\x2\x206\x201\x3\x2\x2\x2" +
            "\x206\x202\x3\x2\x2\x2\x206\x203\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x206" +
            "\x205\x3\x2\x2\x2\x207\x1F\x3\x2\x2\x2\x208\x209\a\x10\x2\x2\x209\x20A" +
            "\a\xDC\x2\x2\x20A\x213\x5\xCA\x66\x2\x20B\x20D\a\xDC\x2\x2\x20C\x20B\x3" +
            "\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x210\a\t\x2" +
            "\x2\x20F\x211\a\xDC\x2\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2" +
            "\x211\x212\x3\x2\x2\x2\x212\x214\x5\xCA\x66\x2\x213\x20C\x3\x2\x2\x2\x213" +
            "\x214\x3\x2\x2\x2\x214!\x3\x2\x2\x2\x215\x216\a\x14\x2\x2\x216#\x3\x2" +
            "\x2\x2\x217\x218\a\x1C\x2\x2\x218\x219\a\xDC\x2\x2\x219\x21A\x5\xCA\x66" +
            "\x2\x21A%\x3\x2\x2\x2\x21B\x21C\a\x1D\x2\x2\x21C\x21D\a\xDC\x2\x2\x21D" +
            "\x21E\x5\xCA\x66\x2\x21E\'\x3\x2\x2\x2\x21F\x22F\a\x1F\x2\x2\x220\x221" +
            "\a\xDC\x2\x2\x221\x22C\x5\xDAn\x2\x222\x224\a\xDC\x2\x2\x223\x222\x3\x2" +
            "\x2\x2\x223\x224\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x227\a\t\x2\x2" +
            "\x226\x228\a\xDC\x2\x2\x227\x226\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228" +
            "\x229\x3\x2\x2\x2\x229\x22B\x5\xDAn\x2\x22A\x223\x3\x2\x2\x2\x22B\x22E" +
            "\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x230\x3" +
            "\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F\x220\x3\x2\x2\x2\x22F\x230\x3\x2" +
            "\x2\x2\x230)\x3\x2\x2\x2\x231\x232\x5\x11C\x8F\x2\x232\x233\a\xDC\x2\x2" +
            "\x233\x235\x3\x2\x2\x2\x234\x231\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235" +
            "\x236\x3\x2\x2\x2\x236\x237\a!\x2\x2\x237\x238\a\xDC\x2\x2\x238\x243\x5" +
            ",\x17\x2\x239\x23B\a\xDC\x2\x2\x23A\x239\x3\x2\x2\x2\x23A\x23B\x3\x2\x2" +
            "\x2\x23B\x23C\x3\x2\x2\x2\x23C\x23E\a\t\x2\x2\x23D\x23F\a\xDC\x2\x2\x23E" +
            "\x23D\x3\x2\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x242" +
            "\x5,\x17\x2\x241\x23A\x3\x2\x2\x2\x242\x245\x3\x2\x2\x2\x243\x241\x3\x2" +
            "\x2\x2\x243\x244\x3\x2\x2\x2\x244+\x3\x2\x2\x2\x245\x243\x3\x2\x2\x2\x246" +
            "\x248\x5\x104\x83\x2\x247\x249\x5\x11A\x8E\x2\x248\x247\x3\x2\x2\x2\x248" +
            "\x249\x3\x2\x2\x2\x249\x24C\x3\x2\x2\x2\x24A\x24B\a\xDC\x2\x2\x24B\x24D" +
            "\x5\x106\x84\x2\x24C\x24A\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24F" +
            "\x3\x2\x2\x2\x24E\x250\a\xDC\x2\x2\x24F\x24E\x3\x2\x2\x2\x24F\x250\x3" +
            "\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x253\a\xC0\x2\x2\x252\x254\a\xDC" +
            "\x2\x2\x253\x252\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x255\x3\x2\x2" +
            "\x2\x255\x256\x5\xCA\x66\x2\x256-\x3\x2\x2\x2\x257\x259\a#\x2\x2\x258" +
            "\x25A\a\xDC\x2\x2\x259\x258\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25B" +
            "\x3\x2\x2\x2\x25B\x25D\a\xC0\x2\x2\x25C\x25E\a\xDC\x2\x2\x25D\x25C\x3" +
            "\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x260\x5\xCA" +
            "\x66\x2\x260/\x3\x2\x2\x2\x261\x262\x5\x11C\x8F\x2\x262\x263\a\xDC\x2" +
            "\x2\x263\x265\x3\x2\x2\x2\x264\x261\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2" +
            "\x265\x266\x3\x2\x2\x2\x266\x267\a$\x2\x2\x267\x26A\a\xDC\x2\x2\x268\x269" +
            "\a\x8A\x2\x2\x269\x26B\a\xDC\x2\x2\x26A\x268\x3\x2\x2\x2\x26A\x26B\x3" +
            "\x2\x2\x2\x26B\x271\x3\x2\x2\x2\x26C\x26E\aO\x2\x2\x26D\x26F\x5\x11A\x8E" +
            "\x2\x26E\x26D\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x272\x3\x2\x2\x2" +
            "\x270\x272\a\xA7\x2\x2\x271\x26C\x3\x2\x2\x2\x271\x270\x3\x2\x2\x2\x272" +
            "\x273\x3\x2\x2\x2\x273\x274\a\xDC\x2\x2\x274\x276\x5\x104\x83\x2\x275" +
            "\x277\x5\x11A\x8E\x2\x276\x275\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277" +
            "\x278\x3\x2\x2\x2\x278\x279\a\xDC\x2\x2\x279\x27A\a\x62\x2\x2\x27A\x27B" +
            "\a\xDC\x2\x2\x27B\x280\a\xCE\x2\x2\x27C\x27D\a\xDC\x2\x2\x27D\x27E\a\r" +
            "\x2\x2\x27E\x27F\a\xDC\x2\x2\x27F\x281\a\xCE\x2\x2\x280\x27C\x3\x2\x2" +
            "\x2\x280\x281\x3\x2\x2\x2\x281\x286\x3\x2\x2\x2\x282\x284\a\xDC\x2\x2" +
            "\x283\x282\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285" +
            "\x287\x5\xFA~\x2\x286\x283\x3\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287\x28A" +
            "\x3\x2\x2\x2\x288\x289\a\xDC\x2\x2\x289\x28B\x5\x106\x84\x2\x28A\x288" +
            "\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x31\x3\x2\x2\x2\x28C\x28D\t\x3" +
            "\x2\x2\x28D\x28E\a\xDC\x2\x2\x28E\x299\x5\x112\x8A\x2\x28F\x291\a\xDC" +
            "\x2\x2\x290\x28F\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291\x292\x3\x2\x2" +
            "\x2\x292\x294\a\t\x2\x2\x293\x295\a\xDC\x2\x2\x294\x293\x3\x2\x2\x2\x294" +
            "\x295\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x298\x5\x112\x8A\x2\x297" +
            "\x290\x3\x2\x2\x2\x298\x29B\x3\x2\x2\x2\x299\x297\x3\x2\x2\x2\x299\x29A" +
            "\x3\x2\x2\x2\x29A\x33\x3\x2\x2\x2\x29B\x299\x3\x2\x2\x2\x29C\x29D\a\x31" +
            "\x2\x2\x29D\x29E\a\xDC\x2\x2\x29E\x2A0\x5\xCA\x66\x2\x29F\x2A1\a\xDC\x2" +
            "\x2\x2A0\x29F\x3\x2\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2" +
            "\x2A2\x2A4\a\t\x2\x2\x2A3\x2A5\a\xDC\x2\x2\x2A4\x2A3\x3\x2\x2\x2\x2A4" +
            "\x2A5\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2AF\x5\xCA\x66\x2\x2A7\x2A9" +
            "\a\xDC\x2\x2\x2A8\x2A7\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AA\x3" +
            "\x2\x2\x2\x2AA\x2AC\a\t\x2\x2\x2AB\x2AD\a\xDC\x2\x2\x2AC\x2AB\x3\x2\x2" +
            "\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2B0\x5\xCA\x66\x2" +
            "\x2AF\x2A8\x3\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x35\x3\x2\x2\x2\x2B1" +
            "\x2B2\a\x33\x2\x2\x2B2\x2B4\x5\x126\x94\x2\x2B3\x2B5\x5\x1C\xF\x2\x2B4" +
            "\x2B3\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B7" +
            "\a_\x2\x2\x2B7\x2CD\x3\x2\x2\x2\x2B8\x2B9\a\x33\x2\x2\x2B9\x2BA\a\xDC" +
            "\x2\x2\x2BA\x2BB\t\x4\x2\x2\x2BB\x2BC\a\xDC\x2\x2\x2BC\x2BD\x5\xCA\x66" +
            "\x2\x2BD\x2BF\x5\x126\x94\x2\x2BE\x2C0\x5\x1C\xF\x2\x2BF\x2BE\x3\x2\x2" +
            "\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2\a_\x2\x2\x2C2" +
            "\x2CD\x3\x2\x2\x2\x2C3\x2C4\a\x33\x2\x2\x2C4\x2C5\x5\x126\x94\x2\x2C5" +
            "\x2C6\x5\x1C\xF\x2\x2C6\x2C7\a_\x2\x2\x2C7\x2C8\a\xDC\x2\x2\x2C8\x2C9" +
            "\t\x4\x2\x2\x2C9\x2CA\a\xDC\x2\x2\x2CA\x2CB\x5\xCA\x66\x2\x2CB\x2CD\x3" +
            "\x2\x2\x2\x2CC\x2B1\x3\x2\x2\x2\x2CC\x2B8\x3\x2\x2\x2\x2CC\x2C3\x3\x2" +
            "\x2\x2\x2CD\x37\x3\x2\x2\x2\x2CE\x2CF\a@\x2\x2\x2CF\x39\x3\x2\x2\x2\x2D0" +
            "\x2D1\x5\x11C\x8F\x2\x2D1\x2D2\a\xDC\x2\x2\x2D2\x2D4\x3\x2\x2\x2\x2D3" +
            "\x2D0\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2D6" +
            "\a\x41\x2\x2\x2D6\x2D7\a\xDC\x2\x2\x2D7\x2D8\x5\x104\x83\x2\x2D8\x2DC" +
            "\x5\x126\x94\x2\x2D9\x2DB\x5<\x1F\x2\x2DA\x2D9\x3\x2\x2\x2\x2DB\x2DE\x3" +
            "\x2\x2\x2\x2DC\x2DA\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DF\x3\x2" +
            "\x2\x2\x2DE\x2DC\x3\x2\x2\x2\x2DF\x2E0\a\x38\x2\x2\x2E0;\x3\x2\x2\x2\x2E1" +
            "\x2EA\x5\x104\x83\x2\x2E2\x2E4\a\xDC\x2\x2\x2E3\x2E2\x3\x2\x2\x2\x2E3" +
            "\x2E4\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5\x2E7\a\xC0\x2\x2\x2E6\x2E8" +
            "\a\xDC\x2\x2\x2E7\x2E6\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2E9\x3" +
            "\x2\x2\x2\x2E9\x2EB\x5\xCA\x66\x2\x2EA\x2E3\x3\x2\x2\x2\x2EA\x2EB\x3\x2" +
            "\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2ED\x5\x126\x94\x2\x2ED=\x3\x2\x2\x2" +
            "\x2EE\x2EF\a\x43\x2\x2\x2EF\x2F0\a\xDC\x2\x2\x2F0\x2F1\x5\xCA\x66\x2\x2F1" +
            "?\x3\x2\x2\x2\x2F2\x2F3\a\x44\x2\x2\x2F3\x2F4\a\xDC\x2\x2\x2F4\x2F5\x5" +
            "\xCA\x66\x2\x2F5\x41\x3\x2\x2\x2\x2F6\x2F7\x5\x11C\x8F\x2\x2F7\x2F8\a" +
            "\xDC\x2\x2\x2F8\x2FA\x3\x2\x2\x2\x2F9\x2F6\x3\x2\x2\x2\x2F9\x2FA\x3\x2" +
            "\x2\x2\x2FA\x2FB\x3\x2\x2\x2\x2FB\x2FC\a\x45\x2\x2\x2FC\x2FD\a\xDC\x2" +
            "\x2\x2FD\x2FF\x5\x104\x83\x2\x2FE\x300\a\xDC\x2\x2\x2FF\x2FE\x3\x2\x2" +
            "\x2\x2FF\x300\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x302\x5\xFA~\x2\x302" +
            "\x43\x3\x2\x2\x2\x303\x304\t\x5\x2\x2\x304\x45\x3\x2\x2\x2\x305\x306\a" +
            "L\x2\x2\x306\x307\a\xDC\x2\x2\x307\x309\x5\xCA\x66\x2\x308\x30A\a\xDC" +
            "\x2\x2\x309\x308\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30B\x3\x2\x2" +
            "\x2\x30B\x30D\a\t\x2\x2\x30C\x30E\a\xDC\x2\x2\x30D\x30C\x3\x2\x2\x2\x30D" +
            "\x30E\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30F\x310\x5\xCA\x66\x2\x310G" +
            "\x3\x2\x2\x2\x311\x312\aN\x2\x2\x312\x313\a\xDC\x2\x2\x313\x314\a\x35" +
            "\x2\x2\x314\x315\a\xDC\x2\x2\x315\x317\x5\x104\x83\x2\x316\x318\x5\x11A" +
            "\x8E\x2\x317\x316\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x319\x3\x2\x2" +
            "\x2\x319\x31A\a\xDC\x2\x2\x31A\x31B\aW\x2\x2\x31B\x31C\a\xDC\x2\x2\x31C" +
            "\x31D\x5\xCA\x66\x2\x31D\x31F\x5\x126\x94\x2\x31E\x320\x5\x1C\xF\x2\x31F" +
            "\x31E\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x324" +
            "\as\x2\x2\x322\x323\a\xDC\x2\x2\x323\x325\x5\x104\x83\x2\x324\x322\x3" +
            "\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325I\x3\x2\x2\x2\x326\x327\aN\x2\x2\x327" +
            "\x328\a\xDC\x2\x2\x328\x32A\x5\x104\x83\x2\x329\x32B\x5\x11A\x8E\x2\x32A" +
            "\x329\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B\x32E\x3\x2\x2\x2\x32C\x32D" +
            "\a\xDC\x2\x2\x32D\x32F\x5\x106\x84\x2\x32E\x32C\x3\x2\x2\x2\x32E\x32F" +
            "\x3\x2\x2\x2\x32F\x331\x3\x2\x2\x2\x330\x332\a\xDC\x2\x2\x331\x330\x3" +
            "\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x335\a\xC0" +
            "\x2\x2\x334\x336\a\xDC\x2\x2\x335\x334\x3\x2\x2\x2\x335\x336\x3\x2\x2" +
            "\x2\x336\x337\x3\x2\x2\x2\x337\x338\x5\xCA\x66\x2\x338\x339\a\xDC\x2\x2" +
            "\x339\x33A\a\xAC\x2\x2\x33A\x33B\a\xDC\x2\x2\x33B\x340\x5\xCA\x66\x2\x33C" +
            "\x33D\a\xDC\x2\x2\x33D\x33E\a\xA4\x2\x2\x33E\x33F\a\xDC\x2\x2\x33F\x341" +
            "\x5\xCA\x66\x2\x340\x33C\x3\x2\x2\x2\x340\x341\x3\x2\x2\x2\x341\x342\x3" +
            "\x2\x2\x2\x342\x344\x5\x126\x94\x2\x343\x345\x5\x1C\xF\x2\x344\x343\x3" +
            "\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x349\as\x2" +
            "\x2\x347\x348\a\xDC\x2\x2\x348\x34A\x5\x104\x83\x2\x349\x347\x3\x2\x2" +
            "\x2\x349\x34A\x3\x2\x2\x2\x34AK\x3\x2\x2\x2\x34B\x34C\x5\x11C\x8F\x2\x34C" +
            "\x34D\a\xDC\x2\x2\x34D\x34F\x3\x2\x2\x2\x34E\x34B\x3\x2\x2\x2\x34E\x34F" +
            "\x3\x2\x2\x2\x34F\x352\x3\x2\x2\x2\x350\x351\a\xA3\x2\x2\x351\x353\a\xDC" +
            "\x2\x2\x352\x350\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x353\x354\x3\x2\x2" +
            "\x2\x354\x356\aO\x2\x2\x355\x357\a\xDC\x2\x2\x356\x355\x3\x2\x2\x2\x356" +
            "\x357\x3\x2\x2\x2\x357\x358\x3\x2\x2\x2\x358\x35A\x5\x104\x83\x2\x359" +
            "\x35B\x5\x11A\x8E\x2\x35A\x359\x3\x2\x2\x2\x35A\x35B\x3\x2\x2\x2\x35B" +
            "\x360\x3\x2\x2\x2\x35C\x35E\a\xDC\x2\x2\x35D\x35C\x3\x2\x2\x2\x35D\x35E" +
            "\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x361\x5\xFA~\x2\x360\x35D\x3\x2" +
            "\x2\x2\x360\x361\x3\x2\x2\x2\x361\x366\x3\x2\x2\x2\x362\x364\a\xDC\x2" +
            "\x2\x363\x362\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2" +
            "\x365\x367\x5\x106\x84\x2\x366\x363\x3\x2\x2\x2\x366\x367\x3\x2\x2\x2" +
            "\x367\x368\x3\x2\x2\x2\x368\x36A\x5\x126\x94\x2\x369\x36B\x5\x1C\xF\x2" +
            "\x36A\x369\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C" +
            "\x36D\a\x39\x2\x2\x36DM\x3\x2\x2\x2\x36E\x36F\aP\x2\x2\x36F\x370\a\xDC" +
            "\x2\x2\x370\x372\x5\xDAn\x2\x371\x373\a\xDC\x2\x2\x372\x371\x3\x2\x2\x2" +
            "\x372\x373\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x376\a\t\x2\x2\x375" +
            "\x377\a\xDC\x2\x2\x376\x375\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377\x379" +
            "\x3\x2\x2\x2\x378\x37A\x5\xCA\x66\x2\x379\x378\x3\x2\x2\x2\x379\x37A\x3" +
            "\x2\x2\x2\x37A\x37C\x3\x2\x2\x2\x37B\x37D\a\xDC\x2\x2\x37C\x37B\x3\x2" +
            "\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x380\a\t\x2\x2" +
            "\x37F\x381\a\xDC\x2\x2\x380\x37F\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381" +
            "\x382\x3\x2\x2\x2\x382\x383\x5\xCA\x66\x2\x383O\x3\x2\x2\x2\x384\x385" +
            "\aR\x2\x2\x385\x386\a\xDC\x2\x2\x386\x387\x5\xCA\x66\x2\x387Q\x3\x2\x2" +
            "\x2\x388\x389\aS\x2\x2\x389\x38A\a\xDC\x2\x2\x38A\x38B\x5\xCA\x66\x2\x38B" +
            "S\x3\x2\x2\x2\x38C\x38D\aT\x2\x2\x38D\x38E\a\xDC\x2\x2\x38E\x38F\x5X-" +
            "\x2\x38F\x390\a\xDC\x2\x2\x390\x391\a\xAA\x2\x2\x391\x392\a\xDC\x2\x2" +
            "\x392\x397\x5\x1E\x10\x2\x393\x394\a\xDC\x2\x2\x394\x395\a\x36\x2\x2\x395" +
            "\x396\a\xDC\x2\x2\x396\x398\x5\x1E\x10\x2\x397\x393\x3\x2\x2\x2\x397\x398" +
            "\x3\x2\x2\x2\x398\x3A6\x3\x2\x2\x2\x399\x39D\x5V,\x2\x39A\x39C\x5Z.\x2" +
            "\x39B\x39A\x3\x2\x2\x2\x39C\x39F\x3\x2\x2\x2\x39D\x39B\x3\x2\x2\x2\x39D" +
            "\x39E\x3\x2\x2\x2\x39E\x3A1\x3\x2\x2\x2\x39F\x39D\x3\x2\x2\x2\x3A0\x3A2" +
            "\x5\\/\x2\x3A1\x3A0\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A3\x3\x2" +
            "\x2\x2\x3A3\x3A4\a:\x2\x2\x3A4\x3A6\x3\x2\x2\x2\x3A5\x38C\x3\x2\x2\x2" +
            "\x3A5\x399\x3\x2\x2\x2\x3A6U\x3\x2\x2\x2\x3A7\x3A8\aT\x2\x2\x3A8\x3A9" +
            "\a\xDC\x2\x2\x3A9\x3AA\x5X-\x2\x3AA\x3AB\a\xDC\x2\x2\x3AB\x3AC\a\xAA\x2" +
            "\x2\x3AC\x3AE\x5\x126\x94\x2\x3AD\x3AF\x5\x1C\xF\x2\x3AE\x3AD\x3\x2\x2" +
            "\x2\x3AE\x3AF\x3\x2\x2\x2\x3AFW\x3\x2\x2\x2\x3B0\x3B1\x5\xCA\x66\x2\x3B1" +
            "Y\x3\x2\x2\x2\x3B2\x3B3\a\x37\x2\x2\x3B3\x3B4\a\xDC\x2\x2\x3B4\x3B5\x5" +
            "X-\x2\x3B5\x3B6\a\xDC\x2\x2\x3B6\x3B7\a\xAA\x2\x2\x3B7\x3B9\x5\x126\x94" +
            "\x2\x3B8\x3BA\x5\x1C\xF\x2\x3B9\x3B8\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2" +
            "\x3BA[\x3\x2\x2\x2\x3BB\x3BC\a\x36\x2\x2\x3BC\x3BE\x5\x126\x94\x2\x3BD" +
            "\x3BF\x5\x1C\xF\x2\x3BE\x3BD\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF]\x3" +
            "\x2\x2\x2\x3C0\x3C1\aV\x2\x2\x3C1\x3C2\a\xDC\x2\x2\x3C2\x3C3\x5\x104\x83" +
            "\x2\x3C3_\x3\x2\x2\x2\x3C4\x3C5\aX\x2\x2\x3C5\x3C6\a\xDC\x2\x2\x3C6\x3CF" +
            "\x5\xDAn\x2\x3C7\x3C9\a\xDC\x2\x2\x3C8\x3C7\x3\x2\x2\x2\x3C8\x3C9\x3\x2" +
            "\x2\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA\x3CC\a\t\x2\x2\x3CB\x3CD\a\xDC\x2\x2" +
            "\x3CC\x3CB\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE" +
            "\x3D0\x5\xCA\x66\x2\x3CF\x3C8\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1\x3CF" +
            "\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x61\x3\x2\x2\x2\x3D3\x3D4\a[\x2" +
            "\x2\x3D4\x3D5\a\xDC\x2\x2\x3D5\x3D6\x5\xCA\x66\x2\x3D6\x63\x3\x2\x2\x2" +
            "\x3D7\x3D8\a\x61\x2\x2\x3D8\x3DA\a\xDC\x2\x2\x3D9\x3D7\x3\x2\x2\x2\x3D9" +
            "\x3DA\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DD\x5\xE8u\x2\x3DC\x3DE" +
            "\a\xDC\x2\x2\x3DD\x3DC\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3DF\x3" +
            "\x2\x2\x2\x3DF\x3E1\a\xC0\x2\x2\x3E0\x3E2\a\xDC\x2\x2\x3E1\x3E0\x3\x2" +
            "\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3\x3E4\x5\xCA\x66" +
            "\x2\x3E4\x65\x3\x2\x2\x2\x3E5\x3E6\a\x64\x2\x2\x3E6\x3E7\a\xDC\x2\x2\x3E7" +
            "\x3E9\x5\xDAn\x2\x3E8\x3EA\a\xDC\x2\x2\x3E9\x3E8\x3\x2\x2\x2\x3E9\x3EA" +
            "\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3ED\a\t\x2\x2\x3EC\x3EE\a\xDC" +
            "\x2\x2\x3ED\x3EC\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3EF\x3\x2\x2" +
            "\x2\x3EF\x3F0\x5\xCA\x66\x2\x3F0g\x3\x2\x2\x2\x3F1\x3F2\a\\\x2\x2\x3F2" +
            "\x3F3\a\xDC\x2\x2\x3F3\x3F4\x5\xCA\x66\x2\x3F4i\x3\x2\x2\x2\x3F5\x3F6" +
            "\a]\x2\x2\x3F6\x3F7\a\xDC\x2\x2\x3F7\x406\x5\xCA\x66\x2\x3F8\x3FA\a\xDC" +
            "\x2\x2\x3F9\x3F8\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2" +
            "\x2\x3FB\x3FD\a\t\x2\x2\x3FC\x3FE\a\xDC\x2\x2\x3FD\x3FC\x3\x2\x2\x2\x3FD" +
            "\x3FE\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x404\x5\xCA\x66\x2\x400\x401" +
            "\a\xDC\x2\x2\x401\x402\a\xAC\x2\x2\x402\x403\a\xDC\x2\x2\x403\x405\x5" +
            "\xCA\x66\x2\x404\x400\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x407\x3\x2" +
            "\x2\x2\x406\x3F9\x3\x2\x2\x2\x406\x407\x3\x2\x2\x2\x407k\x3\x2\x2\x2\x408" +
            "\x409\ah\x2\x2\x409\x40A\a\xDC\x2\x2\x40A\x40C\x5\xE8u\x2\x40B\x40D\a" +
            "\xDC\x2\x2\x40C\x40B\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40E\x3\x2" +
            "\x2\x2\x40E\x410\a\xC0\x2\x2\x40F\x411\a\xDC\x2\x2\x410\x40F\x3\x2\x2" +
            "\x2\x410\x411\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412\x413\x5\xCA\x66\x2" +
            "\x413m\x3\x2\x2\x2\x414\x416\ai\x2\x2\x415\x417\a\xDC\x2\x2\x416\x415" +
            "\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x418\x3\x2\x2\x2\x418\x41A\x5" +
            "\x104\x83\x2\x419\x41B\a\xDC\x2\x2\x41A\x419\x3\x2\x2\x2\x41A\x41B\x3" +
            "\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41E\a\xC0\x2\x2\x41D\x41F\a\xDC" +
            "\x2\x2\x41E\x41D\x3\x2\x2\x2\x41E\x41F\x3\x2\x2\x2\x41F\x420\x3\x2\x2" +
            "\x2\x420\x421\x5\xCA\x66\x2\x421o\x3\x2\x2\x2\x422\x426\x5r:\x2\x423\x425" +
            "\x5t;\x2\x424\x423\x3\x2\x2\x2\x425\x428\x3\x2\x2\x2\x426\x424\x3\x2\x2" +
            "\x2\x426\x427\x3\x2\x2\x2\x427\x42A\x3\x2\x2\x2\x428\x426\x3\x2\x2\x2" +
            "\x429\x42B\x5v<\x2\x42A\x429\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42C" +
            "\x3\x2\x2\x2\x42C\x42D\am\x2\x2\x42Dq\x3\x2\x2\x2\x42E\x430\aj\x2\x2\x42F" +
            "\x431\a\xDC\x2\x2\x430\x42F\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x432" +
            "\x3\x2\x2\x2\x432\x433\x5X-\x2\x433\x434\a\xDC\x2\x2\x434\x435\a\xAA\x2" +
            "\x2\x435\x43B\x5\x126\x94\x2\x436\x43A\x5\xE\b\x2\x437\x43A\x5\x16\f\x2" +
            "\x438\x43A\x5\x1C\xF\x2\x439\x436\x3\x2\x2\x2\x439\x437\x3\x2\x2\x2\x439" +
            "\x438\x3\x2\x2\x2\x43A\x43D\x3\x2\x2\x2\x43B\x439\x3\x2\x2\x2\x43B\x43C" +
            "\x3\x2\x2\x2\x43Cs\x3\x2\x2\x2\x43D\x43B\x3\x2\x2\x2\x43E\x440\ak\x2\x2" +
            "\x43F\x441\a\xDC\x2\x2\x440\x43F\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441" +
            "\x442\x3\x2\x2\x2\x442\x443\x5X-\x2\x443\x444\a\xDC\x2\x2\x444\x445\a" +
            "\xAA\x2\x2\x445\x44B\x5\x126\x94\x2\x446\x44A\x5\xE\b\x2\x447\x44A\x5" +
            "\x16\f\x2\x448\x44A\x5\x1C\xF\x2\x449\x446\x3\x2\x2\x2\x449\x447\x3\x2" +
            "\x2\x2\x449\x448\x3\x2\x2\x2\x44A\x44D\x3\x2\x2\x2\x44B\x449\x3\x2\x2" +
            "\x2\x44B\x44C\x3\x2\x2\x2\x44Cu\x3\x2\x2\x2\x44D\x44B\x3\x2\x2\x2\x44E" +
            "\x44F\al\x2\x2\x44F\x455\x5\x126\x94\x2\x450\x454\x5\xE\b\x2\x451\x454" +
            "\x5\x16\f\x2\x452\x454\x5\x1C\xF\x2\x453\x450\x3\x2\x2\x2\x453\x451\x3" +
            "\x2\x2\x2\x453\x452\x3\x2\x2\x2\x454\x457\x3\x2\x2\x2\x455\x453\x3\x2" +
            "\x2\x2\x455\x456\x3\x2\x2\x2\x456w\x3\x2\x2\x2\x457\x455\x3\x2\x2\x2\x458" +
            "\x45A\ao\x2\x2\x459\x45B\a\xDC\x2\x2\x45A\x459\x3\x2\x2\x2\x45A\x45B\x3" +
            "\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45E\a\xC4\x2\x2\x45D\x45F\a\xDC" +
            "\x2\x2\x45E\x45D\x3\x2\x2\x2\x45E\x45F\x3\x2\x2\x2\x45F\x460\x3\x2\x2" +
            "\x2\x460\x462\x5\xF4{\x2\x461\x463\a\xDC\x2\x2\x462\x461\x3\x2\x2\x2\x462" +
            "\x463\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\a\xCB\x2\x2\x465y\x3" +
            "\x2\x2\x2\x466\x467\ap\x2\x2\x467\x468\a\xDC\x2\x2\x468\x469\x5\xCA\x66" +
            "\x2\x469{\x3\x2\x2\x2\x46A\x46B\ar\x2\x2\x46B\x46C\a\xDC\x2\x2\x46C\x46D" +
            "\x5\xCA\x66\x2\x46D\x46E\a\xDC\x2\x2\x46E\x46F\a\x12\x2\x2\x46F\x470\a" +
            "\xDC\x2\x2\x470\x471\x5\xCA\x66\x2\x471}\x3\x2\x2\x2\x472\x473\t\x6\x2" +
            "\x2\x473\x47A\a\xDC\x2\x2\x474\x475\aS\x2\x2\x475\x476\a\xDC\x2\x2\x476" +
            "\x47B\x5\xCA\x66\x2\x477\x478\a\x95\x2\x2\x478\x479\a\xDC\x2\x2\x479\x47B" +
            "\as\x2\x2\x47A\x474\x3\x2\x2\x2\x47A\x477\x3\x2\x2\x2\x47B\x7F\x3\x2\x2" +
            "\x2\x47C\x47D\ax\x2\x2\x47D\x47E\a\xDC\x2\x2\x47E\x47F\x5\xCA\x66\x2\x47F" +
            "\x480\a\xDC\x2\x2\x480\x481\aS\x2\x2\x481\x482\a\xDC\x2\x2\x482\x48D\x5" +
            "\xCA\x66\x2\x483\x485\a\xDC\x2\x2\x484\x483\x3\x2\x2\x2\x484\x485\x3\x2" +
            "\x2\x2\x485\x486\x3\x2\x2\x2\x486\x488\a\t\x2\x2\x487\x489\a\xDC\x2\x2" +
            "\x488\x487\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48A\x3\x2\x2\x2\x48A" +
            "\x48C\x5\xCA\x66\x2\x48B\x484\x3\x2\x2\x2\x48C\x48F\x3\x2\x2\x2\x48D\x48B" +
            "\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x81\x3\x2\x2\x2\x48F\x48D\x3\x2" +
            "\x2\x2\x490\x491\ax\x2\x2\x491\x492\a\xDC\x2\x2\x492\x493\x5\xCA\x66\x2" +
            "\x493\x494\a\xDC\x2\x2\x494\x495\aR\x2\x2\x495\x496\a\xDC\x2\x2\x496\x4A1" +
            "\x5\xCA\x66\x2\x497\x499\a\xDC\x2\x2\x498\x497\x3\x2\x2\x2\x498\x499\x3" +
            "\x2\x2\x2\x499\x49A\x3\x2\x2\x2\x49A\x49C\a\t\x2\x2\x49B\x49D\a\xDC\x2" +
            "\x2\x49C\x49B\x3\x2\x2\x2\x49C\x49D\x3\x2\x2\x2\x49D\x49E\x3\x2\x2\x2" +
            "\x49E\x4A0\x5\xCA\x66\x2\x49F\x498\x3\x2\x2\x2\x4A0\x4A3\x3\x2\x2\x2\x4A1" +
            "\x49F\x3\x2\x2\x2\x4A1\x4A2\x3\x2\x2\x2\x4A2\x83\x3\x2\x2\x2\x4A3\x4A1" +
            "\x3\x2\x2\x2\x4A4\x4A5\a{\x2\x2\x4A5\x4A6\a\xDC\x2\x2\x4A6\x4A7\x5\xCA" +
            "\x66\x2\x4A7\x4A8\a\xDC\x2\x2\x4A8\x4A9\aN\x2\x2\x4A9\x4AA\a\xDC\x2\x2" +
            "\x4AA\x4AF\t\a\x2\x2\x4AB\x4AC\a\xDC\x2\x2\x4AC\x4AD\a\v\x2\x2\x4AD\x4AE" +
            "\a\xDC\x2\x2\x4AE\x4B0\t\b\x2\x2\x4AF\x4AB\x3\x2\x2\x2\x4AF\x4B0\x3\x2" +
            "\x2\x2\x4B0\x4B3\x3\x2\x2\x2\x4B1\x4B2\a\xDC\x2\x2\x4B2\x4B4\t\t\x2\x2" +
            "\x4B3\x4B1\x3\x2\x2\x2\x4B3\x4B4\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5" +
            "\x4B6\a\xDC\x2\x2\x4B6\x4B7\a\x12\x2\x2\x4B7\x4B8\a\xDC\x2\x2\x4B8\x4C3" +
            "\x5\xDAn\x2\x4B9\x4BA\a\xDC\x2\x2\x4BA\x4BC\a`\x2\x2\x4BB\x4BD\a\xDC\x2" +
            "\x2\x4BC\x4BB\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2" +
            "\x4BE\x4C0\a\xC0\x2\x2\x4BF\x4C1\a\xDC\x2\x2\x4C0\x4BF\x3\x2\x2\x2\x4C0" +
            "\x4C1\x3\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C4\x5\xCA\x66\x2\x4C3\x4B9" +
            "\x3\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2\x4C4\x85\x3\x2\x2\x2\x4C5\x4D2\x5\x88" +
            "\x45\x2\x4C6\x4C8\a\xDC\x2\x2\x4C7\x4C6\x3\x2\x2\x2\x4C7\x4C8\x3\x2\x2" +
            "\x2\x4C8\x4C9\x3\x2\x2\x2\x4C9\x4CB\t\n\x2\x2\x4CA\x4CC\a\xDC\x2\x2\x4CB" +
            "\x4CA\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4CE\x3\x2\x2\x2\x4CD\x4CF" +
            "\x5\x88\x45\x2\x4CE\x4CD\x3\x2\x2\x2\x4CE\x4CF\x3\x2\x2\x2\x4CF\x4D1\x3" +
            "\x2\x2\x2\x4D0\x4C7\x3\x2\x2\x2\x4D1\x4D4\x3\x2\x2\x2\x4D2\x4D0\x3\x2" +
            "\x2\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3\x4E7\x3\x2\x2\x2\x4D4\x4D2\x3\x2\x2" +
            "\x2\x4D5\x4D7\x5\x88\x45\x2\x4D6\x4D5\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2" +
            "\x4D7\x4E2\x3\x2\x2\x2\x4D8\x4DA\a\xDC\x2\x2\x4D9\x4D8\x3\x2\x2\x2\x4D9" +
            "\x4DA\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DD\t\n\x2\x2\x4DC\x4DE" +
            "\a\xDC\x2\x2\x4DD\x4DC\x3\x2\x2\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE\x4E0\x3" +
            "\x2\x2\x2\x4DF\x4E1\x5\x88\x45\x2\x4E0\x4DF\x3\x2\x2\x2\x4E0\x4E1\x3\x2" +
            "\x2\x2\x4E1\x4E3\x3\x2\x2\x2\x4E2\x4D9\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2" +
            "\x2\x4E4\x4E2\x3\x2\x2\x2\x4E4\x4E5\x3\x2\x2\x2\x4E5\x4E7\x3\x2\x2\x2" +
            "\x4E6\x4C5\x3\x2\x2\x2\x4E6\x4D6\x3\x2\x2\x2\x4E7\x87\x3\x2\x2\x2\x4E8" +
            "\x4FA\x5\xCA\x66\x2\x4E9\x4F7\t\v\x2\x2\x4EA\x4EC\a\xDC\x2\x2\x4EB\x4EA" +
            "\x3\x2\x2\x2\x4EB\x4EC\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EF\a\xC4" +
            "\x2\x2\x4EE\x4F0\a\xDC\x2\x2\x4EF\x4EE\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2" +
            "\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\x4F3\x5\xF4{\x2\x4F2\x4F4\a\xDC\x2\x2\x4F3" +
            "\x4F2\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2\x2\x4F5\x4F6" +
            "\a\xCB\x2\x2\x4F6\x4F8\x3\x2\x2\x2\x4F7\x4EB\x3\x2\x2\x2\x4F7\x4F8\x3" +
            "\x2\x2\x2\x4F8\x4FA\x3\x2\x2\x2\x4F9\x4E8\x3\x2\x2\x2\x4F9\x4E9\x3\x2" +
            "\x2\x2\x4FA\x89\x3\x2\x2\x2\x4FB\x4FC\a\x85\x2\x2\x4FC\x4FD\a\xDC\x2\x2" +
            "\x4FD\x4FF\x5\xDAn\x2\x4FE\x500\a\xDC\x2\x2\x4FF\x4FE\x3\x2\x2\x2\x4FF" +
            "\x500\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x506\a\t\x2\x2\x502\x504" +
            "\a\xDC\x2\x2\x503\x502\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504\x505\x3" +
            "\x2\x2\x2\x505\x507\x5\x86\x44\x2\x506\x503\x3\x2\x2\x2\x506\x507\x3\x2" +
            "\x2\x2\x507\x8B\x3\x2\x2\x2\x508\x509\x5\x11C\x8F\x2\x509\x50A\a\xDC\x2" +
            "\x2\x50A\x50C\x3\x2\x2\x2\x50B\x508\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2" +
            "\x50C\x50F\x3\x2\x2\x2\x50D\x50E\a\xA3\x2\x2\x50E\x510\a\xDC\x2\x2\x50F" +
            "\x50D\x3\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511\x512" +
            "\a\x87\x2\x2\x512\x513\a\xDC\x2\x2\x513\x515\x5\x104\x83\x2\x514\x516" +
            "\x5\x11A\x8E\x2\x515\x514\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x51B" +
            "\x3\x2\x2\x2\x517\x519\a\xDC\x2\x2\x518\x517\x3\x2\x2\x2\x518\x519\x3" +
            "\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x51C\x5\xFA~\x2\x51B\x518\x3\x2\x2" +
            "\x2\x51B\x51C\x3\x2\x2\x2\x51C\x51F\x3\x2\x2\x2\x51D\x51E\a\xDC\x2\x2" +
            "\x51E\x520\x5\x106\x84\x2\x51F\x51D\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2" +
            "\x520\x521\x3\x2\x2\x2\x521\x523\x5\x126\x94\x2\x522\x524\x5\x1C\xF\x2" +
            "\x523\x522\x3\x2\x2\x2\x523\x524\x3\x2\x2\x2\x524\x525\x3\x2\x2\x2\x525" +
            "\x526\a;\x2\x2\x526\x8D\x3\x2\x2\x2\x527\x528\x5\x11C\x8F\x2\x528\x529" +
            "\a\xDC\x2\x2\x529\x52B\x3\x2\x2\x2\x52A\x527\x3\x2\x2\x2\x52A\x52B\x3" +
            "\x2\x2\x2\x52B\x52E\x3\x2\x2\x2\x52C\x52D\a\xA3\x2\x2\x52D\x52F\a\xDC" +
            "\x2\x2\x52E\x52C\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x530\x3\x2\x2" +
            "\x2\x530\x531\a\x89\x2\x2\x531\x532\a\xDC\x2\x2\x532\x537\x5\x104\x83" +
            "\x2\x533\x535\a\xDC\x2\x2\x534\x533\x3\x2\x2\x2\x534\x535\x3\x2\x2\x2" +
            "\x535\x536\x3\x2\x2\x2\x536\x538\x5\xFA~\x2\x537\x534\x3\x2\x2\x2\x537" +
            "\x538\x3\x2\x2\x2\x538\x539\x3\x2\x2\x2\x539\x53B\x5\x126\x94\x2\x53A" +
            "\x53C\x5\x1C\xF\x2\x53B\x53A\x3\x2\x2\x2\x53B\x53C\x3\x2\x2\x2\x53C\x53D" +
            "\x3\x2\x2\x2\x53D\x53E\a;\x2\x2\x53E\x8F\x3\x2\x2\x2\x53F\x540\x5\x11C" +
            "\x8F\x2\x540\x541\a\xDC\x2\x2\x541\x543\x3\x2\x2\x2\x542\x53F\x3\x2\x2" +
            "\x2\x542\x543\x3\x2\x2\x2\x543\x546\x3\x2\x2\x2\x544\x545\a\xA3\x2\x2" +
            "\x545\x547\a\xDC\x2\x2\x546\x544\x3\x2\x2\x2\x546\x547\x3\x2\x2\x2\x547" +
            "\x548\x3\x2\x2\x2\x548\x549\a\x88\x2\x2\x549\x54A\a\xDC\x2\x2\x54A\x54F" +
            "\x5\x104\x83\x2\x54B\x54D\a\xDC\x2\x2\x54C\x54B\x3\x2\x2\x2\x54C\x54D" +
            "\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x550\x5\xFA~\x2\x54F\x54C\x3\x2" +
            "\x2\x2\x54F\x550\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\x553\x5\x126\x94" +
            "\x2\x552\x554\x5\x1C\xF\x2\x553\x552\x3\x2\x2\x2\x553\x554\x3\x2\x2\x2" +
            "\x554\x555\x3\x2\x2\x2\x555\x556\a;\x2\x2\x556\x91\x3\x2\x2\x2\x557\x558" +
            "\a\x8C\x2\x2\x558\x559\a\xDC\x2\x2\x559\x55B\x5\xDAn\x2\x55A\x55C\a\xDC" +
            "\x2\x2\x55B\x55A\x3\x2\x2\x2\x55B\x55C\x3\x2\x2\x2\x55C\x55D\x3\x2\x2" +
            "\x2\x55D\x55F\a\t\x2\x2\x55E\x560\a\xDC\x2\x2\x55F\x55E\x3\x2\x2\x2\x55F" +
            "\x560\x3\x2\x2\x2\x560\x562\x3\x2\x2\x2\x561\x563\x5\xCA\x66\x2\x562\x561" +
            "\x3\x2\x2\x2\x562\x563\x3\x2\x2\x2\x563\x565\x3\x2\x2\x2\x564\x566\a\xDC" +
            "\x2\x2\x565\x564\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2\x566\x567\x3\x2\x2" +
            "\x2\x567\x569\a\t\x2\x2\x568\x56A\a\xDC\x2\x2\x569\x568\x3\x2\x2\x2\x569" +
            "\x56A\x3\x2\x2\x2\x56A\x56B\x3\x2\x2\x2\x56B\x56C\x5\xCA\x66\x2\x56C\x93" +
            "\x3\x2\x2\x2\x56D\x56E\a\x8F\x2\x2\x56E\x56F\a\xDC\x2\x2\x56F\x57E\x5" +
            "\x104\x83\x2\x570\x572\a\xDC\x2\x2\x571\x570\x3\x2\x2\x2\x571\x572\x3" +
            "\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x575\a\xC4\x2\x2\x574\x576\a\xDC" +
            "\x2\x2\x575\x574\x3\x2\x2\x2\x575\x576\x3\x2\x2\x2\x576\x57B\x3\x2\x2" +
            "\x2\x577\x579\x5\xF4{\x2\x578\x57A\a\xDC\x2\x2\x579\x578\x3\x2\x2\x2\x579" +
            "\x57A\x3\x2\x2\x2\x57A\x57C\x3\x2\x2\x2\x57B\x577\x3\x2\x2\x2\x57B\x57C" +
            "\x3\x2\x2\x2\x57C\x57D\x3\x2\x2\x2\x57D\x57F\a\xCB\x2\x2\x57E\x571\x3" +
            "\x2\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x95\x3\x2\x2\x2\x580\x583\a\x8E\x2" +
            "\x2\x581\x582\a\xDC\x2\x2\x582\x584\x5\xCA\x66\x2\x583\x581\x3\x2\x2\x2" +
            "\x583\x584\x3\x2\x2\x2\x584\x97\x3\x2\x2\x2\x585\x586\a\x92\x2\x2\x586" +
            "\x589\a\xDC\x2\x2\x587\x588\a\x84\x2\x2\x588\x58A\a\xDC\x2\x2\x589\x587" +
            "\x3\x2\x2\x2\x589\x58A\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x596\x5" +
            "\x9AN\x2\x58C\x58E\a\xDC\x2\x2\x58D\x58C\x3\x2\x2\x2\x58D\x58E\x3\x2\x2" +
            "\x2\x58E\x58F\x3\x2\x2\x2\x58F\x591\a\t\x2\x2\x590\x592\a\xDC\x2\x2\x591" +
            "\x590\x3\x2\x2\x2\x591\x592\x3\x2\x2\x2\x592\x593\x3\x2\x2\x2\x593\x595" +
            "\x5\x9AN\x2\x594\x58D\x3\x2\x2\x2\x595\x598\x3\x2\x2\x2\x596\x594\x3\x2" +
            "\x2\x2\x596\x597\x3\x2\x2\x2\x597\x99\x3\x2\x2\x2\x598\x596\x3\x2\x2\x2" +
            "\x599\x59B\x5\xE8u\x2\x59A\x59C\a\xDC\x2\x2\x59B\x59A\x3\x2\x2\x2\x59B" +
            "\x59C\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59F\a\xC4\x2\x2\x59E\x5A0" +
            "\a\xDC\x2\x2\x59F\x59E\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A1\x3" +
            "\x2\x2\x2\x5A1\x5A3\x5\x100\x81\x2\x5A2\x5A4\a\xDC\x2\x2\x5A3\x5A2\x3" +
            "\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A8\a\xCB" +
            "\x2\x2\x5A6\x5A7\a\xDC\x2\x2\x5A7\x5A9\x5\x106\x84\x2\x5A8\x5A6\x3\x2" +
            "\x2\x2\x5A8\x5A9\x3\x2\x2\x2\x5A9\x9B\x3\x2\x2\x2\x5AA\x5AB\a\x94\x2\x2" +
            "\x5AB\x9D\x3\x2\x2\x2\x5AC\x5B2\a\x95\x2\x2\x5AD\x5B0\a\xDC\x2\x2\x5AE" +
            "\x5B1\as\x2\x2\x5AF\x5B1\x5\x104\x83\x2\x5B0\x5AE\x3\x2\x2\x2\x5B0\x5AF" +
            "\x3\x2\x2\x2\x5B1\x5B3\x3\x2\x2\x2\x5B2\x5AD\x3\x2\x2\x2\x5B2\x5B3\x3" +
            "\x2\x2\x2\x5B3\x9F\x3\x2\x2\x2\x5B4\x5B5\a\x96\x2\x2\x5B5\xA1\x3\x2\x2" +
            "\x2\x5B6\x5B7\a\x97\x2\x2\x5B7\x5B8\a\xDC\x2\x2\x5B8\x5B9\x5\xCA\x66\x2" +
            "\x5B9\xA3\x3\x2\x2\x2\x5BA\x5BB\a\x98\x2\x2\x5BB\x5BC\a\xDC\x2\x2\x5BC" +
            "\x5BE\x5\xE8u\x2\x5BD\x5BF\a\xDC\x2\x2\x5BE\x5BD\x3\x2\x2\x2\x5BE\x5BF" +
            "\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5C2\a\xC0\x2\x2\x5C1\x5C3\a\xDC" +
            "\x2\x2\x5C2\x5C1\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2" +
            "\x2\x5C4\x5C5\x5\xCA\x66\x2\x5C5\xA5\x3\x2\x2\x2\x5C6\x5C7\a\x99\x2\x2" +
            "\x5C7\x5C8\a\xDC\x2\x2\x5C8\x5CA\x5\xCA\x66\x2\x5C9\x5CB\a\xDC\x2\x2\x5CA" +
            "\x5C9\x3\x2\x2\x2\x5CA\x5CB\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5CE" +
            "\a\t\x2\x2\x5CD\x5CF\a\xDC\x2\x2\x5CE\x5CD\x3\x2\x2\x2\x5CE\x5CF\x3\x2" +
            "\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5D1\x5\xCA\x66\x2\x5D1\xA7\x3\x2\x2" +
            "\x2\x5D2\x5D3\a\x9A\x2\x2\x5D3\x5D4\a\xDC\x2\x2\x5D4\x5D6\x5\xCA\x66\x2" +
            "\x5D5\x5D7\a\xDC\x2\x2\x5D6\x5D5\x3\x2\x2\x2\x5D6\x5D7\x3\x2\x2\x2\x5D7" +
            "\x5D8\x3\x2\x2\x2\x5D8\x5DA\a\t\x2\x2\x5D9\x5DB\a\xDC\x2\x2\x5DA\x5D9" +
            "\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC\x5DE\x5" +
            "\xCA\x66\x2\x5DD\x5DF\a\xDC\x2\x2\x5DE\x5DD\x3\x2\x2\x2\x5DE\x5DF\x3\x2" +
            "\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5E2\a\t\x2\x2\x5E1\x5E3\a\xDC\x2\x2" +
            "\x5E2\x5E1\x3\x2\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4" +
            "\x5E6\x5\xCA\x66\x2\x5E5\x5E7\a\xDC\x2\x2\x5E6\x5E5\x3\x2\x2\x2\x5E6\x5E7" +
            "\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5EA\a\t\x2\x2\x5E9\x5EB\a\xDC" +
            "\x2\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2" +
            "\x2\x5EC\x5ED\x5\xCA\x66\x2\x5ED\xA9\x3\x2\x2\x2\x5EE\x5EF\a\x9B\x2\x2" +
            "\x5EF\x5F0\a\xDC\x2\x2\x5F0\x5F2\x5\xDAn\x2\x5F1\x5F3\a\xDC\x2\x2\x5F2" +
            "\x5F1\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F6" +
            "\a\t\x2\x2\x5F5\x5F7\a\xDC\x2\x2\x5F6\x5F5\x3\x2\x2\x2\x5F6\x5F7\x3\x2" +
            "\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\x5F9\x5\xCA\x66\x2\x5F9\xAB\x3\x2\x2" +
            "\x2\x5FA\x5FB\a\x9C\x2\x2\x5FB\x5FC\a\xDC\x2\x2\x5FC\x5FD\a\x1B\x2\x2" +
            "\x5FD\x5FE\a\xDC\x2\x2\x5FE\x5FF\x5\xCA\x66\x2\x5FF\x603\x5\x126\x94\x2" +
            "\x600\x602\x5\xB0Y\x2\x601\x600\x3\x2\x2\x2\x602\x605\x3\x2\x2\x2\x603" +
            "\x601\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x606\x3\x2\x2\x2\x605\x603" +
            "\x3\x2\x2\x2\x606\x607\a<\x2\x2\x607\xAD\x3\x2\x2\x2\x608\x60A\aY\x2\x2" +
            "\x609\x60B\a\xDC\x2\x2\x60A\x609\x3\x2\x2\x2\x60A\x60B\x3\x2\x2\x2\x60B" +
            "\x60C\x3\x2\x2\x2\x60C\x60E\x5\x10C\x87\x2\x60D\x60F\a\xDC\x2\x2\x60E" +
            "\x60D\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610\x611" +
            "\x5\xCA\x66\x2\x611\x61A\x3\x2\x2\x2\x612\x613\x5\xCA\x66\x2\x613\x614" +
            "\a\xDC\x2\x2\x614\x615\a\xAC\x2\x2\x615\x616\a\xDC\x2\x2\x616\x617\x5" +
            "\xCA\x66\x2\x617\x61A\x3\x2\x2\x2\x618\x61A\x5\xCA\x66\x2\x619\x608\x3" +
            "\x2\x2\x2\x619\x612\x3\x2\x2\x2\x619\x618\x3\x2\x2\x2\x61A\xAF\x3\x2\x2" +
            "\x2\x61B\x61C\a\x1B\x2\x2\x61C\x61D\a\xDC\x2\x2\x61D\x61E\x5\xB2Z\x2\x61E" +
            "\x620\x5\x126\x94\x2\x61F\x621\x5\x1C\xF\x2\x620\x61F\x3\x2\x2\x2\x620" +
            "\x621\x3\x2\x2\x2\x621\xB1\x3\x2\x2\x2\x622\x632\a\x36\x2\x2\x623\x62E" +
            "\x5\xAEX\x2\x624\x626\a\xDC\x2\x2\x625\x624\x3\x2\x2\x2\x625\x626\x3\x2" +
            "\x2\x2\x626\x627\x3\x2\x2\x2\x627\x629\a\t\x2\x2\x628\x62A\a\xDC\x2\x2" +
            "\x629\x628\x3\x2\x2\x2\x629\x62A\x3\x2\x2\x2\x62A\x62B\x3\x2\x2\x2\x62B" +
            "\x62D\x5\xAEX\x2\x62C\x625\x3\x2\x2\x2\x62D\x630\x3\x2\x2\x2\x62E\x62C" +
            "\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2\x62F\x632\x3\x2\x2\x2\x630\x62E\x3" +
            "\x2\x2\x2\x631\x622\x3\x2\x2\x2\x631\x623\x3\x2\x2\x2\x632\xB3\x3\x2\x2" +
            "\x2\x633\x634\a\x9D\x2\x2\x634\x635\a\xDC\x2\x2\x635\x63E\x5\xCA\x66\x2" +
            "\x636\x638\a\xDC\x2\x2\x637\x636\x3\x2\x2\x2\x637\x638\x3\x2\x2\x2\x638" +
            "\x639\x3\x2\x2\x2\x639\x63B\a\t\x2\x2\x63A\x63C\a\xDC\x2\x2\x63B\x63A" +
            "\x3\x2\x2\x2\x63B\x63C\x3\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\x63F\x5" +
            "\xCA\x66\x2\x63E\x637\x3\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\xB5\x3\x2" +
            "\x2\x2\x640\x641\a\x9F\x2\x2\x641\x642\a\xDC\x2\x2\x642\x644\x5\xCA\x66" +
            "\x2\x643\x645\a\xDC\x2\x2\x644\x643\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2" +
            "\x645\x646\x3\x2\x2\x2\x646\x648\a\t\x2\x2\x647\x649\a\xDC\x2\x2\x648" +
            "\x647\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64B" +
            "\x5\xCA\x66\x2\x64B\xB7\x3\x2\x2\x2\x64C\x64D\a\x9E\x2\x2\x64D\x64E\a" +
            "\xDC\x2\x2\x64E\x650\x5\xE8u\x2\x64F\x651\a\xDC\x2\x2\x650\x64F\x3\x2" +
            "\x2\x2\x650\x651\x3\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x654\a\xC0\x2" +
            "\x2\x653\x655\a\xDC\x2\x2\x654\x653\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2" +
            "\x655\x656\x3\x2\x2\x2\x656\x657\x5\xCA\x66\x2\x657\xB9\x3\x2\x2\x2\x658" +
            "\x659\a\xA5\x2\x2\x659\xBB\x3\x2\x2\x2\x65A\x65B\x5\x11C\x8F\x2\x65B\x65C" +
            "\a\xDC\x2\x2\x65C\x65E\x3\x2\x2\x2\x65D\x65A\x3\x2\x2\x2\x65D\x65E\x3" +
            "\x2\x2\x2\x65E\x661\x3\x2\x2\x2\x65F\x660\a\xA3\x2\x2\x660\x662\a\xDC" +
            "\x2\x2\x661\x65F\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662\x663\x3\x2\x2" +
            "\x2\x663\x665\a\xA7\x2\x2\x664\x666\a\xDC\x2\x2\x665\x664\x3\x2\x2\x2" +
            "\x665\x666\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x66C\x5\x104\x83\x2" +
            "\x668\x66A\a\xDC\x2\x2\x669\x668\x3\x2\x2\x2\x669\x66A\x3\x2\x2\x2\x66A" +
            "\x66B\x3\x2\x2\x2\x66B\x66D\x5\xFA~\x2\x66C\x669\x3\x2\x2\x2\x66C\x66D" +
            "\x3\x2\x2\x2\x66D\x66E\x3\x2\x2\x2\x66E\x670\x5\x126\x94\x2\x66F\x671" +
            "\x5\x1C\xF\x2\x670\x66F\x3\x2\x2\x2\x670\x671\x3\x2\x2\x2\x671\x672\x3" +
            "\x2\x2\x2\x672\x673\a=\x2\x2\x673\xBD\x3\x2\x2\x2\x674\x676\a\xAB\x2\x2" +
            "\x675\x677\a\xDC\x2\x2\x676\x675\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677" +
            "\x678\x3\x2\x2\x2\x678\x67A\a\xC0\x2\x2\x679\x67B\a\xDC\x2\x2\x67A\x679" +
            "\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67D\x5" +
            "\xCA\x66\x2\x67D\xBF\x3\x2\x2\x2\x67E\x67F\x5\x11C\x8F\x2\x67F\x680\a" +
            "\xDC\x2\x2\x680\x682\x3\x2\x2\x2\x681\x67E\x3\x2\x2\x2\x681\x682\x3\x2" +
            "\x2\x2\x682\x683\x3\x2\x2\x2\x683\x684\a\xAE\x2\x2\x684\x685\a\xDC\x2" +
            "\x2\x685\x686\x5\x104\x83\x2\x686\x68A\x5\x126\x94\x2\x687\x689\x5\xC2" +
            "\x62\x2\x688\x687\x3\x2\x2\x2\x689\x68C\x3\x2\x2\x2\x68A\x688\x3\x2\x2" +
            "\x2\x68A\x68B\x3\x2\x2\x2\x68B\x68D\x3\x2\x2\x2\x68C\x68A\x3\x2\x2\x2" +
            "\x68D\x68E\a>\x2\x2\x68E\xC1\x3\x2\x2\x2\x68F\x69E\x5\x104\x83\x2\x690" +
            "\x692\a\xDC\x2\x2\x691\x690\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x693" +
            "\x3\x2\x2\x2\x693\x698\a\xC4\x2\x2\x694\x696\a\xDC\x2\x2\x695\x694\x3" +
            "\x2\x2\x2\x695\x696\x3\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x699\x5\x100" +
            "\x81\x2\x698\x695\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69B\x3\x2\x2" +
            "\x2\x69A\x69C\a\xDC\x2\x2\x69B\x69A\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2" +
            "\x69C\x69D\x3\x2\x2\x2\x69D\x69F\a\xCB\x2\x2\x69E\x691\x3\x2\x2\x2\x69E" +
            "\x69F\x3\x2\x2\x2\x69F\x6A2\x3\x2\x2\x2\x6A0\x6A1\a\xDC\x2\x2\x6A1\x6A3" +
            "\x5\x106\x84\x2\x6A2\x6A0\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3\x6A4" +
            "\x3\x2\x2\x2\x6A4\x6A5\x5\x126\x94\x2\x6A5\xC3\x3\x2\x2\x2\x6A6\x6A7\a" +
            "\xAF\x2\x2\x6A7\x6A8\a\xDC\x2\x2\x6A8\x6AD\x5\xCA\x66\x2\x6A9\x6AA\a\xDC" +
            "\x2\x2\x6AA\x6AB\aY\x2\x2\x6AB\x6AC\a\xDC\x2\x2\x6AC\x6AE\x5\x118\x8D" +
            "\x2\x6AD\x6A9\x3\x2\x2\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE\xC5\x3\x2\x2\x2\x6AF" +
            "\x6B0\a\xB0\x2\x2\x6B0\x6B1\a\xDC\x2\x2\x6B1\x6B2\x5\xCA\x66\x2\x6B2\xC7" +
            "\x3\x2\x2\x2\x6B3\x6B4\a\xB1\x2\x2\x6B4\x6B5\a\xDC\x2\x2\x6B5\x6C4\x5" +
            "\xDAn\x2\x6B6\x6B8\a\xDC\x2\x2\x6B7\x6B6\x3\x2\x2\x2\x6B7\x6B8\x3\x2\x2" +
            "\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\x6BB\a\t\x2\x2\x6BA\x6BC\a\xDC\x2\x2\x6BB" +
            "\x6BA\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2\x2\x6BC\x6BD\x3\x2\x2\x2\x6BD\x6C2" +
            "\x5\xCA\x66\x2\x6BE\x6BF\a\xDC\x2\x2\x6BF\x6C0\a\xAC\x2\x2\x6C0\x6C1\a" +
            "\xDC\x2\x2\x6C1\x6C3\x5\xCA\x66\x2\x6C2\x6BE\x3\x2\x2\x2\x6C2\x6C3\x3" +
            "\x2\x2\x2\x6C3\x6C5\x3\x2\x2\x2\x6C4\x6B7\x3\x2\x2\x2\x6C4\x6C5\x3\x2" +
            "\x2\x2\x6C5\xC9\x3\x2\x2\x2\x6C6\x6C7\b\x66\x1\x2\x6C7\x6C9\at\x2\x2\x6C8" +
            "\x6CA\a\xDC\x2\x2\x6C9\x6C8\x3\x2\x2\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6CB" +
            "\x3\x2\x2\x2\x6CB\x6FE\x5\xCA\x66\x15\x6CC\x6CE\a\f\x2\x2\x6CD\x6CF\a" +
            "\xDC\x2\x2\x6CE\x6CD\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D0\x3\x2" +
            "\x2\x2\x6D0\x6FE\x5\xCA\x66\x12\x6D1\x6D3\x5\xE8u\x2\x6D2\x6D4\a\xDC\x2" +
            "\x2\x6D3\x6D2\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2" +
            "\x6D5\x6D7\a\xBD\x2\x2\x6D6\x6D8\a\xDC\x2\x2\x6D7\x6D6\x3\x2\x2\x2\x6D7" +
            "\x6D8\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x6DA\x5\xCA\x66\x11\x6DA" +
            "\x6FE\x3\x2\x2\x2\x6DB\x6DD\a\xC6\x2\x2\x6DC\x6DE\a\xDC\x2\x2\x6DD\x6DC" +
            "\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6FE\x5" +
            "\xCA\x66\xF\x6E0\x6E2\au\x2\x2\x6E1\x6E3\a\xDC\x2\x2\x6E2\x6E1\x3\x2\x2" +
            "\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6FE\x5\xCA\x66\b" +
            "\x6E5\x6FE\x5\x116\x8C\x2\x6E6\x6FE\x5\xE8u\x2\x6E7\x6E9\a\xC4\x2\x2\x6E8" +
            "\x6EA\a\xDC\x2\x2\x6E9\x6E8\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EB" +
            "\x3\x2\x2\x2\x6EB\x6F6\x5\xCA\x66\x2\x6EC\x6EE\a\xDC\x2\x2\x6ED\x6EC\x3" +
            "\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F1\a\t\x2" +
            "\x2\x6F0\x6F2\a\xDC\x2\x2\x6F1\x6F0\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2" +
            "\x6F2\x6F3\x3\x2\x2\x2\x6F3\x6F5\x5\xCA\x66\x2\x6F4\x6ED\x3\x2\x2\x2\x6F5" +
            "\x6F8\x3\x2\x2\x2\x6F6\x6F4\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F9" +
            "\x3\x2\x2\x2\x6F8\x6F6\x3\x2\x2\x2\x6F9\x6FA\a\xCB\x2\x2\x6FA\x6FE\x3" +
            "\x2\x2\x2\x6FB\x6FE\x5\xC4\x63\x2\x6FC\x6FE\x5x=\x2\x6FD\x6C6\x3\x2\x2" +
            "\x2\x6FD\x6CC\x3\x2\x2\x2\x6FD\x6D1\x3\x2\x2\x2\x6FD\x6DB\x3\x2\x2\x2" +
            "\x6FD\x6E0\x3\x2\x2\x2\x6FD\x6E5\x3\x2\x2\x2\x6FD\x6E6\x3\x2\x2\x2\x6FD" +
            "\x6E7\x3\x2\x2\x2\x6FD\x6FB\x3\x2\x2\x2\x6FD\x6FC\x3\x2\x2\x2\x6FE\x76D" +
            "\x3\x2\x2\x2\x6FF\x701\f\x10\x2\x2\x700\x702\a\xDC\x2\x2\x701\x700\x3" +
            "\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x703\x3\x2\x2\x2\x703\x705\a\xCA" +
            "\x2\x2\x704\x706\a\xDC\x2\x2\x705\x704\x3\x2\x2\x2\x705\x706\x3\x2\x2" +
            "\x2\x706\x707\x3\x2\x2\x2\x707\x76C\x5\xCA\x66\x11\x708\x70A\f\xE\x2\x2" +
            "\x709\x70B\a\xDC\x2\x2\x70A\x709\x3\x2\x2\x2\x70A\x70B\x3\x2\x2\x2\x70B" +
            "\x70C\x3\x2\x2\x2\x70C\x70E\t\f\x2\x2\x70D\x70F\a\xDC\x2\x2\x70E\x70D" +
            "\x3\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x710\x3\x2\x2\x2\x710\x76C\x5" +
            "\xCA\x66\xF\x711\x713\f\r\x2\x2\x712\x714\a\xDC\x2\x2\x713\x712\x3\x2" +
            "\x2\x2\x713\x714\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2\x715\x717\a\xBF\x2" +
            "\x2\x716\x718\a\xDC\x2\x2\x717\x716\x3\x2\x2\x2\x717\x718\x3\x2\x2\x2" +
            "\x718\x719\x3\x2\x2\x2\x719\x76C\x5\xCA\x66\xE\x71A\x71C\f\f\x2\x2\x71B" +
            "\x71D\a\xDC\x2\x2\x71C\x71B\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x71E" +
            "\x3\x2\x2\x2\x71E\x720\aq\x2\x2\x71F\x721\a\xDC\x2\x2\x720\x71F\x3\x2" +
            "\x2\x2\x720\x721\x3\x2\x2\x2\x721\x722\x3\x2\x2\x2\x722\x76C\x5\xCA\x66" +
            "\r\x723\x725\f\v\x2\x2\x724\x726\a\xDC\x2\x2\x725\x724\x3\x2\x2\x2\x725" +
            "\x726\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x729\t\r\x2\x2\x728\x72A" +
            "\a\xDC\x2\x2\x729\x728\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x72B\x3" +
            "\x2\x2\x2\x72B\x76C\x5\xCA\x66\f\x72C\x72E\f\n\x2\x2\x72D\x72F\a\xDC\x2" +
            "\x2\x72E\x72D\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2" +
            "\x730\x732\a\xBC\x2\x2\x731\x733\a\xDC\x2\x2\x732\x731\x3\x2\x2\x2\x732" +
            "\x733\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2\x734\x76C\x5\xCA\x66\v\x735\x737" +
            "\f\t\x2\x2\x736\x738\a\xDC\x2\x2\x737\x736\x3\x2\x2\x2\x737\x738\x3\x2" +
            "\x2\x2\x738\x739\x3\x2\x2\x2\x739\x73B\t\xE\x2\x2\x73A\x73C\a\xDC\x2\x2" +
            "\x73B\x73A\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D" +
            "\x76C\x5\xCA\x66\n\x73E\x740\f\a\x2\x2\x73F\x741\a\xDC\x2\x2\x740\x73F" +
            "\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x744\a\xE" +
            "\x2\x2\x743\x745\a\xDC\x2\x2\x744\x743\x3\x2\x2\x2\x744\x745\x3\x2\x2" +
            "\x2\x745\x746\x3\x2\x2\x2\x746\x76C\x5\xCA\x66\b\x747\x749\f\x6\x2\x2" +
            "\x748\x74A\a\xDC\x2\x2\x749\x748\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A" +
            "\x74B\x3\x2\x2\x2\x74B\x74D\a\x81\x2\x2\x74C\x74E\a\xDC\x2\x2\x74D\x74C" +
            "\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x74F\x3\x2\x2\x2\x74F\x76C\x5" +
            "\xCA\x66\a\x750\x752\f\x5\x2\x2\x751\x753\a\xDC\x2\x2\x752\x751\x3\x2" +
            "\x2\x2\x752\x753\x3\x2\x2\x2\x753\x754\x3\x2\x2\x2\x754\x756\a\xBB\x2" +
            "\x2\x755\x757\a\xDC\x2\x2\x756\x755\x3\x2\x2\x2\x756\x757\x3\x2\x2\x2" +
            "\x757\x758\x3\x2\x2\x2\x758\x76C\x5\xCA\x66\x6\x759\x75B\f\x4\x2\x2\x75A" +
            "\x75C\a\xDC\x2\x2\x75B\x75A\x3\x2\x2\x2\x75B\x75C\x3\x2\x2\x2\x75C\x75D" +
            "\x3\x2\x2\x2\x75D\x75F\a\x42\x2\x2\x75E\x760\a\xDC\x2\x2\x75F\x75E\x3" +
            "\x2\x2\x2\x75F\x760\x3\x2\x2\x2\x760\x761\x3\x2\x2\x2\x761\x76C\x5\xCA" +
            "\x66\x5\x762\x764\f\x3\x2\x2\x763\x765\a\xDC\x2\x2\x764\x763\x3\x2\x2" +
            "\x2\x764\x765\x3\x2\x2\x2\x765\x766\x3\x2\x2\x2\x766\x768\aU\x2\x2\x767" +
            "\x769\a\xDC\x2\x2\x768\x767\x3\x2\x2\x2\x768\x769\x3\x2\x2\x2\x769\x76A" +
            "\x3\x2\x2\x2\x76A\x76C\x5\xCA\x66\x4\x76B\x6FF\x3\x2\x2\x2\x76B\x708\x3" +
            "\x2\x2\x2\x76B\x711\x3\x2\x2\x2\x76B\x71A\x3\x2\x2\x2\x76B\x723\x3\x2" +
            "\x2\x2\x76B\x72C\x3\x2\x2\x2\x76B\x735\x3\x2\x2\x2\x76B\x73E\x3\x2\x2" +
            "\x2\x76B\x747\x3\x2\x2\x2\x76B\x750\x3\x2\x2\x2\x76B\x759\x3\x2\x2\x2" +
            "\x76B\x762\x3\x2\x2\x2\x76C\x76F\x3\x2\x2\x2\x76D\x76B\x3\x2\x2\x2\x76D" +
            "\x76E\x3\x2\x2\x2\x76E\xCB\x3\x2\x2\x2\x76F\x76D\x3\x2\x2\x2\x770\x774" +
            "\a\x32\x2\x2\x771\x774\a\xA3\x2\x2\x772\x774\x5\x11C\x8F\x2\x773\x770" +
            "\x3\x2\x2\x2\x773\x771\x3\x2\x2\x2\x773\x772\x3\x2\x2\x2\x774\x775\x3" +
            "\x2\x2\x2\x775\x778\a\xDC\x2\x2\x776\x777\a\xB9\x2\x2\x777\x779\a\xDC" +
            "\x2\x2\x778\x776\x3\x2\x2\x2\x778\x779\x3\x2\x2\x2\x779\x77A\x3\x2\x2" +
            "\x2\x77A\x77B\x5\xCEh\x2\x77B\xCD\x3\x2\x2\x2\x77C\x787\x5\xD0i\x2\x77D" +
            "\x77F\a\xDC\x2\x2\x77E\x77D\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F\x780" +
            "\x3\x2\x2\x2\x780\x782\a\t\x2\x2\x781\x783\a\xDC\x2\x2\x782\x781\x3\x2" +
            "\x2\x2\x782\x783\x3\x2\x2\x2\x783\x784\x3\x2\x2\x2\x784\x786\x5\xD0i\x2" +
            "\x785\x77E\x3\x2\x2\x2\x786\x789\x3\x2\x2\x2\x787\x785\x3\x2\x2\x2\x787" +
            "\x788\x3\x2\x2\x2\x788\xCF\x3\x2\x2\x2\x789\x787\x3\x2\x2\x2\x78A\x79C" +
            "\x5\x104\x83\x2\x78B\x78D\a\xDC\x2\x2\x78C\x78B\x3\x2\x2\x2\x78C\x78D" +
            "\x3\x2\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x790\a\xC4\x2\x2\x78F\x791\a\xDC" +
            "\x2\x2\x790\x78F\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x796\x3\x2\x2" +
            "\x2\x792\x794\x5\x100\x81\x2\x793\x795\a\xDC\x2\x2\x794\x793\x3\x2\x2" +
            "\x2\x794\x795\x3\x2\x2\x2\x795\x797\x3\x2\x2\x2\x796\x792\x3\x2\x2\x2" +
            "\x796\x797\x3\x2\x2\x2\x797\x798\x3\x2\x2\x2\x798\x79A\a\xCB\x2\x2\x799" +
            "\x79B\a\xDC\x2\x2\x79A\x799\x3\x2\x2\x2\x79A\x79B\x3\x2\x2\x2\x79B\x79D" +
            "\x3\x2\x2\x2\x79C\x78C\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D\x79F\x3" +
            "\x2\x2\x2\x79E\x7A0\x5\x11A\x8E\x2\x79F\x79E\x3\x2\x2\x2\x79F\x7A0\x3" +
            "\x2\x2\x2\x7A0\x7A3\x3\x2\x2\x2\x7A1\x7A2\a\xDC\x2\x2\x7A2\x7A4\x5\x106" +
            "\x84\x2\x7A3\x7A1\x3\x2\x2\x2\x7A3\x7A4\x3\x2\x2\x2\x7A4\xD1\x3\x2\x2" +
            "\x2\x7A5\x7A6\a\xB6\x2\x2\x7A6\x7A7\a\xDC\x2\x2\x7A7\x7A8\x5\xCA\x66\x2" +
            "\x7A8\x7AA\x5\x126\x94\x2\x7A9\x7AB\x5\x1C\xF\x2\x7AA\x7A9\x3\x2\x2\x2" +
            "\x7AA\x7AB\x3\x2\x2\x2\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7AD\a\xB5\x2\x2\x7AD" +
            "\xD3\x3\x2\x2\x2\x7AE\x7AF\a\xB7\x2\x2\x7AF\x7B0\a\xDC\x2\x2\x7B0\x7B2" +
            "\x5\xDAn\x2\x7B1\x7B3\a\xDC\x2\x2\x7B2\x7B1\x3\x2\x2\x2\x7B2\x7B3\x3\x2" +
            "\x2\x2\x7B3\x7B4\x3\x2\x2\x2\x7B4\x7B6\a\t\x2\x2\x7B5\x7B7\a\xDC\x2\x2" +
            "\x7B6\x7B5\x3\x2\x2\x2\x7B6\x7B7\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8" +
            "\x7B9\x5\xCA\x66\x2\x7B9\xD5\x3\x2\x2\x2\x7BA\x7BB\a\xB8\x2\x2\x7BB\x7C0" +
            "\a\xDC\x2\x2\x7BC\x7C1\x5\xE8u\x2\x7BD\x7BE\at\x2\x2\x7BE\x7BF\a\xDC\x2" +
            "\x2\x7BF\x7C1\x5\x118\x8D\x2\x7C0\x7BC\x3\x2\x2\x2\x7C0\x7BD\x3\x2\x2" +
            "\x2\x7C1\x7C2\x3\x2\x2\x2\x7C2\x7C4\x5\x126\x94\x2\x7C3\x7C5\x5\x1C\xF" +
            "\x2\x7C4\x7C3\x3\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2" +
            "\x7C6\x7C7\a?\x2\x2\x7C7\xD7\x3\x2\x2\x2\x7C8\x7C9\a\xBA\x2\x2\x7C9\x7CA" +
            "\a\xDC\x2\x2\x7CA\x7CC\x5\xDAn\x2\x7CB\x7CD\a\xDC\x2\x2\x7CC\x7CB\x3\x2" +
            "\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE\x7D3\a\t\x2\x2" +
            "\x7CF\x7D1\a\xDC\x2\x2\x7D0\x7CF\x3\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1" +
            "\x7D2\x3\x2\x2\x2\x7D2\x7D4\x5\x86\x44\x2\x7D3\x7D0\x3\x2\x2\x2\x7D3\x7D4" +
            "\x3\x2\x2\x2\x7D4\xD9\x3\x2\x2\x2\x7D5\x7D7\a\x5\x2\x2\x7D6\x7D5\x3\x2" +
            "\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x7D9\x5\xCA\x66" +
            "\x2\x7D9\xDB\x3\x2\x2\x2\x7DA\x7DD\x5\xDEp\x2\x7DB\x7DD\x5\xE0q\x2\x7DC" +
            "\x7DA\x3\x2\x2\x2\x7DC\x7DB\x3\x2\x2\x2\x7DD\xDD\x3\x2\x2\x2\x7DE\x7DF" +
            "\a\x1A\x2\x2\x7DF\x7E0\a\xDC\x2\x2\x7E0\x7E2\x5\x104\x83\x2\x7E1\x7E3" +
            "\x5\x11A\x8E\x2\x7E2\x7E1\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7F1" +
            "\x3\x2\x2\x2\x7E4\x7E6\a\xDC\x2\x2\x7E5\x7E4\x3\x2\x2\x2\x7E5\x7E6\x3" +
            "\x2\x2\x2\x7E6\x7E7\x3\x2\x2\x2\x7E7\x7E9\a\xC4\x2\x2\x7E8\x7EA\a\xDC" +
            "\x2\x2\x7E9\x7E8\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2" +
            "\x2\x7EB\x7ED\x5\xF4{\x2\x7EC\x7EE\a\xDC\x2\x2\x7ED\x7EC\x3\x2\x2\x2\x7ED" +
            "\x7EE\x3\x2\x2\x2\x7EE\x7EF\x3\x2\x2\x2\x7EF\x7F0\a\xCB\x2\x2\x7F0\x7F2" +
            "\x3\x2\x2\x2\x7F1\x7E5\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x7FC\x3" +
            "\x2\x2\x2\x7F3\x7F5\a\xDC\x2\x2\x7F4\x7F3\x3\x2\x2\x2\x7F4\x7F5\x3\x2" +
            "\x2\x2\x7F5\x7F6\x3\x2\x2\x2\x7F6\x7F7\a\xC4\x2\x2\x7F7\x7F8\x5\x100\x81" +
            "\x2\x7F8\x7F9\a\xCB\x2\x2\x7F9\x7FB\x3\x2\x2\x2\x7FA\x7F4\x3\x2\x2\x2" +
            "\x7FB\x7FE\x3\x2\x2\x2\x7FC\x7FA\x3\x2\x2\x2\x7FC\x7FD\x3\x2\x2\x2\x7FD" +
            "\xDF\x3\x2\x2\x2\x7FE\x7FC\x3\x2\x2\x2\x7FF\x800\a\x1A\x2\x2\x800\x802" +
            "\a\xDC\x2\x2\x801\x803\x5\xE8u\x2\x802\x801\x3\x2\x2\x2\x802\x803\x3\x2" +
            "\x2\x2\x803\x804\x3\x2\x2\x2\x804\x805\a\n\x2\x2\x805\x807\x5\x104\x83" +
            "\x2\x806\x808\x5\x11A\x8E\x2\x807\x806\x3\x2\x2\x2\x807\x808\x3\x2\x2" +
            "\x2\x808\x816\x3\x2\x2\x2\x809\x80B\a\xDC\x2\x2\x80A\x809\x3\x2\x2\x2" +
            "\x80A\x80B\x3\x2\x2\x2\x80B\x80C\x3\x2\x2\x2\x80C\x80E\a\xC4\x2\x2\x80D" +
            "\x80F\a\xDC\x2\x2\x80E\x80D\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F\x810" +
            "\x3\x2\x2\x2\x810\x812\x5\xF4{\x2\x811\x813\a\xDC\x2\x2\x812\x811\x3\x2" +
            "\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\x3\x2\x2\x2\x814\x815\a\xCB\x2" +
            "\x2\x815\x817\x3\x2\x2\x2\x816\x80A\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2" +
            "\x817\x821\x3\x2\x2\x2\x818\x81A\a\xDC\x2\x2\x819\x818\x3\x2\x2\x2\x819" +
            "\x81A\x3\x2\x2\x2\x81A\x81B\x3\x2\x2\x2\x81B\x81C\a\xC4\x2\x2\x81C\x81D" +
            "\x5\x100\x81\x2\x81D\x81E\a\xCB\x2\x2\x81E\x820\x3\x2\x2\x2\x81F\x819" +
            "\x3\x2\x2\x2\x820\x823\x3\x2\x2\x2\x821\x81F\x3\x2\x2\x2\x821\x822\x3" +
            "\x2\x2\x2\x822\xE1\x3\x2\x2\x2\x823\x821\x3\x2\x2\x2\x824\x827\x5\xE4" +
            "s\x2\x825\x827\x5\xE6t\x2\x826\x824\x3\x2\x2\x2\x826\x825\x3\x2\x2\x2" +
            "\x827\xE3\x3\x2\x2\x2\x828\x82A\x5\xE8u\x2\x829\x828\x3\x2\x2\x2\x829" +
            "\x82A\x3\x2\x2\x2\x82A\x82B\x3\x2\x2\x2\x82B\x82C\a\n\x2\x2\x82C\x82E" +
            "\x5\x104\x83\x2\x82D\x82F\x5\x11A\x8E\x2\x82E\x82D\x3\x2\x2\x2\x82E\x82F" +
            "\x3\x2\x2\x2\x82F\x832\x3\x2\x2\x2\x830\x831\a\xDC\x2\x2\x831\x833\x5" +
            "\xF4{\x2\x832\x830\x3\x2\x2\x2\x832\x833\x3\x2\x2\x2\x833\x838\x3\x2\x2" +
            "\x2\x834\x836\a\xDC\x2\x2\x835\x834\x3\x2\x2\x2\x835\x836\x3\x2\x2\x2" +
            "\x836\x837\x3\x2\x2\x2\x837\x839\x5\xF8}\x2\x838\x835\x3\x2\x2\x2\x838" +
            "\x839\x3\x2\x2\x2\x839\x843\x3\x2\x2\x2\x83A\x83C\a\xDC\x2\x2\x83B\x83A" +
            "\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x83D\x3\x2\x2\x2\x83D\x83E\a\xC4" +
            "\x2\x2\x83E\x83F\x5\x100\x81\x2\x83F\x840\a\xCB\x2\x2\x840\x842\x3\x2" +
            "\x2\x2\x841\x83B\x3\x2\x2\x2\x842\x845\x3\x2\x2\x2\x843\x841\x3\x2\x2" +
            "\x2\x843\x844\x3\x2\x2\x2\x844\xE5\x3\x2\x2\x2\x845\x843\x3\x2\x2\x2\x846" +
            "\x849\x5\x10A\x86\x2\x847\x848\a\xDC\x2\x2\x848\x84A\x5\xF4{\x2\x849\x847" +
            "\x3\x2\x2\x2\x849\x84A\x3\x2\x2\x2\x84A\x854\x3\x2\x2\x2\x84B\x84D\a\xDC" +
            "\x2\x2\x84C\x84B\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84E\x3\x2\x2" +
            "\x2\x84E\x84F\a\xC4\x2\x2\x84F\x850\x5\x100\x81\x2\x850\x851\a\xCB\x2" +
            "\x2\x851\x853\x3\x2\x2\x2\x852\x84C\x3\x2\x2\x2\x853\x856\x3\x2\x2\x2" +
            "\x854\x852\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\xE7\x3\x2\x2\x2\x856" +
            "\x854\x3\x2\x2\x2\x857\x85C\x5\xEEx\x2\x858\x85C\x5\xEAv\x2\x859\x85C" +
            "\x5\xECw\x2\x85A\x85C\x5\xF2z\x2\x85B\x857\x3\x2\x2\x2\x85B\x858\x3\x2" +
            "\x2\x2\x85B\x859\x3\x2\x2\x2\x85B\x85A\x3\x2\x2\x2\x85C\xE9\x3\x2\x2\x2" +
            "\x85D\x85F\x5\x104\x83\x2\x85E\x860\x5\x11A\x8E\x2\x85F\x85E\x3\x2\x2" +
            "\x2\x85F\x860\x3\x2\x2\x2\x860\x865\x3\x2\x2\x2\x861\x863\a\xDC\x2\x2" +
            "\x862\x861\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864" +
            "\x866\x5\xF8}\x2\x865\x862\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x870" +
            "\x3\x2\x2\x2\x867\x869\a\xDC\x2\x2\x868\x867\x3\x2\x2\x2\x868\x869\x3" +
            "\x2\x2\x2\x869\x86A\x3\x2\x2\x2\x86A\x86B\a\xC4\x2\x2\x86B\x86C\x5\x100" +
            "\x81\x2\x86C\x86D\a\xCB\x2\x2\x86D\x86F\x3\x2\x2\x2\x86E\x868\x3\x2\x2" +
            "\x2\x86F\x872\x3\x2\x2\x2\x870\x86E\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2" +
            "\x871\xEB\x3\x2\x2\x2\x872\x870\x3\x2\x2\x2\x873\x876\x5\x104\x83\x2\x874" +
            "\x876\x5\x108\x85\x2\x875\x873\x3\x2\x2\x2\x875\x874\x3\x2\x2\x2\x876" +
            "\x878\x3\x2\x2\x2\x877\x879\x5\x11A\x8E\x2\x878\x877\x3\x2\x2\x2\x878" +
            "\x879\x3\x2\x2\x2\x879\x87B\x3\x2\x2\x2\x87A\x87C\a\xDC\x2\x2\x87B\x87A" +
            "\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x87F\a\xC4" +
            "\x2\x2\x87E\x880\a\xDC\x2\x2\x87F\x87E\x3\x2\x2\x2\x87F\x880\x3\x2\x2" +
            "\x2\x880\x885\x3\x2\x2\x2\x881\x883\x5\xF4{\x2\x882\x884\a\xDC\x2\x2\x883" +
            "\x882\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884\x886\x3\x2\x2\x2\x885\x881" +
            "\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886\x887\x3\x2\x2\x2\x887\x88C\a\xCB" +
            "\x2\x2\x888\x88A\a\xDC\x2\x2\x889\x888\x3\x2\x2\x2\x889\x88A\x3\x2\x2" +
            "\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88D\x5\xF8}\x2\x88C\x889\x3\x2\x2\x2\x88C" +
            "\x88D\x3\x2\x2\x2\x88D\x897\x3\x2\x2\x2\x88E\x890\a\xDC\x2\x2\x88F\x88E" +
            "\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x891\x3\x2\x2\x2\x891\x892\a\xC4" +
            "\x2\x2\x892\x893\x5\x100\x81\x2\x893\x894\a\xCB\x2\x2\x894\x896\x3\x2" +
            "\x2\x2\x895\x88F\x3\x2\x2\x2\x896\x899\x3\x2\x2\x2\x897\x895\x3\x2\x2" +
            "\x2\x897\x898\x3\x2\x2\x2\x898\xED\x3\x2\x2\x2\x899\x897\x3\x2\x2\x2\x89A" +
            "\x89D\x5\xEAv\x2\x89B\x89D\x5\xECw\x2\x89C\x89A\x3\x2\x2\x2\x89C\x89B" +
            "\x3\x2\x2\x2\x89C\x89D\x3\x2\x2\x2\x89D\x8A2\x3\x2\x2\x2\x89E\x8A0\x5" +
            "\xF0y\x2\x89F\x8A1\a\xDC\x2\x2\x8A0\x89F\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2" +
            "\x2\x8A1\x8A3\x3\x2\x2\x2\x8A2\x89E\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2" +
            "\x8A4\x8A2\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x8AA\x3\x2\x2\x2\x8A6" +
            "\x8A8\a\xDC\x2\x2\x8A7\x8A6\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8A9" +
            "\x3\x2\x2\x2\x8A9\x8AB\x5\xF8}\x2\x8AA\x8A7\x3\x2\x2\x2\x8AA\x8AB\x3\x2" +
            "\x2\x2\x8AB\x8B5\x3\x2\x2\x2\x8AC\x8AE\a\xDC\x2\x2\x8AD\x8AC\x3\x2\x2" +
            "\x2\x8AD\x8AE\x3\x2\x2\x2\x8AE\x8AF\x3\x2\x2\x2\x8AF\x8B0\a\xC4\x2\x2" +
            "\x8B0\x8B1\x5\x100\x81\x2\x8B1\x8B2\a\xCB\x2\x2\x8B2\x8B4\x3\x2\x2\x2" +
            "\x8B3\x8AD\x3\x2\x2\x2\x8B4\x8B7\x3\x2\x2\x2\x8B5\x8B3\x3\x2\x2\x2\x8B5" +
            "\x8B6\x3\x2\x2\x2\x8B6\xEF\x3\x2\x2\x2\x8B7\x8B5\x3\x2\x2\x2\x8B8\x8BA" +
            "\t\xF\x2\x2\x8B9\x8BB\a\xDC\x2\x2\x8BA\x8B9\x3\x2\x2\x2\x8BA\x8BB\x3\x2" +
            "\x2\x2\x8BB\x8BE\x3\x2\x2\x2\x8BC\x8BF\x5\xEAv\x2\x8BD\x8BF\x5\xECw\x2" +
            "\x8BE\x8BC\x3\x2\x2\x2\x8BE\x8BD\x3\x2\x2\x2\x8BF\xF1\x3\x2\x2\x2\x8C0" +
            "\x8C2\a\xDC\x2\x2\x8C1\x8C0\x3\x2\x2\x2\x8C1\x8C2\x3\x2\x2\x2\x8C2\x8C3" +
            "\x3\x2\x2\x2\x8C3\x8C4\x5\xF8}\x2\x8C4\xF3\x3\x2\x2\x2\x8C5\x8C7\x5\xF6" +
            "|\x2\x8C6\x8C5\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2\x2\x8C7\x8C9\x3\x2\x2\x2" +
            "\x8C8\x8CA\a\xDC\x2\x2\x8C9\x8C8\x3\x2\x2\x2\x8C9\x8CA\x3\x2\x2\x2\x8CA" +
            "\x8CB\x3\x2\x2\x2\x8CB\x8CD\t\n\x2\x2\x8CC\x8CE\a\xDC\x2\x2\x8CD\x8CC" +
            "\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8D0\x3\x2\x2\x2\x8CF\x8C6\x3" +
            "\x2\x2\x2\x8D0\x8D3\x3\x2\x2\x2\x8D1\x8CF\x3\x2\x2\x2\x8D1\x8D2\x3\x2" +
            "\x2\x2\x8D2\x8D4\x3\x2\x2\x2\x8D3\x8D1\x3\x2\x2\x2\x8D4\x8E1\x5\xF6|\x2" +
            "\x8D5\x8D7\a\xDC\x2\x2\x8D6\x8D5\x3\x2\x2\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7" +
            "\x8D8\x3\x2\x2\x2\x8D8\x8DA\t\n\x2\x2\x8D9\x8DB\a\xDC\x2\x2\x8DA\x8D9" +
            "\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB\x8DD\x3\x2\x2\x2\x8DC\x8DE\x5" +
            "\xF6|\x2\x8DD\x8DC\x3\x2\x2\x2\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8E0\x3\x2\x2" +
            "\x2\x8DF\x8D6\x3\x2\x2\x2\x8E0\x8E3\x3\x2\x2\x2\x8E1\x8DF\x3\x2\x2\x2" +
            "\x8E1\x8E2\x3\x2\x2\x2\x8E2\xF5\x3\x2\x2\x2\x8E3\x8E1\x3\x2\x2\x2\x8E4" +
            "\x8E6\a\xC4\x2\x2\x8E5\x8E4\x3\x2\x2\x2\x8E5\x8E6\x3\x2\x2\x2\x8E6\x8E9" +
            "\x3\x2\x2\x2\x8E7\x8E8\t\x10\x2\x2\x8E8\x8EA\a\xDC\x2\x2\x8E9\x8E7\x3" +
            "\x2\x2\x2\x8E9\x8EA\x3\x2\x2\x2\x8EA\x8EC\x3\x2\x2\x2\x8EB\x8ED\a\xCB" +
            "\x2\x2\x8EC\x8EB\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2" +
            "\x2\x8EE\x8EF\x5\xCA\x66\x2\x8EF\xF7\x3\x2\x2\x2\x8F0\x8F2\a\x4\x2\x2" +
            "\x8F1\x8F3\a\xDC\x2\x2\x8F2\x8F1\x3\x2\x2\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3" +
            "\x8F4\x3\x2\x2\x2\x8F4\x8F6\x5\x104\x83\x2\x8F5\x8F7\x5\x11A\x8E\x2\x8F6" +
            "\x8F5\x3\x2\x2\x2\x8F6\x8F7\x3\x2\x2\x2\x8F7\xF9\x3\x2\x2\x2\x8F8\x90A" +
            "\a\xC4\x2\x2\x8F9\x8FB\a\xDC\x2\x2\x8FA\x8F9\x3\x2\x2\x2\x8FA\x8FB\x3" +
            "\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x907\x5\xFC\x7F\x2\x8FD\x8FF\a\xDC" +
            "\x2\x2\x8FE\x8FD\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\x3\x2\x2" +
            "\x2\x900\x902\a\t\x2\x2\x901\x903\a\xDC\x2\x2\x902\x901\x3\x2\x2\x2\x902" +
            "\x903\x3\x2\x2\x2\x903\x904\x3\x2\x2\x2\x904\x906\x5\xFC\x7F\x2\x905\x8FE" +
            "\x3\x2\x2\x2\x906\x909\x3\x2\x2\x2\x907\x905\x3\x2\x2\x2\x907\x908\x3" +
            "\x2\x2\x2\x908\x90B\x3\x2\x2\x2\x909\x907\x3\x2\x2\x2\x90A\x8FA\x3\x2" +
            "\x2\x2\x90A\x90B\x3\x2\x2\x2\x90B\x90D\x3\x2\x2\x2\x90C\x90E\a\xDC\x2" +
            "\x2\x90D\x90C\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\x90F\x3\x2\x2\x2" +
            "\x90F\x910\a\xCB\x2\x2\x910\xFB\x3\x2\x2\x2\x911\x912\a|\x2\x2\x912\x914" +
            "\a\xDC\x2\x2\x913\x911\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x917\x3" +
            "\x2\x2\x2\x915\x916\t\x11\x2\x2\x916\x918\a\xDC\x2\x2\x917\x915\x3\x2" +
            "\x2\x2\x917\x918\x3\x2\x2\x2\x918\x91B\x3\x2\x2\x2\x919\x91A\a\x83\x2" +
            "\x2\x91A\x91C\a\xDC\x2\x2\x91B\x919\x3\x2\x2\x2\x91B\x91C\x3\x2\x2\x2" +
            "\x91C\x91D\x3\x2\x2\x2\x91D\x91F\x5\x104\x83\x2\x91E\x920\x5\x11A\x8E" +
            "\x2\x91F\x91E\x3\x2\x2\x2\x91F\x920\x3\x2\x2\x2\x920\x929\x3\x2\x2\x2" +
            "\x921\x923\a\xDC\x2\x2\x922\x921\x3\x2\x2\x2\x922\x923\x3\x2\x2\x2\x923" +
            "\x924\x3\x2\x2\x2\x924\x926\a\xC4\x2\x2\x925\x927\a\xDC\x2\x2\x926\x925" +
            "\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927\x928\x3\x2\x2\x2\x928\x92A\a\xCB" +
            "\x2\x2\x929\x922\x3\x2\x2\x2\x929\x92A\x3\x2\x2\x2\x92A\x92F\x3\x2\x2" +
            "\x2\x92B\x92D\a\xDC\x2\x2\x92C\x92B\x3\x2\x2\x2\x92C\x92D\x3\x2\x2\x2" +
            "\x92D\x92E\x3\x2\x2\x2\x92E\x930\x5\x106\x84\x2\x92F\x92C\x3\x2\x2\x2" +
            "\x92F\x930\x3\x2\x2\x2\x930\x935\x3\x2\x2\x2\x931\x933\a\xDC\x2\x2\x932" +
            "\x931\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x934\x3\x2\x2\x2\x934\x936" +
            "\x5\xFE\x80\x2\x935\x932\x3\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\xFD\x3" +
            "\x2\x2\x2\x937\x939\a\xC0\x2\x2\x938\x93A\a\xDC\x2\x2\x939\x938\x3\x2" +
            "\x2\x2\x939\x93A\x3\x2\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93C\x5\xCA\x66" +
            "\x2\x93C\xFF\x3\x2\x2\x2\x93D\x948\x5\x102\x82\x2\x93E\x940\a\xDC\x2\x2" +
            "\x93F\x93E\x3\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x941\x3\x2\x2\x2\x941" +
            "\x943\a\t\x2\x2\x942\x944\a\xDC\x2\x2\x943\x942\x3\x2\x2\x2\x943\x944" +
            "\x3\x2\x2\x2\x944\x945\x3\x2\x2\x2\x945\x947\x5\x102\x82\x2\x946\x93F" +
            "\x3\x2\x2\x2\x947\x94A\x3\x2\x2\x2\x948\x946\x3\x2\x2\x2\x948\x949\x3" +
            "\x2\x2\x2\x949\x101\x3\x2\x2\x2\x94A\x948\x3\x2\x2\x2\x94B\x94C\x5\xCA" +
            "\x66\x2\x94C\x94D\a\xDC\x2\x2\x94D\x94E\a\xAC\x2\x2\x94E\x94F\a\xDC\x2" +
            "\x2\x94F\x951\x3\x2\x2\x2\x950\x94B\x3\x2\x2\x2\x950\x951\x3\x2\x2\x2" +
            "\x951\x952\x3\x2\x2\x2\x952\x953\x5\xCA\x66\x2\x953\x103\x3\x2\x2\x2\x954" +
            "\x957\a\xDD\x2\x2\x955\x957\x5\x11E\x90\x2\x956\x954\x3\x2\x2\x2\x956" +
            "\x955\x3\x2\x2\x2\x957\x958\x3\x2\x2\x2\x958\x956\x3\x2\x2\x2\x958\x959" +
            "\x3\x2\x2\x2\x959\x105\x3\x2\x2\x2\x95A\x95C\a\x12\x2\x2\x95B\x95D\a\xDC" +
            "\x2\x2\x95C\x95B\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x960\x3\x2\x2" +
            "\x2\x95E\x95F\at\x2\x2\x95F\x961\a\xDC\x2\x2\x960\x95E\x3\x2\x2\x2\x960" +
            "\x961\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\x967\x5\x118\x8D\x2\x963" +
            "\x965\a\xDC\x2\x2\x964\x963\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965\x966" +
            "\x3\x2\x2\x2\x966\x968\x5\x110\x89\x2\x967\x964\x3\x2\x2\x2\x967\x968" +
            "\x3\x2\x2\x2\x968\x107\x3\x2\x2\x2\x969\x96A\t\x12\x2\x2\x96A\x109\x3" +
            "\x2\x2\x2\x96B\x970\a\xDD\x2\x2\x96C\x96F\x5\x11E\x90\x2\x96D\x96F\a\xDD" +
            "\x2\x2\x96E\x96C\x3\x2\x2\x2\x96E\x96D\x3\x2\x2\x2\x96F\x972\x3\x2\x2" +
            "\x2\x970\x96E\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2\x971\x97B\x3\x2\x2\x2" +
            "\x972\x970\x3\x2\x2\x2\x973\x976\x5\x11E\x90\x2\x974\x977\x5\x11E\x90" +
            "\x2\x975\x977\a\xDD\x2\x2\x976\x974\x3\x2\x2\x2\x976\x975\x3\x2\x2\x2" +
            "\x977\x978\x3\x2\x2\x2\x978\x976\x3\x2\x2\x2\x978\x979\x3\x2\x2\x2\x979" +
            "\x97B\x3\x2\x2\x2\x97A\x96B\x3\x2\x2\x2\x97A\x973\x3\x2\x2\x2\x97B\x10B" +
            "\x3\x2\x2\x2\x97C\x97D\t\xE\x2\x2\x97D\x10D\x3\x2\x2\x2\x97E\x983\x5\x104" +
            "\x83\x2\x97F\x980\t\xF\x2\x2\x980\x982\x5\x104\x83\x2\x981\x97F\x3\x2" +
            "\x2\x2\x982\x985\x3\x2\x2\x2\x983\x981\x3\x2\x2\x2\x983\x984\x3\x2\x2" +
            "\x2\x984\x10F\x3\x2\x2\x2\x985\x983\x3\x2\x2\x2\x986\x988\a\xC7\x2\x2" +
            "\x987\x989\a\xDC\x2\x2\x988\x987\x3\x2\x2\x2\x988\x989\x3\x2\x2\x2\x989" +
            "\x98C\x3\x2\x2\x2\x98A\x98D\a\xD2\x2\x2\x98B\x98D\x5\x104\x83\x2\x98C" +
            "\x98A\x3\x2\x2\x2\x98C\x98B\x3\x2\x2\x2\x98D\x111\x3\x2\x2\x2\x98E\x997" +
            "\x5\x10A\x86\x2\x98F\x991\a\xDC\x2\x2\x990\x98F\x3\x2\x2\x2\x990\x991" +
            "\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992\x994\a\xC6\x2\x2\x993\x995\a\xDC" +
            "\x2\x2\x994\x993\x3\x2\x2\x2\x994\x995\x3\x2\x2\x2\x995\x996\x3\x2\x2" +
            "\x2\x996\x998\x5\x10A\x86\x2\x997\x990\x3\x2\x2\x2\x997\x998\x3\x2\x2" +
            "\x2\x998\x113\x3\x2\x2\x2\x999\x99A\x5\x104\x83\x2\x99A\x99B\a\xDA\x2" +
            "\x2\x99B\x115\x3\x2\x2\x2\x99C\x99D\t\x13\x2\x2\x99D\x117\x3\x2\x2\x2" +
            "\x99E\x9A1\x5\x108\x85\x2\x99F\x9A1\x5\x10E\x88\x2\x9A0\x99E\x3\x2\x2" +
            "\x2\x9A0\x99F\x3\x2\x2\x2\x9A1\x9AA\x3\x2\x2\x2\x9A2\x9A4\a\xDC\x2\x2" +
            "\x9A3\x9A2\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5" +
            "\x9A7\a\xC4\x2\x2\x9A6\x9A8\a\xDC\x2\x2\x9A7\x9A6\x3\x2\x2\x2\x9A7\x9A8" +
            "\x3\x2\x2\x2\x9A8\x9A9\x3\x2\x2\x2\x9A9\x9AB\a\xCB\x2\x2\x9AA\x9A3\x3" +
            "\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\x119\x3\x2\x2\x2\x9AC\x9AD\t\x14" +
            "\x2\x2\x9AD\x11B\x3\x2\x2\x2\x9AE\x9AF\t\x15\x2\x2\x9AF\x11D\x3\x2\x2" +
            "\x2\x9B0\x9B1\t\x16\x2\x2\x9B1\x11F\x3\x2\x2\x2\x9B2\x9B3\a\xD7\x2\x2" +
            "\x9B3\x121\x3\x2\x2\x2\x9B4\x9B5\a\xD8\x2\x2\x9B5\x123\x3\x2\x2\x2\x9B6" +
            "\x9B8\a\xDC\x2\x2\x9B7\x9B6\x3\x2\x2\x2\x9B7\x9B8\x3\x2\x2\x2\x9B8\x9BC" +
            "\x3\x2\x2\x2\x9B9\x9BD\a\xD6\x2\x2\x9BA\x9BD\x5\x122\x92\x2\x9BB\x9BD" +
            "\x5\x120\x91\x2\x9BC\x9B9\x3\x2\x2\x2\x9BC\x9BA\x3\x2\x2\x2\x9BC\x9BB" +
            "\x3\x2\x2\x2\x9BD\x9BF\x3\x2\x2\x2\x9BE\x9C0\a\xDC\x2\x2\x9BF\x9BE\x3" +
            "\x2\x2\x2\x9BF\x9C0\x3\x2\x2\x2\x9C0\x125\x3\x2\x2\x2\x9C1\x9CA\x5\x124" +
            "\x93\x2\x9C2\x9C4\a\xDC\x2\x2\x9C3\x9C2\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2" +
            "\x2\x9C4\x9C5\x3\x2\x2\x2\x9C5\x9C7\a\xDA\x2\x2\x9C6\x9C8\a\xDC\x2\x2" +
            "\x9C7\x9C6\x3\x2\x2\x2\x9C7\x9C8\x3\x2\x2\x2\x9C8\x9CA\x3\x2\x2\x2\x9C9" +
            "\x9C1\x3\x2\x2\x2\x9C9\x9C3\x3\x2\x2\x2\x9CA\x9CD\x3\x2\x2\x2\x9CB\x9C9" +
            "\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x127\x3\x2\x2\x2\x9CD\x9CB\x3" +
            "\x2\x2\x2\x1A9\x12C\x132\x135\x139\x13D\x141\x145\x152\x158\x15C\x166" +
            "\x16E\x17B\x187\x18B\x193\x19E\x1A4\x1A8\x1AC\x1B0\x1B5\x1BE\x206\x20C" +
            "\x210\x213\x223\x227\x22C\x22F\x234\x23A\x23E\x243\x248\x24C\x24F\x253" +
            "\x259\x25D\x264\x26A\x26E\x271\x276\x280\x283\x286\x28A\x290\x294\x299" +
            "\x2A0\x2A4\x2A8\x2AC\x2AF\x2B4\x2BF\x2CC\x2D3\x2DC\x2E3\x2E7\x2EA\x2F9" +
            "\x2FF\x309\x30D\x317\x31F\x324\x32A\x32E\x331\x335\x340\x344\x349\x34E" +
            "\x352\x356\x35A\x35D\x360\x363\x366\x36A\x372\x376\x379\x37C\x380\x397" +
            "\x39D\x3A1\x3A5\x3AE\x3B9\x3BE\x3C8\x3CC\x3D1\x3D9\x3DD\x3E1\x3E9\x3ED" +
            "\x3F9\x3FD\x404\x406\x40C\x410\x416\x41A\x41E\x426\x42A\x430\x439\x43B" +
            "\x440\x449\x44B\x453\x455\x45A\x45E\x462\x47A\x484\x488\x48D\x498\x49C" +
            "\x4A1\x4AF\x4B3\x4BC\x4C0\x4C3\x4C7\x4CB\x4CE\x4D2\x4D6\x4D9\x4DD\x4E0" +
            "\x4E4\x4E6\x4EB\x4EF\x4F3\x4F7\x4F9\x4FF\x503\x506\x50B\x50F\x515\x518" +
            "\x51B\x51F\x523\x52A\x52E\x534\x537\x53B\x542\x546\x54C\x54F\x553\x55B" +
            "\x55F\x562\x565\x569\x571\x575\x579\x57B\x57E\x583\x589\x58D\x591\x596" +
            "\x59B\x59F\x5A3\x5A8\x5B0\x5B2\x5BE\x5C2\x5CA\x5CE\x5D6\x5DA\x5DE\x5E2" +
            "\x5E6\x5EA\x5F2\x5F6\x603\x60A\x60E\x619\x620\x625\x629\x62E\x631\x637" +
            "\x63B\x63E\x644\x648\x650\x654\x65D\x661\x665\x669\x66C\x670\x676\x67A" +
            "\x681\x68A\x691\x695\x698\x69B\x69E\x6A2\x6AD\x6B7\x6BB\x6C2\x6C4\x6C9" +
            "\x6CE\x6D3\x6D7\x6DD\x6E2\x6E9\x6ED\x6F1\x6F6\x6FD\x701\x705\x70A\x70E" +
            "\x713\x717\x71C\x720\x725\x729\x72E\x732\x737\x73B\x740\x744\x749\x74D" +
            "\x752\x756\x75B\x75F\x764\x768\x76B\x76D\x773\x778\x77E\x782\x787\x78C" +
            "\x790\x794\x796\x79A\x79C\x79F\x7A3\x7AA\x7B2\x7B6\x7C0\x7C4\x7CC\x7D0" +
            "\x7D3\x7D6\x7DC\x7E2\x7E5\x7E9\x7ED\x7F1\x7F4\x7FC\x802\x807\x80A\x80E" +
            "\x812\x816\x819\x821\x826\x829\x82E\x832\x835\x838\x83B\x843\x849\x84C" +
            "\x854\x85B\x85F\x862\x865\x868\x870\x875\x878\x87B\x87F\x883\x885\x889" +
            "\x88C\x88F\x897\x89C\x8A0\x8A4\x8A7\x8AA\x8AD\x8B5\x8BA\x8BE\x8C1\x8C6" +
            "\x8C9\x8CD\x8D1\x8D6\x8DA\x8DD\x8E1\x8E5\x8E9\x8EC\x8F2\x8F6\x8FA\x8FE" +
            "\x902\x907\x90A\x90D\x913\x917\x91B\x91F\x922\x926\x929\x92C\x92F\x932" +
            "\x935\x939\x93F\x943\x948\x950\x956\x958\x95C\x960\x964\x967\x96E\x970" +
            "\x976\x978\x97A\x983\x988\x98C\x990\x994\x997\x9A0\x9A3\x9A7\x9AA\x9B7" +
            "\x9BC\x9BF\x9C3\x9C7\x9C9\x9CB";
        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
    }
} // namespace Rubberduck.Parsing.Grammar
