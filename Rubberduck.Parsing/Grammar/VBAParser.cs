//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=166, ELSEIF=93, CBYTE=5, CLOSE=69, STATIC=196, MINUS=230, OPTION_EXPLICIT=159, 
		L_SQUARE_BRACKET=241, SETATTR=192, DOEVENTS=21, HASHENDIF=240, DATELITERAL=248, 
		ERROR=107, NOTHING=151, EACH=91, SUB=200, FILECOPY=115, STOP=198, LPAREN=228, 
		MID=144, CVERR=19, BEEP=58, AS=56, END_PROPERTY=98, AT=45, DATABASE=71, 
		GOSUB=121, CSNG=15, HASHCONST=236, CHDIR=66, POW=234, DOLLAR=47, PROPERTY_LET=169, 
		THEN=203, XOR=220, EXIT_FOR=110, DEFINT=79, HASHIF=237, UNLOCK=210, CALL=64, 
		LOCK_READ=139, SET=191, LOCK_READ_WRITE=141, ABS=1, LSET=142, RAISEEVENT=176, 
		MIDBTYPESUFFIX=32, SEEK=188, LONG=133, CBOOL=4, LIB=136, DIM=88, APPEND=55, 
		MKDIR=145, OPEN=156, DIV=222, PROPERTY_SET=170, CDBL=8, PERCENT=46, SENDKEYS=190, 
		END_SELECT=99, STRING=199, HASHELSEIF=238, SGN=37, REM=180, TO=205, DEFDBL=77, 
		BYVAL=61, FRIEND=116, LOOP=134, DELETESETTING=87, CLASS=68, DO=89, VARIANT=212, 
		END_WITH=102, DEFBOOL=74, OPTIONAL=157, ADDRESSOF=50, CONST=70, RSET=185, 
		INTEGER=129, CDEC=9, REMCOMMENT=250, ATTRIBUTE=53, OUTPUT=163, FOR=117, 
		PTRSAFE=171, EQ=224, BOOLEAN=60, CIRCLE=11, NAME=147, END_FUNCTION=96, 
		DEFSNG=84, DEFBYTE=75, NOT=150, CINT=10, SAVESETTING=187, END=103, PRESERVE=165, 
		ON_LOCAL_ERROR=155, FLOATLITERAL=246, HASHELSE=239, LOAD=131, BINARY=59, 
		LENB=28, RETURN=183, EXCLAMATIONPOINT=42, NEXT=148, GLOBAL=120, INPUTB=24, 
		IDENTIFIER=255, WS=254, EMPTY=94, CURRENCY=17, CCUR=6, MOD=146, WITHEVENTS=218, 
		COLON=40, DEFLNGLNG=81, STEP=197, TIME=204, OPTION_BASE=158, GT=226, PUT=173, 
		WITH=217, CSTR=16, LOCK_WRITE=140, LINE_CONTINUATION=256, TYPEOF=208, 
		DEFVAR=86, RMDIR=184, DEFLNG=80, UBOUND=38, FALSE=114, ERRORCHAR=258, 
		UNDERSCORE=253, INTEGERLITERAL=247, END_IF=97, LOCK=132, TEXT=202, SINGLEQUOTE=252, 
		SAVEPICTURE=186, MULT=231, SEMICOLON=41, BYTE=63, HEXLITERAL=245, ELSE=92, 
		IF=123, TYPE=207, AMPERSAND=48, DEFLNGPTR=82, ENUM=104, DEFOBJ=83, IN=126, 
		CHDRIVE=67, OPTION=34, DOT=43, EXIT_DO=109, GUIDLITERAL=257, IS=128, EQV=105, 
		WEND=214, FUNCTION=118, HASH=44, CASE=65, GEQ=225, GET=119, PUBLIC=172, 
		ON_ERROR=154, EXIT=22, MIDB=31, END_ENUM=95, GOTO=122, INTDIV=223, LONGPTR=30, 
		WIDTH=216, BEGIN=57, EXIT_SUB=113, ASSIGN=221, COMMENT=251, WRITE=219, 
		RANDOMIZE=175, DOUBLE=90, EXIT_PROPERTY=112, COMMA=39, RANDOM=174, PROPERTY_GET=168, 
		SELECT=189, PRIVATE=167, ERASE=106, TAB=201, BYREF=62, VERSION=213, NEQ=232, 
		END_TYPE=101, KILL=130, NEW=149, ARRAY=3, INPUT=127, SINGLE=194, UNLOAD=209, 
		ALIAS=51, SPC=195, LT=229, RESET=181, END_SUB=100, EVENT=108, READ_WRITE=178, 
		OPTION_COMPARE=160, ME=143, SCALE=36, CDATE=7, MIDTYPESUFFIX=33, NULL=152, 
		NEWLINE=249, TRUE=206, RPAREN=235, APPACTIVATE=54, IMP=124, STRINGLITERAL=243, 
		OCTLITERAL=244, READ=177, DATE=72, LIKE=137, AND=52, OPTION_PRIVATE_MODULE=161, 
		CLNGLNG=13, PLUS=233, ANY=2, RESUME=182, INT=25, SHARED=193, EXIT_FUNCTION=111, 
		PSET=35, ACCESS=49, LINE_INPUT=138, ON=153, OR=162, PARAMARRAY=164, LBOUND=26, 
		R_SQUARE_BRACKET=242, IMPLEMENTS=125, UNTIL=211, DEBUG=20, DEFCUR=78, 
		CLNGPTR=14, LONGLONG=29, DECLARE=73, DEFDATE=76, FIX=23, LEN=27, REDIM=179, 
		LEQ=227, DEFSTR=85, LET=135, WHILE=215, CVAR=18, CLNG=12, COLLECTION=259;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "CBOOL", "CBYTE", "CCUR", "CDATE", 
		"CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", "CLNGPTR", "CSNG", 
		"CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", "EXIT", "FIX", 
		"INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", "MIDB", 
		"MIDBTYPESUFFIX", "MIDTYPESUFFIX", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", 
		"','", "':'", "';'", "'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", 
		"AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
		"CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "CONST", "DATABASE", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFCUR", 
		"DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"EMPTY", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", 
		"END_SUB", "END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", 
		"EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", 
		"FALSE", "FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
		"GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", 
		"LOAD", "LOCK", "LONG", "LOOP", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "ME", "MID", "MKDIR", "MOD", 
		"NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
		"OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", 
		"OPTION_PRIVATE_MODULE", "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", 
		"PRIVATE", "PROPERTY_GET", "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", 
		"PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", 
		"REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", 
		"SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", 
		"SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", 
		"THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", 
		"VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", 
		"WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", "LEQ", "'('", 
		"'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "HASHCONST", "HASHIF", 
		"HASHELSEIF", "HASHELSE", "HASHENDIF", "'['", "']'", "STRINGLITERAL", 
		"OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", "DATELITERAL", 
		"NEWLINE", "REMCOMMENT", "COMMENT", "'''", "'_'", "WS", "IDENTIFIER", 
		"LINE_CONTINUATION", "GUIDLITERAL", "ERRORCHAR", "COLLECTION"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_attributeStmt = 11, RULE_block = 12, 
		RULE_blockStmt = 13, RULE_appactivateStmt = 14, RULE_beepStmt = 15, RULE_chdirStmt = 16, 
		RULE_chdriveStmt = 17, RULE_closeStmt = 18, RULE_constStmt = 19, RULE_constSubStmt = 20, 
		RULE_dateStmt = 21, RULE_declareStmt = 22, RULE_deftypeStmt = 23, RULE_deleteSettingStmt = 24, 
		RULE_doLoopStmt = 25, RULE_endStmt = 26, RULE_enumerationStmt = 27, RULE_enumerationStmt_Constant = 28, 
		RULE_eraseStmt = 29, RULE_errorStmt = 30, RULE_eventStmt = 31, RULE_exitStmt = 32, 
		RULE_filecopyStmt = 33, RULE_forEachStmt = 34, RULE_forNextStmt = 35, 
		RULE_functionStmt = 36, RULE_getStmt = 37, RULE_goSubStmt = 38, RULE_goToStmt = 39, 
		RULE_ifStmt = 40, RULE_elseIfBlock = 41, RULE_elseBlock = 42, RULE_singleLineIfStmt = 43, 
		RULE_ifWithNonEmptyThen = 44, RULE_ifWithEmptyThen = 45, RULE_singleLineElseClause = 46, 
		RULE_listOrLabel = 47, RULE_sameLineStatement = 48, RULE_booleanExpression = 49, 
		RULE_statementLabel = 50, RULE_identifierStatementLabel = 51, RULE_lineNumberLabel = 52, 
		RULE_implementsStmt = 53, RULE_inputStmt = 54, RULE_killStmt = 55, RULE_letStmt = 56, 
		RULE_lineInputStmt = 57, RULE_loadStmt = 58, RULE_lockStmt = 59, RULE_lsetStmt = 60, 
		RULE_midStmt = 61, RULE_mkdirStmt = 62, RULE_nameStmt = 63, RULE_onErrorStmt = 64, 
		RULE_onGoToStmt = 65, RULE_onGoSubStmt = 66, RULE_openStmt = 67, RULE_outputList = 68, 
		RULE_outputList_Expression = 69, RULE_printStmt = 70, RULE_propertyGetStmt = 71, 
		RULE_propertySetStmt = 72, RULE_propertyLetStmt = 73, RULE_putStmt = 74, 
		RULE_raiseEventStmt = 75, RULE_randomizeStmt = 76, RULE_redimStmt = 77, 
		RULE_redimSubStmt = 78, RULE_resetStmt = 79, RULE_resumeStmt = 80, RULE_returnStmt = 81, 
		RULE_rmdirStmt = 82, RULE_rsetStmt = 83, RULE_savepictureStmt = 84, RULE_saveSettingStmt = 85, 
		RULE_seekStmt = 86, RULE_selectCaseStmt = 87, RULE_sC_Selection = 88, 
		RULE_sC_Case = 89, RULE_sC_Cond = 90, RULE_sendkeysStmt = 91, RULE_setattrStmt = 92, 
		RULE_setStmt = 93, RULE_stopStmt = 94, RULE_subStmt = 95, RULE_timeStmt = 96, 
		RULE_typeStmt = 97, RULE_typeStmt_Element = 98, RULE_unloadStmt = 99, 
		RULE_unlockStmt = 100, RULE_valueStmt = 101, RULE_typeOfIsExpression = 102, 
		RULE_variableStmt = 103, RULE_variableListStmt = 104, RULE_variableSubStmt = 105, 
		RULE_whileWendStmt = 106, RULE_widthStmt = 107, RULE_withStmt = 108, RULE_withStmtExpression = 109, 
		RULE_writeStmt = 110, RULE_fileNumber = 111, RULE_explicitCallStmt = 112, 
		RULE_eCS_ProcedureCall = 113, RULE_eCS_MemberProcedureCall = 114, RULE_implicitCallStmt_InBlock = 115, 
		RULE_iCS_B_MemberProcedureCall = 116, RULE_iCS_B_ProcedureCall = 117, 
		RULE_implicitCallStmt_InStmt = 118, RULE_iCS_S_VariableOrProcedureCall = 119, 
		RULE_iCS_S_ProcedureOrArrayCall = 120, RULE_iCS_S_MembersCall = 121, RULE_iCS_S_MemberCall = 122, 
		RULE_iCS_S_DictionaryCall = 123, RULE_argsCall = 124, RULE_argCall = 125, 
		RULE_dictionaryCallStmt = 126, RULE_argList = 127, RULE_arg = 128, RULE_argDefaultValue = 129, 
		RULE_subscripts = 130, RULE_subscript = 131, RULE_identifier = 132, RULE_asTypeClause = 133, 
		RULE_baseType = 134, RULE_comparisonOperator = 135, RULE_complexType = 136, 
		RULE_fieldLength = 137, RULE_letterrange = 138, RULE_lineLabel = 139, 
		RULE_literal = 140, RULE_numberLiteral = 141, RULE_type = 142, RULE_typeHint = 143, 
		RULE_visibility = 144, RULE_keyword = 145, RULE_endOfLine = 146, RULE_endOfStatement = 147, 
		RULE_remComment = 148, RULE_comment = 149, RULE_annotationList = 150, 
		RULE_annotation = 151, RULE_annotationName = 152, RULE_annotationArgList = 153, 
		RULE_annotationArg = 154, RULE_whiteSpace = 155;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "attributeStmt", "block", "blockStmt", 
		"appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", "closeStmt", 
		"constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
		"deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifStmt", 
		"elseIfBlock", "elseBlock", "singleLineIfStmt", "ifWithNonEmptyThen", 
		"ifWithEmptyThen", "singleLineElseClause", "listOrLabel", "sameLineStatement", 
		"booleanExpression", "statementLabel", "identifierStatementLabel", "lineNumberLabel", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "midStmt", "mkdirStmt", "nameStmt", 
		"onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", 
		"stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "unloadStmt", 
		"unlockStmt", "valueStmt", "typeOfIsExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "withStmtExpression", 
		"writeStmt", "fileNumber", "explicitCallStmt", "eCS_ProcedureCall", "eCS_MemberProcedureCall", 
		"implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", 
		"implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "identifier", "asTypeClause", "baseType", "comparisonOperator", 
		"complexType", "fieldLength", "letterrange", "lineLabel", "literal", "numberLiteral", 
		"type", "typeHint", "visibility", "keyword", "endOfLine", "endOfStatement", 
		"remComment", "comment", "annotationList", "annotation", "annotationName", 
		"annotationArgList", "annotationArg", "whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; module();
			State = 313; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 315; whiteSpace();
				}
				break;
			}
			State = 318; endOfStatement();
			State = 322;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 319; moduleHeader();
				State = 320; endOfStatement();
				}
				break;
			}
			State = 325;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 324; moduleConfig();
				}
				break;
			}
			State = 327; endOfStatement();
			State = 329;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 328; moduleAttributes();
				}
				break;
			}
			State = 331; endOfStatement();
			State = 333;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 332; moduleDeclarations();
				}
				break;
			}
			State = 335; endOfStatement();
			State = 337;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 336; moduleBody();
				}
				break;
			}
			State = 339; endOfStatement();
			State = 341;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 340; whiteSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(VERSION);
			State = 344; whiteSpace();
			State = 345; numberLiteral();
			State = 347;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 346; whiteSpace();
				}
				break;
			}
			State = 350;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 349; Match(CLASS);
				}
				break;
			}
			State = 352; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(BEGIN);
			State = 362;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 355; whiteSpace();
				State = 356; Match(GUIDLITERAL);
				State = 357; whiteSpace();
				State = 358; identifier();
				State = 360;
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 359; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 364; endOfStatement();
			State = 366;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 365; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 368;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 370; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; identifier();
			State = 376;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 373; whiteSpace();
				}
				}
				State = 378;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 379; Match(EQ);
			State = 383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 380; whiteSpace();
				}
				}
				State = 385;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 386; literal();
			State = 389;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 387; Match(COLON);
				State = 388; numberLiteral();
				}
				break;
			}
			State = 391; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 393; attributeStmt();
					State = 394; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 398;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; moduleDeclarationsElement();
			State = 406;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 401; endOfStatement();
					State = 402; moduleDeclarationsElement();
					}
					} 
				}
				State = 408;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			State = 409; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 421;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 411; Match(OPTION_BASE);
				State = 412; whiteSpace();
				State = 413; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 415; Match(OPTION_COMPARE);
				State = 416; whiteSpace();
				State = 417;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 419; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 420; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 431;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423; declareStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424; enumerationStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 425; eventStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 426; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 427; implementsStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 428; variableStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 429; moduleOption();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 430; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; moduleBodyElement();
			State = 439;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 434; endOfStatement();
					State = 435; moduleBodyElement();
					}
					} 
				}
				State = 441;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			State = 442; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 449;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 446; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 447; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 448; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(ATTRIBUTE);
			State = 452; whiteSpace();
			State = 453; implicitCallStmt_InStmt();
			State = 455;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 454; whiteSpace();
				}
			}

			State = 457; Match(EQ);
			State = 459;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 458; whiteSpace();
				}
			}

			State = 461; literal();
			State = 472;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 463;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 462; whiteSpace();
						}
					}

					State = 465; Match(COMMA);
					State = 467;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 466; whiteSpace();
						}
					}

					State = 469; literal();
					}
					} 
				}
				State = 474;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 475; blockStmt();
					State = 476; endOfStatement();
					}
					} 
				}
				State = 482;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public SingleLineIfStmtContext singleLineIfStmt() {
			return GetRuleContext<SingleLineIfStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_blockStmt);
		try {
			State = 550;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483; lineLabel();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484; appactivateStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 485; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 486; beepStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 487; chdirStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 488; chdriveStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 489; closeStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 490; constStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 491; dateStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 492; deleteSettingStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 493; deftypeStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 494; doLoopStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 495; endStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 496; eraseStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 497; errorStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 498; exitStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 499; explicitCallStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 500; filecopyStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 501; forEachStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 502; forNextStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 503; getStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 504; goSubStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 505; goToStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 506; ifStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 507; singleLineIfStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 508; implementsStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 509; inputStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 510; killStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 511; letStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 512; lineInputStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 513; loadStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 514; lockStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 515; lsetStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 516; midStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 517; mkdirStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 518; nameStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 519; onErrorStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 520; onGoToStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 521; onGoSubStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 522; openStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 523; printStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 524; putStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 525; raiseEventStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 526; randomizeStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 527; redimStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 528; resetStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 529; resumeStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 530; returnStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 531; rmdirStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 532; rsetStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 533; savepictureStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 534; saveSettingStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 535; seekStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 536; selectCaseStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 537; sendkeysStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 538; setattrStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 539; setStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 540; stopStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 541; timeStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 542; unloadStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 543; unlockStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 544; variableStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 545; whileWendStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 546; widthStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 547; withStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 548; writeStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 549; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(APPACTIVATE);
			State = 553; whiteSpace();
			State = 554; valueStmt(0);
			State = 563;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 556;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 555; whiteSpace();
					}
				}

				State = 558; Match(COMMA);
				State = 560;
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 559; whiteSpace();
					}
					break;
				}
				State = 562; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(CHDIR);
			State = 568; whiteSpace();
			State = 569; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(CHDRIVE);
			State = 572; whiteSpace();
			State = 573; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(CLOSE);
			State = 591;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 576; whiteSpace();
				State = 577; fileNumber();
				State = 588;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 579;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 578; whiteSpace();
							}
						}

						State = 581; Match(COMMA);
						State = 583;
						switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
						case 1:
							{
							State = 582; whiteSpace();
							}
							break;
						}
						State = 585; fileNumber();
						}
						} 
					}
					State = 590;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 593; visibility();
				State = 594; whiteSpace();
				}
			}

			State = 598; Match(CONST);
			State = 599; whiteSpace();
			State = 600; constSubStmt();
			State = 611;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 602;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 601; whiteSpace();
						}
					}

					State = 604; Match(COMMA);
					State = 606;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 605; whiteSpace();
						}
					}

					State = 608; constSubStmt();
					}
					} 
				}
				State = 613;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; identifier();
			State = 616;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 615; typeHint();
				}
			}

			State = 621;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 618; whiteSpace();
				State = 619; asTypeClause();
				}
				break;
			}
			State = 624;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 623; whiteSpace();
				}
			}

			State = 626; Match(EQ);
			State = 628;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 627; whiteSpace();
				}
				break;
			}
			State = 630; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(DATE);
			State = 634;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 633; whiteSpace();
				}
			}

			State = 636; Match(EQ);
			State = 638;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 637; whiteSpace();
				}
				break;
			}
			State = 640; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 642; visibility();
				State = 643; whiteSpace();
				}
			}

			State = 647; Match(DECLARE);
			State = 648; whiteSpace();
			State = 651;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 649; Match(PTRSAFE);
				State = 650; whiteSpace();
				}
			}

			State = 658;
			switch (_input.La(1)) {
			case FUNCTION:
				{
				{
				State = 653; Match(FUNCTION);
				State = 655;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
					{
					State = 654; typeHint();
					}
				}

				}
				}
				break;
			case SUB:
				{
				State = 657; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 660; whiteSpace();
			State = 661; identifier();
			State = 663;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 662; typeHint();
				}
			}

			State = 665; whiteSpace();
			State = 666; Match(LIB);
			State = 667; whiteSpace();
			State = 668; Match(STRINGLITERAL);
			State = 674;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 669; whiteSpace();
				State = 670; Match(ALIAS);
				State = 671; whiteSpace();
				State = 672; Match(STRINGLITERAL);
				}
				break;
			}
			State = 680;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 677;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 676; whiteSpace();
					}
				}

				State = 679; argList();
				}
				break;
			}
			State = 685;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 682; whiteSpace();
				State = 683; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (DEFBOOL - 74)) | (1L << (DEFBYTE - 74)) | (1L << (DEFDATE - 74)) | (1L << (DEFDBL - 74)) | (1L << (DEFCUR - 74)) | (1L << (DEFINT - 74)) | (1L << (DEFLNG - 74)) | (1L << (DEFLNGLNG - 74)) | (1L << (DEFLNGPTR - 74)) | (1L << (DEFOBJ - 74)) | (1L << (DEFSNG - 74)) | (1L << (DEFSTR - 74)) | (1L << (DEFVAR - 74)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 688; whiteSpace();
			State = 689; letterrange();
			State = 700;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 691;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 690; whiteSpace();
						}
					}

					State = 693; Match(COMMA);
					State = 695;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 694; whiteSpace();
						}
					}

					State = 697; letterrange();
					}
					} 
				}
				State = 702;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deleteSettingStmt);
		int _la;
		try {
			State = 741;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 703; Match(DELETESETTING);
				State = 704; whiteSpace();
				State = 705; valueStmt(0);
				State = 707;
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 706; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 709; Match(DELETESETTING);
				State = 710; whiteSpace();
				State = 711; valueStmt(0);
				State = 713;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 712; whiteSpace();
					}
				}

				State = 715; Match(COMMA);
				State = 717;
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 716; whiteSpace();
					}
					break;
				}
				State = 719; valueStmt(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 721; Match(DELETESETTING);
				State = 722; whiteSpace();
				State = 723; valueStmt(0);
				State = 725;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 724; whiteSpace();
					}
				}

				State = 727; Match(COMMA);
				State = 729;
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 728; whiteSpace();
					}
					break;
				}
				State = 731; valueStmt(0);
				State = 733;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 732; whiteSpace();
					}
				}

				State = 735; Match(COMMA);
				State = 737;
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 736; whiteSpace();
					}
					break;
				}
				State = 739; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_doLoopStmt);
		int _la;
		try {
			State = 766;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 743; Match(DO);
				State = 744; endOfStatement();
				State = 745; block();
				State = 746; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748; Match(DO);
				State = 749; whiteSpace();
				State = 750;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 751; whiteSpace();
				State = 752; valueStmt(0);
				State = 753; endOfStatement();
				State = 754; block();
				State = 755; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 757; Match(DO);
				State = 758; endOfStatement();
				State = 759; block();
				State = 760; Match(LOOP);
				State = 761; whiteSpace();
				State = 762;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 763; whiteSpace();
				State = 764; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 770; visibility();
				State = 771; whiteSpace();
				}
			}

			State = 775; Match(ENUM);
			State = 776; whiteSpace();
			State = 777; identifier();
			State = 778; endOfStatement();
			State = 782;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CASE - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SHARED - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STEP - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (SUB - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==COLLECTION) {
				{
				{
				State = 779; enumerationStmt_Constant();
				}
				}
				State = 784;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 785; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; identifier();
			State = 796;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 789;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 788; whiteSpace();
					}
				}

				State = 791; Match(EQ);
				State = 793;
				switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					State = 792; whiteSpace();
					}
					break;
				}
				State = 795; valueStmt(0);
				}
				break;
			}
			State = 798; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 800; Match(ERASE);
			State = 801; whiteSpace();
			State = 802; valueStmt(0);
			State = 813;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,73,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 804;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 803; whiteSpace();
						}
					}

					State = 806; Match(COMMA);
					State = 808;
					switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
					case 1:
						{
						State = 807; whiteSpace();
						}
						break;
					}
					State = 810; valueStmt(0);
					}
					} 
				}
				State = 815;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,73,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; Match(ERROR);
			State = 817; whiteSpace();
			State = 818; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 820; visibility();
				State = 821; whiteSpace();
				}
			}

			State = 825; Match(EVENT);
			State = 826; whiteSpace();
			State = 827; identifier();
			State = 829;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 828; whiteSpace();
				}
			}

			State = 831; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			_la = _input.La(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (EXIT_DO - 109)) | (1L << (EXIT_FOR - 109)) | (1L << (EXIT_FUNCTION - 109)) | (1L << (EXIT_PROPERTY - 109)) | (1L << (EXIT_SUB - 109)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835; Match(FILECOPY);
			State = 836; whiteSpace();
			State = 837; valueStmt(0);
			State = 839;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 838; whiteSpace();
				}
			}

			State = 841; Match(COMMA);
			State = 843;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 842; whiteSpace();
				}
				break;
			}
			State = 845; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; Match(FOR);
			State = 848; whiteSpace();
			State = 849; Match(EACH);
			State = 850; whiteSpace();
			State = 851; identifier();
			State = 853;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 852; typeHint();
				}
			}

			State = 855; whiteSpace();
			State = 856; Match(IN);
			State = 857; whiteSpace();
			State = 858; valueStmt(0);
			State = 859; endOfStatement();
			State = 860; block();
			State = 861; Match(NEXT);
			State = 865;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 862; whiteSpace();
				State = 863; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; Match(FOR);
			State = 868; whiteSpace();
			State = 869; identifier();
			State = 871;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 870; typeHint();
				}
			}

			State = 876;
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				State = 873; whiteSpace();
				State = 874; asTypeClause();
				}
				break;
			}
			State = 879;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 878; whiteSpace();
				}
			}

			State = 881; Match(EQ);
			State = 883;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 882; whiteSpace();
				}
				break;
			}
			State = 885; valueStmt(0);
			State = 886; whiteSpace();
			State = 887; Match(TO);
			State = 888; whiteSpace();
			State = 889; valueStmt(0);
			State = 895;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 890; whiteSpace();
				State = 891; Match(STEP);
				State = 892; whiteSpace();
				State = 893; valueStmt(0);
				}
				break;
			}
			State = 897; endOfStatement();
			State = 898; block();
			State = 899; Match(NEXT);
			State = 905;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 900; whiteSpace();
				State = 901; identifier();
				State = 903;
				switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
				case 1:
					{
					State = 902; typeHint();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 907; visibility();
				State = 908; whiteSpace();
				}
			}

			State = 914;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 912; Match(STATIC);
				State = 913; whiteSpace();
				}
			}

			State = 916; Match(FUNCTION);
			State = 918;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 917; whiteSpace();
				}
			}

			State = 920; identifier();
			State = 922;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 921; typeHint();
				}
				break;
			}
			State = 928;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 925;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 924; whiteSpace();
					}
				}

				State = 927; argList();
				}
				break;
			}
			State = 934;
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				State = 931;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 930; whiteSpace();
					}
				}

				State = 933; asTypeClause();
				}
				break;
			}
			State = 936; endOfStatement();
			State = 937; block();
			State = 938; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940; Match(GET);
			State = 941; whiteSpace();
			State = 942; fileNumber();
			State = 944;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 943; whiteSpace();
				}
			}

			State = 946; Match(COMMA);
			State = 948;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 947; whiteSpace();
				}
				break;
			}
			State = 951;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 950; valueStmt(0);
				}
				break;
			}
			State = 954;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 953; whiteSpace();
				}
			}

			State = 956; Match(COMMA);
			State = 958;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 957; whiteSpace();
				}
				break;
			}
			State = 960; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(GOSUB);
			State = 963; whiteSpace();
			State = 964; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966; Match(GOTO);
			State = 967; whiteSpace();
			State = 968; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<ElseIfBlockContext> elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_ifStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; Match(IF);
			State = 971; whiteSpace();
			State = 972; booleanExpression();
			State = 973; whiteSpace();
			State = 974; Match(THEN);
			State = 976;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 975; endOfLine();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 978;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,100,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 980; block();
			State = 984;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ELSEIF) {
				{
				{
				State = 981; elseIfBlock();
				}
				}
				State = 986;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 988;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 987; elseBlock();
				}
			}

			State = 990; Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_elseIfBlock);
		try {
			int _alt;
			State = 1014;
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 992; Match(ELSEIF);
				State = 993; whiteSpace();
				State = 994; booleanExpression();
				State = 995; whiteSpace();
				State = 996; Match(THEN);
				State = 998;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 997; endOfLine();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1000;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,103,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1002; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004; Match(ELSEIF);
				State = 1005; whiteSpace();
				State = 1006; booleanExpression();
				State = 1007; whiteSpace();
				State = 1008; Match(THEN);
				State = 1010;
				switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					State = 1009; whiteSpace();
					}
					break;
				}
				State = 1012; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_elseBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016; Match(ELSE);
			State = 1018;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1017; endOfLine();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1020;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,106,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1022; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineIfStmtContext : ParserRuleContext {
		public IfWithEmptyThenContext ifWithEmptyThen() {
			return GetRuleContext<IfWithEmptyThenContext>(0);
		}
		public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
			return GetRuleContext<IfWithNonEmptyThenContext>(0);
		}
		public SingleLineIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineIfStmtContext singleLineIfStmt() {
		SingleLineIfStmtContext _localctx = new SingleLineIfStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_singleLineIfStmt);
		try {
			State = 1026;
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1024; ifWithNonEmptyThen();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1025; ifWithEmptyThen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithNonEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithNonEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithNonEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithNonEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithNonEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithNonEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
		IfWithNonEmptyThenContext _localctx = new IfWithNonEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifWithNonEmptyThen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028; Match(IF);
			State = 1029; whiteSpace();
			State = 1030; booleanExpression();
			State = 1031; whiteSpace();
			State = 1032; Match(THEN);
			State = 1034;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 1033; whiteSpace();
				}
				break;
			}
			State = 1036; listOrLabel();
			State = 1038;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 1037; singleLineElseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithEmptyThenContext ifWithEmptyThen() {
		IfWithEmptyThenContext _localctx = new IfWithEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ifWithEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040; Match(IF);
			State = 1041; whiteSpace();
			State = 1042; booleanExpression();
			State = 1043; whiteSpace();
			State = 1044; Match(THEN);
			State = 1046;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1045; whiteSpace();
				}
			}

			State = 1048; singleLineElseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineElseClauseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public SingleLineElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineElseClauseContext singleLineElseClause() {
		SingleLineElseClauseContext _localctx = new SingleLineElseClauseContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_singleLineElseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050; Match(ELSE);
			State = 1052;
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 1051; whiteSpace();
				}
				break;
			}
			State = 1055;
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				State = 1054; listOrLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOrLabelContext : ParserRuleContext {
		public StatementLabelContext statementLabel() {
			return GetRuleContext<StatementLabelContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SameLineStatementContext sameLineStatement(int i) {
			return GetRuleContext<SameLineStatementContext>(i);
		}
		public IReadOnlyList<SameLineStatementContext> sameLineStatement() {
			return GetRuleContexts<SameLineStatementContext>();
		}
		public ListOrLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOrLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterListOrLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitListOrLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOrLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOrLabelContext listOrLabel() {
		ListOrLabelContext _localctx = new ListOrLabelContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_listOrLabel);
		int _la;
		try {
			int _alt;
			State = 1095;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1057; statementLabel();
				State = 1070;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,116,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1059;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1058; whiteSpace();
							}
						}

						State = 1061; Match(COLON);
						State = 1063;
						switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
						case 1:
							{
							State = 1062; whiteSpace();
							}
							break;
						}
						State = 1066;
						switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
						case 1:
							{
							State = 1065; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1072;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,116,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1077;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1073; Match(COLON);
					State = 1075;
					switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
					case 1:
						{
						State = 1074; whiteSpace();
						}
						break;
					}
					}
				}

				State = 1079; sameLineStatement();
				State = 1092;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,122,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1081;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1080; whiteSpace();
							}
						}

						State = 1083; Match(COLON);
						State = 1085;
						switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
						case 1:
							{
							State = 1084; whiteSpace();
							}
							break;
						}
						State = 1088;
						switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
						case 1:
							{
							State = 1087; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1094;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,122,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SameLineStatementContext : ParserRuleContext {
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public SameLineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sameLineStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSameLineStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSameLineStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameLineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SameLineStatementContext sameLineStatement() {
		SameLineStatementContext _localctx = new SameLineStatementContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_sameLineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097; blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public StatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelContext statementLabel() {
		StatementLabelContext _localctx = new StatementLabelContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_statementLabel);
		try {
			State = 1103;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END_IF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1101; identifierStatementLabel();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1102; lineNumberLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementLabelContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierStatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementLabelContext identifierStatementLabel() {
		IdentifierStatementLabelContext _localctx = new IdentifierStatementLabelContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_identifierStatementLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberLabelContext : ParserRuleContext {
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberLabelContext lineNumberLabel() {
		LineNumberLabelContext _localctx = new LineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lineNumberLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107; numberLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; Match(IMPLEMENTS);
			State = 1110; whiteSpace();
			State = 1111; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; Match(INPUT);
			State = 1114; whiteSpace();
			State = 1115; fileNumber();
			State = 1124;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1117;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1116; whiteSpace();
						}
					}

					State = 1119; Match(COMMA);
					State = 1121;
					switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
					case 1:
						{
						State = 1120; whiteSpace();
						}
						break;
					}
					State = 1123; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1126;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,127,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128; Match(KILL);
			State = 1129; whiteSpace();
			State = 1130; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				State = 1132; Match(LET);
				State = 1133; whiteSpace();
				}
				break;
			}
			State = 1136; implicitCallStmt_InStmt();
			State = 1138;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1137; whiteSpace();
				}
			}

			State = 1140; Match(EQ);
			State = 1142;
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				State = 1141; whiteSpace();
				}
				break;
			}
			State = 1144; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146; Match(LINE_INPUT);
			State = 1147; whiteSpace();
			State = 1148; fileNumber();
			State = 1150;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1149; whiteSpace();
				}
			}

			State = 1152; Match(COMMA);
			State = 1154;
			switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				State = 1153; whiteSpace();
				}
				break;
			}
			State = 1156; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158; Match(LOAD);
			State = 1159; whiteSpace();
			State = 1160; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162; Match(LOCK);
			State = 1163; whiteSpace();
			State = 1164; valueStmt(0);
			State = 1180;
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1166;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1165; whiteSpace();
					}
				}

				State = 1168; Match(COMMA);
				State = 1170;
				switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					State = 1169; whiteSpace();
					}
					break;
				}
				State = 1172; valueStmt(0);
				State = 1178;
				switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					State = 1173; whiteSpace();
					State = 1174; Match(TO);
					State = 1175; whiteSpace();
					State = 1176; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182; Match(LSET);
			State = 1183; whiteSpace();
			State = 1184; implicitCallStmt_InStmt();
			State = 1186;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1185; whiteSpace();
				}
			}

			State = 1188; Match(EQ);
			State = 1190;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				State = 1189; whiteSpace();
				}
				break;
			}
			State = 1192; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194; Match(MID);
			State = 1196;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1195; whiteSpace();
				}
			}

			State = 1198; Match(LPAREN);
			State = 1200;
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1199; whiteSpace();
				}
				break;
			}
			State = 1202; argsCall();
			State = 1204;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1203; whiteSpace();
				}
			}

			State = 1206; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208; Match(MKDIR);
			State = 1209; whiteSpace();
			State = 1210; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212; Match(NAME);
			State = 1213; whiteSpace();
			State = 1214; valueStmt(0);
			State = 1215; whiteSpace();
			State = 1216; Match(AS);
			State = 1217; whiteSpace();
			State = 1218; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1221; whiteSpace();
			State = 1230;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1222; Match(GOTO);
				State = 1223; whiteSpace();
				State = 1224; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1226; Match(RESUME);
				State = 1227; whiteSpace();
				State = 1228; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232; Match(ON);
			State = 1233; whiteSpace();
			State = 1234; valueStmt(0);
			State = 1235; whiteSpace();
			State = 1236; Match(GOTO);
			State = 1237; whiteSpace();
			State = 1238; valueStmt(0);
			State = 1249;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,145,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1240;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1239; whiteSpace();
						}
					}

					State = 1242; Match(COMMA);
					State = 1244;
					switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
					case 1:
						{
						State = 1243; whiteSpace();
						}
						break;
					}
					State = 1246; valueStmt(0);
					}
					} 
				}
				State = 1251;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,145,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252; Match(ON);
			State = 1253; whiteSpace();
			State = 1254; valueStmt(0);
			State = 1255; whiteSpace();
			State = 1256; Match(GOSUB);
			State = 1257; whiteSpace();
			State = 1258; valueStmt(0);
			State = 1269;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,148,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1260;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1259; whiteSpace();
						}
					}

					State = 1262; Match(COMMA);
					State = 1264;
					switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
					case 1:
						{
						State = 1263; whiteSpace();
						}
						break;
					}
					State = 1266; valueStmt(0);
					}
					} 
				}
				State = 1271;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,148,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1272; Match(OPEN);
			State = 1273; whiteSpace();
			State = 1274; valueStmt(0);
			State = 1275; whiteSpace();
			State = 1276; Match(FOR);
			State = 1277; whiteSpace();
			State = 1278;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (INPUT - 127)) | (1L << (OUTPUT - 127)) | (1L << (RANDOM - 127)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1284;
			switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				State = 1279; whiteSpace();
				State = 1280; Match(ACCESS);
				State = 1281; whiteSpace();
				State = 1282;
				_la = _input.La(1);
				if ( !(((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (READ - 177)) | (1L << (READ_WRITE - 177)) | (1L << (WRITE - 177)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1289;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1286; whiteSpace();
				State = 1287;
				_la = _input.La(1);
				if ( !(((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (LOCK_READ - 139)) | (1L << (LOCK_WRITE - 139)) | (1L << (LOCK_READ_WRITE - 139)) | (1L << (SHARED - 139)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1291; whiteSpace();
			State = 1292; Match(AS);
			State = 1293; whiteSpace();
			State = 1294; fileNumber();
			State = 1306;
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				State = 1295; whiteSpace();
				State = 1296; Match(LEN);
				State = 1298;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1297; whiteSpace();
					}
				}

				State = 1300; Match(EQ);
				State = 1302;
				switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					State = 1301; whiteSpace();
					}
					break;
				}
				State = 1304; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1341;
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1308; outputList_Expression();
				State = 1321;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,157,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1310;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1309; whiteSpace();
							}
						}

						State = 1312;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1314;
						switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
						case 1:
							{
							State = 1313; whiteSpace();
							}
							break;
						}
						State = 1317;
						switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
						case 1:
							{
							State = 1316; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1323;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,157,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1325;
				switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					State = 1324; outputList_Expression();
					}
					break;
				}
				State = 1337;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1328;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1327; whiteSpace();
							}
						}

						State = 1330;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1332;
						switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
						case 1:
							{
							State = 1331; whiteSpace();
							}
							break;
						}
						State = 1335;
						switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
						case 1:
							{
							State = 1334; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1339;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_outputList_Expression);
		int _la;
		try {
			State = 1360;
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1343; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1344;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1358;
				switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					State = 1346;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1345; whiteSpace();
						}
					}

					State = 1348; Match(LPAREN);
					State = 1350;
					switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
					case 1:
						{
						State = 1349; whiteSpace();
						}
						break;
					}
					State = 1352; argsCall();
					State = 1354;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1353; whiteSpace();
						}
					}

					State = 1356; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362; Match(PRINT);
			State = 1363; whiteSpace();
			State = 1364; fileNumber();
			State = 1366;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1365; whiteSpace();
				}
			}

			State = 1368; Match(COMMA);
			State = 1373;
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				State = 1370;
				switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
				case 1:
					{
					State = 1369; whiteSpace();
					}
					break;
				}
				State = 1372; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1375; visibility();
				State = 1376; whiteSpace();
				}
			}

			State = 1382;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1380; Match(STATIC);
				State = 1381; whiteSpace();
				}
			}

			State = 1384; Match(PROPERTY_GET);
			State = 1385; whiteSpace();
			State = 1386; identifier();
			State = 1388;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				State = 1387; typeHint();
				}
				break;
			}
			State = 1394;
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1391;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1390; whiteSpace();
					}
				}

				State = 1393; argList();
				}
				break;
			}
			State = 1399;
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 1396; whiteSpace();
				State = 1397; asTypeClause();
				}
				break;
			}
			State = 1401; endOfStatement();
			State = 1402; block();
			State = 1403; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1408;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1405; visibility();
				State = 1406; whiteSpace();
				}
			}

			State = 1412;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1410; Match(STATIC);
				State = 1411; whiteSpace();
				}
			}

			State = 1414; Match(PROPERTY_SET);
			State = 1415; whiteSpace();
			State = 1416; identifier();
			State = 1421;
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 1418;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1417; whiteSpace();
					}
				}

				State = 1420; argList();
				}
				break;
			}
			State = 1423; endOfStatement();
			State = 1424; block();
			State = 1425; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1427; visibility();
				State = 1428; whiteSpace();
				}
			}

			State = 1434;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1432; Match(STATIC);
				State = 1433; whiteSpace();
				}
			}

			State = 1436; Match(PROPERTY_LET);
			State = 1437; whiteSpace();
			State = 1438; identifier();
			State = 1443;
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1440;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1439; whiteSpace();
					}
				}

				State = 1442; argList();
				}
				break;
			}
			State = 1445; endOfStatement();
			State = 1446; block();
			State = 1447; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449; Match(PUT);
			State = 1450; whiteSpace();
			State = 1451; fileNumber();
			State = 1453;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1452; whiteSpace();
				}
			}

			State = 1455; Match(COMMA);
			State = 1457;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 1456; whiteSpace();
				}
				break;
			}
			State = 1460;
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1459; valueStmt(0);
				}
				break;
			}
			State = 1463;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1462; whiteSpace();
				}
			}

			State = 1465; Match(COMMA);
			State = 1467;
			switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				State = 1466; whiteSpace();
				}
				break;
			}
			State = 1469; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471; Match(RAISEEVENT);
			State = 1472; whiteSpace();
			State = 1473; identifier();
			State = 1488;
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 1475;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1474; whiteSpace();
					}
				}

				State = 1477; Match(LPAREN);
				State = 1479;
				switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					State = 1478; whiteSpace();
					}
					break;
				}
				State = 1485;
				switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					State = 1481; argsCall();
					State = 1483;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1482; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1487; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490; Match(RANDOMIZE);
			State = 1494;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1491; whiteSpace();
				State = 1492; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496; Match(REDIM);
			State = 1497; whiteSpace();
			State = 1500;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1498; Match(PRESERVE);
				State = 1499; whiteSpace();
				}
				break;
			}
			State = 1502; redimSubStmt();
			State = 1513;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,200,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1504;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1503; whiteSpace();
						}
					}

					State = 1506; Match(COMMA);
					State = 1508;
					switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
					case 1:
						{
						State = 1507; whiteSpace();
						}
						break;
					}
					State = 1510; redimSubStmt();
					}
					} 
				}
				State = 1515;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,200,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516; implicitCallStmt_InStmt();
			State = 1518;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1517; whiteSpace();
				}
			}

			State = 1520; Match(LPAREN);
			State = 1522;
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 1521; whiteSpace();
				}
				break;
			}
			State = 1524; subscripts();
			State = 1526;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1525; whiteSpace();
				}
			}

			State = 1528; Match(RPAREN);
			State = 1532;
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				State = 1529; whiteSpace();
				State = 1530; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536; Match(RESUME);
			State = 1542;
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				State = 1537; whiteSpace();
				State = 1540;
				switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					State = 1538; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1539; identifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1544; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546; Match(RMDIR);
			State = 1547; whiteSpace();
			State = 1548; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1550; Match(RSET);
			State = 1551; whiteSpace();
			State = 1552; implicitCallStmt_InStmt();
			State = 1554;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1553; whiteSpace();
				}
			}

			State = 1556; Match(EQ);
			State = 1558;
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 1557; whiteSpace();
				}
				break;
			}
			State = 1560; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1562; Match(SAVEPICTURE);
			State = 1563; whiteSpace();
			State = 1564; valueStmt(0);
			State = 1566;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1565; whiteSpace();
				}
			}

			State = 1568; Match(COMMA);
			State = 1570;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 1569; whiteSpace();
				}
				break;
			}
			State = 1572; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1574; Match(SAVESETTING);
			State = 1575; whiteSpace();
			State = 1576; valueStmt(0);
			State = 1578;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1577; whiteSpace();
				}
			}

			State = 1580; Match(COMMA);
			State = 1582;
			switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				State = 1581; whiteSpace();
				}
				break;
			}
			State = 1584; valueStmt(0);
			State = 1586;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1585; whiteSpace();
				}
			}

			State = 1588; Match(COMMA);
			State = 1590;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 1589; whiteSpace();
				}
				break;
			}
			State = 1592; valueStmt(0);
			State = 1594;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1593; whiteSpace();
				}
			}

			State = 1596; Match(COMMA);
			State = 1598;
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 1597; whiteSpace();
				}
				break;
			}
			State = 1600; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; Match(SEEK);
			State = 1603; whiteSpace();
			State = 1604; fileNumber();
			State = 1606;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1605; whiteSpace();
				}
			}

			State = 1608; Match(COMMA);
			State = 1610;
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 1609; whiteSpace();
				}
				break;
			}
			State = 1612; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614; Match(SELECT);
			State = 1615; whiteSpace();
			State = 1616; Match(CASE);
			State = 1617; whiteSpace();
			State = 1618; valueStmt(0);
			State = 1619; endOfStatement();
			State = 1623;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1620; sC_Case();
				}
				}
				State = 1625;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1626; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_SelectionContext : ParserRuleContext {
		public SC_SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Selection; } }
	 
		public SC_SelectionContext() { }
		public virtual void CopyFrom(SC_SelectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_SelectionContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_SelectionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_SelectionContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_SelectionContext sC_Selection() {
		SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_sC_Selection);
		int _la;
		try {
			State = 1645;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1628; Match(IS);
				State = 1630;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1629; whiteSpace();
					}
				}

				State = 1632; comparisonOperator();
				State = 1634;
				switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					State = 1633; whiteSpace();
					}
					break;
				}
				State = 1636; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1638; valueStmt(0);
				State = 1639; whiteSpace();
				State = 1640; Match(TO);
				State = 1641; whiteSpace();
				State = 1642; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1644; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_sC_Case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647; Match(CASE);
			State = 1648; whiteSpace();
			State = 1649; sC_Cond();
			State = 1650; endOfStatement();
			State = 1651; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondSelectionContext : SC_CondContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<SC_SelectionContext> sC_Selection() {
			return GetRuleContexts<SC_SelectionContext>();
		}
		public SC_SelectionContext sC_Selection(int i) {
			return GetRuleContext<SC_SelectionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1668;
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1653; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondSelectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1654; sC_Selection();
				State = 1665;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,225,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1656;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1655; whiteSpace();
							}
						}

						State = 1658; Match(COMMA);
						State = 1660;
						switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
						case 1:
							{
							State = 1659; whiteSpace();
							}
							break;
						}
						State = 1662; sC_Selection();
						}
						} 
					}
					State = 1667;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,225,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670; Match(SENDKEYS);
			State = 1671; whiteSpace();
			State = 1672; valueStmt(0);
			State = 1681;
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				State = 1674;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1673; whiteSpace();
					}
				}

				State = 1676; Match(COMMA);
				State = 1678;
				switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					State = 1677; whiteSpace();
					}
					break;
				}
				State = 1680; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683; Match(SETATTR);
			State = 1684; whiteSpace();
			State = 1685; valueStmt(0);
			State = 1687;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1686; whiteSpace();
				}
			}

			State = 1689; Match(COMMA);
			State = 1691;
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				State = 1690; whiteSpace();
				}
				break;
			}
			State = 1693; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695; Match(SET);
			State = 1696; whiteSpace();
			State = 1697; implicitCallStmt_InStmt();
			State = 1699;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1698; whiteSpace();
				}
			}

			State = 1701; Match(EQ);
			State = 1703;
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 1702; whiteSpace();
				}
				break;
			}
			State = 1705; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1707; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1709; visibility();
				State = 1710; whiteSpace();
				}
			}

			State = 1716;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1714; Match(STATIC);
				State = 1715; whiteSpace();
				}
			}

			State = 1718; Match(SUB);
			State = 1720;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1719; whiteSpace();
				}
			}

			State = 1722; identifier();
			State = 1727;
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				State = 1724;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1723; whiteSpace();
					}
				}

				State = 1726; argList();
				}
				break;
			}
			State = 1729; endOfStatement();
			State = 1730; block();
			State = 1731; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733; Match(TIME);
			State = 1735;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1734; whiteSpace();
				}
			}

			State = 1737; Match(EQ);
			State = 1739;
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 1738; whiteSpace();
				}
				break;
			}
			State = 1741; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1743; visibility();
				State = 1744; whiteSpace();
				}
			}

			State = 1748; Match(TYPE);
			State = 1749; whiteSpace();
			State = 1750; identifier();
			State = 1751; endOfStatement();
			State = 1755;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CASE - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SHARED - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STEP - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (SUB - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==COLLECTION) {
				{
				{
				State = 1752; typeStmt_Element();
				}
				}
				State = 1757;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1758; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1760; identifier();
			State = 1775;
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 1762;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1761; whiteSpace();
					}
				}

				State = 1764; Match(LPAREN);
				State = 1769;
				switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					State = 1766;
					switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
					case 1:
						{
						State = 1765; whiteSpace();
						}
						break;
					}
					State = 1768; subscripts();
					}
					break;
				}
				State = 1772;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1771; whiteSpace();
					}
				}

				State = 1774; Match(RPAREN);
				}
				break;
			}
			State = 1780;
			switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				State = 1777; whiteSpace();
				State = 1778; asTypeClause();
				}
				break;
			}
			State = 1782; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784; Match(UNLOAD);
			State = 1785; whiteSpace();
			State = 1786; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1788; Match(UNLOCK);
			State = 1789; whiteSpace();
			State = 1790; fileNumber();
			State = 1806;
			switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				State = 1792;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1791; whiteSpace();
					}
				}

				State = 1794; Match(COMMA);
				State = 1796;
				switch ( Interpreter.AdaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					State = 1795; whiteSpace();
					}
					break;
				}
				State = 1798; valueStmt(0);
				State = 1804;
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 1799; whiteSpace();
					State = 1800; Match(TO);
					State = 1801; whiteSpace();
					State = 1802; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfIsExpressionContext typeOfIsExpression() {
			return GetRuleContext<TypeOfIsExpressionContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 202;
		EnterRecursionRule(_localctx, 202, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853;
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1809; Match(NEW);
				State = 1811;
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 1810; whiteSpace();
					}
					break;
				}
				State = 1813; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1814; Match(ADDRESSOF);
				State = 1816;
				switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					State = 1815; whiteSpace();
					}
					break;
				}
				State = 1818; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1819; implicitCallStmt_InStmt();
				State = 1821;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1820; whiteSpace();
					}
				}

				State = 1823; Match(ASSIGN);
				State = 1825;
				switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					State = 1824; whiteSpace();
					}
					break;
				}
				State = 1827; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1829; Match(MINUS);
				State = 1831;
				switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					State = 1830; whiteSpace();
					}
					break;
				}
				State = 1833; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1834; Match(NOT);
				State = 1836;
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 1835; whiteSpace();
					}
					break;
				}
				State = 1838; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1839; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1840; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1841; Match(LPAREN);
				State = 1843;
				switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					State = 1842; whiteSpace();
					}
					break;
				}
				State = 1845; valueStmt(0);
				State = 1847;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1846; whiteSpace();
					}
				}

				State = 1849; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1851; typeOfIsExpression();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1852; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1965;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,287,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1963;
					switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1855;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1857;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1856; whiteSpace();
							}
						}

						State = 1859; Match(POW);
						State = 1861;
						switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
						case 1:
							{
							State = 1860; whiteSpace();
							}
							break;
						}
						State = 1863; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1864;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1866;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1865; whiteSpace();
							}
						}

						State = 1868;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1870;
						switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
						case 1:
							{
							State = 1869; whiteSpace();
							}
							break;
						}
						State = 1872; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1873;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1875;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1874; whiteSpace();
							}
						}

						State = 1877; Match(INTDIV);
						State = 1879;
						switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
						case 1:
							{
							State = 1878; whiteSpace();
							}
							break;
						}
						State = 1881; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1882;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1884;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1883; whiteSpace();
							}
						}

						State = 1886; Match(MOD);
						State = 1888;
						switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
						case 1:
							{
							State = 1887; whiteSpace();
							}
							break;
						}
						State = 1890; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1891;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1893;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1892; whiteSpace();
							}
						}

						State = 1895;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1897;
						switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
						case 1:
							{
							State = 1896; whiteSpace();
							}
							break;
						}
						State = 1899; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1900;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1902;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1901; whiteSpace();
							}
						}

						State = 1904; Match(AMPERSAND);
						State = 1906;
						switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
						case 1:
							{
							State = 1905; whiteSpace();
							}
							break;
						}
						State = 1908; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1909;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1911;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1910; whiteSpace();
							}
						}

						State = 1913;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (EQ - 224)) | (1L << (GEQ - 224)) | (1L << (GT - 224)) | (1L << (LEQ - 224)) | (1L << (LT - 224)) | (1L << (NEQ - 224)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1915;
						switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
						case 1:
							{
							State = 1914; whiteSpace();
							}
							break;
						}
						State = 1917; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1918;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1920;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1919; whiteSpace();
							}
						}

						State = 1922; Match(AND);
						State = 1924;
						switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
						case 1:
							{
							State = 1923; whiteSpace();
							}
							break;
						}
						State = 1926; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1927;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1929;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1928; whiteSpace();
							}
						}

						State = 1931; Match(OR);
						State = 1933;
						switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
						case 1:
							{
							State = 1932; whiteSpace();
							}
							break;
						}
						State = 1935; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1936;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1938;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1937; whiteSpace();
							}
						}

						State = 1940; Match(XOR);
						State = 1942;
						switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
						case 1:
							{
							State = 1941; whiteSpace();
							}
							break;
						}
						State = 1944; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1945;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1947;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1946; whiteSpace();
							}
						}

						State = 1949; Match(EQV);
						State = 1951;
						switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
						case 1:
							{
							State = 1950; whiteSpace();
							}
							break;
						}
						State = 1953; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1954;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1956;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1955; whiteSpace();
							}
						}

						State = 1958; Match(IMP);
						State = 1960;
						switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
						case 1:
							{
							State = 1959; whiteSpace();
							}
							break;
						}
						State = 1962; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 1967;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,287,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeOfIsExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfIsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfIsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeOfIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeOfIsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfIsExpressionContext typeOfIsExpression() {
		TypeOfIsExpressionContext _localctx = new TypeOfIsExpressionContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_typeOfIsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968; Match(TYPEOF);
			State = 1969; whiteSpace();
			State = 1970; valueStmt(0);
			State = 1976;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 1971; whiteSpace();
				State = 1972; Match(IS);
				State = 1973; whiteSpace();
				State = 1974; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1978; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1979; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1980; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1983; whiteSpace();
			State = 1986;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 1984; Match(WITHEVENTS);
				State = 1985; whiteSpace();
				}
				break;
			}
			State = 1988; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990; variableSubStmt();
			State = 2001;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1992;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1991; whiteSpace();
						}
					}

					State = 1994; Match(COMMA);
					State = 1996;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1995; whiteSpace();
						}
					}

					State = 1998; variableSubStmt();
					}
					} 
				}
				State = 2003;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2004; identifier();
			State = 2022;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 2006;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2005; whiteSpace();
					}
				}

				State = 2008; Match(LPAREN);
				State = 2010;
				switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					State = 2009; whiteSpace();
					}
					break;
				}
				State = 2016;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CASE - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SHARED - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STEP - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (SUB - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
					{
					State = 2012; subscripts();
					State = 2014;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2013; whiteSpace();
						}
					}

					}
				}

				State = 2018; Match(RPAREN);
				State = 2020;
				switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					State = 2019; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 2025;
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				State = 2024; typeHint();
				}
				break;
			}
			State = 2030;
			switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				State = 2027; whiteSpace();
				State = 2028; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032; Match(WHILE);
			State = 2033; whiteSpace();
			State = 2034; valueStmt(0);
			State = 2035; endOfStatement();
			State = 2036; block();
			State = 2037; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039; Match(WIDTH);
			State = 2040; whiteSpace();
			State = 2041; fileNumber();
			State = 2043;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2042; whiteSpace();
				}
			}

			State = 2045; Match(COMMA);
			State = 2047;
			switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				State = 2046; whiteSpace();
				}
				break;
			}
			State = 2049; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WithStmtExpressionContext withStmtExpression() {
			return GetRuleContext<WithStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_withStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2051; Match(WITH);
			State = 2052; whiteSpace();
			State = 2053; withStmtExpression();
			State = 2054; endOfStatement();
			State = 2055; block();
			State = 2056; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public WithStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmtExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmtExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmtExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtExpressionContext withStmtExpression() {
		WithStmtExpressionContext _localctx = new WithStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_withStmtExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2063;
			switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				State = 2058; implicitCallStmt_InStmt();
				}
				break;

			case 2:
				{
				{
				State = 2059; Match(NEW);
				State = 2060; whiteSpace();
				State = 2061; type();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2065; Match(WRITE);
			State = 2066; whiteSpace();
			State = 2067; fileNumber();
			State = 2069;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2068; whiteSpace();
				}
			}

			State = 2071; Match(COMMA);
			State = 2076;
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				State = 2073;
				switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					State = 2072; whiteSpace();
					}
					break;
				}
				State = 2075; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			_la = _input.La(1);
			if (_la==HASH) {
				{
				State = 2078; Match(HASH);
				}
			}

			State = 2081; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_explicitCallStmt);
		try {
			State = 2085;
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2083; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2084; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_eCS_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2087; Match(CALL);
			State = 2088; whiteSpace();
			State = 2089; identifier();
			State = 2091;
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				State = 2090; typeHint();
				}
				break;
			}
			State = 2106;
			switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				State = 2094;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2093; whiteSpace();
					}
				}

				State = 2096; Match(LPAREN);
				State = 2098;
				switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					State = 2097; whiteSpace();
					}
					break;
				}
				State = 2100; argsCall();
				State = 2102;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2101; whiteSpace();
					}
				}

				State = 2104; Match(RPAREN);
				}
				break;
			}
			State = 2117;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2109;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2108; whiteSpace();
						}
					}

					State = 2111; Match(LPAREN);
					State = 2112; subscripts();
					State = 2113; Match(RPAREN);
					}
					} 
				}
				State = 2119;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2120; Match(CALL);
			State = 2121; whiteSpace();
			State = 2123;
			switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				State = 2122; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2125; Match(DOT);
			State = 2126; identifier();
			State = 2128;
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				State = 2127; typeHint();
				}
				break;
			}
			State = 2143;
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 2131;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2130; whiteSpace();
					}
				}

				State = 2133; Match(LPAREN);
				State = 2135;
				switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
				case 1:
					{
					State = 2134; whiteSpace();
					}
					break;
				}
				State = 2137; argsCall();
				State = 2139;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2138; whiteSpace();
					}
				}

				State = 2141; Match(RPAREN);
				}
				break;
			}
			State = 2154;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,324,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2146;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2145; whiteSpace();
						}
					}

					State = 2148; Match(LPAREN);
					State = 2149; subscripts();
					State = 2150; Match(RPAREN);
					}
					} 
				}
				State = 2156;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,324,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_implicitCallStmt_InBlock);
		try {
			State = 2159;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2157; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2158; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2162;
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				State = 2161; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2165;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2164; whiteSpace();
				}
			}

			State = 2167; Match(DOT);
			State = 2169;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2168; whiteSpace();
				}
			}

			State = 2171; identifier();
			State = 2173;
			switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				State = 2172; typeHint();
				}
				break;
			}
			State = 2178;
			switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				State = 2175; whiteSpace();
				State = 2176; argsCall();
				}
				break;
			}
			State = 2184;
			switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				State = 2181;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2180; whiteSpace();
					}
				}

				State = 2183; dictionaryCallStmt();
				}
				break;
			}
			State = 2195;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2187;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2186; whiteSpace();
						}
					}

					State = 2189; Match(LPAREN);
					State = 2190; subscripts();
					State = 2191; Match(RPAREN);
					}
					} 
				}
				State = 2197;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2198; identifier();
			State = 2202;
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 2199; whiteSpace();
				State = 2200; argsCall();
				}
				break;
			}
			State = 2213;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2205;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2204; whiteSpace();
						}
					}

					State = 2207; Match(LPAREN);
					State = 2208; subscripts();
					State = 2209; Match(RPAREN);
					}
					} 
				}
				State = 2215;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,337,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_implicitCallStmt_InStmt);
		try {
			State = 2220;
			switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2216; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2217; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2218; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2219; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2222; identifier();
			State = 2224;
			switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				State = 2223; typeHint();
				}
				break;
			}
			State = 2230;
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 2227;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2226; whiteSpace();
					}
				}

				State = 2229; dictionaryCallStmt();
				}
				break;
			}
			State = 2241;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,343,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2233;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2232; whiteSpace();
						}
					}

					State = 2235; Match(LPAREN);
					State = 2236; subscripts();
					State = 2237; Match(RPAREN);
					}
					} 
				}
				State = 2243;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,343,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246;
			switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				State = 2244; identifier();
				}
				break;

			case 2:
				{
				State = 2245; baseType();
				}
				break;
			}
			State = 2249;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2248; typeHint();
				}
			}

			State = 2252;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2251; whiteSpace();
				}
			}

			State = 2254; Match(LPAREN);
			State = 2256;
			switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				State = 2255; whiteSpace();
				}
				break;
			}
			State = 2262;
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				State = 2258; argsCall();
				State = 2260;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2259; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2264; Match(RPAREN);
			State = 2269;
			switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				State = 2266;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2265; whiteSpace();
					}
				}

				State = 2268; dictionaryCallStmt();
				}
				break;
			}
			State = 2280;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2272;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2271; whiteSpace();
						}
					}

					State = 2274; Match(LPAREN);
					State = 2275; subscripts();
					State = 2276; Match(RPAREN);
					}
					} 
				}
				State = 2282;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285;
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 2283; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2284; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2291;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2287; iCS_S_MemberCall();
					State = 2289;
					switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
					case 1:
						{
						State = 2288; whiteSpace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2293;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2299;
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				State = 2296;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2295; whiteSpace();
					}
				}

				State = 2298; dictionaryCallStmt();
				}
				break;
			}
			State = 2310;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,360,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2302;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2301; whiteSpace();
						}
					}

					State = 2304; Match(LPAREN);
					State = 2305; subscripts();
					State = 2306; Match(RPAREN);
					}
					} 
				}
				State = 2312;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,360,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2313;
			_la = _input.La(1);
			if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2315;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2314; whiteSpace();
				}
			}

			State = 2319;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				State = 2317; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2318; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2322;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2321; whiteSpace();
				}
			}

			State = 2324; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2338;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,367,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2327;
					switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						State = 2326; argCall();
						}
						break;
					}
					State = 2330;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2329; whiteSpace();
						}
					}

					State = 2332;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2334;
					switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
					case 1:
						{
						State = 2333; whiteSpace();
						}
						break;
					}
					}
					} 
				}
				State = 2340;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,367,_ctx);
			}
			State = 2341; argCall();
			State = 2354;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,371,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2343;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2342; whiteSpace();
						}
					}

					State = 2345;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2347;
					switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						State = 2346; whiteSpace();
						}
						break;
					}
					State = 2350;
					switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
					case 1:
						{
						State = 2349; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2356;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,371,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358;
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				State = 2357; Match(LPAREN);
				}
				break;
			}
			State = 2362;
			switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				State = 2360;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2361; whiteSpace();
				}
				break;
			}
			State = 2365;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 2364; Match(RPAREN);
				}
			}

			State = 2367; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2369; Match(EXCLAMATIONPOINT);
			State = 2371;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2370; whiteSpace();
				}
			}

			State = 2373; identifier();
			State = 2375;
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				State = 2374; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377; Match(LPAREN);
			State = 2395;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2379;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2378; whiteSpace();
					}
				}

				State = 2381; arg();
				State = 2392;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2383;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2382; whiteSpace();
							}
						}

						State = 2385; Match(COMMA);
						State = 2387;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2386; whiteSpace();
							}
						}

						State = 2389; arg();
						}
						} 
					}
					State = 2394;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
				}
				}
				break;
			}
			State = 2398;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2397; whiteSpace();
				}
			}

			State = 2400; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2404;
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2402; Match(OPTIONAL);
				State = 2403; whiteSpace();
				}
				break;
			}
			State = 2408;
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 2406;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2407; whiteSpace();
				}
				break;
			}
			State = 2412;
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2410; Match(PARAMARRAY);
				State = 2411; whiteSpace();
				}
				break;
			}
			State = 2414; identifier();
			State = 2416;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2415; typeHint();
				}
			}

			State = 2426;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2419;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2418; whiteSpace();
					}
				}

				State = 2421; Match(LPAREN);
				State = 2423;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2422; whiteSpace();
					}
				}

				State = 2425; Match(RPAREN);
				}
				break;
			}
			State = 2432;
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 2429;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2428; whiteSpace();
					}
				}

				State = 2431; asTypeClause();
				}
				break;
			}
			State = 2438;
			switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				State = 2435;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2434; whiteSpace();
					}
				}

				State = 2437; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2440; Match(EQ);
			State = 2442;
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 2441; whiteSpace();
				}
				break;
			}
			State = 2444; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2446; subscript();
			State = 2457;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2448;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2447; whiteSpace();
						}
					}

					State = 2450; Match(COMMA);
					State = 2452;
					switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
					case 1:
						{
						State = 2451; whiteSpace();
						}
						break;
					}
					State = 2454; subscript();
					}
					} 
				}
				State = 2459;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465;
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2460; valueStmt(0);
				State = 2461; whiteSpace();
				State = 2462; Match(TO);
				State = 2463; whiteSpace();
				}
				break;
			}
			State = 2467; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_identifier);
		try {
			State = 2471;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2469; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END_IF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2470; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2473; Match(AS);
			State = 2475;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2474; whiteSpace();
				}
			}

			State = 2479;
			switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				State = 2477; Match(NEW);
				State = 2478; whiteSpace();
				}
				break;
			}
			State = 2481; type();
			State = 2486;
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2483;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2482; whiteSpace();
					}
				}

				State = 2485; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2488;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (DATE - 72)) | (1L << (DOUBLE - 72)) | (1L << (INTEGER - 72)) | (1L << (LONG - 72)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (SINGLE - 194)) | (1L << (STRING - 194)) | (1L << (VARIANT - 194)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2490;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (EQ - 224)) | (1L << (GEQ - 224)) | (1L << (GT - 224)) | (1L << (LEQ - 224)) | (1L << (LT - 224)) | (1L << (NEQ - 224)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> DOT() { return GetTokens(VBAParser.DOT); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> EXCLAMATIONPOINT() { return GetTokens(VBAParser.EXCLAMATIONPOINT); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT(int i) {
			return GetToken(VBAParser.EXCLAMATIONPOINT, i);
		}
		public ITerminalNode DOT(int i) {
			return GetToken(VBAParser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2492; identifier();
			State = 2497;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,404,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2493;
					_la = _input.La(1);
					if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2494; identifier();
					}
					} 
				}
				State = 2499;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,404,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500; Match(MULT);
			State = 2502;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2501; whiteSpace();
				}
			}

			State = 2506;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2504; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END_IF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
				{
				State = 2505; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2508; identifier();
			State = 2517;
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				State = 2510;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2509; whiteSpace();
					}
				}

				State = 2512; Match(MINUS);
				State = 2514;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2513; whiteSpace();
					}
				}

				State = 2516; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2521;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END_IF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
				{
				State = 2519; identifier();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2520; numberLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2523; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_literal);
		try {
			State = 2533;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2525; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2526; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2527; Match(STRINGLITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2528; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2529; Match(FALSE);
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2530; Match(NOTHING);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2531; Match(NULL);
				}
				break;
			case EMPTY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2532; Match(EMPTY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2535;
			_la = _input.La(1);
			if ( !(((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (OCTLITERAL - 244)) | (1L << (HEXLITERAL - 244)) | (1L << (FLOATLITERAL - 244)) | (1L << (INTEGERLITERAL - 244)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539;
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2537; baseType();
				}
				break;

			case 2:
				{
				State = 2538; complexType();
				}
				break;
			}
			State = 2549;
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2542;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2541; whiteSpace();
					}
				}

				State = 2544; Match(LPAREN);
				State = 2546;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2545; whiteSpace();
					}
				}

				State = 2548; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2553;
			_la = _input.La(1);
			if ( !(((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode MIDTYPESUFFIX() { return GetToken(VBAParser.MIDTYPESUFFIX, 0); }
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode MIDBTYPESUFFIX() { return GetToken(VBAParser.MIDBTYPESUFFIX, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2555;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CASE - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SHARED - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STEP - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (SUB - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)))) != 0) || _la==COLLECTION) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_endOfLine);
		int _la;
		try {
			int _alt;
			State = 2576;
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2558;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2557; whiteSpace();
					}
				}

				State = 2567;
				switch (_input.La(1)) {
				case NEWLINE:
					{
					State = 2561;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2560; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2563;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,417,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				case COMMENT:
				case SINGLEQUOTE:
					{
					State = 2565; comment();
					}
					break;
				case REMCOMMENT:
					{
					State = 2566; remComment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2570;
				switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					State = 2569; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2573;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2572; whiteSpace();
					}
				}

				State = 2575; annotationList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2588;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,425,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2586;
					switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
					case 1:
						{
						State = 2578; endOfLine();
						}
						break;

					case 2:
						{
						State = 2580;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2579; whiteSpace();
							}
						}

						State = 2582; Match(COLON);
						State = 2584;
						switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
						case 1:
							{
							State = 2583; whiteSpace();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2590;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,425,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public ITerminalNode REMCOMMENT() { return GetToken(VBAParser.REMCOMMENT, 0); }
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2591; Match(REMCOMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(VBAParser.COMMENT, 0); }
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2593;
			_la = _input.La(1);
			if ( !(_la==COMMENT || _la==SINGLEQUOTE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2595; Match(SINGLEQUOTE);
			State = 2597;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2596; annotation();
				}
				}
				State = 2599;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2601; Match(AT);
			State = 2602; annotationName();
			State = 2604;
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 2603; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2669;
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2608; whiteSpace();
				State = 2609; annotationArg();
				State = 2611;
				switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					State = 2610; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2613; whiteSpace();
				State = 2614; annotationArg();
				State = 2623;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2616;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2615; whiteSpace();
							}
						}

						State = 2618; Match(COMMA);
						State = 2620;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2619; whiteSpace();
							}
						}

						State = 2622; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2625;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,431,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2628;
				switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					State = 2627; whiteSpace();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2631;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2630; whiteSpace();
					}
				}

				State = 2633; Match(LPAREN);
				State = 2635;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2634; whiteSpace();
					}
				}

				State = 2637; annotationArg();
				State = 2639;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2638; whiteSpace();
					}
				}

				State = 2641; Match(RPAREN);
				State = 2643;
				switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					State = 2642; whiteSpace();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2646;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2645; whiteSpace();
					}
				}

				State = 2648; Match(LPAREN);
				State = 2649; annotationArg();
				State = 2658;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2651;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2650; whiteSpace();
							}
						}

						State = 2653; Match(COMMA);
						State = 2655;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2654; whiteSpace();
							}
						}

						State = 2657; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2660;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,440,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2663;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2662; whiteSpace();
					}
				}

				State = 2665; Match(RPAREN);
				State = 2667;
				switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					State = 2666; whiteSpace();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_annotationArg);
		try {
			State = 2673;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2671; Match(IDENTIFIER);
				}
				break;
			case EMPTY:
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2672; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2676;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2675;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2678;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,445,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 101: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 9);

		case 5: return Precpred(_ctx, 8);

		case 6: return Precpred(_ctx, 7);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x105\xA7B\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x13F\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3"+
		"\x145\n\x3\x3\x3\x5\x3\x148\n\x3\x3\x3\x3\x3\x5\x3\x14C\n\x3\x3\x3\x3"+
		"\x3\x5\x3\x150\n\x3\x3\x3\x3\x3\x5\x3\x154\n\x3\x3\x3\x3\x3\x5\x3\x158"+
		"\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x15E\n\x4\x3\x4\x5\x4\x161\n\x4\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x16B\n\x5\x5\x5\x16D"+
		"\n\x5\x3\x5\x3\x5\x6\x5\x171\n\x5\r\x5\xE\x5\x172\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\a\x6\x179\n\x6\f\x6\xE\x6\x17C\v\x6\x3\x6\x3\x6\a\x6\x180\n\x6\f\x6"+
		"\xE\x6\x183\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x188\n\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x6\a\x18F\n\a\r\a\xE\a\x190\x3\b\x3\b\x3\b\x3\b\a\b\x197\n\b\f"+
		"\b\xE\b\x19A\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x5\t\x1A8\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1B2"+
		"\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x1B8\n\v\f\v\xE\v\x1BB\v\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x5\f\x1C4\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\x1CA\n\r\x3"+
		"\r\x3\r\x5\r\x1CE\n\r\x3\r\x3\r\x5\r\x1D2\n\r\x3\r\x3\r\x5\r\x1D6\n\r"+
		"\x3\r\a\r\x1D9\n\r\f\r\xE\r\x1DC\v\r\x3\xE\x3\xE\x3\xE\a\xE\x1E1\n\xE"+
		"\f\xE\xE\xE\x1E4\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\x229\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x22F\n\x10"+
		"\x3\x10\x3\x10\x5\x10\x233\n\x10\x3\x10\x5\x10\x236\n\x10\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x246\n\x14\x3\x14\x3\x14\x5\x14\x24A\n\x14\x3\x14"+
		"\a\x14\x24D\n\x14\f\x14\xE\x14\x250\v\x14\x5\x14\x252\n\x14\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\x257\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x25D"+
		"\n\x15\x3\x15\x3\x15\x5\x15\x261\n\x15\x3\x15\a\x15\x264\n\x15\f\x15\xE"+
		"\x15\x267\v\x15\x3\x16\x3\x16\x5\x16\x26B\n\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x270\n\x16\x3\x16\x5\x16\x273\n\x16\x3\x16\x3\x16\x5\x16\x277\n\x16"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\x27D\n\x17\x3\x17\x3\x17\x5\x17\x281"+
		"\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5\x18\x288\n\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x5\x18\x28E\n\x18\x3\x18\x3\x18\x5\x18\x292\n\x18\x3"+
		"\x18\x5\x18\x295\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x29A\n\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2A5\n\x18"+
		"\x3\x18\x5\x18\x2A8\n\x18\x3\x18\x5\x18\x2AB\n\x18\x3\x18\x3\x18\x3\x18"+
		"\x5\x18\x2B0\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2B6\n\x19\x3\x19"+
		"\x3\x19\x5\x19\x2BA\n\x19\x3\x19\a\x19\x2BD\n\x19\f\x19\xE\x19\x2C0\v"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2C6\n\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\x2CC\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2D0\n\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2D8\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2DC"+
		"\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2E0\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2E4\n\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x2E8\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x301\n\x1B"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x308\n\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\a\x1D\x30F\n\x1D\f\x1D\xE\x1D\x312\v\x1D\x3\x1D\x3"+
		"\x1D\x3\x1E\x3\x1E\x5\x1E\x318\n\x1E\x3\x1E\x3\x1E\x5\x1E\x31C\n\x1E\x3"+
		"\x1E\x5\x1E\x31F\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x327\n\x1F\x3\x1F\x3\x1F\x5\x1F\x32B\n\x1F\x3\x1F\a\x1F\x32E\n\x1F\f"+
		"\x1F\xE\x1F\x331\v\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x5!\x33A\n!\x3!\x3"+
		"!\x3!\x3!\x5!\x340\n!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x34A\n#\x3"+
		"#\x3#\x5#\x34E\n#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x358\n$\x3$\x3$"+
		"\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x364\n$\x3%\x3%\x3%\x3%\x5%\x36A"+
		"\n%\x3%\x3%\x3%\x5%\x36F\n%\x3%\x5%\x372\n%\x3%\x3%\x5%\x376\n%\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x382\n%\x3%\x3%\x3%\x3%\x3%\x3%"+
		"\x5%\x38A\n%\x5%\x38C\n%\x3&\x3&\x3&\x5&\x391\n&\x3&\x3&\x5&\x395\n&\x3"+
		"&\x3&\x5&\x399\n&\x3&\x3&\x5&\x39D\n&\x3&\x5&\x3A0\n&\x3&\x5&\x3A3\n&"+
		"\x3&\x5&\x3A6\n&\x3&\x5&\x3A9\n&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5"+
		"\'\x3B3\n\'\x3\'\x3\'\x5\'\x3B7\n\'\x3\'\x5\'\x3BA\n\'\x3\'\x5\'\x3BD"+
		"\n\'\x3\'\x3\'\x5\'\x3C1\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3"+
		")\x3*\x3*\x3*\x3*\x3*\x3*\x6*\x3D3\n*\r*\xE*\x3D4\x3*\x3*\a*\x3D9\n*\f"+
		"*\xE*\x3DC\v*\x3*\x5*\x3DF\n*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x6+\x3E9"+
		"\n+\r+\xE+\x3EA\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x3F5\n+\x3+\x3+\x5"+
		"+\x3F9\n+\x3,\x3,\x6,\x3FD\n,\r,\xE,\x3FE\x3,\x3,\x3-\x3-\x5-\x405\n-"+
		"\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x40D\n.\x3.\x3.\x5.\x411\n.\x3/\x3/\x3/\x3"+
		"/\x3/\x3/\x5/\x419\n/\x3/\x3/\x3\x30\x3\x30\x5\x30\x41F\n\x30\x3\x30\x5"+
		"\x30\x422\n\x30\x3\x31\x3\x31\x5\x31\x426\n\x31\x3\x31\x3\x31\x5\x31\x42A"+
		"\n\x31\x3\x31\x5\x31\x42D\n\x31\a\x31\x42F\n\x31\f\x31\xE\x31\x432\v\x31"+
		"\x3\x31\x3\x31\x5\x31\x436\n\x31\x5\x31\x438\n\x31\x3\x31\x3\x31\x5\x31"+
		"\x43C\n\x31\x3\x31\x3\x31\x5\x31\x440\n\x31\x3\x31\x5\x31\x443\n\x31\a"+
		"\x31\x445\n\x31\f\x31\xE\x31\x448\v\x31\x5\x31\x44A\n\x31\x3\x32\x3\x32"+
		"\x3\x33\x3\x33\x3\x34\x3\x34\x5\x34\x452\n\x34\x3\x35\x3\x35\x3\x36\x3"+
		"\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x460"+
		"\n\x38\x3\x38\x3\x38\x5\x38\x464\n\x38\x3\x38\x6\x38\x467\n\x38\r\x38"+
		"\xE\x38\x468\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x5:\x471\n:\x3:\x3:\x5"+
		":\x475\n:\x3:\x3:\x5:\x479\n:\x3:\x3:\x3;\x3;\x3;\x3;\x5;\x481\n;\x3;"+
		"\x3;\x5;\x485\n;\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x5=\x491\n=\x3"+
		"=\x3=\x5=\x495\n=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x49D\n=\x5=\x49F\n=\x3>"+
		"\x3>\x3>\x3>\x5>\x4A5\n>\x3>\x3>\x5>\x4A9\n>\x3>\x3>\x3?\x3?\x5?\x4AF"+
		"\n?\x3?\x3?\x5?\x4B3\n?\x3?\x3?\x5?\x4B7\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x4D1\n\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x4DB\n"+
		"\x43\x3\x43\x3\x43\x5\x43\x4DF\n\x43\x3\x43\a\x43\x4E2\n\x43\f\x43\xE"+
		"\x43\x4E5\v\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x5\x44\x4EF\n\x44\x3\x44\x3\x44\x5\x44\x4F3\n\x44\x3\x44\a\x44\x4F6\n"+
		"\x44\f\x44\xE\x44\x4F9\v\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x507\n\x45\x3\x45\x3"+
		"\x45\x3\x45\x5\x45\x50C\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x5\x45\x515\n\x45\x3\x45\x3\x45\x5\x45\x519\n\x45\x3\x45\x3\x45"+
		"\x5\x45\x51D\n\x45\x3\x46\x3\x46\x5\x46\x521\n\x46\x3\x46\x3\x46\x5\x46"+
		"\x525\n\x46\x3\x46\x5\x46\x528\n\x46\a\x46\x52A\n\x46\f\x46\xE\x46\x52D"+
		"\v\x46\x3\x46\x5\x46\x530\n\x46\x3\x46\x5\x46\x533\n\x46\x3\x46\x3\x46"+
		"\x5\x46\x537\n\x46\x3\x46\x5\x46\x53A\n\x46\x6\x46\x53C\n\x46\r\x46\xE"+
		"\x46\x53D\x5\x46\x540\n\x46\x3G\x3G\x3G\x5G\x545\nG\x3G\x3G\x5G\x549\n"+
		"G\x3G\x3G\x5G\x54D\nG\x3G\x3G\x5G\x551\nG\x5G\x553\nG\x3H\x3H\x3H\x3H"+
		"\x5H\x559\nH\x3H\x3H\x5H\x55D\nH\x3H\x5H\x560\nH\x3I\x3I\x3I\x5I\x565"+
		"\nI\x3I\x3I\x5I\x569\nI\x3I\x3I\x3I\x3I\x5I\x56F\nI\x3I\x5I\x572\nI\x3"+
		"I\x5I\x575\nI\x3I\x3I\x3I\x5I\x57A\nI\x3I\x3I\x3I\x3I\x3J\x3J\x3J\x5J"+
		"\x583\nJ\x3J\x3J\x5J\x587\nJ\x3J\x3J\x3J\x3J\x5J\x58D\nJ\x3J\x5J\x590"+
		"\nJ\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x5K\x599\nK\x3K\x3K\x5K\x59D\nK\x3K\x3"+
		"K\x3K\x3K\x5K\x5A3\nK\x3K\x5K\x5A6\nK\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x3L"+
		"\x5L\x5B0\nL\x3L\x3L\x5L\x5B4\nL\x3L\x5L\x5B7\nL\x3L\x5L\x5BA\nL\x3L\x3"+
		"L\x5L\x5BE\nL\x3L\x3L\x3M\x3M\x3M\x3M\x5M\x5C6\nM\x3M\x3M\x5M\x5CA\nM"+
		"\x3M\x3M\x5M\x5CE\nM\x5M\x5D0\nM\x3M\x5M\x5D3\nM\x3N\x3N\x3N\x3N\x5N\x5D9"+
		"\nN\x3O\x3O\x3O\x3O\x5O\x5DF\nO\x3O\x3O\x5O\x5E3\nO\x3O\x3O\x5O\x5E7\n"+
		"O\x3O\aO\x5EA\nO\fO\xEO\x5ED\vO\x3P\x3P\x5P\x5F1\nP\x3P\x3P\x5P\x5F5\n"+
		"P\x3P\x3P\x5P\x5F9\nP\x3P\x3P\x3P\x3P\x5P\x5FF\nP\x3Q\x3Q\x3R\x3R\x3R"+
		"\x3R\x5R\x607\nR\x5R\x609\nR\x3S\x3S\x3T\x3T\x3T\x3T\x3U\x3U\x3U\x3U\x5"+
		"U\x615\nU\x3U\x3U\x5U\x619\nU\x3U\x3U\x3V\x3V\x3V\x3V\x5V\x621\nV\x3V"+
		"\x3V\x5V\x625\nV\x3V\x3V\x3W\x3W\x3W\x3W\x5W\x62D\nW\x3W\x3W\x5W\x631"+
		"\nW\x3W\x3W\x5W\x635\nW\x3W\x3W\x5W\x639\nW\x3W\x3W\x5W\x63D\nW\x3W\x3"+
		"W\x5W\x641\nW\x3W\x3W\x3X\x3X\x3X\x3X\x5X\x649\nX\x3X\x3X\x5X\x64D\nX"+
		"\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\aY\x658\nY\fY\xEY\x65B\vY\x3Y\x3"+
		"Y\x3Z\x3Z\x5Z\x661\nZ\x3Z\x3Z\x5Z\x665\nZ\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z"+
		"\x3Z\x3Z\x5Z\x670\nZ\x3[\x3[\x3[\x3[\x3[\x3[\x3\\\x3\\\x3\\\x5\\\x67B"+
		"\n\\\x3\\\x3\\\x5\\\x67F\n\\\x3\\\a\\\x682\n\\\f\\\xE\\\x685\v\\\x5\\"+
		"\x687\n\\\x3]\x3]\x3]\x3]\x5]\x68D\n]\x3]\x3]\x5]\x691\n]\x3]\x5]\x694"+
		"\n]\x3^\x3^\x3^\x3^\x5^\x69A\n^\x3^\x3^\x5^\x69E\n^\x3^\x3^\x3_\x3_\x3"+
		"_\x3_\x5_\x6A6\n_\x3_\x3_\x5_\x6AA\n_\x3_\x3_\x3`\x3`\x3\x61\x3\x61\x3"+
		"\x61\x5\x61\x6B3\n\x61\x3\x61\x3\x61\x5\x61\x6B7\n\x61\x3\x61\x3\x61\x5"+
		"\x61\x6BB\n\x61\x3\x61\x3\x61\x5\x61\x6BF\n\x61\x3\x61\x5\x61\x6C2\n\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x5\x62\x6CA\n\x62\x3\x62\x3"+
		"\x62\x5\x62\x6CE\n\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x5\x63\x6D5"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x6DC\n\x63\f\x63\xE\x63"+
		"\x6DF\v\x63\x3\x63\x3\x63\x3\x64\x3\x64\x5\x64\x6E5\n\x64\x3\x64\x3\x64"+
		"\x5\x64\x6E9\n\x64\x3\x64\x5\x64\x6EC\n\x64\x3\x64\x5\x64\x6EF\n\x64\x3"+
		"\x64\x5\x64\x6F2\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x6F7\n\x64\x3\x64\x3"+
		"\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x703"+
		"\n\x66\x3\x66\x3\x66\x5\x66\x707\n\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x5\x66\x70F\n\x66\x5\x66\x711\n\x66\x3g\x3g\x3g\x5g\x716\n"+
		"g\x3g\x3g\x3g\x5g\x71B\ng\x3g\x3g\x3g\x5g\x720\ng\x3g\x3g\x5g\x724\ng"+
		"\x3g\x3g\x3g\x3g\x5g\x72A\ng\x3g\x3g\x3g\x5g\x72F\ng\x3g\x3g\x3g\x3g\x3"+
		"g\x5g\x736\ng\x3g\x3g\x5g\x73A\ng\x3g\x3g\x3g\x3g\x5g\x740\ng\x3g\x3g"+
		"\x5g\x744\ng\x3g\x3g\x5g\x748\ng\x3g\x3g\x3g\x5g\x74D\ng\x3g\x3g\x5g\x751"+
		"\ng\x3g\x3g\x3g\x5g\x756\ng\x3g\x3g\x5g\x75A\ng\x3g\x3g\x3g\x5g\x75F\n"+
		"g\x3g\x3g\x5g\x763\ng\x3g\x3g\x3g\x5g\x768\ng\x3g\x3g\x5g\x76C\ng\x3g"+
		"\x3g\x3g\x5g\x771\ng\x3g\x3g\x5g\x775\ng\x3g\x3g\x3g\x5g\x77A\ng\x3g\x3"+
		"g\x5g\x77E\ng\x3g\x3g\x3g\x5g\x783\ng\x3g\x3g\x5g\x787\ng\x3g\x3g\x3g"+
		"\x5g\x78C\ng\x3g\x3g\x5g\x790\ng\x3g\x3g\x3g\x5g\x795\ng\x3g\x3g\x5g\x799"+
		"\ng\x3g\x3g\x3g\x5g\x79E\ng\x3g\x3g\x5g\x7A2\ng\x3g\x3g\x3g\x5g\x7A7\n"+
		"g\x3g\x3g\x5g\x7AB\ng\x3g\ag\x7AE\ng\fg\xEg\x7B1\vg\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x5h\x7BB\nh\x3i\x3i\x3i\x5i\x7C0\ni\x3i\x3i\x3i\x5i\x7C5"+
		"\ni\x3i\x3i\x3j\x3j\x5j\x7CB\nj\x3j\x3j\x5j\x7CF\nj\x3j\aj\x7D2\nj\fj"+
		"\xEj\x7D5\vj\x3k\x3k\x5k\x7D9\nk\x3k\x3k\x5k\x7DD\nk\x3k\x3k\x5k\x7E1"+
		"\nk\x5k\x7E3\nk\x3k\x3k\x5k\x7E7\nk\x5k\x7E9\nk\x3k\x5k\x7EC\nk\x3k\x3"+
		"k\x3k\x5k\x7F1\nk\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3m\x3m\x3m\x3m\x5m\x7FE"+
		"\nm\x3m\x3m\x5m\x802\nm\x3m\x3m\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x3o\x3o\x3"+
		"o\x3o\x3o\x5o\x812\no\x3p\x3p\x3p\x3p\x5p\x818\np\x3p\x3p\x5p\x81C\np"+
		"\x3p\x5p\x81F\np\x3q\x5q\x822\nq\x3q\x3q\x3r\x3r\x5r\x828\nr\x3s\x3s\x3"+
		"s\x3s\x5s\x82E\ns\x3s\x5s\x831\ns\x3s\x3s\x5s\x835\ns\x3s\x3s\x5s\x839"+
		"\ns\x3s\x3s\x5s\x83D\ns\x3s\x5s\x840\ns\x3s\x3s\x3s\x3s\as\x846\ns\fs"+
		"\xEs\x849\vs\x3t\x3t\x3t\x5t\x84E\nt\x3t\x3t\x3t\x5t\x853\nt\x3t\x5t\x856"+
		"\nt\x3t\x3t\x5t\x85A\nt\x3t\x3t\x5t\x85E\nt\x3t\x3t\x5t\x862\nt\x3t\x5"+
		"t\x865\nt\x3t\x3t\x3t\x3t\at\x86B\nt\ft\xEt\x86E\vt\x3u\x3u\x5u\x872\n"+
		"u\x3v\x5v\x875\nv\x3v\x5v\x878\nv\x3v\x3v\x5v\x87C\nv\x3v\x3v\x5v\x880"+
		"\nv\x3v\x3v\x3v\x5v\x885\nv\x3v\x5v\x888\nv\x3v\x5v\x88B\nv\x3v\x5v\x88E"+
		"\nv\x3v\x3v\x3v\x3v\av\x894\nv\fv\xEv\x897\vv\x3w\x3w\x3w\x3w\x5w\x89D"+
		"\nw\x3w\x5w\x8A0\nw\x3w\x3w\x3w\x3w\aw\x8A6\nw\fw\xEw\x8A9\vw\x3x\x3x"+
		"\x3x\x3x\x5x\x8AF\nx\x3y\x3y\x5y\x8B3\ny\x3y\x5y\x8B6\ny\x3y\x5y\x8B9"+
		"\ny\x3y\x5y\x8BC\ny\x3y\x3y\x3y\x3y\ay\x8C2\ny\fy\xEy\x8C5\vy\x3z\x3z"+
		"\x5z\x8C9\nz\x3z\x5z\x8CC\nz\x3z\x5z\x8CF\nz\x3z\x3z\x5z\x8D3\nz\x3z\x3"+
		"z\x5z\x8D7\nz\x5z\x8D9\nz\x3z\x3z\x5z\x8DD\nz\x3z\x5z\x8E0\nz\x3z\x5z"+
		"\x8E3\nz\x3z\x3z\x3z\x3z\az\x8E9\nz\fz\xEz\x8EC\vz\x3{\x3{\x5{\x8F0\n"+
		"{\x3{\x3{\x5{\x8F4\n{\x6{\x8F6\n{\r{\xE{\x8F7\x3{\x5{\x8FB\n{\x3{\x5{"+
		"\x8FE\n{\x3{\x5{\x901\n{\x3{\x3{\x3{\x3{\a{\x907\n{\f{\xE{\x90A\v{\x3"+
		"|\x3|\x5|\x90E\n|\x3|\x3|\x5|\x912\n|\x3}\x5}\x915\n}\x3}\x3}\x3~\x5~"+
		"\x91A\n~\x3~\x5~\x91D\n~\x3~\x3~\x5~\x921\n~\a~\x923\n~\f~\xE~\x926\v"+
		"~\x3~\x3~\x5~\x92A\n~\x3~\x3~\x5~\x92E\n~\x3~\x5~\x931\n~\a~\x933\n~\f"+
		"~\xE~\x936\v~\x3\x7F\x5\x7F\x939\n\x7F\x3\x7F\x3\x7F\x5\x7F\x93D\n\x7F"+
		"\x3\x7F\x5\x7F\x940\n\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x5\x80\x946\n\x80"+
		"\x3\x80\x3\x80\x5\x80\x94A\n\x80\x3\x81\x3\x81\x5\x81\x94E\n\x81\x3\x81"+
		"\x3\x81\x5\x81\x952\n\x81\x3\x81\x3\x81\x5\x81\x956\n\x81\x3\x81\a\x81"+
		"\x959\n\x81\f\x81\xE\x81\x95C\v\x81\x5\x81\x95E\n\x81\x3\x81\x5\x81\x961"+
		"\n\x81\x3\x81\x3\x81\x3\x82\x3\x82\x5\x82\x967\n\x82\x3\x82\x3\x82\x5"+
		"\x82\x96B\n\x82\x3\x82\x3\x82\x5\x82\x96F\n\x82\x3\x82\x3\x82\x5\x82\x973"+
		"\n\x82\x3\x82\x5\x82\x976\n\x82\x3\x82\x3\x82\x5\x82\x97A\n\x82\x3\x82"+
		"\x5\x82\x97D\n\x82\x3\x82\x5\x82\x980\n\x82\x3\x82\x5\x82\x983\n\x82\x3"+
		"\x82\x5\x82\x986\n\x82\x3\x82\x5\x82\x989\n\x82\x3\x83\x3\x83\x5\x83\x98D"+
		"\n\x83\x3\x83\x3\x83\x3\x84\x3\x84\x5\x84\x993\n\x84\x3\x84\x3\x84\x5"+
		"\x84\x997\n\x84\x3\x84\a\x84\x99A\n\x84\f\x84\xE\x84\x99D\v\x84\x3\x85"+
		"\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\x9A4\n\x85\x3\x85\x3\x85\x3\x86\x3"+
		"\x86\x5\x86\x9AA\n\x86\x3\x87\x3\x87\x5\x87\x9AE\n\x87\x3\x87\x3\x87\x5"+
		"\x87\x9B2\n\x87\x3\x87\x3\x87\x5\x87\x9B6\n\x87\x3\x87\x5\x87\x9B9\n\x87"+
		"\x3\x88\x3\x88\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\a\x8A\x9C2\n\x8A\f\x8A"+
		"\xE\x8A\x9C5\v\x8A\x3\x8B\x3\x8B\x5\x8B\x9C9\n\x8B\x3\x8B\x3\x8B\x5\x8B"+
		"\x9CD\n\x8B\x3\x8C\x3\x8C\x5\x8C\x9D1\n\x8C\x3\x8C\x3\x8C\x5\x8C\x9D5"+
		"\n\x8C\x3\x8C\x5\x8C\x9D8\n\x8C\x3\x8D\x3\x8D\x5\x8D\x9DC\n\x8D\x3\x8D"+
		"\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E"+
		"\x9E8\n\x8E\x3\x8F\x3\x8F\x3\x90\x3\x90\x5\x90\x9EE\n\x90\x3\x90\x5\x90"+
		"\x9F1\n\x90\x3\x90\x3\x90\x5\x90\x9F5\n\x90\x3\x90\x5\x90\x9F8\n\x90\x3"+
		"\x91\x3\x91\x3\x92\x3\x92\x3\x93\x3\x93\x3\x94\x5\x94\xA01\n\x94\x3\x94"+
		"\x6\x94\xA04\n\x94\r\x94\xE\x94\xA05\x3\x94\x3\x94\x5\x94\xA0A\n\x94\x3"+
		"\x94\x5\x94\xA0D\n\x94\x3\x94\x5\x94\xA10\n\x94\x3\x94\x5\x94\xA13\n\x94"+
		"\x3\x95\x3\x95\x5\x95\xA17\n\x95\x3\x95\x3\x95\x5\x95\xA1B\n\x95\a\x95"+
		"\xA1D\n\x95\f\x95\xE\x95\xA20\v\x95\x3\x96\x3\x96\x3\x97\x3\x97\x3\x98"+
		"\x3\x98\x6\x98\xA28\n\x98\r\x98\xE\x98\xA29\x3\x99\x3\x99\x3\x99\x5\x99"+
		"\xA2F\n\x99\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xA36\n\x9B\x3\x9B"+
		"\x3\x9B\x3\x9B\x5\x9B\xA3B\n\x9B\x3\x9B\x3\x9B\x5\x9B\xA3F\n\x9B\x3\x9B"+
		"\x6\x9B\xA42\n\x9B\r\x9B\xE\x9B\xA43\x3\x9B\x5\x9B\xA47\n\x9B\x3\x9B\x5"+
		"\x9B\xA4A\n\x9B\x3\x9B\x3\x9B\x5\x9B\xA4E\n\x9B\x3\x9B\x3\x9B\x5\x9B\xA52"+
		"\n\x9B\x3\x9B\x3\x9B\x5\x9B\xA56\n\x9B\x3\x9B\x5\x9B\xA59\n\x9B\x3\x9B"+
		"\x3\x9B\x3\x9B\x5\x9B\xA5E\n\x9B\x3\x9B\x3\x9B\x5\x9B\xA62\n\x9B\x3\x9B"+
		"\x6\x9B\xA65\n\x9B\r\x9B\xE\x9B\xA66\x3\x9B\x5\x9B\xA6A\n\x9B\x3\x9B\x3"+
		"\x9B\x5\x9B\xA6E\n\x9B\x5\x9B\xA70\n\x9B\x3\x9C\x3\x9C\x5\x9C\xA74\n\x9C"+
		"\x3\x9D\x6\x9D\xA77\n\x9D\r\x9D\xE\x9D\xA78\x3\x9D\x2\x2\x3\xCC\x9E\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34"+
		"\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2"+
		"P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2"+
		"n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2"+
		"\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2"+
		"\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2"+
		"\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2"+
		"\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2"+
		"\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2"+
		"\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2"+
		"\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112"+
		"\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124"+
		"\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136"+
		"\x2\x138\x2\x2\x19\x5\x2==II\xCC\xCC\x3\x2LX\x4\x2\xD5\xD5\xD9\xD9\x3"+
		"\x2os\x3\x2\x9C\x9D\a\x2\x39\x39==\x81\x81\xA5\xA5\xB0\xB0\x4\x2\xB3\xB4"+
		"\xDD\xDD\x4\x2\x8D\x8F\xC3\xC3\x4\x2))++\x4\x2\xC5\xC5\xCB\xCB\x4\x2\xE0"+
		"\xE0\xE9\xE9\x4\x2\xE8\xE8\xEB\xEB\a\x2\x82\x82\x8B\x8B\xE2\xE5\xE7\xE7"+
		"\xEA\xEA\x3\x2,-\x4\x2?@\xA6\xA6\x3\x2?@\r\x2\x13\x13\x1F >>\x41\x41J"+
		"J\\\\\x83\x83\x87\x87\xC4\xC4\xC9\xC9\xD6\xD6\x3\x2\xF6\xF9\x5\x2,,.\x32"+
		"\xEC\xEC\x6\x2vvzz\xA9\xA9\xAE\xAE\r\x2\x3(\x33_\x63\x63int\x8B\x90\x9B"+
		"\x9E\x9F\xA4\xA9\xAE\xB3\xB5\xDE\x105\x105\x3\x2\xFD\xFE\x4\x2\x100\x100"+
		"\x102\x102\xC0A\x2\x13A\x3\x2\x2\x2\x4\x13E\x3\x2\x2\x2\x6\x159\x3\x2"+
		"\x2\x2\b\x164\x3\x2\x2\x2\n\x176\x3\x2\x2\x2\f\x18E\x3\x2\x2\x2\xE\x192"+
		"\x3\x2\x2\x2\x10\x1A7\x3\x2\x2\x2\x12\x1B1\x3\x2\x2\x2\x14\x1B3\x3\x2"+
		"\x2\x2\x16\x1C3\x3\x2\x2\x2\x18\x1C5\x3\x2\x2\x2\x1A\x1E2\x3\x2\x2\x2"+
		"\x1C\x228\x3\x2\x2\x2\x1E\x22A\x3\x2\x2\x2 \x237\x3\x2\x2\x2\"\x239\x3"+
		"\x2\x2\x2$\x23D\x3\x2\x2\x2&\x241\x3\x2\x2\x2(\x256\x3\x2\x2\x2*\x268"+
		"\x3\x2\x2\x2,\x27A\x3\x2\x2\x2.\x287\x3\x2\x2\x2\x30\x2B1\x3\x2\x2\x2"+
		"\x32\x2E7\x3\x2\x2\x2\x34\x300\x3\x2\x2\x2\x36\x302\x3\x2\x2\x2\x38\x307"+
		"\x3\x2\x2\x2:\x315\x3\x2\x2\x2<\x322\x3\x2\x2\x2>\x332\x3\x2\x2\x2@\x339"+
		"\x3\x2\x2\x2\x42\x343\x3\x2\x2\x2\x44\x345\x3\x2\x2\x2\x46\x351\x3\x2"+
		"\x2\x2H\x365\x3\x2\x2\x2J\x390\x3\x2\x2\x2L\x3AE\x3\x2\x2\x2N\x3C4\x3"+
		"\x2\x2\x2P\x3C8\x3\x2\x2\x2R\x3CC\x3\x2\x2\x2T\x3F8\x3\x2\x2\x2V\x3FA"+
		"\x3\x2\x2\x2X\x404\x3\x2\x2\x2Z\x406\x3\x2\x2\x2\\\x412\x3\x2\x2\x2^\x41C"+
		"\x3\x2\x2\x2`\x449\x3\x2\x2\x2\x62\x44B\x3\x2\x2\x2\x64\x44D\x3\x2\x2"+
		"\x2\x66\x451\x3\x2\x2\x2h\x453\x3\x2\x2\x2j\x455\x3\x2\x2\x2l\x457\x3"+
		"\x2\x2\x2n\x45B\x3\x2\x2\x2p\x46A\x3\x2\x2\x2r\x470\x3\x2\x2\x2t\x47C"+
		"\x3\x2\x2\x2v\x488\x3\x2\x2\x2x\x48C\x3\x2\x2\x2z\x4A0\x3\x2\x2\x2|\x4AC"+
		"\x3\x2\x2\x2~\x4BA\x3\x2\x2\x2\x80\x4BE\x3\x2\x2\x2\x82\x4C6\x3\x2\x2"+
		"\x2\x84\x4D2\x3\x2\x2\x2\x86\x4E6\x3\x2\x2\x2\x88\x4FA\x3\x2\x2\x2\x8A"+
		"\x53F\x3\x2\x2\x2\x8C\x552\x3\x2\x2\x2\x8E\x554\x3\x2\x2\x2\x90\x564\x3"+
		"\x2\x2\x2\x92\x582\x3\x2\x2\x2\x94\x598\x3\x2\x2\x2\x96\x5AB\x3\x2\x2"+
		"\x2\x98\x5C1\x3\x2\x2\x2\x9A\x5D4\x3\x2\x2\x2\x9C\x5DA\x3\x2\x2\x2\x9E"+
		"\x5EE\x3\x2\x2\x2\xA0\x600\x3\x2\x2\x2\xA2\x602\x3\x2\x2\x2\xA4\x60A\x3"+
		"\x2\x2\x2\xA6\x60C\x3\x2\x2\x2\xA8\x610\x3\x2\x2\x2\xAA\x61C\x3\x2\x2"+
		"\x2\xAC\x628\x3\x2\x2\x2\xAE\x644\x3\x2\x2\x2\xB0\x650\x3\x2\x2\x2\xB2"+
		"\x66F\x3\x2\x2\x2\xB4\x671\x3\x2\x2\x2\xB6\x686\x3\x2\x2\x2\xB8\x688\x3"+
		"\x2\x2\x2\xBA\x695\x3\x2\x2\x2\xBC\x6A1\x3\x2\x2\x2\xBE\x6AD\x3\x2\x2"+
		"\x2\xC0\x6B2\x3\x2\x2\x2\xC2\x6C7\x3\x2\x2\x2\xC4\x6D4\x3\x2\x2\x2\xC6"+
		"\x6E2\x3\x2\x2\x2\xC8\x6FA\x3\x2\x2\x2\xCA\x6FE\x3\x2\x2\x2\xCC\x73F\x3"+
		"\x2\x2\x2\xCE\x7B2\x3\x2\x2\x2\xD0\x7BF\x3\x2\x2\x2\xD2\x7C8\x3\x2\x2"+
		"\x2\xD4\x7D6\x3\x2\x2\x2\xD6\x7F2\x3\x2\x2\x2\xD8\x7F9\x3\x2\x2\x2\xDA"+
		"\x805\x3\x2\x2\x2\xDC\x811\x3\x2\x2\x2\xDE\x813\x3\x2\x2\x2\xE0\x821\x3"+
		"\x2\x2\x2\xE2\x827\x3\x2\x2\x2\xE4\x829\x3\x2\x2\x2\xE6\x84A\x3\x2\x2"+
		"\x2\xE8\x871\x3\x2\x2\x2\xEA\x874\x3\x2\x2\x2\xEC\x898\x3\x2\x2\x2\xEE"+
		"\x8AE\x3\x2\x2\x2\xF0\x8B0\x3\x2\x2\x2\xF2\x8C8\x3\x2\x2\x2\xF4\x8EF\x3"+
		"\x2\x2\x2\xF6\x90B\x3\x2\x2\x2\xF8\x914\x3\x2\x2\x2\xFA\x924\x3\x2\x2"+
		"\x2\xFC\x938\x3\x2\x2\x2\xFE\x943\x3\x2\x2\x2\x100\x94B\x3\x2\x2\x2\x102"+
		"\x966\x3\x2\x2\x2\x104\x98A\x3\x2\x2\x2\x106\x990\x3\x2\x2\x2\x108\x9A3"+
		"\x3\x2\x2\x2\x10A\x9A9\x3\x2\x2\x2\x10C\x9AB\x3\x2\x2\x2\x10E\x9BA\x3"+
		"\x2\x2\x2\x110\x9BC\x3\x2\x2\x2\x112\x9BE\x3\x2\x2\x2\x114\x9C6\x3\x2"+
		"\x2\x2\x116\x9CE\x3\x2\x2\x2\x118\x9DB\x3\x2\x2\x2\x11A\x9E7\x3\x2\x2"+
		"\x2\x11C\x9E9\x3\x2\x2\x2\x11E\x9ED\x3\x2\x2\x2\x120\x9F9\x3\x2\x2\x2"+
		"\x122\x9FB\x3\x2\x2\x2\x124\x9FD\x3\x2\x2\x2\x126\xA12\x3\x2\x2\x2\x128"+
		"\xA1E\x3\x2\x2\x2\x12A\xA21\x3\x2\x2\x2\x12C\xA23\x3\x2\x2\x2\x12E\xA25"+
		"\x3\x2\x2\x2\x130\xA2B\x3\x2\x2\x2\x132\xA30\x3\x2\x2\x2\x134\xA6F\x3"+
		"\x2\x2\x2\x136\xA73\x3\x2\x2\x2\x138\xA76\x3\x2\x2\x2\x13A\x13B\x5\x4"+
		"\x3\x2\x13B\x13C\a\x2\x2\x3\x13C\x3\x3\x2\x2\x2\x13D\x13F\x5\x138\x9D"+
		"\x2\x13E\x13D\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2"+
		"\x140\x144\x5\x128\x95\x2\x141\x142\x5\x6\x4\x2\x142\x143\x5\x128\x95"+
		"\x2\x143\x145\x3\x2\x2\x2\x144\x141\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2"+
		"\x145\x147\x3\x2\x2\x2\x146\x148\x5\b\x5\x2\x147\x146\x3\x2\x2\x2\x147"+
		"\x148\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14B\x5\x128\x95\x2\x14A"+
		"\x14C\x5\f\a\x2\x14B\x14A\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D"+
		"\x3\x2\x2\x2\x14D\x14F\x5\x128\x95\x2\x14E\x150\x5\xE\b\x2\x14F\x14E\x3"+
		"\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x153\x5\x128"+
		"\x95\x2\x152\x154\x5\x14\v\x2\x153\x152\x3\x2\x2\x2\x153\x154\x3\x2\x2"+
		"\x2\x154\x155\x3\x2\x2\x2\x155\x157\x5\x128\x95\x2\x156\x158\x5\x138\x9D"+
		"\x2\x157\x156\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x5\x3\x2\x2\x2\x159"+
		"\x15A\a\xD7\x2\x2\x15A\x15B\x5\x138\x9D\x2\x15B\x15D\x5\x11C\x8F\x2\x15C"+
		"\x15E\x5\x138\x9D\x2\x15D\x15C\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E"+
		"\x160\x3\x2\x2\x2\x15F\x161\a\x46\x2\x2\x160\x15F\x3\x2\x2\x2\x160\x161"+
		"\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\x163\x5\x128\x95\x2\x163\a\x3"+
		"\x2\x2\x2\x164\x16C\a;\x2\x2\x165\x166\x5\x138\x9D\x2\x166\x167\a\x103"+
		"\x2\x2\x167\x168\x5\x138\x9D\x2\x168\x16A\x5\x10A\x86\x2\x169\x16B\x5"+
		"\x138\x9D\x2\x16A\x169\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16D\x3"+
		"\x2\x2\x2\x16C\x165\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E\x3\x2"+
		"\x2\x2\x16E\x170\x5\x128\x95\x2\x16F\x171\x5\n\x6\x2\x170\x16F\x3\x2\x2"+
		"\x2\x171\x172\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2"+
		"\x173\x174\x3\x2\x2\x2\x174\x175\ai\x2\x2\x175\t\x3\x2\x2\x2\x176\x17A"+
		"\x5\x10A\x86\x2\x177\x179\x5\x138\x9D\x2\x178\x177\x3\x2\x2\x2\x179\x17C"+
		"\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17D\x3"+
		"\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17D\x181\a\xE2\x2\x2\x17E\x180\x5\x138"+
		"\x9D\x2\x17F\x17E\x3\x2\x2\x2\x180\x183\x3\x2\x2\x2\x181\x17F\x3\x2\x2"+
		"\x2\x181\x182\x3\x2\x2\x2\x182\x184\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2"+
		"\x184\x187\x5\x11A\x8E\x2\x185\x186\a*\x2\x2\x186\x188\x5\x11C\x8F\x2"+
		"\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189"+
		"\x18A\x5\x128\x95\x2\x18A\v\x3\x2\x2\x2\x18B\x18C\x5\x18\r\x2\x18C\x18D"+
		"\x5\x128\x95\x2\x18D\x18F\x3\x2\x2\x2\x18E\x18B\x3\x2\x2\x2\x18F\x190"+
		"\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\r\x3\x2"+
		"\x2\x2\x192\x198\x5\x12\n\x2\x193\x194\x5\x128\x95\x2\x194\x195\x5\x12"+
		"\n\x2\x195\x197\x3\x2\x2\x2\x196\x193\x3\x2\x2\x2\x197\x19A\x3\x2\x2\x2"+
		"\x198\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x19B\x3\x2\x2\x2\x19A"+
		"\x198\x3\x2\x2\x2\x19B\x19C\x5\x128\x95\x2\x19C\xF\x3\x2\x2\x2\x19D\x19E"+
		"\a\xA0\x2\x2\x19E\x19F\x5\x138\x9D\x2\x19F\x1A0\x5\x11C\x8F\x2\x1A0\x1A8"+
		"\x3\x2\x2\x2\x1A1\x1A2\a\xA2\x2\x2\x1A2\x1A3\x5\x138\x9D\x2\x1A3\x1A4"+
		"\t\x2\x2\x2\x1A4\x1A8\x3\x2\x2\x2\x1A5\x1A8\a\xA1\x2\x2\x1A6\x1A8\a\xA3"+
		"\x2\x2\x1A7\x19D\x3\x2\x2\x2\x1A7\x1A1\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2"+
		"\x2\x1A7\x1A6\x3\x2\x2\x2\x1A8\x11\x3\x2\x2\x2\x1A9\x1B2\x5.\x18\x2\x1AA"+
		"\x1B2\x5\x38\x1D\x2\x1AB\x1B2\x5@!\x2\x1AC\x1B2\x5(\x15\x2\x1AD\x1B2\x5"+
		"l\x37\x2\x1AE\x1B2\x5\xD0i\x2\x1AF\x1B2\x5\x10\t\x2\x1B0\x1B2\x5\xC4\x63"+
		"\x2\x1B1\x1A9\x3\x2\x2\x2\x1B1\x1AA\x3\x2\x2\x2\x1B1\x1AB\x3\x2\x2\x2"+
		"\x1B1\x1AC\x3\x2\x2\x2\x1B1\x1AD\x3\x2\x2\x2\x1B1\x1AE\x3\x2\x2\x2\x1B1"+
		"\x1AF\x3\x2\x2\x2\x1B1\x1B0\x3\x2\x2\x2\x1B2\x13\x3\x2\x2\x2\x1B3\x1B9"+
		"\x5\x16\f\x2\x1B4\x1B5\x5\x128\x95\x2\x1B5\x1B6\x5\x16\f\x2\x1B6\x1B8"+
		"\x3\x2\x2\x2\x1B7\x1B4\x3\x2\x2\x2\x1B8\x1BB\x3\x2\x2\x2\x1B9\x1B7\x3"+
		"\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BC\x3\x2\x2\x2\x1BB\x1B9\x3\x2"+
		"\x2\x2\x1BC\x1BD\x5\x128\x95\x2\x1BD\x15\x3\x2\x2\x2\x1BE\x1C4\x5J&\x2"+
		"\x1BF\x1C4\x5\x90I\x2\x1C0\x1C4\x5\x92J\x2\x1C1\x1C4\x5\x94K\x2\x1C2\x1C4"+
		"\x5\xC0\x61\x2\x1C3\x1BE\x3\x2\x2\x2\x1C3\x1BF\x3\x2\x2\x2\x1C3\x1C0\x3"+
		"\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C3\x1C2\x3\x2\x2\x2\x1C4\x17\x3\x2\x2"+
		"\x2\x1C5\x1C6\a\x37\x2\x2\x1C6\x1C7\x5\x138\x9D\x2\x1C7\x1C9\x5\xEEx\x2"+
		"\x1C8\x1CA\x5\x138\x9D\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2"+
		"\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CD\a\xE2\x2\x2\x1CC\x1CE\x5\x138\x9D\x2"+
		"\x1CD\x1CC\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF"+
		"\x1DA\x5\x11A\x8E\x2\x1D0\x1D2\x5\x138\x9D\x2\x1D1\x1D0\x3\x2\x2\x2\x1D1"+
		"\x1D2\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D5\a)\x2\x2\x1D4\x1D6\x5"+
		"\x138\x9D\x2\x1D5\x1D4\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7\x3"+
		"\x2\x2\x2\x1D7\x1D9\x5\x11A\x8E\x2\x1D8\x1D1\x3\x2\x2\x2\x1D9\x1DC\x3"+
		"\x2\x2\x2\x1DA\x1D8\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x19\x3\x2\x2"+
		"\x2\x1DC\x1DA\x3\x2\x2\x2\x1DD\x1DE\x5\x1C\xF\x2\x1DE\x1DF\x5\x128\x95"+
		"\x2\x1DF\x1E1\x3\x2\x2\x2\x1E0\x1DD\x3\x2\x2\x2\x1E1\x1E4\x3\x2\x2\x2"+
		"\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1B\x3\x2\x2\x2\x1E4"+
		"\x1E2\x3\x2\x2\x2\x1E5\x229\x5\x118\x8D\x2\x1E6\x229\x5\x1E\x10\x2\x1E7"+
		"\x229\x5\x18\r\x2\x1E8\x229\x5 \x11\x2\x1E9\x229\x5\"\x12\x2\x1EA\x229"+
		"\x5$\x13\x2\x1EB\x229\x5&\x14\x2\x1EC\x229\x5(\x15\x2\x1ED\x229\x5,\x17"+
		"\x2\x1EE\x229\x5\x32\x1A\x2\x1EF\x229\x5\x30\x19\x2\x1F0\x229\x5\x34\x1B"+
		"\x2\x1F1\x229\x5\x36\x1C\x2\x1F2\x229\x5<\x1F\x2\x1F3\x229\x5> \x2\x1F4"+
		"\x229\x5\x42\"\x2\x1F5\x229\x5\xE2r\x2\x1F6\x229\x5\x44#\x2\x1F7\x229"+
		"\x5\x46$\x2\x1F8\x229\x5H%\x2\x1F9\x229\x5L\'\x2\x1FA\x229\x5N(\x2\x1FB"+
		"\x229\x5P)\x2\x1FC\x229\x5R*\x2\x1FD\x229\x5X-\x2\x1FE\x229\x5l\x37\x2"+
		"\x1FF\x229\x5n\x38\x2\x200\x229\x5p\x39\x2\x201\x229\x5r:\x2\x202\x229"+
		"\x5t;\x2\x203\x229\x5v<\x2\x204\x229\x5x=\x2\x205\x229\x5z>\x2\x206\x229"+
		"\x5|?\x2\x207\x229\x5~@\x2\x208\x229\x5\x80\x41\x2\x209\x229\x5\x82\x42"+
		"\x2\x20A\x229\x5\x84\x43\x2\x20B\x229\x5\x86\x44\x2\x20C\x229\x5\x88\x45"+
		"\x2\x20D\x229\x5\x8EH\x2\x20E\x229\x5\x96L\x2\x20F\x229\x5\x98M\x2\x210"+
		"\x229\x5\x9AN\x2\x211\x229\x5\x9CO\x2\x212\x229\x5\xA0Q\x2\x213\x229\x5"+
		"\xA2R\x2\x214\x229\x5\xA4S\x2\x215\x229\x5\xA6T\x2\x216\x229\x5\xA8U\x2"+
		"\x217\x229\x5\xAAV\x2\x218\x229\x5\xACW\x2\x219\x229\x5\xAEX\x2\x21A\x229"+
		"\x5\xB0Y\x2\x21B\x229\x5\xB8]\x2\x21C\x229\x5\xBA^\x2\x21D\x229\x5\xBC"+
		"_\x2\x21E\x229\x5\xBE`\x2\x21F\x229\x5\xC2\x62\x2\x220\x229\x5\xC8\x65"+
		"\x2\x221\x229\x5\xCA\x66\x2\x222\x229\x5\xD0i\x2\x223\x229\x5\xD6l\x2"+
		"\x224\x229\x5\xD8m\x2\x225\x229\x5\xDAn\x2\x226\x229\x5\xDEp\x2\x227\x229"+
		"\x5\xE8u\x2\x228\x1E5\x3\x2\x2\x2\x228\x1E6\x3\x2\x2\x2\x228\x1E7\x3\x2"+
		"\x2\x2\x228\x1E8\x3\x2\x2\x2\x228\x1E9\x3\x2\x2\x2\x228\x1EA\x3\x2\x2"+
		"\x2\x228\x1EB\x3\x2\x2\x2\x228\x1EC\x3\x2\x2\x2\x228\x1ED\x3\x2\x2\x2"+
		"\x228\x1EE\x3\x2\x2\x2\x228\x1EF\x3\x2\x2\x2\x228\x1F0\x3\x2\x2\x2\x228"+
		"\x1F1\x3\x2\x2\x2\x228\x1F2\x3\x2\x2\x2\x228\x1F3\x3\x2\x2\x2\x228\x1F4"+
		"\x3\x2\x2\x2\x228\x1F5\x3\x2\x2\x2\x228\x1F6\x3\x2\x2\x2\x228\x1F7\x3"+
		"\x2\x2\x2\x228\x1F8\x3\x2\x2\x2\x228\x1F9\x3\x2\x2\x2\x228\x1FA\x3\x2"+
		"\x2\x2\x228\x1FB\x3\x2\x2\x2\x228\x1FC\x3\x2\x2\x2\x228\x1FD\x3\x2\x2"+
		"\x2\x228\x1FE\x3\x2\x2\x2\x228\x1FF\x3\x2\x2\x2\x228\x200\x3\x2\x2\x2"+
		"\x228\x201\x3\x2\x2\x2\x228\x202\x3\x2\x2\x2\x228\x203\x3\x2\x2\x2\x228"+
		"\x204\x3\x2\x2\x2\x228\x205\x3\x2\x2\x2\x228\x206\x3\x2\x2\x2\x228\x207"+
		"\x3\x2\x2\x2\x228\x208\x3\x2\x2\x2\x228\x209\x3\x2\x2\x2\x228\x20A\x3"+
		"\x2\x2\x2\x228\x20B\x3\x2\x2\x2\x228\x20C\x3\x2\x2\x2\x228\x20D\x3\x2"+
		"\x2\x2\x228\x20E\x3\x2\x2\x2\x228\x20F\x3\x2\x2\x2\x228\x210\x3\x2\x2"+
		"\x2\x228\x211\x3\x2\x2\x2\x228\x212\x3\x2\x2\x2\x228\x213\x3\x2\x2\x2"+
		"\x228\x214\x3\x2\x2\x2\x228\x215\x3\x2\x2\x2\x228\x216\x3\x2\x2\x2\x228"+
		"\x217\x3\x2\x2\x2\x228\x218\x3\x2\x2\x2\x228\x219\x3\x2\x2\x2\x228\x21A"+
		"\x3\x2\x2\x2\x228\x21B\x3\x2\x2\x2\x228\x21C\x3\x2\x2\x2\x228\x21D\x3"+
		"\x2\x2\x2\x228\x21E\x3\x2\x2\x2\x228\x21F\x3\x2\x2\x2\x228\x220\x3\x2"+
		"\x2\x2\x228\x221\x3\x2\x2\x2\x228\x222\x3\x2\x2\x2\x228\x223\x3\x2\x2"+
		"\x2\x228\x224\x3\x2\x2\x2\x228\x225\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2"+
		"\x228\x227\x3\x2\x2\x2\x229\x1D\x3\x2\x2\x2\x22A\x22B\a\x38\x2\x2\x22B"+
		"\x22C\x5\x138\x9D\x2\x22C\x235\x5\xCCg\x2\x22D\x22F\x5\x138\x9D\x2\x22E"+
		"\x22D\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x232"+
		"\a)\x2\x2\x231\x233\x5\x138\x9D\x2\x232\x231\x3\x2\x2\x2\x232\x233\x3"+
		"\x2\x2\x2\x233\x234\x3\x2\x2\x2\x234\x236\x5\xCCg\x2\x235\x22E\x3\x2\x2"+
		"\x2\x235\x236\x3\x2\x2\x2\x236\x1F\x3\x2\x2\x2\x237\x238\a<\x2\x2\x238"+
		"!\x3\x2\x2\x2\x239\x23A\a\x44\x2\x2\x23A\x23B\x5\x138\x9D\x2\x23B\x23C"+
		"\x5\xCCg\x2\x23C#\x3\x2\x2\x2\x23D\x23E\a\x45\x2\x2\x23E\x23F\x5\x138"+
		"\x9D\x2\x23F\x240\x5\xCCg\x2\x240%\x3\x2\x2\x2\x241\x251\aG\x2\x2\x242"+
		"\x243\x5\x138\x9D\x2\x243\x24E\x5\xE0q\x2\x244\x246\x5\x138\x9D\x2\x245"+
		"\x244\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x249"+
		"\a)\x2\x2\x248\x24A\x5\x138\x9D\x2\x249\x248\x3\x2\x2\x2\x249\x24A\x3"+
		"\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24D\x5\xE0q\x2\x24C\x245\x3\x2\x2"+
		"\x2\x24D\x250\x3\x2\x2\x2\x24E\x24C\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2"+
		"\x24F\x252\x3\x2\x2\x2\x250\x24E\x3\x2\x2\x2\x251\x242\x3\x2\x2\x2\x251"+
		"\x252\x3\x2\x2\x2\x252\'\x3\x2\x2\x2\x253\x254\x5\x122\x92\x2\x254\x255"+
		"\x5\x138\x9D\x2\x255\x257\x3\x2\x2\x2\x256\x253\x3\x2\x2\x2\x256\x257"+
		"\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x259\aH\x2\x2\x259\x25A\x5\x138"+
		"\x9D\x2\x25A\x265\x5*\x16\x2\x25B\x25D\x5\x138\x9D\x2\x25C\x25B\x3\x2"+
		"\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x260\a)\x2\x2"+
		"\x25F\x261\x5\x138\x9D\x2\x260\x25F\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2"+
		"\x261\x262\x3\x2\x2\x2\x262\x264\x5*\x16\x2\x263\x25C\x3\x2\x2\x2\x264"+
		"\x267\x3\x2\x2\x2\x265\x263\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266)\x3"+
		"\x2\x2\x2\x267\x265\x3\x2\x2\x2\x268\x26A\x5\x10A\x86\x2\x269\x26B\x5"+
		"\x120\x91\x2\x26A\x269\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26F\x3"+
		"\x2\x2\x2\x26C\x26D\x5\x138\x9D\x2\x26D\x26E\x5\x10C\x87\x2\x26E\x270"+
		"\x3\x2\x2\x2\x26F\x26C\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x272\x3"+
		"\x2\x2\x2\x271\x273\x5\x138\x9D\x2\x272\x271\x3\x2\x2\x2\x272\x273\x3"+
		"\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274\x276\a\xE2\x2\x2\x275\x277\x5\x138"+
		"\x9D\x2\x276\x275\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277\x278\x3\x2\x2"+
		"\x2\x278\x279\x5\xCCg\x2\x279+\x3\x2\x2\x2\x27A\x27C\aJ\x2\x2\x27B\x27D"+
		"\x5\x138\x9D\x2\x27C\x27B\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27E"+
		"\x3\x2\x2\x2\x27E\x280\a\xE2\x2\x2\x27F\x281\x5\x138\x9D\x2\x280\x27F"+
		"\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x283\x5"+
		"\xCCg\x2\x283-\x3\x2\x2\x2\x284\x285\x5\x122\x92\x2\x285\x286\x5\x138"+
		"\x9D\x2\x286\x288\x3\x2\x2\x2\x287\x284\x3\x2\x2\x2\x287\x288\x3\x2\x2"+
		"\x2\x288\x289\x3\x2\x2\x2\x289\x28A\aK\x2\x2\x28A\x28D\x5\x138\x9D\x2"+
		"\x28B\x28C\a\xAD\x2\x2\x28C\x28E\x5\x138\x9D\x2\x28D\x28B\x3\x2\x2\x2"+
		"\x28D\x28E\x3\x2\x2\x2\x28E\x294\x3\x2\x2\x2\x28F\x291\ax\x2\x2\x290\x292"+
		"\x5\x120\x91\x2\x291\x290\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x295"+
		"\x3\x2\x2\x2\x293\x295\a\xCA\x2\x2\x294\x28F\x3\x2\x2\x2\x294\x293\x3"+
		"\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x297\x5\x138\x9D\x2\x297\x299\x5"+
		"\x10A\x86\x2\x298\x29A\x5\x120\x91\x2\x299\x298\x3\x2\x2\x2\x299\x29A"+
		"\x3\x2\x2\x2\x29A\x29B\x3\x2\x2\x2\x29B\x29C\x5\x138\x9D\x2\x29C\x29D"+
		"\a\x8A\x2\x2\x29D\x29E\x5\x138\x9D\x2\x29E\x2A4\a\xF5\x2\x2\x29F\x2A0"+
		"\x5\x138\x9D\x2\x2A0\x2A1\a\x35\x2\x2\x2A1\x2A2\x5\x138\x9D\x2\x2A2\x2A3"+
		"\a\xF5\x2\x2\x2A3\x2A5\x3\x2\x2\x2\x2A4\x29F\x3\x2\x2\x2\x2A4\x2A5\x3"+
		"\x2\x2\x2\x2A5\x2AA\x3\x2\x2\x2\x2A6\x2A8\x5\x138\x9D\x2\x2A7\x2A6\x3"+
		"\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AB\x5\x100"+
		"\x81\x2\x2AA\x2A7\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB\x2AF\x3\x2\x2"+
		"\x2\x2AC\x2AD\x5\x138\x9D\x2\x2AD\x2AE\x5\x10C\x87\x2\x2AE\x2B0\x3\x2"+
		"\x2\x2\x2AF\x2AC\x3\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0/\x3\x2\x2\x2\x2B1"+
		"\x2B2\t\x3\x2\x2\x2B2\x2B3\x5\x138\x9D\x2\x2B3\x2BE\x5\x116\x8C\x2\x2B4"+
		"\x2B6\x5\x138\x9D\x2\x2B5\x2B4\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6"+
		"\x2B7\x3\x2\x2\x2\x2B7\x2B9\a)\x2\x2\x2B8\x2BA\x5\x138\x9D\x2\x2B9\x2B8"+
		"\x3\x2\x2\x2\x2B9\x2BA\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BD\x5"+
		"\x116\x8C\x2\x2BC\x2B5\x3\x2\x2\x2\x2BD\x2C0\x3\x2\x2\x2\x2BE\x2BC\x3"+
		"\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x31\x3\x2\x2\x2\x2C0\x2BE\x3\x2\x2"+
		"\x2\x2C1\x2C2\aY\x2\x2\x2C2\x2C3\x5\x138\x9D\x2\x2C3\x2C5\x5\xCCg\x2\x2C4"+
		"\x2C6\x5\x138\x9D\x2\x2C5\x2C4\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6"+
		"\x2E8\x3\x2\x2\x2\x2C7\x2C8\aY\x2\x2\x2C8\x2C9\x5\x138\x9D\x2\x2C9\x2CB"+
		"\x5\xCCg\x2\x2CA\x2CC\x5\x138\x9D\x2\x2CB\x2CA\x3\x2\x2\x2\x2CB\x2CC\x3"+
		"\x2\x2\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2CF\a)\x2\x2\x2CE\x2D0\x5\x138\x9D"+
		"\x2\x2CF\x2CE\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2"+
		"\x2D1\x2D2\x5\xCCg\x2\x2D2\x2E8\x3\x2\x2\x2\x2D3\x2D4\aY\x2\x2\x2D4\x2D5"+
		"\x5\x138\x9D\x2\x2D5\x2D7\x5\xCCg\x2\x2D6\x2D8\x5\x138\x9D\x2\x2D7\x2D6"+
		"\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DB\a)"+
		"\x2\x2\x2DA\x2DC\x5\x138\x9D\x2\x2DB\x2DA\x3\x2\x2\x2\x2DB\x2DC\x3\x2"+
		"\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DF\x5\xCCg\x2\x2DE\x2E0\x5\x138\x9D"+
		"\x2\x2DF\x2DE\x3\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2"+
		"\x2E1\x2E3\a)\x2\x2\x2E2\x2E4\x5\x138\x9D\x2\x2E3\x2E2\x3\x2\x2\x2\x2E3"+
		"\x2E4\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5\x2E6\x5\xCCg\x2\x2E6\x2E8"+
		"\x3\x2\x2\x2\x2E7\x2C1\x3\x2\x2\x2\x2E7\x2C7\x3\x2\x2\x2\x2E7\x2D3\x3"+
		"\x2\x2\x2\x2E8\x33\x3\x2\x2\x2\x2E9\x2EA\a[\x2\x2\x2EA\x2EB\x5\x128\x95"+
		"\x2\x2EB\x2EC\x5\x1A\xE\x2\x2EC\x2ED\a\x88\x2\x2\x2ED\x301\x3\x2\x2\x2"+
		"\x2EE\x2EF\a[\x2\x2\x2EF\x2F0\x5\x138\x9D\x2\x2F0\x2F1\t\x4\x2\x2\x2F1"+
		"\x2F2\x5\x138\x9D\x2\x2F2\x2F3\x5\xCCg\x2\x2F3\x2F4\x5\x128\x95\x2\x2F4"+
		"\x2F5\x5\x1A\xE\x2\x2F5\x2F6\a\x88\x2\x2\x2F6\x301\x3\x2\x2\x2\x2F7\x2F8"+
		"\a[\x2\x2\x2F8\x2F9\x5\x128\x95\x2\x2F9\x2FA\x5\x1A\xE\x2\x2FA\x2FB\a"+
		"\x88\x2\x2\x2FB\x2FC\x5\x138\x9D\x2\x2FC\x2FD\t\x4\x2\x2\x2FD\x2FE\x5"+
		"\x138\x9D\x2\x2FE\x2FF\x5\xCCg\x2\x2FF\x301\x3\x2\x2\x2\x300\x2E9\x3\x2"+
		"\x2\x2\x300\x2EE\x3\x2\x2\x2\x300\x2F7\x3\x2\x2\x2\x301\x35\x3\x2\x2\x2"+
		"\x302\x303\ai\x2\x2\x303\x37\x3\x2\x2\x2\x304\x305\x5\x122\x92\x2\x305"+
		"\x306\x5\x138\x9D\x2\x306\x308\x3\x2\x2\x2\x307\x304\x3\x2\x2\x2\x307"+
		"\x308\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30A\aj\x2\x2\x30A\x30B\x5"+
		"\x138\x9D\x2\x30B\x30C\x5\x10A\x86\x2\x30C\x310\x5\x128\x95\x2\x30D\x30F"+
		"\x5:\x1E\x2\x30E\x30D\x3\x2\x2\x2\x30F\x312\x3\x2\x2\x2\x310\x30E\x3\x2"+
		"\x2\x2\x310\x311\x3\x2\x2\x2\x311\x313\x3\x2\x2\x2\x312\x310\x3\x2\x2"+
		"\x2\x313\x314\a\x61\x2\x2\x314\x39\x3\x2\x2\x2\x315\x31E\x5\x10A\x86\x2"+
		"\x316\x318\x5\x138\x9D\x2\x317\x316\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2"+
		"\x318\x319\x3\x2\x2\x2\x319\x31B\a\xE2\x2\x2\x31A\x31C\x5\x138\x9D\x2"+
		"\x31B\x31A\x3\x2\x2\x2\x31B\x31C\x3\x2\x2\x2\x31C\x31D\x3\x2\x2\x2\x31D"+
		"\x31F\x5\xCCg\x2\x31E\x317\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x320"+
		"\x3\x2\x2\x2\x320\x321\x5\x128\x95\x2\x321;\x3\x2\x2\x2\x322\x323\al\x2"+
		"\x2\x323\x324\x5\x138\x9D\x2\x324\x32F\x5\xCCg\x2\x325\x327\x5\x138\x9D"+
		"\x2\x326\x325\x3\x2\x2\x2\x326\x327\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2"+
		"\x328\x32A\a)\x2\x2\x329\x32B\x5\x138\x9D\x2\x32A\x329\x3\x2\x2\x2\x32A"+
		"\x32B\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32E\x5\xCCg\x2\x32D\x326"+
		"\x3\x2\x2\x2\x32E\x331\x3\x2\x2\x2\x32F\x32D\x3\x2\x2\x2\x32F\x330\x3"+
		"\x2\x2\x2\x330=\x3\x2\x2\x2\x331\x32F\x3\x2\x2\x2\x332\x333\am\x2\x2\x333"+
		"\x334\x5\x138\x9D\x2\x334\x335\x5\xCCg\x2\x335?\x3\x2\x2\x2\x336\x337"+
		"\x5\x122\x92\x2\x337\x338\x5\x138\x9D\x2\x338\x33A\x3\x2\x2\x2\x339\x336"+
		"\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B\x33C\an"+
		"\x2\x2\x33C\x33D\x5\x138\x9D\x2\x33D\x33F\x5\x10A\x86\x2\x33E\x340\x5"+
		"\x138\x9D\x2\x33F\x33E\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x341\x3"+
		"\x2\x2\x2\x341\x342\x5\x100\x81\x2\x342\x41\x3\x2\x2\x2\x343\x344\t\x5"+
		"\x2\x2\x344\x43\x3\x2\x2\x2\x345\x346\au\x2\x2\x346\x347\x5\x138\x9D\x2"+
		"\x347\x349\x5\xCCg\x2\x348\x34A\x5\x138\x9D\x2\x349\x348\x3\x2\x2\x2\x349"+
		"\x34A\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34D\a)\x2\x2\x34C\x34E\x5"+
		"\x138\x9D\x2\x34D\x34C\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x34F\x3"+
		"\x2\x2\x2\x34F\x350\x5\xCCg\x2\x350\x45\x3\x2\x2\x2\x351\x352\aw\x2\x2"+
		"\x352\x353\x5\x138\x9D\x2\x353\x354\a]\x2\x2\x354\x355\x5\x138\x9D\x2"+
		"\x355\x357\x5\x10A\x86\x2\x356\x358\x5\x120\x91\x2\x357\x356\x3\x2\x2"+
		"\x2\x357\x358\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x35A\x5\x138\x9D"+
		"\x2\x35A\x35B\a\x80\x2\x2\x35B\x35C\x5\x138\x9D\x2\x35C\x35D\x5\xCCg\x2"+
		"\x35D\x35E\x5\x128\x95\x2\x35E\x35F\x5\x1A\xE\x2\x35F\x363\a\x96\x2\x2"+
		"\x360\x361\x5\x138\x9D\x2\x361\x362\x5\x10A\x86\x2\x362\x364\x3\x2\x2"+
		"\x2\x363\x360\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364G\x3\x2\x2\x2\x365"+
		"\x366\aw\x2\x2\x366\x367\x5\x138\x9D\x2\x367\x369\x5\x10A\x86\x2\x368"+
		"\x36A\x5\x120\x91\x2\x369\x368\x3\x2\x2\x2\x369\x36A\x3\x2\x2\x2\x36A"+
		"\x36E\x3\x2\x2\x2\x36B\x36C\x5\x138\x9D\x2\x36C\x36D\x5\x10C\x87\x2\x36D"+
		"\x36F\x3\x2\x2\x2\x36E\x36B\x3\x2\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x371"+
		"\x3\x2\x2\x2\x370\x372\x5\x138\x9D\x2\x371\x370\x3\x2\x2\x2\x371\x372"+
		"\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x375\a\xE2\x2\x2\x374\x376\x5"+
		"\x138\x9D\x2\x375\x374\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2\x376\x377\x3"+
		"\x2\x2\x2\x377\x378\x5\xCCg\x2\x378\x379\x5\x138\x9D\x2\x379\x37A\a\xCF"+
		"\x2\x2\x37A\x37B\x5\x138\x9D\x2\x37B\x381\x5\xCCg\x2\x37C\x37D\x5\x138"+
		"\x9D\x2\x37D\x37E\a\xC7\x2\x2\x37E\x37F\x5\x138\x9D\x2\x37F\x380\x5\xCC"+
		"g\x2\x380\x382\x3\x2\x2\x2\x381\x37C\x3\x2\x2\x2\x381\x382\x3\x2\x2\x2"+
		"\x382\x383\x3\x2\x2\x2\x383\x384\x5\x128\x95\x2\x384\x385\x5\x1A\xE\x2"+
		"\x385\x38B\a\x96\x2\x2\x386\x387\x5\x138\x9D\x2\x387\x389\x5\x10A\x86"+
		"\x2\x388\x38A\x5\x120\x91\x2\x389\x388\x3\x2\x2\x2\x389\x38A\x3\x2\x2"+
		"\x2\x38A\x38C\x3\x2\x2\x2\x38B\x386\x3\x2\x2\x2\x38B\x38C\x3\x2\x2\x2"+
		"\x38CI\x3\x2\x2\x2\x38D\x38E\x5\x122\x92\x2\x38E\x38F\x5\x138\x9D\x2\x38F"+
		"\x391\x3\x2\x2\x2\x390\x38D\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x394"+
		"\x3\x2\x2\x2\x392\x393\a\xC6\x2\x2\x393\x395\x5\x138\x9D\x2\x394\x392"+
		"\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x398\ax"+
		"\x2\x2\x397\x399\x5\x138\x9D\x2\x398\x397\x3\x2\x2\x2\x398\x399\x3\x2"+
		"\x2\x2\x399\x39A\x3\x2\x2\x2\x39A\x39C\x5\x10A\x86\x2\x39B\x39D\x5\x120"+
		"\x91\x2\x39C\x39B\x3\x2\x2\x2\x39C\x39D\x3\x2\x2\x2\x39D\x3A2\x3\x2\x2"+
		"\x2\x39E\x3A0\x5\x138\x9D\x2\x39F\x39E\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2"+
		"\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A3\x5\x100\x81\x2\x3A2\x39F\x3\x2\x2"+
		"\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A8\x3\x2\x2\x2\x3A4\x3A6\x5\x138\x9D"+
		"\x2\x3A5\x3A4\x3\x2\x2\x2\x3A5\x3A6\x3\x2\x2\x2\x3A6\x3A7\x3\x2\x2\x2"+
		"\x3A7\x3A9\x5\x10C\x87\x2\x3A8\x3A5\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2"+
		"\x3A9\x3AA\x3\x2\x2\x2\x3AA\x3AB\x5\x128\x95\x2\x3AB\x3AC\x5\x1A\xE\x2"+
		"\x3AC\x3AD\a\x62\x2\x2\x3ADK\x3\x2\x2\x2\x3AE\x3AF\ay\x2\x2\x3AF\x3B0"+
		"\x5\x138\x9D\x2\x3B0\x3B2\x5\xE0q\x2\x3B1\x3B3\x5\x138\x9D\x2\x3B2\x3B1"+
		"\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4\x3B6\a)"+
		"\x2\x2\x3B5\x3B7\x5\x138\x9D\x2\x3B6\x3B5\x3\x2\x2\x2\x3B6\x3B7\x3\x2"+
		"\x2\x2\x3B7\x3B9\x3\x2\x2\x2\x3B8\x3BA\x5\xCCg\x2\x3B9\x3B8\x3\x2\x2\x2"+
		"\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BC\x3\x2\x2\x2\x3BB\x3BD\x5\x138\x9D\x2"+
		"\x3BC\x3BB\x3\x2\x2\x2\x3BC\x3BD\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2\x3BE"+
		"\x3C0\a)\x2\x2\x3BF\x3C1\x5\x138\x9D\x2\x3C0\x3BF\x3\x2\x2\x2\x3C0\x3C1"+
		"\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2\x3C2\x3C3\x5\xCCg\x2\x3C3M\x3\x2\x2"+
		"\x2\x3C4\x3C5\a{\x2\x2\x3C5\x3C6\x5\x138\x9D\x2\x3C6\x3C7\x5\xCCg\x2\x3C7"+
		"O\x3\x2\x2\x2\x3C8\x3C9\a|\x2\x2\x3C9\x3CA\x5\x138\x9D\x2\x3CA\x3CB\x5"+
		"\xCCg\x2\x3CBQ\x3\x2\x2\x2\x3CC\x3CD\a}\x2\x2\x3CD\x3CE\x5\x138\x9D\x2"+
		"\x3CE\x3CF\x5\x64\x33\x2\x3CF\x3D0\x5\x138\x9D\x2\x3D0\x3D2\a\xCD\x2\x2"+
		"\x3D1\x3D3\x5\x126\x94\x2\x3D2\x3D1\x3\x2\x2\x2\x3D3\x3D4\x3\x2\x2\x2"+
		"\x3D4\x3D2\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6"+
		"\x3DA\x5\x1A\xE\x2\x3D7\x3D9\x5T+\x2\x3D8\x3D7\x3\x2\x2\x2\x3D9\x3DC\x3"+
		"\x2\x2\x2\x3DA\x3D8\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DE\x3\x2"+
		"\x2\x2\x3DC\x3DA\x3\x2\x2\x2\x3DD\x3DF\x5V,\x2\x3DE\x3DD\x3\x2\x2\x2\x3DE"+
		"\x3DF\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E1\a\x63\x2\x2\x3E1S\x3"+
		"\x2\x2\x2\x3E2\x3E3\a_\x2\x2\x3E3\x3E4\x5\x138\x9D\x2\x3E4\x3E5\x5\x64"+
		"\x33\x2\x3E5\x3E6\x5\x138\x9D\x2\x3E6\x3E8\a\xCD\x2\x2\x3E7\x3E9\x5\x126"+
		"\x94\x2\x3E8\x3E7\x3\x2\x2\x2\x3E9\x3EA\x3\x2\x2\x2\x3EA\x3E8\x3\x2\x2"+
		"\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC\x3ED\x5\x1A\xE\x2"+
		"\x3ED\x3F9\x3\x2\x2\x2\x3EE\x3EF\a_\x2\x2\x3EF\x3F0\x5\x138\x9D\x2\x3F0"+
		"\x3F1\x5\x64\x33\x2\x3F1\x3F2\x5\x138\x9D\x2\x3F2\x3F4\a\xCD\x2\x2\x3F3"+
		"\x3F5\x5\x138\x9D\x2\x3F4\x3F3\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2\x3F5"+
		"\x3F6\x3\x2\x2\x2\x3F6\x3F7\x5\x1A\xE\x2\x3F7\x3F9\x3\x2\x2\x2\x3F8\x3E2"+
		"\x3\x2\x2\x2\x3F8\x3EE\x3\x2\x2\x2\x3F9U\x3\x2\x2\x2\x3FA\x3FC\a^\x2\x2"+
		"\x3FB\x3FD\x5\x126\x94\x2\x3FC\x3FB\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2"+
		"\x3FE\x3FC\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400"+
		"\x401\x5\x1A\xE\x2\x401W\x3\x2\x2\x2\x402\x405\x5Z.\x2\x403\x405\x5\\"+
		"/\x2\x404\x402\x3\x2\x2\x2\x404\x403\x3\x2\x2\x2\x405Y\x3\x2\x2\x2\x406"+
		"\x407\a}\x2\x2\x407\x408\x5\x138\x9D\x2\x408\x409\x5\x64\x33\x2\x409\x40A"+
		"\x5\x138\x9D\x2\x40A\x40C\a\xCD\x2\x2\x40B\x40D\x5\x138\x9D\x2\x40C\x40B"+
		"\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40E\x3\x2\x2\x2\x40E\x410\x5"+
		"`\x31\x2\x40F\x411\x5^\x30\x2\x410\x40F\x3\x2\x2\x2\x410\x411\x3\x2\x2"+
		"\x2\x411[\x3\x2\x2\x2\x412\x413\a}\x2\x2\x413\x414\x5\x138\x9D\x2\x414"+
		"\x415\x5\x64\x33\x2\x415\x416\x5\x138\x9D\x2\x416\x418\a\xCD\x2\x2\x417"+
		"\x419\x5\x138\x9D\x2\x418\x417\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419"+
		"\x41A\x3\x2\x2\x2\x41A\x41B\x5^\x30\x2\x41B]\x3\x2\x2\x2\x41C\x41E\a^"+
		"\x2\x2\x41D\x41F\x5\x138\x9D\x2\x41E\x41D\x3\x2\x2\x2\x41E\x41F\x3\x2"+
		"\x2\x2\x41F\x421\x3\x2\x2\x2\x420\x422\x5`\x31\x2\x421\x420\x3\x2\x2\x2"+
		"\x421\x422\x3\x2\x2\x2\x422_\x3\x2\x2\x2\x423\x430\x5\x66\x34\x2\x424"+
		"\x426\x5\x138\x9D\x2\x425\x424\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2\x426"+
		"\x427\x3\x2\x2\x2\x427\x429\a*\x2\x2\x428\x42A\x5\x138\x9D\x2\x429\x428"+
		"\x3\x2\x2\x2\x429\x42A\x3\x2\x2\x2\x42A\x42C\x3\x2\x2\x2\x42B\x42D\x5"+
		"\x62\x32\x2\x42C\x42B\x3\x2\x2\x2\x42C\x42D\x3\x2\x2\x2\x42D\x42F\x3\x2"+
		"\x2\x2\x42E\x425\x3\x2\x2\x2\x42F\x432\x3\x2\x2\x2\x430\x42E\x3\x2\x2"+
		"\x2\x430\x431\x3\x2\x2\x2\x431\x44A\x3\x2\x2\x2\x432\x430\x3\x2\x2\x2"+
		"\x433\x435\a*\x2\x2\x434\x436\x5\x138\x9D\x2\x435\x434\x3\x2\x2\x2\x435"+
		"\x436\x3\x2\x2\x2\x436\x438\x3\x2\x2\x2\x437\x433\x3\x2\x2\x2\x437\x438"+
		"\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439\x446\x5\x62\x32\x2\x43A\x43C\x5"+
		"\x138\x9D\x2\x43B\x43A\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C\x43D\x3"+
		"\x2\x2\x2\x43D\x43F\a*\x2\x2\x43E\x440\x5\x138\x9D\x2\x43F\x43E\x3\x2"+
		"\x2\x2\x43F\x440\x3\x2\x2\x2\x440\x442\x3\x2\x2\x2\x441\x443\x5\x62\x32"+
		"\x2\x442\x441\x3\x2\x2\x2\x442\x443\x3\x2\x2\x2\x443\x445\x3\x2\x2\x2"+
		"\x444\x43B\x3\x2\x2\x2\x445\x448\x3\x2\x2\x2\x446\x444\x3\x2\x2\x2\x446"+
		"\x447\x3\x2\x2\x2\x447\x44A\x3\x2\x2\x2\x448\x446\x3\x2\x2\x2\x449\x423"+
		"\x3\x2\x2\x2\x449\x437\x3\x2\x2\x2\x44A\x61\x3\x2\x2\x2\x44B\x44C\x5\x1C"+
		"\xF\x2\x44C\x63\x3\x2\x2\x2\x44D\x44E\x5\xCCg\x2\x44E\x65\x3\x2\x2\x2"+
		"\x44F\x452\x5h\x35\x2\x450\x452\x5j\x36\x2\x451\x44F\x3\x2\x2\x2\x451"+
		"\x450\x3\x2\x2\x2\x452g\x3\x2\x2\x2\x453\x454\x5\x10A\x86\x2\x454i\x3"+
		"\x2\x2\x2\x455\x456\x5\x11C\x8F\x2\x456k\x3\x2\x2\x2\x457\x458\a\x7F\x2"+
		"\x2\x458\x459\x5\x138\x9D\x2\x459\x45A\x5\xCCg\x2\x45Am\x3\x2\x2\x2\x45B"+
		"\x45C\a\x81\x2\x2\x45C\x45D\x5\x138\x9D\x2\x45D\x466\x5\xE0q\x2\x45E\x460"+
		"\x5\x138\x9D\x2\x45F\x45E\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x461"+
		"\x3\x2\x2\x2\x461\x463\a)\x2\x2\x462\x464\x5\x138\x9D\x2\x463\x462\x3"+
		"\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2\x465\x467\x5\xCC"+
		"g\x2\x466\x45F\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468\x466\x3\x2\x2\x2"+
		"\x468\x469\x3\x2\x2\x2\x469o\x3\x2\x2\x2\x46A\x46B\a\x84\x2\x2\x46B\x46C"+
		"\x5\x138\x9D\x2\x46C\x46D\x5\xCCg\x2\x46Dq\x3\x2\x2\x2\x46E\x46F\a\x89"+
		"\x2\x2\x46F\x471\x5\x138\x9D\x2\x470\x46E\x3\x2\x2\x2\x470\x471\x3\x2"+
		"\x2\x2\x471\x472\x3\x2\x2\x2\x472\x474\x5\xEEx\x2\x473\x475\x5\x138\x9D"+
		"\x2\x474\x473\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2"+
		"\x476\x478\a\xE2\x2\x2\x477\x479\x5\x138\x9D\x2\x478\x477\x3\x2\x2\x2"+
		"\x478\x479\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47B\x5\xCCg\x2\x47B"+
		"s\x3\x2\x2\x2\x47C\x47D\a\x8C\x2\x2\x47D\x47E\x5\x138\x9D\x2\x47E\x480"+
		"\x5\xE0q\x2\x47F\x481\x5\x138\x9D\x2\x480\x47F\x3\x2\x2\x2\x480\x481\x3"+
		"\x2\x2\x2\x481\x482\x3\x2\x2\x2\x482\x484\a)\x2\x2\x483\x485\x5\x138\x9D"+
		"\x2\x484\x483\x3\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2"+
		"\x486\x487\x5\xCCg\x2\x487u\x3\x2\x2\x2\x488\x489\a\x85\x2\x2\x489\x48A"+
		"\x5\x138\x9D\x2\x48A\x48B\x5\xCCg\x2\x48Bw\x3\x2\x2\x2\x48C\x48D\a\x86"+
		"\x2\x2\x48D\x48E\x5\x138\x9D\x2\x48E\x49E\x5\xCCg\x2\x48F\x491\x5\x138"+
		"\x9D\x2\x490\x48F\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2\x491\x492\x3\x2\x2"+
		"\x2\x492\x494\a)\x2\x2\x493\x495\x5\x138\x9D\x2\x494\x493\x3\x2\x2\x2"+
		"\x494\x495\x3\x2\x2\x2\x495\x496\x3\x2\x2\x2\x496\x49C\x5\xCCg\x2\x497"+
		"\x498\x5\x138\x9D\x2\x498\x499\a\xCF\x2\x2\x499\x49A\x5\x138\x9D\x2\x49A"+
		"\x49B\x5\xCCg\x2\x49B\x49D\x3\x2\x2\x2\x49C\x497\x3\x2\x2\x2\x49C\x49D"+
		"\x3\x2\x2\x2\x49D\x49F\x3\x2\x2\x2\x49E\x490\x3\x2\x2\x2\x49E\x49F\x3"+
		"\x2\x2\x2\x49Fy\x3\x2\x2\x2\x4A0\x4A1\a\x90\x2\x2\x4A1\x4A2\x5\x138\x9D"+
		"\x2\x4A2\x4A4\x5\xEEx\x2\x4A3\x4A5\x5\x138\x9D\x2\x4A4\x4A3\x3\x2\x2\x2"+
		"\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A8\a\xE2\x2\x2\x4A7"+
		"\x4A9\x5\x138\x9D\x2\x4A8\x4A7\x3\x2\x2\x2\x4A8\x4A9\x3\x2\x2\x2\x4A9"+
		"\x4AA\x3\x2\x2\x2\x4AA\x4AB\x5\xCCg\x2\x4AB{\x3\x2\x2\x2\x4AC\x4AE\a\x92"+
		"\x2\x2\x4AD\x4AF\x5\x138\x9D\x2\x4AE\x4AD\x3\x2\x2\x2\x4AE\x4AF\x3\x2"+
		"\x2\x2\x4AF\x4B0\x3\x2\x2\x2\x4B0\x4B2\a\xE6\x2\x2\x4B1\x4B3\x5\x138\x9D"+
		"\x2\x4B2\x4B1\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2\x4B3\x4B4\x3\x2\x2\x2"+
		"\x4B4\x4B6\x5\xFA~\x2\x4B5\x4B7\x5\x138\x9D\x2\x4B6\x4B5\x3\x2\x2\x2\x4B6"+
		"\x4B7\x3\x2\x2\x2\x4B7\x4B8\x3\x2\x2\x2\x4B8\x4B9\a\xED\x2\x2\x4B9}\x3"+
		"\x2\x2\x2\x4BA\x4BB\a\x93\x2\x2\x4BB\x4BC\x5\x138\x9D\x2\x4BC\x4BD\x5"+
		"\xCCg\x2\x4BD\x7F\x3\x2\x2\x2\x4BE\x4BF\a\x95\x2\x2\x4BF\x4C0\x5\x138"+
		"\x9D\x2\x4C0\x4C1\x5\xCCg\x2\x4C1\x4C2\x5\x138\x9D\x2\x4C2\x4C3\a:\x2"+
		"\x2\x4C3\x4C4\x5\x138\x9D\x2\x4C4\x4C5\x5\xCCg\x2\x4C5\x81\x3\x2\x2\x2"+
		"\x4C6\x4C7\t\x6\x2\x2\x4C7\x4D0\x5\x138\x9D\x2\x4C8\x4C9\a|\x2\x2\x4C9"+
		"\x4CA\x5\x138\x9D\x2\x4CA\x4CB\x5\xCCg\x2\x4CB\x4D1\x3\x2\x2\x2\x4CC\x4CD"+
		"\a\xB8\x2\x2\x4CD\x4CE\x5\x138\x9D\x2\x4CE\x4CF\a\x96\x2\x2\x4CF\x4D1"+
		"\x3\x2\x2\x2\x4D0\x4C8\x3\x2\x2\x2\x4D0\x4CC\x3\x2\x2\x2\x4D1\x83\x3\x2"+
		"\x2\x2\x4D2\x4D3\a\x9B\x2\x2\x4D3\x4D4\x5\x138\x9D\x2\x4D4\x4D5\x5\xCC"+
		"g\x2\x4D5\x4D6\x5\x138\x9D\x2\x4D6\x4D7\a|\x2\x2\x4D7\x4D8\x5\x138\x9D"+
		"\x2\x4D8\x4E3\x5\xCCg\x2\x4D9\x4DB\x5\x138\x9D\x2\x4DA\x4D9\x3\x2\x2\x2"+
		"\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2\x4DC\x4DE\a)\x2\x2\x4DD\x4DF"+
		"\x5\x138\x9D\x2\x4DE\x4DD\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E0"+
		"\x3\x2\x2\x2\x4E0\x4E2\x5\xCCg\x2\x4E1\x4DA\x3\x2\x2\x2\x4E2\x4E5\x3\x2"+
		"\x2\x2\x4E3\x4E1\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x85\x3\x2\x2\x2"+
		"\x4E5\x4E3\x3\x2\x2\x2\x4E6\x4E7\a\x9B\x2\x2\x4E7\x4E8\x5\x138\x9D\x2"+
		"\x4E8\x4E9\x5\xCCg\x2\x4E9\x4EA\x5\x138\x9D\x2\x4EA\x4EB\a{\x2\x2\x4EB"+
		"\x4EC\x5\x138\x9D\x2\x4EC\x4F7\x5\xCCg\x2\x4ED\x4EF\x5\x138\x9D\x2\x4EE"+
		"\x4ED\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x4F2"+
		"\a)\x2\x2\x4F1\x4F3\x5\x138\x9D\x2\x4F2\x4F1\x3\x2\x2\x2\x4F2\x4F3\x3"+
		"\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4\x4F6\x5\xCCg\x2\x4F5\x4EE\x3\x2\x2"+
		"\x2\x4F6\x4F9\x3\x2\x2\x2\x4F7\x4F5\x3\x2\x2\x2\x4F7\x4F8\x3\x2\x2\x2"+
		"\x4F8\x87\x3\x2\x2\x2\x4F9\x4F7\x3\x2\x2\x2\x4FA\x4FB\a\x9E\x2\x2\x4FB"+
		"\x4FC\x5\x138\x9D\x2\x4FC\x4FD\x5\xCCg\x2\x4FD\x4FE\x5\x138\x9D\x2\x4FE"+
		"\x4FF\aw\x2\x2\x4FF\x500\x5\x138\x9D\x2\x500\x506\t\a\x2\x2\x501\x502"+
		"\x5\x138\x9D\x2\x502\x503\a\x33\x2\x2\x503\x504\x5\x138\x9D\x2\x504\x505"+
		"\t\b\x2\x2\x505\x507\x3\x2\x2\x2\x506\x501\x3\x2\x2\x2\x506\x507\x3\x2"+
		"\x2\x2\x507\x50B\x3\x2\x2\x2\x508\x509\x5\x138\x9D\x2\x509\x50A\t\t\x2"+
		"\x2\x50A\x50C\x3\x2\x2\x2\x50B\x508\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2"+
		"\x50C\x50D\x3\x2\x2\x2\x50D\x50E\x5\x138\x9D\x2\x50E\x50F\a:\x2\x2\x50F"+
		"\x510\x5\x138\x9D\x2\x510\x51C\x5\xE0q\x2\x511\x512\x5\x138\x9D\x2\x512"+
		"\x514\a\x1D\x2\x2\x513\x515\x5\x138\x9D\x2\x514\x513\x3\x2\x2\x2\x514"+
		"\x515\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x518\a\xE2\x2\x2\x517\x519"+
		"\x5\x138\x9D\x2\x518\x517\x3\x2\x2\x2\x518\x519\x3\x2\x2\x2\x519\x51A"+
		"\x3\x2\x2\x2\x51A\x51B\x5\xCCg\x2\x51B\x51D\x3\x2\x2\x2\x51C\x511\x3\x2"+
		"\x2\x2\x51C\x51D\x3\x2\x2\x2\x51D\x89\x3\x2\x2\x2\x51E\x52B\x5\x8CG\x2"+
		"\x51F\x521\x5\x138\x9D\x2\x520\x51F\x3\x2\x2\x2\x520\x521\x3\x2\x2\x2"+
		"\x521\x522\x3\x2\x2\x2\x522\x524\t\n\x2\x2\x523\x525\x5\x138\x9D\x2\x524"+
		"\x523\x3\x2\x2\x2\x524\x525\x3\x2\x2\x2\x525\x527\x3\x2\x2\x2\x526\x528"+
		"\x5\x8CG\x2\x527\x526\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x52A\x3\x2"+
		"\x2\x2\x529\x520\x3\x2\x2\x2\x52A\x52D\x3\x2\x2\x2\x52B\x529\x3\x2\x2"+
		"\x2\x52B\x52C\x3\x2\x2\x2\x52C\x540\x3\x2\x2\x2\x52D\x52B\x3\x2\x2\x2"+
		"\x52E\x530\x5\x8CG\x2\x52F\x52E\x3\x2\x2\x2\x52F\x530\x3\x2\x2\x2\x530"+
		"\x53B\x3\x2\x2\x2\x531\x533\x5\x138\x9D\x2\x532\x531\x3\x2\x2\x2\x532"+
		"\x533\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2\x534\x536\t\n\x2\x2\x535\x537"+
		"\x5\x138\x9D\x2\x536\x535\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x539"+
		"\x3\x2\x2\x2\x538\x53A\x5\x8CG\x2\x539\x538\x3\x2\x2\x2\x539\x53A\x3\x2"+
		"\x2\x2\x53A\x53C\x3\x2\x2\x2\x53B\x532\x3\x2\x2\x2\x53C\x53D\x3\x2\x2"+
		"\x2\x53D\x53B\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\x540\x3\x2\x2\x2"+
		"\x53F\x51E\x3\x2\x2\x2\x53F\x52F\x3\x2\x2\x2\x540\x8B\x3\x2\x2\x2\x541"+
		"\x553\x5\xCCg\x2\x542\x550\t\v\x2\x2\x543\x545\x5\x138\x9D\x2\x544\x543"+
		"\x3\x2\x2\x2\x544\x545\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x548\a\xE6"+
		"\x2\x2\x547\x549\x5\x138\x9D\x2\x548\x547\x3\x2\x2\x2\x548\x549\x3\x2"+
		"\x2\x2\x549\x54A\x3\x2\x2\x2\x54A\x54C\x5\xFA~\x2\x54B\x54D\x5\x138\x9D"+
		"\x2\x54C\x54B\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2"+
		"\x54E\x54F\a\xED\x2\x2\x54F\x551\x3\x2\x2\x2\x550\x544\x3\x2\x2\x2\x550"+
		"\x551\x3\x2\x2\x2\x551\x553\x3\x2\x2\x2\x552\x541\x3\x2\x2\x2\x552\x542"+
		"\x3\x2\x2\x2\x553\x8D\x3\x2\x2\x2\x554\x555\a\xA8\x2\x2\x555\x556\x5\x138"+
		"\x9D\x2\x556\x558\x5\xE0q\x2\x557\x559\x5\x138\x9D\x2\x558\x557\x3\x2"+
		"\x2\x2\x558\x559\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x55F\a)\x2\x2"+
		"\x55B\x55D\x5\x138\x9D\x2\x55C\x55B\x3\x2\x2\x2\x55C\x55D\x3\x2\x2\x2"+
		"\x55D\x55E\x3\x2\x2\x2\x55E\x560\x5\x8A\x46\x2\x55F\x55C\x3\x2\x2\x2\x55F"+
		"\x560\x3\x2\x2\x2\x560\x8F\x3\x2\x2\x2\x561\x562\x5\x122\x92\x2\x562\x563"+
		"\x5\x138\x9D\x2\x563\x565\x3\x2\x2\x2\x564\x561\x3\x2\x2\x2\x564\x565"+
		"\x3\x2\x2\x2\x565\x568\x3\x2\x2\x2\x566\x567\a\xC6\x2\x2\x567\x569\x5"+
		"\x138\x9D\x2\x568\x566\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56A\x3"+
		"\x2\x2\x2\x56A\x56B\a\xAA\x2\x2\x56B\x56C\x5\x138\x9D\x2\x56C\x56E\x5"+
		"\x10A\x86\x2\x56D\x56F\x5\x120\x91\x2\x56E\x56D\x3\x2\x2\x2\x56E\x56F"+
		"\x3\x2\x2\x2\x56F\x574\x3\x2\x2\x2\x570\x572\x5\x138\x9D\x2\x571\x570"+
		"\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x575\x5"+
		"\x100\x81\x2\x574\x571\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x579\x3"+
		"\x2\x2\x2\x576\x577\x5\x138\x9D\x2\x577\x578\x5\x10C\x87\x2\x578\x57A"+
		"\x3\x2\x2\x2\x579\x576\x3\x2\x2\x2\x579\x57A\x3\x2\x2\x2\x57A\x57B\x3"+
		"\x2\x2\x2\x57B\x57C\x5\x128\x95\x2\x57C\x57D\x5\x1A\xE\x2\x57D\x57E\a"+
		"\x64\x2\x2\x57E\x91\x3\x2\x2\x2\x57F\x580\x5\x122\x92\x2\x580\x581\x5"+
		"\x138\x9D\x2\x581\x583\x3\x2\x2\x2\x582\x57F\x3\x2\x2\x2\x582\x583\x3"+
		"\x2\x2\x2\x583\x586\x3\x2\x2\x2\x584\x585\a\xC6\x2\x2\x585\x587\x5\x138"+
		"\x9D\x2\x586\x584\x3\x2\x2\x2\x586\x587\x3\x2\x2\x2\x587\x588\x3\x2\x2"+
		"\x2\x588\x589\a\xAC\x2\x2\x589\x58A\x5\x138\x9D\x2\x58A\x58F\x5\x10A\x86"+
		"\x2\x58B\x58D\x5\x138\x9D\x2\x58C\x58B\x3\x2\x2\x2\x58C\x58D\x3\x2\x2"+
		"\x2\x58D\x58E\x3\x2\x2\x2\x58E\x590\x5\x100\x81\x2\x58F\x58C\x3\x2\x2"+
		"\x2\x58F\x590\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x592\x5\x128\x95"+
		"\x2\x592\x593\x5\x1A\xE\x2\x593\x594\a\x64\x2\x2\x594\x93\x3\x2\x2\x2"+
		"\x595\x596\x5\x122\x92\x2\x596\x597\x5\x138\x9D\x2\x597\x599\x3\x2\x2"+
		"\x2\x598\x595\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x59C\x3\x2\x2\x2"+
		"\x59A\x59B\a\xC6\x2\x2\x59B\x59D\x5\x138\x9D\x2\x59C\x59A\x3\x2\x2\x2"+
		"\x59C\x59D\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\x59F\a\xAB\x2\x2\x59F"+
		"\x5A0\x5\x138\x9D\x2\x5A0\x5A5\x5\x10A\x86\x2\x5A1\x5A3\x5\x138\x9D\x2"+
		"\x5A2\x5A1\x3\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4"+
		"\x5A6\x5\x100\x81\x2\x5A5\x5A2\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2\x2\x5A6"+
		"\x5A7\x3\x2\x2\x2\x5A7\x5A8\x5\x128\x95\x2\x5A8\x5A9\x5\x1A\xE\x2\x5A9"+
		"\x5AA\a\x64\x2\x2\x5AA\x95\x3\x2\x2\x2\x5AB\x5AC\a\xAF\x2\x2\x5AC\x5AD"+
		"\x5\x138\x9D\x2\x5AD\x5AF\x5\xE0q\x2\x5AE\x5B0\x5\x138\x9D\x2\x5AF\x5AE"+
		"\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x5B1\x3\x2\x2\x2\x5B1\x5B3\a)"+
		"\x2\x2\x5B2\x5B4\x5\x138\x9D\x2\x5B3\x5B2\x3\x2\x2\x2\x5B3\x5B4\x3\x2"+
		"\x2\x2\x5B4\x5B6\x3\x2\x2\x2\x5B5\x5B7\x5\xCCg\x2\x5B6\x5B5\x3\x2\x2\x2"+
		"\x5B6\x5B7\x3\x2\x2\x2\x5B7\x5B9\x3\x2\x2\x2\x5B8\x5BA\x5\x138\x9D\x2"+
		"\x5B9\x5B8\x3\x2\x2\x2\x5B9\x5BA\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB"+
		"\x5BD\a)\x2\x2\x5BC\x5BE\x5\x138\x9D\x2\x5BD\x5BC\x3\x2\x2\x2\x5BD\x5BE"+
		"\x3\x2\x2\x2\x5BE\x5BF\x3\x2\x2\x2\x5BF\x5C0\x5\xCCg\x2\x5C0\x97\x3\x2"+
		"\x2\x2\x5C1\x5C2\a\xB2\x2\x2\x5C2\x5C3\x5\x138\x9D\x2\x5C3\x5D2\x5\x10A"+
		"\x86\x2\x5C4\x5C6\x5\x138\x9D\x2\x5C5\x5C4\x3\x2\x2\x2\x5C5\x5C6\x3\x2"+
		"\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5C9\a\xE6\x2\x2\x5C8\x5CA\x5\x138\x9D"+
		"\x2\x5C9\x5C8\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5CF\x3\x2\x2\x2"+
		"\x5CB\x5CD\x5\xFA~\x2\x5CC\x5CE\x5\x138\x9D\x2\x5CD\x5CC\x3\x2\x2\x2\x5CD"+
		"\x5CE\x3\x2\x2\x2\x5CE\x5D0\x3\x2\x2\x2\x5CF\x5CB\x3\x2\x2\x2\x5CF\x5D0"+
		"\x3\x2\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D3\a\xED\x2\x2\x5D2\x5C5\x3"+
		"\x2\x2\x2\x5D2\x5D3\x3\x2\x2\x2\x5D3\x99\x3\x2\x2\x2\x5D4\x5D8\a\xB1\x2"+
		"\x2\x5D5\x5D6\x5\x138\x9D\x2\x5D6\x5D7\x5\xCCg\x2\x5D7\x5D9\x3\x2\x2\x2"+
		"\x5D8\x5D5\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x9B\x3\x2\x2\x2\x5DA"+
		"\x5DB\a\xB5\x2\x2\x5DB\x5DE\x5\x138\x9D\x2\x5DC\x5DD\a\xA7\x2\x2\x5DD"+
		"\x5DF\x5\x138\x9D\x2\x5DE\x5DC\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF"+
		"\x5E0\x3\x2\x2\x2\x5E0\x5EB\x5\x9EP\x2\x5E1\x5E3\x5\x138\x9D\x2\x5E2\x5E1"+
		"\x3\x2\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4\x5E6\a)"+
		"\x2\x2\x5E5\x5E7\x5\x138\x9D\x2\x5E6\x5E5\x3\x2\x2\x2\x5E6\x5E7\x3\x2"+
		"\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5EA\x5\x9EP\x2\x5E9\x5E2\x3\x2\x2\x2"+
		"\x5EA\x5ED\x3\x2\x2\x2\x5EB\x5E9\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2\x2\x5EC"+
		"\x9D\x3\x2\x2\x2\x5ED\x5EB\x3\x2\x2\x2\x5EE\x5F0\x5\xEEx\x2\x5EF\x5F1"+
		"\x5\x138\x9D\x2\x5F0\x5EF\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F2"+
		"\x3\x2\x2\x2\x5F2\x5F4\a\xE6\x2\x2\x5F3\x5F5\x5\x138\x9D\x2\x5F4\x5F3"+
		"\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6\x5F8\x5"+
		"\x106\x84\x2\x5F7\x5F9\x5\x138\x9D\x2\x5F8\x5F7\x3\x2\x2\x2\x5F8\x5F9"+
		"\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5FE\a\xED\x2\x2\x5FB\x5FC\x5"+
		"\x138\x9D\x2\x5FC\x5FD\x5\x10C\x87\x2\x5FD\x5FF\x3\x2\x2\x2\x5FE\x5FB"+
		"\x3\x2\x2\x2\x5FE\x5FF\x3\x2\x2\x2\x5FF\x9F\x3\x2\x2\x2\x600\x601\a\xB7"+
		"\x2\x2\x601\xA1\x3\x2\x2\x2\x602\x608\a\xB8\x2\x2\x603\x606\x5\x138\x9D"+
		"\x2\x604\x607\a\x96\x2\x2\x605\x607\x5\x10A\x86\x2\x606\x604\x3\x2\x2"+
		"\x2\x606\x605\x3\x2\x2\x2\x607\x609\x3\x2\x2\x2\x608\x603\x3\x2\x2\x2"+
		"\x608\x609\x3\x2\x2\x2\x609\xA3\x3\x2\x2\x2\x60A\x60B\a\xB9\x2\x2\x60B"+
		"\xA5\x3\x2\x2\x2\x60C\x60D\a\xBA\x2\x2\x60D\x60E\x5\x138\x9D\x2\x60E\x60F"+
		"\x5\xCCg\x2\x60F\xA7\x3\x2\x2\x2\x610\x611\a\xBB\x2\x2\x611\x612\x5\x138"+
		"\x9D\x2\x612\x614\x5\xEEx\x2\x613\x615\x5\x138\x9D\x2\x614\x613\x3\x2"+
		"\x2\x2\x614\x615\x3\x2\x2\x2\x615\x616\x3\x2\x2\x2\x616\x618\a\xE2\x2"+
		"\x2\x617\x619\x5\x138\x9D\x2\x618\x617\x3\x2\x2\x2\x618\x619\x3\x2\x2"+
		"\x2\x619\x61A\x3\x2\x2\x2\x61A\x61B\x5\xCCg\x2\x61B\xA9\x3\x2\x2\x2\x61C"+
		"\x61D\a\xBC\x2\x2\x61D\x61E\x5\x138\x9D\x2\x61E\x620\x5\xCCg\x2\x61F\x621"+
		"\x5\x138\x9D\x2\x620\x61F\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\x622"+
		"\x3\x2\x2\x2\x622\x624\a)\x2\x2\x623\x625\x5\x138\x9D\x2\x624\x623\x3"+
		"\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625\x626\x3\x2\x2\x2\x626\x627\x5\xCC"+
		"g\x2\x627\xAB\x3\x2\x2\x2\x628\x629\a\xBD\x2\x2\x629\x62A\x5\x138\x9D"+
		"\x2\x62A\x62C\x5\xCCg\x2\x62B\x62D\x5\x138\x9D\x2\x62C\x62B\x3\x2\x2\x2"+
		"\x62C\x62D\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x630\a)\x2\x2\x62F\x631"+
		"\x5\x138\x9D\x2\x630\x62F\x3\x2\x2\x2\x630\x631\x3\x2\x2\x2\x631\x632"+
		"\x3\x2\x2\x2\x632\x634\x5\xCCg\x2\x633\x635\x5\x138\x9D\x2\x634\x633\x3"+
		"\x2\x2\x2\x634\x635\x3\x2\x2\x2\x635\x636\x3\x2\x2\x2\x636\x638\a)\x2"+
		"\x2\x637\x639\x5\x138\x9D\x2\x638\x637\x3\x2\x2\x2\x638\x639\x3\x2\x2"+
		"\x2\x639\x63A\x3\x2\x2\x2\x63A\x63C\x5\xCCg\x2\x63B\x63D\x5\x138\x9D\x2"+
		"\x63C\x63B\x3\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E"+
		"\x640\a)\x2\x2\x63F\x641\x5\x138\x9D\x2\x640\x63F\x3\x2\x2\x2\x640\x641"+
		"\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x643\x5\xCCg\x2\x643\xAD\x3\x2"+
		"\x2\x2\x644\x645\a\xBE\x2\x2\x645\x646\x5\x138\x9D\x2\x646\x648\x5\xE0"+
		"q\x2\x647\x649\x5\x138\x9D\x2\x648\x647\x3\x2\x2\x2\x648\x649\x3\x2\x2"+
		"\x2\x649\x64A\x3\x2\x2\x2\x64A\x64C\a)\x2\x2\x64B\x64D\x5\x138\x9D\x2"+
		"\x64C\x64B\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2\x64D\x64E\x3\x2\x2\x2\x64E"+
		"\x64F\x5\xCCg\x2\x64F\xAF\x3\x2\x2\x2\x650\x651\a\xBF\x2\x2\x651\x652"+
		"\x5\x138\x9D\x2\x652\x653\a\x43\x2\x2\x653\x654\x5\x138\x9D\x2\x654\x655"+
		"\x5\xCCg\x2\x655\x659\x5\x128\x95\x2\x656\x658\x5\xB4[\x2\x657\x656\x3"+
		"\x2\x2\x2\x658\x65B\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2\x659\x65A\x3\x2"+
		"\x2\x2\x65A\x65C\x3\x2\x2\x2\x65B\x659\x3\x2\x2\x2\x65C\x65D\a\x65\x2"+
		"\x2\x65D\xB1\x3\x2\x2\x2\x65E\x660\a\x82\x2\x2\x65F\x661\x5\x138\x9D\x2"+
		"\x660\x65F\x3\x2\x2\x2\x660\x661\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662"+
		"\x664\x5\x110\x89\x2\x663\x665\x5\x138\x9D\x2\x664\x663\x3\x2\x2\x2\x664"+
		"\x665\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666\x667\x5\xCCg\x2\x667\x670"+
		"\x3\x2\x2\x2\x668\x669\x5\xCCg\x2\x669\x66A\x5\x138\x9D\x2\x66A\x66B\a"+
		"\xCF\x2\x2\x66B\x66C\x5\x138\x9D\x2\x66C\x66D\x5\xCCg\x2\x66D\x670\x3"+
		"\x2\x2\x2\x66E\x670\x5\xCCg\x2\x66F\x65E\x3\x2\x2\x2\x66F\x668\x3\x2\x2"+
		"\x2\x66F\x66E\x3\x2\x2\x2\x670\xB3\x3\x2\x2\x2\x671\x672\a\x43\x2\x2\x672"+
		"\x673\x5\x138\x9D\x2\x673\x674\x5\xB6\\\x2\x674\x675\x5\x128\x95\x2\x675"+
		"\x676\x5\x1A\xE\x2\x676\xB5\x3\x2\x2\x2\x677\x687\a^\x2\x2\x678\x683\x5"+
		"\xB2Z\x2\x679\x67B\x5\x138\x9D\x2\x67A\x679\x3\x2\x2\x2\x67A\x67B\x3\x2"+
		"\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67E\a)\x2\x2\x67D\x67F\x5\x138\x9D"+
		"\x2\x67E\x67D\x3\x2\x2\x2\x67E\x67F\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2"+
		"\x680\x682\x5\xB2Z\x2\x681\x67A\x3\x2\x2\x2\x682\x685\x3\x2\x2\x2\x683"+
		"\x681\x3\x2\x2\x2\x683\x684\x3\x2\x2\x2\x684\x687\x3\x2\x2\x2\x685\x683"+
		"\x3\x2\x2\x2\x686\x677\x3\x2\x2\x2\x686\x678\x3\x2\x2\x2\x687\xB7\x3\x2"+
		"\x2\x2\x688\x689\a\xC0\x2\x2\x689\x68A\x5\x138\x9D\x2\x68A\x693\x5\xCC"+
		"g\x2\x68B\x68D\x5\x138\x9D\x2\x68C\x68B\x3\x2\x2\x2\x68C\x68D\x3\x2\x2"+
		"\x2\x68D\x68E\x3\x2\x2\x2\x68E\x690\a)\x2\x2\x68F\x691\x5\x138\x9D\x2"+
		"\x690\x68F\x3\x2\x2\x2\x690\x691\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692"+
		"\x694\x5\xCCg\x2\x693\x68C\x3\x2\x2\x2\x693\x694\x3\x2\x2\x2\x694\xB9"+
		"\x3\x2\x2\x2\x695\x696\a\xC2\x2\x2\x696\x697\x5\x138\x9D\x2\x697\x699"+
		"\x5\xCCg\x2\x698\x69A\x5\x138\x9D\x2\x699\x698\x3\x2\x2\x2\x699\x69A\x3"+
		"\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69D\a)\x2\x2\x69C\x69E\x5\x138\x9D"+
		"\x2\x69D\x69C\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E\x69F\x3\x2\x2\x2"+
		"\x69F\x6A0\x5\xCCg\x2\x6A0\xBB\x3\x2\x2\x2\x6A1\x6A2\a\xC1\x2\x2\x6A2"+
		"\x6A3\x5\x138\x9D\x2\x6A3\x6A5\x5\xEEx\x2\x6A4\x6A6\x5\x138\x9D\x2\x6A5"+
		"\x6A4\x3\x2\x2\x2\x6A5\x6A6\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2\x2\x6A7\x6A9"+
		"\a\xE2\x2\x2\x6A8\x6AA\x5\x138\x9D\x2\x6A9\x6A8\x3\x2\x2\x2\x6A9\x6AA"+
		"\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AC\x5\xCCg\x2\x6AC\xBD\x3\x2"+
		"\x2\x2\x6AD\x6AE\a\xC8\x2\x2\x6AE\xBF\x3\x2\x2\x2\x6AF\x6B0\x5\x122\x92"+
		"\x2\x6B0\x6B1\x5\x138\x9D\x2\x6B1\x6B3\x3\x2\x2\x2\x6B2\x6AF\x3\x2\x2"+
		"\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3\x6B6\x3\x2\x2\x2\x6B4\x6B5\a\xC6\x2\x2"+
		"\x6B5\x6B7\x5\x138\x9D\x2\x6B6\x6B4\x3\x2\x2\x2\x6B6\x6B7\x3\x2\x2\x2"+
		"\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6BA\a\xCA\x2\x2\x6B9\x6BB\x5\x138\x9D\x2"+
		"\x6BA\x6B9\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2\x2\x6BC"+
		"\x6C1\x5\x10A\x86\x2\x6BD\x6BF\x5\x138\x9D\x2\x6BE\x6BD\x3\x2\x2\x2\x6BE"+
		"\x6BF\x3\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2\x6C0\x6C2\x5\x100\x81\x2\x6C1"+
		"\x6BE\x3\x2\x2\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C4"+
		"\x5\x128\x95\x2\x6C4\x6C5\x5\x1A\xE\x2\x6C5\x6C6\a\x66\x2\x2\x6C6\xC1"+
		"\x3\x2\x2\x2\x6C7\x6C9\a\xCE\x2\x2\x6C8\x6CA\x5\x138\x9D\x2\x6C9\x6C8"+
		"\x3\x2\x2\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CD\a\xE2"+
		"\x2\x2\x6CC\x6CE\x5\x138\x9D\x2\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE\x3\x2"+
		"\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D0\x5\xCCg\x2\x6D0\xC3\x3\x2\x2\x2"+
		"\x6D1\x6D2\x5\x122\x92\x2\x6D2\x6D3\x5\x138\x9D\x2\x6D3\x6D5\x3\x2\x2"+
		"\x2\x6D4\x6D1\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2"+
		"\x6D6\x6D7\a\xD1\x2\x2\x6D7\x6D8\x5\x138\x9D\x2\x6D8\x6D9\x5\x10A\x86"+
		"\x2\x6D9\x6DD\x5\x128\x95\x2\x6DA\x6DC\x5\xC6\x64\x2\x6DB\x6DA\x3\x2\x2"+
		"\x2\x6DC\x6DF\x3\x2\x2\x2\x6DD\x6DB\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2"+
		"\x6DE\x6E0\x3\x2\x2\x2\x6DF\x6DD\x3\x2\x2\x2\x6E0\x6E1\ag\x2\x2\x6E1\xC5"+
		"\x3\x2\x2\x2\x6E2\x6F1\x5\x10A\x86\x2\x6E3\x6E5\x5\x138\x9D\x2\x6E4\x6E3"+
		"\x3\x2\x2\x2\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6\x6EB\a\xE6"+
		"\x2\x2\x6E7\x6E9\x5\x138\x9D\x2\x6E8\x6E7\x3\x2\x2\x2\x6E8\x6E9\x3\x2"+
		"\x2\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EC\x5\x106\x84\x2\x6EB\x6E8\x3\x2"+
		"\x2\x2\x6EB\x6EC\x3\x2\x2\x2\x6EC\x6EE\x3\x2\x2\x2\x6ED\x6EF\x5\x138\x9D"+
		"\x2\x6EE\x6ED\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2"+
		"\x6F0\x6F2\a\xED\x2\x2\x6F1\x6E4\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2\x6F2"+
		"\x6F6\x3\x2\x2\x2\x6F3\x6F4\x5\x138\x9D\x2\x6F4\x6F5\x5\x10C\x87\x2\x6F5"+
		"\x6F7\x3\x2\x2\x2\x6F6\x6F3\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F8"+
		"\x3\x2\x2\x2\x6F8\x6F9\x5\x128\x95\x2\x6F9\xC7\x3\x2\x2\x2\x6FA\x6FB\a"+
		"\xD3\x2\x2\x6FB\x6FC\x5\x138\x9D\x2\x6FC\x6FD\x5\xCCg\x2\x6FD\xC9\x3\x2"+
		"\x2\x2\x6FE\x6FF\a\xD4\x2\x2\x6FF\x700\x5\x138\x9D\x2\x700\x710\x5\xE0"+
		"q\x2\x701\x703\x5\x138\x9D\x2\x702\x701\x3\x2\x2\x2\x702\x703\x3\x2\x2"+
		"\x2\x703\x704\x3\x2\x2\x2\x704\x706\a)\x2\x2\x705\x707\x5\x138\x9D\x2"+
		"\x706\x705\x3\x2\x2\x2\x706\x707\x3\x2\x2\x2\x707\x708\x3\x2\x2\x2\x708"+
		"\x70E\x5\xCCg\x2\x709\x70A\x5\x138\x9D\x2\x70A\x70B\a\xCF\x2\x2\x70B\x70C"+
		"\x5\x138\x9D\x2\x70C\x70D\x5\xCCg\x2\x70D\x70F\x3\x2\x2\x2\x70E\x709\x3"+
		"\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x711\x3\x2\x2\x2\x710\x702\x3\x2"+
		"\x2\x2\x710\x711\x3\x2\x2\x2\x711\xCB\x3\x2\x2\x2\x712\x713\bg\x1\x2\x713"+
		"\x715\a\x97\x2\x2\x714\x716\x5\x138\x9D\x2\x715\x714\x3\x2\x2\x2\x715"+
		"\x716\x3\x2\x2\x2\x716\x717\x3\x2\x2\x2\x717\x740\x5\xCCg\x15\x718\x71A"+
		"\a\x34\x2\x2\x719\x71B\x5\x138\x9D\x2\x71A\x719\x3\x2\x2\x2\x71A\x71B"+
		"\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C\x740\x5\xCCg\x12\x71D\x71F\x5"+
		"\xEEx\x2\x71E\x720\x5\x138\x9D\x2\x71F\x71E\x3\x2\x2\x2\x71F\x720\x3\x2"+
		"\x2\x2\x720\x721\x3\x2\x2\x2\x721\x723\a\xDF\x2\x2\x722\x724\x5\x138\x9D"+
		"\x2\x723\x722\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2"+
		"\x725\x726\x5\xCCg\x11\x726\x740\x3\x2\x2\x2\x727\x729\a\xE8\x2\x2\x728"+
		"\x72A\x5\x138\x9D\x2\x729\x728\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A"+
		"\x72B\x3\x2\x2\x2\x72B\x740\x5\xCCg\xF\x72C\x72E\a\x98\x2\x2\x72D\x72F"+
		"\x5\x138\x9D\x2\x72E\x72D\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x730"+
		"\x3\x2\x2\x2\x730\x740\x5\xCCg\b\x731\x740\x5\x11A\x8E\x2\x732\x740\x5"+
		"\xEEx\x2\x733\x735\a\xE6\x2\x2\x734\x736\x5\x138\x9D\x2\x735\x734\x3\x2"+
		"\x2\x2\x735\x736\x3\x2\x2\x2\x736\x737\x3\x2\x2\x2\x737\x739\x5\xCCg\x2"+
		"\x738\x73A\x5\x138\x9D\x2\x739\x738\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2"+
		"\x73A\x73B\x3\x2\x2\x2\x73B\x73C\a\xED\x2\x2\x73C\x740\x3\x2\x2\x2\x73D"+
		"\x740\x5\xCEh\x2\x73E\x740\x5|?\x2\x73F\x712\x3\x2\x2\x2\x73F\x718\x3"+
		"\x2\x2\x2\x73F\x71D\x3\x2\x2\x2\x73F\x727\x3\x2\x2\x2\x73F\x72C\x3\x2"+
		"\x2\x2\x73F\x731\x3\x2\x2\x2\x73F\x732\x3\x2\x2\x2\x73F\x733\x3\x2\x2"+
		"\x2\x73F\x73D\x3\x2\x2\x2\x73F\x73E\x3\x2\x2\x2\x740\x7AF\x3\x2\x2\x2"+
		"\x741\x743\f\x10\x2\x2\x742\x744\x5\x138\x9D\x2\x743\x742\x3\x2\x2\x2"+
		"\x743\x744\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x747\a\xEC\x2\x2\x746"+
		"\x748\x5\x138\x9D\x2\x747\x746\x3\x2\x2\x2\x747\x748\x3\x2\x2\x2\x748"+
		"\x749\x3\x2\x2\x2\x749\x7AE\x5\xCCg\x11\x74A\x74C\f\xE\x2\x2\x74B\x74D"+
		"\x5\x138\x9D\x2\x74C\x74B\x3\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E"+
		"\x3\x2\x2\x2\x74E\x750\t\f\x2\x2\x74F\x751\x5\x138\x9D\x2\x750\x74F\x3"+
		"\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751\x752\x3\x2\x2\x2\x752\x7AE\x5\xCC"+
		"g\xF\x753\x755\f\r\x2\x2\x754\x756\x5\x138\x9D\x2\x755\x754\x3\x2\x2\x2"+
		"\x755\x756\x3\x2\x2\x2\x756\x757\x3\x2\x2\x2\x757\x759\a\xE1\x2\x2\x758"+
		"\x75A\x5\x138\x9D\x2\x759\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A"+
		"\x75B\x3\x2\x2\x2\x75B\x7AE\x5\xCCg\xE\x75C\x75E\f\f\x2\x2\x75D\x75F\x5"+
		"\x138\x9D\x2\x75E\x75D\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x760\x3"+
		"\x2\x2\x2\x760\x762\a\x94\x2\x2\x761\x763\x5\x138\x9D\x2\x762\x761\x3"+
		"\x2\x2\x2\x762\x763\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x7AE\x5\xCC"+
		"g\r\x765\x767\f\v\x2\x2\x766\x768\x5\x138\x9D\x2\x767\x766\x3\x2\x2\x2"+
		"\x767\x768\x3\x2\x2\x2\x768\x769\x3\x2\x2\x2\x769\x76B\t\r\x2\x2\x76A"+
		"\x76C\x5\x138\x9D\x2\x76B\x76A\x3\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C"+
		"\x76D\x3\x2\x2\x2\x76D\x7AE\x5\xCCg\f\x76E\x770\f\n\x2\x2\x76F\x771\x5"+
		"\x138\x9D\x2\x770\x76F\x3\x2\x2\x2\x770\x771\x3\x2\x2\x2\x771\x772\x3"+
		"\x2\x2\x2\x772\x774\a\x32\x2\x2\x773\x775\x5\x138\x9D\x2\x774\x773\x3"+
		"\x2\x2\x2\x774\x775\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x7AE\x5\xCC"+
		"g\v\x777\x779\f\t\x2\x2\x778\x77A\x5\x138\x9D\x2\x779\x778\x3\x2\x2\x2"+
		"\x779\x77A\x3\x2\x2\x2\x77A\x77B\x3\x2\x2\x2\x77B\x77D\t\xE\x2\x2\x77C"+
		"\x77E\x5\x138\x9D\x2\x77D\x77C\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E"+
		"\x77F\x3\x2\x2\x2\x77F\x7AE\x5\xCCg\n\x780\x782\f\a\x2\x2\x781\x783\x5"+
		"\x138\x9D\x2\x782\x781\x3\x2\x2\x2\x782\x783\x3\x2\x2\x2\x783\x784\x3"+
		"\x2\x2\x2\x784\x786\a\x36\x2\x2\x785\x787\x5\x138\x9D\x2\x786\x785\x3"+
		"\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787\x788\x3\x2\x2\x2\x788\x7AE\x5\xCC"+
		"g\b\x789\x78B\f\x6\x2\x2\x78A\x78C\x5\x138\x9D\x2\x78B\x78A\x3\x2\x2\x2"+
		"\x78B\x78C\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78F\a\xA4\x2\x2\x78E"+
		"\x790\x5\x138\x9D\x2\x78F\x78E\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790"+
		"\x791\x3\x2\x2\x2\x791\x7AE\x5\xCCg\a\x792\x794\f\x5\x2\x2\x793\x795\x5"+
		"\x138\x9D\x2\x794\x793\x3\x2\x2\x2\x794\x795\x3\x2\x2\x2\x795\x796\x3"+
		"\x2\x2\x2\x796\x798\a\xDE\x2\x2\x797\x799\x5\x138\x9D\x2\x798\x797\x3"+
		"\x2\x2\x2\x798\x799\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x7AE\x5\xCC"+
		"g\x6\x79B\x79D\f\x4\x2\x2\x79C\x79E\x5\x138\x9D\x2\x79D\x79C\x3\x2\x2"+
		"\x2\x79D\x79E\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\x7A1\ak\x2\x2\x7A0"+
		"\x7A2\x5\x138\x9D\x2\x7A1\x7A0\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2"+
		"\x7A3\x3\x2\x2\x2\x7A3\x7AE\x5\xCCg\x5\x7A4\x7A6\f\x3\x2\x2\x7A5\x7A7"+
		"\x5\x138\x9D\x2\x7A6\x7A5\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7A8"+
		"\x3\x2\x2\x2\x7A8\x7AA\a~\x2\x2\x7A9\x7AB\x5\x138\x9D\x2\x7AA\x7A9\x3"+
		"\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7AE\x5\xCC"+
		"g\x4\x7AD\x741\x3\x2\x2\x2\x7AD\x74A\x3\x2\x2\x2\x7AD\x753\x3\x2\x2\x2"+
		"\x7AD\x75C\x3\x2\x2\x2\x7AD\x765\x3\x2\x2\x2\x7AD\x76E\x3\x2\x2\x2\x7AD"+
		"\x777\x3\x2\x2\x2\x7AD\x780\x3\x2\x2\x2\x7AD\x789\x3\x2\x2\x2\x7AD\x792"+
		"\x3\x2\x2\x2\x7AD\x79B\x3\x2\x2\x2\x7AD\x7A4\x3\x2\x2\x2\x7AE\x7B1\x3"+
		"\x2\x2\x2\x7AF\x7AD\x3\x2\x2\x2\x7AF\x7B0\x3\x2\x2\x2\x7B0\xCD\x3\x2\x2"+
		"\x2\x7B1\x7AF\x3\x2\x2\x2\x7B2\x7B3\a\xD2\x2\x2\x7B3\x7B4\x5\x138\x9D"+
		"\x2\x7B4\x7BA\x5\xCCg\x2\x7B5\x7B6\x5\x138\x9D\x2\x7B6\x7B7\a\x82\x2\x2"+
		"\x7B7\x7B8\x5\x138\x9D\x2\x7B8\x7B9\x5\x11E\x90\x2\x7B9\x7BB\x3\x2\x2"+
		"\x2\x7BA\x7B5\x3\x2\x2\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB\xCF\x3\x2\x2\x2\x7BC"+
		"\x7C0\aZ\x2\x2\x7BD\x7C0\a\xC6\x2\x2\x7BE\x7C0\x5\x122\x92\x2\x7BF\x7BC"+
		"\x3\x2\x2\x2\x7BF\x7BD\x3\x2\x2\x2\x7BF\x7BE\x3\x2\x2\x2\x7C0\x7C1\x3"+
		"\x2\x2\x2\x7C1\x7C4\x5\x138\x9D\x2\x7C2\x7C3\a\xDC\x2\x2\x7C3\x7C5\x5"+
		"\x138\x9D\x2\x7C4\x7C2\x3\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x7C6\x3"+
		"\x2\x2\x2\x7C6\x7C7\x5\xD2j\x2\x7C7\xD1\x3\x2\x2\x2\x7C8\x7D3\x5\xD4k"+
		"\x2\x7C9\x7CB\x5\x138\x9D\x2\x7CA\x7C9\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2"+
		"\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CE\a)\x2\x2\x7CD\x7CF\x5\x138\x9D\x2"+
		"\x7CE\x7CD\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0"+
		"\x7D2\x5\xD4k\x2\x7D1\x7CA\x3\x2\x2\x2\x7D2\x7D5\x3\x2\x2\x2\x7D3\x7D1"+
		"\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\xD3\x3\x2\x2\x2\x7D5\x7D3\x3\x2"+
		"\x2\x2\x7D6\x7E8\x5\x10A\x86\x2\x7D7\x7D9\x5\x138\x9D\x2\x7D8\x7D7\x3"+
		"\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7DC\a\xE6"+
		"\x2\x2\x7DB\x7DD\x5\x138\x9D\x2\x7DC\x7DB\x3\x2\x2\x2\x7DC\x7DD\x3\x2"+
		"\x2\x2\x7DD\x7E2\x3\x2\x2\x2\x7DE\x7E0\x5\x106\x84\x2\x7DF\x7E1\x5\x138"+
		"\x9D\x2\x7E0\x7DF\x3\x2\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\x7E3\x3\x2\x2"+
		"\x2\x7E2\x7DE\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2"+
		"\x7E4\x7E6\a\xED\x2\x2\x7E5\x7E7\x5\x138\x9D\x2\x7E6\x7E5\x3\x2\x2\x2"+
		"\x7E6\x7E7\x3\x2\x2\x2\x7E7\x7E9\x3\x2\x2\x2\x7E8\x7D8\x3\x2\x2\x2\x7E8"+
		"\x7E9\x3\x2\x2\x2\x7E9\x7EB\x3\x2\x2\x2\x7EA\x7EC\x5\x120\x91\x2\x7EB"+
		"\x7EA\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7F0\x3\x2\x2\x2\x7ED\x7EE"+
		"\x5\x138\x9D\x2\x7EE\x7EF\x5\x10C\x87\x2\x7EF\x7F1\x3\x2\x2\x2\x7F0\x7ED"+
		"\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\xD5\x3\x2\x2\x2\x7F2\x7F3\a\xD9"+
		"\x2\x2\x7F3\x7F4\x5\x138\x9D\x2\x7F4\x7F5\x5\xCCg\x2\x7F5\x7F6\x5\x128"+
		"\x95\x2\x7F6\x7F7\x5\x1A\xE\x2\x7F7\x7F8\a\xD8\x2\x2\x7F8\xD7\x3\x2\x2"+
		"\x2\x7F9\x7FA\a\xDA\x2\x2\x7FA\x7FB\x5\x138\x9D\x2\x7FB\x7FD\x5\xE0q\x2"+
		"\x7FC\x7FE\x5\x138\x9D\x2\x7FD\x7FC\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2"+
		"\x7FE\x7FF\x3\x2\x2\x2\x7FF\x801\a)\x2\x2\x800\x802\x5\x138\x9D\x2\x801"+
		"\x800\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x803\x3\x2\x2\x2\x803\x804"+
		"\x5\xCCg\x2\x804\xD9\x3\x2\x2\x2\x805\x806\a\xDB\x2\x2\x806\x807\x5\x138"+
		"\x9D\x2\x807\x808\x5\xDCo\x2\x808\x809\x5\x128\x95\x2\x809\x80A\x5\x1A"+
		"\xE\x2\x80A\x80B\ah\x2\x2\x80B\xDB\x3\x2\x2\x2\x80C\x812\x5\xEEx\x2\x80D"+
		"\x80E\a\x97\x2\x2\x80E\x80F\x5\x138\x9D\x2\x80F\x810\x5\x11E\x90\x2\x810"+
		"\x812\x3\x2\x2\x2\x811\x80C\x3\x2\x2\x2\x811\x80D\x3\x2\x2\x2\x812\xDD"+
		"\x3\x2\x2\x2\x813\x814\a\xDD\x2\x2\x814\x815\x5\x138\x9D\x2\x815\x817"+
		"\x5\xE0q\x2\x816\x818\x5\x138\x9D\x2\x817\x816\x3\x2\x2\x2\x817\x818\x3"+
		"\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819\x81E\a)\x2\x2\x81A\x81C\x5\x138\x9D"+
		"\x2\x81B\x81A\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2"+
		"\x81D\x81F\x5\x8A\x46\x2\x81E\x81B\x3\x2\x2\x2\x81E\x81F\x3\x2\x2\x2\x81F"+
		"\xDF\x3\x2\x2\x2\x820\x822\a.\x2\x2\x821\x820\x3\x2\x2\x2\x821\x822\x3"+
		"\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x824\x5\xCCg\x2\x824\xE1\x3\x2\x2"+
		"\x2\x825\x828\x5\xE4s\x2\x826\x828\x5\xE6t\x2\x827\x825\x3\x2\x2\x2\x827"+
		"\x826\x3\x2\x2\x2\x828\xE3\x3\x2\x2\x2\x829\x82A\a\x42\x2\x2\x82A\x82B"+
		"\x5\x138\x9D\x2\x82B\x82D\x5\x10A\x86\x2\x82C\x82E\x5\x120\x91\x2\x82D"+
		"\x82C\x3\x2\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\x83C\x3\x2\x2\x2\x82F\x831"+
		"\x5\x138\x9D\x2\x830\x82F\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x832"+
		"\x3\x2\x2\x2\x832\x834\a\xE6\x2\x2\x833\x835\x5\x138\x9D\x2\x834\x833"+
		"\x3\x2\x2\x2\x834\x835\x3\x2\x2\x2\x835\x836\x3\x2\x2\x2\x836\x838\x5"+
		"\xFA~\x2\x837\x839\x5\x138\x9D\x2\x838\x837\x3\x2\x2\x2\x838\x839\x3\x2"+
		"\x2\x2\x839\x83A\x3\x2\x2\x2\x83A\x83B\a\xED\x2\x2\x83B\x83D\x3\x2\x2"+
		"\x2\x83C\x830\x3\x2\x2\x2\x83C\x83D\x3\x2\x2\x2\x83D\x847\x3\x2\x2\x2"+
		"\x83E\x840\x5\x138\x9D\x2\x83F\x83E\x3\x2\x2\x2\x83F\x840\x3\x2\x2\x2"+
		"\x840\x841\x3\x2\x2\x2\x841\x842\a\xE6\x2\x2\x842\x843\x5\x106\x84\x2"+
		"\x843\x844\a\xED\x2\x2\x844\x846\x3\x2\x2\x2\x845\x83F\x3\x2\x2\x2\x846"+
		"\x849\x3\x2\x2\x2\x847\x845\x3\x2\x2\x2\x847\x848\x3\x2\x2\x2\x848\xE5"+
		"\x3\x2\x2\x2\x849\x847\x3\x2\x2\x2\x84A\x84B\a\x42\x2\x2\x84B\x84D\x5"+
		"\x138\x9D\x2\x84C\x84E\x5\xEEx\x2\x84D\x84C\x3\x2\x2\x2\x84D\x84E\x3\x2"+
		"\x2\x2\x84E\x84F\x3\x2\x2\x2\x84F\x850\a-\x2\x2\x850\x852\x5\x10A\x86"+
		"\x2\x851\x853\x5\x120\x91\x2\x852\x851\x3\x2\x2\x2\x852\x853\x3\x2\x2"+
		"\x2\x853\x861\x3\x2\x2\x2\x854\x856\x5\x138\x9D\x2\x855\x854\x3\x2\x2"+
		"\x2\x855\x856\x3\x2\x2\x2\x856\x857\x3\x2\x2\x2\x857\x859\a\xE6\x2\x2"+
		"\x858\x85A\x5\x138\x9D\x2\x859\x858\x3\x2\x2\x2\x859\x85A\x3\x2\x2\x2"+
		"\x85A\x85B\x3\x2\x2\x2\x85B\x85D\x5\xFA~\x2\x85C\x85E\x5\x138\x9D\x2\x85D"+
		"\x85C\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x85F\x3\x2\x2\x2\x85F\x860"+
		"\a\xED\x2\x2\x860\x862\x3\x2\x2\x2\x861\x855\x3\x2\x2\x2\x861\x862\x3"+
		"\x2\x2\x2\x862\x86C\x3\x2\x2\x2\x863\x865\x5\x138\x9D\x2\x864\x863\x3"+
		"\x2\x2\x2\x864\x865\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x867\a\xE6"+
		"\x2\x2\x867\x868\x5\x106\x84\x2\x868\x869\a\xED\x2\x2\x869\x86B\x3\x2"+
		"\x2\x2\x86A\x864\x3\x2\x2\x2\x86B\x86E\x3\x2\x2\x2\x86C\x86A\x3\x2\x2"+
		"\x2\x86C\x86D\x3\x2\x2\x2\x86D\xE7\x3\x2\x2\x2\x86E\x86C\x3\x2\x2\x2\x86F"+
		"\x872\x5\xEAv\x2\x870\x872\x5\xECw\x2\x871\x86F\x3\x2\x2\x2\x871\x870"+
		"\x3\x2\x2\x2\x872\xE9\x3\x2\x2\x2\x873\x875\x5\xEEx\x2\x874\x873\x3\x2"+
		"\x2\x2\x874\x875\x3\x2\x2\x2\x875\x877\x3\x2\x2\x2\x876\x878\x5\x138\x9D"+
		"\x2\x877\x876\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\x879\x3\x2\x2\x2"+
		"\x879\x87B\a-\x2\x2\x87A\x87C\x5\x138\x9D\x2\x87B\x87A\x3\x2\x2\x2\x87B"+
		"\x87C\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x87F\x5\x10A\x86\x2\x87E"+
		"\x880\x5\x120\x91\x2\x87F\x87E\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880"+
		"\x884\x3\x2\x2\x2\x881\x882\x5\x138\x9D\x2\x882\x883\x5\xFA~\x2\x883\x885"+
		"\x3\x2\x2\x2\x884\x881\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x88A\x3"+
		"\x2\x2\x2\x886\x888\x5\x138\x9D\x2\x887\x886\x3\x2\x2\x2\x887\x888\x3"+
		"\x2\x2\x2\x888\x889\x3\x2\x2\x2\x889\x88B\x5\xFE\x80\x2\x88A\x887\x3\x2"+
		"\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x895\x3\x2\x2\x2\x88C\x88E\x5\x138\x9D"+
		"\x2\x88D\x88C\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x88F\x3\x2\x2\x2"+
		"\x88F\x890\a\xE6\x2\x2\x890\x891\x5\x106\x84\x2\x891\x892\a\xED\x2\x2"+
		"\x892\x894\x3\x2\x2\x2\x893\x88D\x3\x2\x2\x2\x894\x897\x3\x2\x2\x2\x895"+
		"\x893\x3\x2\x2\x2\x895\x896\x3\x2\x2\x2\x896\xEB\x3\x2\x2\x2\x897\x895"+
		"\x3\x2\x2\x2\x898\x89C\x5\x10A\x86\x2\x899\x89A\x5\x138\x9D\x2\x89A\x89B"+
		"\x5\xFA~\x2\x89B\x89D\x3\x2\x2\x2\x89C\x899\x3\x2\x2\x2\x89C\x89D\x3\x2"+
		"\x2\x2\x89D\x8A7\x3\x2\x2\x2\x89E\x8A0\x5\x138\x9D\x2\x89F\x89E\x3\x2"+
		"\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2\x2\x8A1\x8A2\a\xE6\x2"+
		"\x2\x8A2\x8A3\x5\x106\x84\x2\x8A3\x8A4\a\xED\x2\x2\x8A4\x8A6\x3\x2\x2"+
		"\x2\x8A5\x89F\x3\x2\x2\x2\x8A6\x8A9\x3\x2\x2\x2\x8A7\x8A5\x3\x2\x2\x2"+
		"\x8A7\x8A8\x3\x2\x2\x2\x8A8\xED\x3\x2\x2\x2\x8A9\x8A7\x3\x2\x2\x2\x8AA"+
		"\x8AF\x5\xF4{\x2\x8AB\x8AF\x5\xF0y\x2\x8AC\x8AF\x5\xF2z\x2\x8AD\x8AF\x5"+
		"\xF8}\x2\x8AE\x8AA\x3\x2\x2\x2\x8AE\x8AB\x3\x2\x2\x2\x8AE\x8AC\x3\x2\x2"+
		"\x2\x8AE\x8AD\x3\x2\x2\x2\x8AF\xEF\x3\x2\x2\x2\x8B0\x8B2\x5\x10A\x86\x2"+
		"\x8B1\x8B3\x5\x120\x91\x2\x8B2\x8B1\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2"+
		"\x8B3\x8B8\x3\x2\x2\x2\x8B4\x8B6\x5\x138\x9D\x2\x8B5\x8B4\x3\x2\x2\x2"+
		"\x8B5\x8B6\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B9\x5\xFE\x80\x2\x8B8"+
		"\x8B5\x3\x2\x2\x2\x8B8\x8B9\x3\x2\x2\x2\x8B9\x8C3\x3\x2\x2\x2\x8BA\x8BC"+
		"\x5\x138\x9D\x2\x8BB\x8BA\x3\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC\x8BD"+
		"\x3\x2\x2\x2\x8BD\x8BE\a\xE6\x2\x2\x8BE\x8BF\x5\x106\x84\x2\x8BF\x8C0"+
		"\a\xED\x2\x2\x8C0\x8C2\x3\x2\x2\x2\x8C1\x8BB\x3\x2\x2\x2\x8C2\x8C5\x3"+
		"\x2\x2\x2\x8C3\x8C1\x3\x2\x2\x2\x8C3\x8C4\x3\x2\x2\x2\x8C4\xF1\x3\x2\x2"+
		"\x2\x8C5\x8C3\x3\x2\x2\x2\x8C6\x8C9\x5\x10A\x86\x2\x8C7\x8C9\x5\x10E\x88"+
		"\x2\x8C8\x8C6\x3\x2\x2\x2\x8C8\x8C7\x3\x2\x2\x2\x8C9\x8CB\x3\x2\x2\x2"+
		"\x8CA\x8CC\x5\x120\x91\x2\x8CB\x8CA\x3\x2\x2\x2\x8CB\x8CC\x3\x2\x2\x2"+
		"\x8CC\x8CE\x3\x2\x2\x2\x8CD\x8CF\x5\x138\x9D\x2\x8CE\x8CD\x3\x2\x2\x2"+
		"\x8CE\x8CF\x3\x2\x2\x2\x8CF\x8D0\x3\x2\x2\x2\x8D0\x8D2\a\xE6\x2\x2\x8D1"+
		"\x8D3\x5\x138\x9D\x2\x8D2\x8D1\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2\x8D3"+
		"\x8D8\x3\x2\x2\x2\x8D4\x8D6\x5\xFA~\x2\x8D5\x8D7\x5\x138\x9D\x2\x8D6\x8D5"+
		"\x3\x2\x2\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7\x8D9\x3\x2\x2\x2\x8D8\x8D4\x3"+
		"\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\x8DF\a\xED"+
		"\x2\x2\x8DB\x8DD\x5\x138\x9D\x2\x8DC\x8DB\x3\x2\x2\x2\x8DC\x8DD\x3\x2"+
		"\x2\x2\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8E0\x5\xFE\x80\x2\x8DF\x8DC\x3\x2\x2"+
		"\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0\x8EA\x3\x2\x2\x2\x8E1\x8E3\x5\x138\x9D"+
		"\x2\x8E2\x8E1\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3\x8E4\x3\x2\x2\x2"+
		"\x8E4\x8E5\a\xE6\x2\x2\x8E5\x8E6\x5\x106\x84\x2\x8E6\x8E7\a\xED\x2\x2"+
		"\x8E7\x8E9\x3\x2\x2\x2\x8E8\x8E2\x3\x2\x2\x2\x8E9\x8EC\x3\x2\x2\x2\x8EA"+
		"\x8E8\x3\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\xF3\x3\x2\x2\x2\x8EC\x8EA"+
		"\x3\x2\x2\x2\x8ED\x8F0\x5\xF0y\x2\x8EE\x8F0\x5\xF2z\x2\x8EF\x8ED\x3\x2"+
		"\x2\x2\x8EF\x8EE\x3\x2\x2\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0\x8F5\x3\x2\x2"+
		"\x2\x8F1\x8F3\x5\xF6|\x2\x8F2\x8F4\x5\x138\x9D\x2\x8F3\x8F2\x3\x2\x2\x2"+
		"\x8F3\x8F4\x3\x2\x2\x2\x8F4\x8F6\x3\x2\x2\x2\x8F5\x8F1\x3\x2\x2\x2\x8F6"+
		"\x8F7\x3\x2\x2\x2\x8F7\x8F5\x3\x2\x2\x2\x8F7\x8F8\x3\x2\x2\x2\x8F8\x8FD"+
		"\x3\x2\x2\x2\x8F9\x8FB\x5\x138\x9D\x2\x8FA\x8F9\x3\x2\x2\x2\x8FA\x8FB"+
		"\x3\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x8FE\x5\xFE\x80\x2\x8FD\x8FA\x3"+
		"\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE\x908\x3\x2\x2\x2\x8FF\x901\x5\x138"+
		"\x9D\x2\x900\x8FF\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901\x902\x3\x2\x2"+
		"\x2\x902\x903\a\xE6\x2\x2\x903\x904\x5\x106\x84\x2\x904\x905\a\xED\x2"+
		"\x2\x905\x907\x3\x2\x2\x2\x906\x900\x3\x2\x2\x2\x907\x90A\x3\x2\x2\x2"+
		"\x908\x906\x3\x2\x2\x2\x908\x909\x3\x2\x2\x2\x909\xF5\x3\x2\x2\x2\x90A"+
		"\x908\x3\x2\x2\x2\x90B\x90D\t\xF\x2\x2\x90C\x90E\x5\x138\x9D\x2\x90D\x90C"+
		"\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\x911\x3\x2\x2\x2\x90F\x912\x5"+
		"\xF0y\x2\x910\x912\x5\xF2z\x2\x911\x90F\x3\x2\x2\x2\x911\x910\x3\x2\x2"+
		"\x2\x912\xF7\x3\x2\x2\x2\x913\x915\x5\x138\x9D\x2\x914\x913\x3\x2\x2\x2"+
		"\x914\x915\x3\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916\x917\x5\xFE\x80\x2\x917"+
		"\xF9\x3\x2\x2\x2\x918\x91A\x5\xFC\x7F\x2\x919\x918\x3\x2\x2\x2\x919\x91A"+
		"\x3\x2\x2\x2\x91A\x91C\x3\x2\x2\x2\x91B\x91D\x5\x138\x9D\x2\x91C\x91B"+
		"\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\x91E\x3\x2\x2\x2\x91E\x920\t\n"+
		"\x2\x2\x91F\x921\x5\x138\x9D\x2\x920\x91F\x3\x2\x2\x2\x920\x921\x3\x2"+
		"\x2\x2\x921\x923\x3\x2\x2\x2\x922\x919\x3\x2\x2\x2\x923\x926\x3\x2\x2"+
		"\x2\x924\x922\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\x927\x3\x2\x2\x2"+
		"\x926\x924\x3\x2\x2\x2\x927\x934\x5\xFC\x7F\x2\x928\x92A\x5\x138\x9D\x2"+
		"\x929\x928\x3\x2\x2\x2\x929\x92A\x3\x2\x2\x2\x92A\x92B\x3\x2\x2\x2\x92B"+
		"\x92D\t\n\x2\x2\x92C\x92E\x5\x138\x9D\x2\x92D\x92C\x3\x2\x2\x2\x92D\x92E"+
		"\x3\x2\x2\x2\x92E\x930\x3\x2\x2\x2\x92F\x931\x5\xFC\x7F\x2\x930\x92F\x3"+
		"\x2\x2\x2\x930\x931\x3\x2\x2\x2\x931\x933\x3\x2\x2\x2\x932\x929\x3\x2"+
		"\x2\x2\x933\x936\x3\x2\x2\x2\x934\x932\x3\x2\x2\x2\x934\x935\x3\x2\x2"+
		"\x2\x935\xFB\x3\x2\x2\x2\x936\x934\x3\x2\x2\x2\x937\x939\a\xE6\x2\x2\x938"+
		"\x937\x3\x2\x2\x2\x938\x939\x3\x2\x2\x2\x939\x93C\x3\x2\x2\x2\x93A\x93B"+
		"\t\x10\x2\x2\x93B\x93D\x5\x138\x9D\x2\x93C\x93A\x3\x2\x2\x2\x93C\x93D"+
		"\x3\x2\x2\x2\x93D\x93F\x3\x2\x2\x2\x93E\x940\a\xED\x2\x2\x93F\x93E\x3"+
		"\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x941\x3\x2\x2\x2\x941\x942\x5\xCC"+
		"g\x2\x942\xFD\x3\x2\x2\x2\x943\x945\a,\x2\x2\x944\x946\x5\x138\x9D\x2"+
		"\x945\x944\x3\x2\x2\x2\x945\x946\x3\x2\x2\x2\x946\x947\x3\x2\x2\x2\x947"+
		"\x949\x5\x10A\x86\x2\x948\x94A\x5\x120\x91\x2\x949\x948\x3\x2\x2\x2\x949"+
		"\x94A\x3\x2\x2\x2\x94A\xFF\x3\x2\x2\x2\x94B\x95D\a\xE6\x2\x2\x94C\x94E"+
		"\x5\x138\x9D\x2\x94D\x94C\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E\x94F"+
		"\x3\x2\x2\x2\x94F\x95A\x5\x102\x82\x2\x950\x952\x5\x138\x9D\x2\x951\x950"+
		"\x3\x2\x2\x2\x951\x952\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953\x955\a)"+
		"\x2\x2\x954\x956\x5\x138\x9D\x2\x955\x954\x3\x2\x2\x2\x955\x956\x3\x2"+
		"\x2\x2\x956\x957\x3\x2\x2\x2\x957\x959\x5\x102\x82\x2\x958\x951\x3\x2"+
		"\x2\x2\x959\x95C\x3\x2\x2\x2\x95A\x958\x3\x2\x2\x2\x95A\x95B\x3\x2\x2"+
		"\x2\x95B\x95E\x3\x2\x2\x2\x95C\x95A\x3\x2\x2\x2\x95D\x94D\x3\x2\x2\x2"+
		"\x95D\x95E\x3\x2\x2\x2\x95E\x960\x3\x2\x2\x2\x95F\x961\x5\x138\x9D\x2"+
		"\x960\x95F\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962"+
		"\x963\a\xED\x2\x2\x963\x101\x3\x2\x2\x2\x964\x965\a\x9F\x2\x2\x965\x967"+
		"\x5\x138\x9D\x2\x966\x964\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967\x96A"+
		"\x3\x2\x2\x2\x968\x969\t\x11\x2\x2\x969\x96B\x5\x138\x9D\x2\x96A\x968"+
		"\x3\x2\x2\x2\x96A\x96B\x3\x2\x2\x2\x96B\x96E\x3\x2\x2\x2\x96C\x96D\a\xA6"+
		"\x2\x2\x96D\x96F\x5\x138\x9D\x2\x96E\x96C\x3\x2\x2\x2\x96E\x96F\x3\x2"+
		"\x2\x2\x96F\x970\x3\x2\x2\x2\x970\x972\x5\x10A\x86\x2\x971\x973\x5\x120"+
		"\x91\x2\x972\x971\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973\x97C\x3\x2\x2"+
		"\x2\x974\x976\x5\x138\x9D\x2\x975\x974\x3\x2\x2\x2\x975\x976\x3\x2\x2"+
		"\x2\x976\x977\x3\x2\x2\x2\x977\x979\a\xE6\x2\x2\x978\x97A\x5\x138\x9D"+
		"\x2\x979\x978\x3\x2\x2\x2\x979\x97A\x3\x2\x2\x2\x97A\x97B\x3\x2\x2\x2"+
		"\x97B\x97D\a\xED\x2\x2\x97C\x975\x3\x2\x2\x2\x97C\x97D\x3\x2\x2\x2\x97D"+
		"\x982\x3\x2\x2\x2\x97E\x980\x5\x138\x9D\x2\x97F\x97E\x3\x2\x2\x2\x97F"+
		"\x980\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981\x983\x5\x10C\x87\x2\x982"+
		"\x97F\x3\x2\x2\x2\x982\x983\x3\x2\x2\x2\x983\x988\x3\x2\x2\x2\x984\x986"+
		"\x5\x138\x9D\x2\x985\x984\x3\x2\x2\x2\x985\x986\x3\x2\x2\x2\x986\x987"+
		"\x3\x2\x2\x2\x987\x989\x5\x104\x83\x2\x988\x985\x3\x2\x2\x2\x988\x989"+
		"\x3\x2\x2\x2\x989\x103\x3\x2\x2\x2\x98A\x98C\a\xE2\x2\x2\x98B\x98D\x5"+
		"\x138\x9D\x2\x98C\x98B\x3\x2\x2\x2\x98C\x98D\x3\x2\x2\x2\x98D\x98E\x3"+
		"\x2\x2\x2\x98E\x98F\x5\xCCg\x2\x98F\x105\x3\x2\x2\x2\x990\x99B\x5\x108"+
		"\x85\x2\x991\x993\x5\x138\x9D\x2\x992\x991\x3\x2\x2\x2\x992\x993\x3\x2"+
		"\x2\x2\x993\x994\x3\x2\x2\x2\x994\x996\a)\x2\x2\x995\x997\x5\x138\x9D"+
		"\x2\x996\x995\x3\x2\x2\x2\x996\x997\x3\x2\x2\x2\x997\x998\x3\x2\x2\x2"+
		"\x998\x99A\x5\x108\x85\x2\x999\x992\x3\x2\x2\x2\x99A\x99D\x3\x2\x2\x2"+
		"\x99B\x999\x3\x2\x2\x2\x99B\x99C\x3\x2\x2\x2\x99C\x107\x3\x2\x2\x2\x99D"+
		"\x99B\x3\x2\x2\x2\x99E\x99F\x5\xCCg\x2\x99F\x9A0\x5\x138\x9D\x2\x9A0\x9A1"+
		"\a\xCF\x2\x2\x9A1\x9A2\x5\x138\x9D\x2\x9A2\x9A4\x3\x2\x2\x2\x9A3\x99E"+
		"\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\x9A6\x5"+
		"\xCCg\x2\x9A6\x109\x3\x2\x2\x2\x9A7\x9AA\a\x101\x2\x2\x9A8\x9AA\x5\x124"+
		"\x93\x2\x9A9\x9A7\x3\x2\x2\x2\x9A9\x9A8\x3\x2\x2\x2\x9AA\x10B\x3\x2\x2"+
		"\x2\x9AB\x9AD\a:\x2\x2\x9AC\x9AE\x5\x138\x9D\x2\x9AD\x9AC\x3\x2\x2\x2"+
		"\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9B1\x3\x2\x2\x2\x9AF\x9B0\a\x97\x2\x2\x9B0"+
		"\x9B2\x5\x138\x9D\x2\x9B1\x9AF\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2\x2\x9B2"+
		"\x9B3\x3\x2\x2\x2\x9B3\x9B8\x5\x11E\x90\x2\x9B4\x9B6\x5\x138\x9D\x2\x9B5"+
		"\x9B4\x3\x2\x2\x2\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9B9"+
		"\x5\x114\x8B\x2\x9B8\x9B5\x3\x2\x2\x2\x9B8\x9B9\x3\x2\x2\x2\x9B9\x10D"+
		"\x3\x2\x2\x2\x9BA\x9BB\t\x12\x2\x2\x9BB\x10F\x3\x2\x2\x2\x9BC\x9BD\t\xE"+
		"\x2\x2\x9BD\x111\x3\x2\x2\x2\x9BE\x9C3\x5\x10A\x86\x2\x9BF\x9C0\t\xF\x2"+
		"\x2\x9C0\x9C2\x5\x10A\x86\x2\x9C1\x9BF\x3\x2\x2\x2\x9C2\x9C5\x3\x2\x2"+
		"\x2\x9C3\x9C1\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x113\x3\x2\x2\x2"+
		"\x9C5\x9C3\x3\x2\x2\x2\x9C6\x9C8\a\xE9\x2\x2\x9C7\x9C9\x5\x138\x9D\x2"+
		"\x9C8\x9C7\x3\x2\x2\x2\x9C8\x9C9\x3\x2\x2\x2\x9C9\x9CC\x3\x2\x2\x2\x9CA"+
		"\x9CD\x5\x11C\x8F\x2\x9CB\x9CD\x5\x10A\x86\x2\x9CC\x9CA\x3\x2\x2\x2\x9CC"+
		"\x9CB\x3\x2\x2\x2\x9CD\x115\x3\x2\x2\x2\x9CE\x9D7\x5\x10A\x86\x2\x9CF"+
		"\x9D1\x5\x138\x9D\x2\x9D0\x9CF\x3\x2\x2\x2\x9D0\x9D1\x3\x2\x2\x2\x9D1"+
		"\x9D2\x3\x2\x2\x2\x9D2\x9D4\a\xE8\x2\x2\x9D3\x9D5\x5\x138\x9D\x2\x9D4"+
		"\x9D3\x3\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5\x9D6\x3\x2\x2\x2\x9D6\x9D8"+
		"\x5\x10A\x86\x2\x9D7\x9D0\x3\x2\x2\x2\x9D7\x9D8\x3\x2\x2\x2\x9D8\x117"+
		"\x3\x2\x2\x2\x9D9\x9DC\x5\x10A\x86\x2\x9DA\x9DC\x5\x11C\x8F\x2\x9DB\x9D9"+
		"\x3\x2\x2\x2\x9DB\x9DA\x3\x2\x2\x2\x9DC\x9DD\x3\x2\x2\x2\x9DD\x9DE\a*"+
		"\x2\x2\x9DE\x119\x3\x2\x2\x2\x9DF\x9E8\x5\x11C\x8F\x2\x9E0\x9E8\a\xFA"+
		"\x2\x2\x9E1\x9E8\a\xF5\x2\x2\x9E2\x9E8\a\xD0\x2\x2\x9E3\x9E8\at\x2\x2"+
		"\x9E4\x9E8\a\x99\x2\x2\x9E5\x9E8\a\x9A\x2\x2\x9E6\x9E8\a`\x2\x2\x9E7\x9DF"+
		"\x3\x2\x2\x2\x9E7\x9E0\x3\x2\x2\x2\x9E7\x9E1\x3\x2\x2\x2\x9E7\x9E2\x3"+
		"\x2\x2\x2\x9E7\x9E3\x3\x2\x2\x2\x9E7\x9E4\x3\x2\x2\x2\x9E7\x9E5\x3\x2"+
		"\x2\x2\x9E7\x9E6\x3\x2\x2\x2\x9E8\x11B\x3\x2\x2\x2\x9E9\x9EA\t\x13\x2"+
		"\x2\x9EA\x11D\x3\x2\x2\x2\x9EB\x9EE\x5\x10E\x88\x2\x9EC\x9EE\x5\x112\x8A"+
		"\x2\x9ED\x9EB\x3\x2\x2\x2\x9ED\x9EC\x3\x2\x2\x2\x9EE\x9F7\x3\x2\x2\x2"+
		"\x9EF\x9F1\x5\x138\x9D\x2\x9F0\x9EF\x3\x2\x2\x2\x9F0\x9F1\x3\x2\x2\x2"+
		"\x9F1\x9F2\x3\x2\x2\x2\x9F2\x9F4\a\xE6\x2\x2\x9F3\x9F5\x5\x138\x9D\x2"+
		"\x9F4\x9F3\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2\x9F5\x9F6\x3\x2\x2\x2\x9F6"+
		"\x9F8\a\xED\x2\x2\x9F7\x9F0\x3\x2\x2\x2\x9F7\x9F8\x3\x2\x2\x2\x9F8\x11F"+
		"\x3\x2\x2\x2\x9F9\x9FA\t\x14\x2\x2\x9FA\x121\x3\x2\x2\x2\x9FB\x9FC\t\x15"+
		"\x2\x2\x9FC\x123\x3\x2\x2\x2\x9FD\x9FE\t\x16\x2\x2\x9FE\x125\x3\x2\x2"+
		"\x2\x9FF\xA01\x5\x138\x9D\x2\xA00\x9FF\x3\x2\x2\x2\xA00\xA01\x3\x2\x2"+
		"\x2\xA01\xA09\x3\x2\x2\x2\xA02\xA04\a\xFB\x2\x2\xA03\xA02\x3\x2\x2\x2"+
		"\xA04\xA05\x3\x2\x2\x2\xA05\xA03\x3\x2\x2\x2\xA05\xA06\x3\x2\x2\x2\xA06"+
		"\xA0A\x3\x2\x2\x2\xA07\xA0A\x5\x12C\x97\x2\xA08\xA0A\x5\x12A\x96\x2\xA09"+
		"\xA03\x3\x2\x2\x2\xA09\xA07\x3\x2\x2\x2\xA09\xA08\x3\x2\x2\x2\xA0A\xA0C"+
		"\x3\x2\x2\x2\xA0B\xA0D\x5\x138\x9D\x2\xA0C\xA0B\x3\x2\x2\x2\xA0C\xA0D"+
		"\x3\x2\x2\x2\xA0D\xA13\x3\x2\x2\x2\xA0E\xA10\x5\x138\x9D\x2\xA0F\xA0E"+
		"\x3\x2\x2\x2\xA0F\xA10\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2\xA11\xA13\x5"+
		"\x12E\x98\x2\xA12\xA00\x3\x2\x2\x2\xA12\xA0F\x3\x2\x2\x2\xA13\x127\x3"+
		"\x2\x2\x2\xA14\xA1D\x5\x126\x94\x2\xA15\xA17\x5\x138\x9D\x2\xA16\xA15"+
		"\x3\x2\x2\x2\xA16\xA17\x3\x2\x2\x2\xA17\xA18\x3\x2\x2\x2\xA18\xA1A\a*"+
		"\x2\x2\xA19\xA1B\x5\x138\x9D\x2\xA1A\xA19\x3\x2\x2\x2\xA1A\xA1B\x3\x2"+
		"\x2\x2\xA1B\xA1D\x3\x2\x2\x2\xA1C\xA14\x3\x2\x2\x2\xA1C\xA16\x3\x2\x2"+
		"\x2\xA1D\xA20\x3\x2\x2\x2\xA1E\xA1C\x3\x2\x2\x2\xA1E\xA1F\x3\x2\x2\x2"+
		"\xA1F\x129\x3\x2\x2\x2\xA20\xA1E\x3\x2\x2\x2\xA21\xA22\a\xFC\x2\x2\xA22"+
		"\x12B\x3\x2\x2\x2\xA23\xA24\t\x17\x2\x2\xA24\x12D\x3\x2\x2\x2\xA25\xA27"+
		"\a\xFE\x2\x2\xA26\xA28\x5\x130\x99\x2\xA27\xA26\x3\x2\x2\x2\xA28\xA29"+
		"\x3\x2\x2\x2\xA29\xA27\x3\x2\x2\x2\xA29\xA2A\x3\x2\x2\x2\xA2A\x12F\x3"+
		"\x2\x2\x2\xA2B\xA2C\a/\x2\x2\xA2C\xA2E\x5\x132\x9A\x2\xA2D\xA2F\x5\x134"+
		"\x9B\x2\xA2E\xA2D\x3\x2\x2\x2\xA2E\xA2F\x3\x2\x2\x2\xA2F\x131\x3\x2\x2"+
		"\x2\xA30\xA31\a\x101\x2\x2\xA31\x133\x3\x2\x2\x2\xA32\xA33\x5\x138\x9D"+
		"\x2\xA33\xA35\x5\x136\x9C\x2\xA34\xA36\x5\x138\x9D\x2\xA35\xA34\x3\x2"+
		"\x2\x2\xA35\xA36\x3\x2\x2\x2\xA36\xA70\x3\x2\x2\x2\xA37\xA38\x5\x138\x9D"+
		"\x2\xA38\xA41\x5\x136\x9C\x2\xA39\xA3B\x5\x138\x9D\x2\xA3A\xA39\x3\x2"+
		"\x2\x2\xA3A\xA3B\x3\x2\x2\x2\xA3B\xA3C\x3\x2\x2\x2\xA3C\xA3E\a)\x2\x2"+
		"\xA3D\xA3F\x5\x138\x9D\x2\xA3E\xA3D\x3\x2\x2\x2\xA3E\xA3F\x3\x2\x2\x2"+
		"\xA3F\xA40\x3\x2\x2\x2\xA40\xA42\x5\x136\x9C\x2\xA41\xA3A\x3\x2\x2\x2"+
		"\xA42\xA43\x3\x2\x2\x2\xA43\xA41\x3\x2\x2\x2\xA43\xA44\x3\x2\x2\x2\xA44"+
		"\xA46\x3\x2\x2\x2\xA45\xA47\x5\x138\x9D\x2\xA46\xA45\x3\x2\x2\x2\xA46"+
		"\xA47\x3\x2\x2\x2\xA47\xA70\x3\x2\x2\x2\xA48\xA4A\x5\x138\x9D\x2\xA49"+
		"\xA48\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2\x2\xA4A\xA4B\x3\x2\x2\x2\xA4B\xA4D"+
		"\a\xE6\x2\x2\xA4C\xA4E\x5\x138\x9D\x2\xA4D\xA4C\x3\x2\x2\x2\xA4D\xA4E"+
		"\x3\x2\x2\x2\xA4E\xA4F\x3\x2\x2\x2\xA4F\xA51\x5\x136\x9C\x2\xA50\xA52"+
		"\x5\x138\x9D\x2\xA51\xA50\x3\x2\x2\x2\xA51\xA52\x3\x2\x2\x2\xA52\xA53"+
		"\x3\x2\x2\x2\xA53\xA55\a\xED\x2\x2\xA54\xA56\x5\x138\x9D\x2\xA55\xA54"+
		"\x3\x2\x2\x2\xA55\xA56\x3\x2\x2\x2\xA56\xA70\x3\x2\x2\x2\xA57\xA59\x5"+
		"\x138\x9D\x2\xA58\xA57\x3\x2\x2\x2\xA58\xA59\x3\x2\x2\x2\xA59\xA5A\x3"+
		"\x2\x2\x2\xA5A\xA5B\a\xE6\x2\x2\xA5B\xA64\x5\x136\x9C\x2\xA5C\xA5E\x5"+
		"\x138\x9D\x2\xA5D\xA5C\x3\x2\x2\x2\xA5D\xA5E\x3\x2\x2\x2\xA5E\xA5F\x3"+
		"\x2\x2\x2\xA5F\xA61\a)\x2\x2\xA60\xA62\x5\x138\x9D\x2\xA61\xA60\x3\x2"+
		"\x2\x2\xA61\xA62\x3\x2\x2\x2\xA62\xA63\x3\x2\x2\x2\xA63\xA65\x5\x136\x9C"+
		"\x2\xA64\xA5D\x3\x2\x2\x2\xA65\xA66\x3\x2\x2\x2\xA66\xA64\x3\x2\x2\x2"+
		"\xA66\xA67\x3\x2\x2\x2\xA67\xA69\x3\x2\x2\x2\xA68\xA6A\x5\x138\x9D\x2"+
		"\xA69\xA68\x3\x2\x2\x2\xA69\xA6A\x3\x2\x2\x2\xA6A\xA6B\x3\x2\x2\x2\xA6B"+
		"\xA6D\a\xED\x2\x2\xA6C\xA6E\x5\x138\x9D\x2\xA6D\xA6C\x3\x2\x2\x2\xA6D"+
		"\xA6E\x3\x2\x2\x2\xA6E\xA70\x3\x2\x2\x2\xA6F\xA32\x3\x2\x2\x2\xA6F\xA37"+
		"\x3\x2\x2\x2\xA6F\xA49\x3\x2\x2\x2\xA6F\xA58\x3\x2\x2\x2\xA70\x135\x3"+
		"\x2\x2\x2\xA71\xA74\a\x101\x2\x2\xA72\xA74\x5\x11A\x8E\x2\xA73\xA71\x3"+
		"\x2\x2\x2\xA73\xA72\x3\x2\x2\x2\xA74\x137\x3\x2\x2\x2\xA75\xA77\t\x18"+
		"\x2\x2\xA76\xA75\x3\x2\x2\x2\xA77\xA78\x3\x2\x2\x2\xA78\xA76\x3\x2\x2"+
		"\x2\xA78\xA79\x3\x2\x2\x2\xA79\x139\x3\x2\x2\x2\x1C0\x13E\x144\x147\x14B"+
		"\x14F\x153\x157\x15D\x160\x16A\x16C\x172\x17A\x181\x187\x190\x198\x1A7"+
		"\x1B1\x1B9\x1C3\x1C9\x1CD\x1D1\x1D5\x1DA\x1E2\x228\x22E\x232\x235\x245"+
		"\x249\x24E\x251\x256\x25C\x260\x265\x26A\x26F\x272\x276\x27C\x280\x287"+
		"\x28D\x291\x294\x299\x2A4\x2A7\x2AA\x2AF\x2B5\x2B9\x2BE\x2C5\x2CB\x2CF"+
		"\x2D7\x2DB\x2DF\x2E3\x2E7\x300\x307\x310\x317\x31B\x31E\x326\x32A\x32F"+
		"\x339\x33F\x349\x34D\x357\x363\x369\x36E\x371\x375\x381\x389\x38B\x390"+
		"\x394\x398\x39C\x39F\x3A2\x3A5\x3A8\x3B2\x3B6\x3B9\x3BC\x3C0\x3D4\x3DA"+
		"\x3DE\x3EA\x3F4\x3F8\x3FE\x404\x40C\x410\x418\x41E\x421\x425\x429\x42C"+
		"\x430\x435\x437\x43B\x43F\x442\x446\x449\x451\x45F\x463\x468\x470\x474"+
		"\x478\x480\x484\x490\x494\x49C\x49E\x4A4\x4A8\x4AE\x4B2\x4B6\x4D0\x4DA"+
		"\x4DE\x4E3\x4EE\x4F2\x4F7\x506\x50B\x514\x518\x51C\x520\x524\x527\x52B"+
		"\x52F\x532\x536\x539\x53D\x53F\x544\x548\x54C\x550\x552\x558\x55C\x55F"+
		"\x564\x568\x56E\x571\x574\x579\x582\x586\x58C\x58F\x598\x59C\x5A2\x5A5"+
		"\x5AF\x5B3\x5B6\x5B9\x5BD\x5C5\x5C9\x5CD\x5CF\x5D2\x5D8\x5DE\x5E2\x5E6"+
		"\x5EB\x5F0\x5F4\x5F8\x5FE\x606\x608\x614\x618\x620\x624\x62C\x630\x634"+
		"\x638\x63C\x640\x648\x64C\x659\x660\x664\x66F\x67A\x67E\x683\x686\x68C"+
		"\x690\x693\x699\x69D\x6A5\x6A9\x6B2\x6B6\x6BA\x6BE\x6C1\x6C9\x6CD\x6D4"+
		"\x6DD\x6E4\x6E8\x6EB\x6EE\x6F1\x6F6\x702\x706\x70E\x710\x715\x71A\x71F"+
		"\x723\x729\x72E\x735\x739\x73F\x743\x747\x74C\x750\x755\x759\x75E\x762"+
		"\x767\x76B\x770\x774\x779\x77D\x782\x786\x78B\x78F\x794\x798\x79D\x7A1"+
		"\x7A6\x7AA\x7AD\x7AF\x7BA\x7BF\x7C4\x7CA\x7CE\x7D3\x7D8\x7DC\x7E0\x7E2"+
		"\x7E6\x7E8\x7EB\x7F0\x7FD\x801\x811\x817\x81B\x81E\x821\x827\x82D\x830"+
		"\x834\x838\x83C\x83F\x847\x84D\x852\x855\x859\x85D\x861\x864\x86C\x871"+
		"\x874\x877\x87B\x87F\x884\x887\x88A\x88D\x895\x89C\x89F\x8A7\x8AE\x8B2"+
		"\x8B5\x8B8\x8BB\x8C3\x8C8\x8CB\x8CE\x8D2\x8D6\x8D8\x8DC\x8DF\x8E2\x8EA"+
		"\x8EF\x8F3\x8F7\x8FA\x8FD\x900\x908\x90D\x911\x914\x919\x91C\x920\x924"+
		"\x929\x92D\x930\x934\x938\x93C\x93F\x945\x949\x94D\x951\x955\x95A\x95D"+
		"\x960\x966\x96A\x96E\x972\x975\x979\x97C\x97F\x982\x985\x988\x98C\x992"+
		"\x996\x99B\x9A3\x9A9\x9AD\x9B1\x9B5\x9B8\x9C3\x9C8\x9CC\x9D0\x9D4\x9D7"+
		"\x9DB\x9E7\x9ED\x9F0\x9F4\x9F7\xA00\xA05\xA09\xA0C\xA0F\xA12\xA16\xA1A"+
		"\xA1C\xA1E\xA29\xA2E\xA35\xA3A\xA3E\xA43\xA46\xA49\xA4D\xA51\xA55\xA58"+
		"\xA5D\xA61\xA66\xA69\xA6D\xA6F\xA73\xA78";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
