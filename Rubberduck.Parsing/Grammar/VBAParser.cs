//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\hosch\Documents\Visual Studio 2015\Projects\Rubberduck\Rubberduck.Parsing\Grammar\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=158, ELSEIF=88, CBYTE=7, CLOSE=65, STATIC=182, MINUS=214, OPTION_EXPLICIT=151, 
		L_SQUARE_BRACKET=220, DOEVENTS=23, DATELITERAL=227, ERROR=102, NOTHING=142, 
		EACH=86, SUB=186, STOP=184, LPAREN=212, MID=136, CVERR=21, AS=55, END_PROPERTY=93, 
		AT=45, DATABASE=67, GOSUB=115, CSNG=17, POW=218, DOLLAR=47, PROPERTY_LET=161, 
		THEN=189, XOR=204, EXIT_FOR=105, DEFINT=75, UNLOCK=194, CALL=62, LOCK_READ=131, 
		SET=178, BF=5, LOCK_READ_WRITE=133, ABS=1, LSET=134, RAISEEVENT=167, SEEK=176, 
		LONG=125, CBOOL=6, LIB=128, DIM=83, APPEND=54, OPEN=148, DIV=206, PROPERTY_SET=162, 
		CDBL=10, PERCENT=46, END_SELECT=94, STRING=185, SGN=37, REM=171, TO=190, 
		DEFDBL=73, BYVAL=59, FRIEND=110, LOOP=126, CLASS=64, DO=84, VARIANT=196, 
		END_WITH=97, DEFBOOL=70, OPTIONAL=149, ADDRESSOF=50, CONST=66, RSET=175, 
		INTEGER=123, CDEC=11, ATTRIBUTE=53, OUTPUT=155, FOR=111, PTRSAFE=163, 
		EQ=208, BOOLEAN=58, CIRCLE=13, NAME=138, END_FUNCTION=91, DEFSNG=80, DEFBYTE=71, 
		NOT=141, CINT=12, END=98, PRESERVE=157, ON_LOCAL_ERROR=147, FLOATLITERAL=225, 
		BINARY=57, B_CHAR=4, LENB=30, RETURN=174, EXCLAMATIONPOINT=42, NEXT=139, 
		GLOBAL=114, INPUTB=26, IDENTIFIER=233, WS=231, EMPTY=89, CURRENCY=19, 
		CCUR=8, MOD=137, WITHEVENTS=202, COLON=40, DEFLNGLNG=77, STEP=183, OPTION_BASE=150, 
		GT=210, PUT=165, WITH=201, CSTR=18, LOCK_WRITE=132, LINE_CONTINUATION=234, 
		TYPEOF=193, DEFVAR=82, DEFLNG=76, UBOUND=38, FALSE=109, ERRORCHAR=235, 
		UNDERSCORE=230, INTEGERLITERAL=226, END_IF=92, LOCK=124, TEXT=188, SINGLEQUOTE=229, 
		MULT=215, SEMICOLON=41, BYTE=61, HEXLITERAL=224, ELSE=87, IF=117, TYPE=192, 
		AMPERSAND=48, DEFLNGPTR=78, ENUM=99, DEFOBJ=79, IN=120, OPTION=34, DOT=43, 
		EXIT_DO=104, GUIDLITERAL=232, IS=122, EQV=100, WEND=198, FUNCTION=112, 
		HASH=44, CASE=63, GEQ=209, GET=113, PUBLIC=164, ON_ERROR=146, EXIT=24, 
		MIDB=33, END_ENUM=90, GOTO=116, INTDIV=207, LONGPTR=32, WIDTH=200, BEGIN=56, 
		EXIT_SUB=108, ASSIGN=205, WRITE=203, DOUBLE=85, EXIT_PROPERTY=107, COMMA=39, 
		RANDOM=166, PROPERTY_GET=160, SELECT=177, PRIVATE=159, ERASE=101, TAB=187, 
		BYREF=60, VERSION=197, NEQ=216, END_TYPE=96, NEW=140, ARRAY=3, INPUT=121, 
		SINGLE=180, ALIAS=51, SPC=181, LT=213, RESET=172, END_SUB=95, EVENT=103, 
		READ_WRITE=169, OPTION_COMPARE=152, ME=135, SCALE=36, CDATE=9, NULL=143, 
		NEWLINE=228, TRUE=191, RPAREN=219, OBJECT=144, IMP=118, STRINGLITERAL=222, 
		OCTLITERAL=223, READ=168, DATE=68, LIKE=129, AND=52, OPTION_PRIVATE_MODULE=153, 
		CLNGLNG=15, PLUS=217, ANY=2, RESUME=173, INT=27, SHARED=179, EXIT_FUNCTION=106, 
		PSET=35, ACCESS=49, LINE_INPUT=130, ON=145, OR=154, PARAMARRAY=156, LBOUND=28, 
		R_SQUARE_BRACKET=221, IMPLEMENTS=119, UNTIL=195, DEBUG=22, DEFCUR=74, 
		CLNGPTR=16, LONGLONG=31, DECLARE=69, DEFDATE=72, FIX=25, LEN=29, REDIM=170, 
		LEQ=211, DEFSTR=81, LET=127, WHILE=199, CVAR=20, CLNG=14;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "B_CHAR", "BF", "CBOOL", "CBYTE", 
		"CCUR", "CDATE", "CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", 
		"CLNGPTR", "CSNG", "CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", 
		"EXIT", "FIX", "INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", 
		"MIDB", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", "','", "':'", "';'", 
		"'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", "ACCESS", "ADDRESSOF", 
		"ALIAS", "AND", "ATTRIBUTE", "APPEND", "AS", "BEGIN", "BINARY", "BOOLEAN", 
		"BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CLASS", "CLOSE", "CONST", "DATABASE", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFCUR", 
		"DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "EMPTY", "END_ENUM", 
		"END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", "END_TYPE", 
		"END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", 
		"EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FRIEND", 
		"FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", 
		"IN", "INPUT", "IS", "INTEGER", "LOCK", "LONG", "LOOP", "LET", "LIB", 
		"LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", 
		"ME", "MID", "MOD", "NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", "OBJECT", 
		"ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", "READ", 
		"READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RSET", "SEEK", 
		"SELECT", "SET", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", 
		"STRING", "SUB", "TAB", "TEXT", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", 
		"WITHEVENTS", "WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", 
		"LEQ", "'('", "'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "'['", 
		"']'", "STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", 
		"DATELITERAL", "NEWLINE", "'''", "'_'", "WS", "GUIDLITERAL", "IDENTIFIER", 
		"LINE_CONTINUATION", "ERRORCHAR"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_attributeStmt = 6, 
		RULE_attributeName = 7, RULE_attributeValue = 8, RULE_moduleDeclarations = 9, 
		RULE_moduleOption = 10, RULE_moduleDeclarationsElement = 11, RULE_moduleBody = 12, 
		RULE_moduleBodyElement = 13, RULE_block = 14, RULE_blockStmt = 15, RULE_fileStmt = 16, 
		RULE_openStmt = 17, RULE_pathName = 18, RULE_modeClause = 19, RULE_fileMode = 20, 
		RULE_accessClause = 21, RULE_access = 22, RULE_lock = 23, RULE_lenClause = 24, 
		RULE_recLength = 25, RULE_fileNumber = 26, RULE_markedFileNumber = 27, 
		RULE_unmarkedFileNumber = 28, RULE_closeStmt = 29, RULE_resetStmt = 30, 
		RULE_fileNumberList = 31, RULE_seekStmt = 32, RULE_position = 33, RULE_lockStmt = 34, 
		RULE_recordRange = 35, RULE_startRecordNumber = 36, RULE_endRecordNumber = 37, 
		RULE_unlockStmt = 38, RULE_lineInputStmt = 39, RULE_variableName = 40, 
		RULE_widthStmt = 41, RULE_lineWidth = 42, RULE_debugPrintStmt = 43, RULE_debugPrint = 44, 
		RULE_debugModule = 45, RULE_debugPrintSub = 46, RULE_printStmt = 47, RULE_outputList = 48, 
		RULE_outputItem = 49, RULE_outputClause = 50, RULE_charPosition = 51, 
		RULE_outputExpression = 52, RULE_spcClause = 53, RULE_spcNumber = 54, 
		RULE_tabClause = 55, RULE_tabNumberClause = 56, RULE_tabNumber = 57, RULE_writeStmt = 58, 
		RULE_inputStmt = 59, RULE_inputList = 60, RULE_inputVariable = 61, RULE_putStmt = 62, 
		RULE_recordNumber = 63, RULE_data = 64, RULE_getStmt = 65, RULE_variable = 66, 
		RULE_constStmt = 67, RULE_constSubStmt = 68, RULE_declareStmt = 69, RULE_argList = 70, 
		RULE_arg = 71, RULE_argDefaultValue = 72, RULE_defDirective = 73, RULE_defType = 74, 
		RULE_letterSpec = 75, RULE_singleLetter = 76, RULE_universalLetterRange = 77, 
		RULE_upperCaseA = 78, RULE_upperCaseZ = 79, RULE_letterRange = 80, RULE_firstLetter = 81, 
		RULE_lastLetter = 82, RULE_doLoopStmt = 83, RULE_enumerationStmt = 84, 
		RULE_enumerationStmt_Constant = 85, RULE_endStmt = 86, RULE_eraseStmt = 87, 
		RULE_errorStmt = 88, RULE_eventStmt = 89, RULE_exitStmt = 90, RULE_forEachStmt = 91, 
		RULE_forNextStmt = 92, RULE_functionStmt = 93, RULE_functionName = 94, 
		RULE_goSubStmt = 95, RULE_goToStmt = 96, RULE_ifStmt = 97, RULE_elseIfBlock = 98, 
		RULE_elseBlock = 99, RULE_singleLineIfStmt = 100, RULE_ifWithNonEmptyThen = 101, 
		RULE_ifWithEmptyThen = 102, RULE_singleLineElseClause = 103, RULE_listOrLabel = 104, 
		RULE_sameLineStatement = 105, RULE_booleanExpression = 106, RULE_implementsStmt = 107, 
		RULE_letStmt = 108, RULE_lsetStmt = 109, RULE_onErrorStmt = 110, RULE_onGoToStmt = 111, 
		RULE_onGoSubStmt = 112, RULE_propertyGetStmt = 113, RULE_propertySetStmt = 114, 
		RULE_propertyLetStmt = 115, RULE_raiseEventStmt = 116, RULE_eventArgumentList = 117, 
		RULE_eventArgument = 118, RULE_redimStmt = 119, RULE_redimDeclarationList = 120, 
		RULE_redimVariableDeclaration = 121, RULE_midStatement = 122, RULE_modeSpecifier = 123, 
		RULE_integerExpression = 124, RULE_callStmt = 125, RULE_resumeStmt = 126, 
		RULE_returnStmt = 127, RULE_rsetStmt = 128, RULE_stopStmt = 129, RULE_nameStmt = 130, 
		RULE_selectCaseStmt = 131, RULE_selectExpression = 132, RULE_caseClause = 133, 
		RULE_caseElseClause = 134, RULE_rangeClause = 135, RULE_selectStartValue = 136, 
		RULE_selectEndValue = 137, RULE_setStmt = 138, RULE_subStmt = 139, RULE_subroutineName = 140, 
		RULE_publicTypeDeclaration = 141, RULE_privateTypeDeclaration = 142, RULE_udtDeclaration = 143, 
		RULE_udtMemberList = 144, RULE_udtMember = 145, RULE_untypedNameMemberDeclaration = 146, 
		RULE_reservedNameMemberDeclaration = 147, RULE_optionalArrayClause = 148, 
		RULE_arrayDim = 149, RULE_boundsList = 150, RULE_dimSpec = 151, RULE_lowerBound = 152, 
		RULE_upperBound = 153, RULE_constantExpression = 154, RULE_variableStmt = 155, 
		RULE_variableListStmt = 156, RULE_variableSubStmt = 157, RULE_whileWendStmt = 158, 
		RULE_withStmt = 159, RULE_lineSpecialForm = 160, RULE_circleSpecialForm = 161, 
		RULE_scaleSpecialForm = 162, RULE_tuple = 163, RULE_lineSpecialFormOption = 164, 
		RULE_subscripts = 165, RULE_subscript = 166, RULE_unrestrictedIdentifier = 167, 
		RULE_identifier = 168, RULE_untypedIdentifier = 169, RULE_typedIdentifier = 170, 
		RULE_identifierValue = 171, RULE_foreignName = 172, RULE_foreignIdentifier = 173, 
		RULE_asTypeClause = 174, RULE_baseType = 175, RULE_comparisonOperator = 176, 
		RULE_complexType = 177, RULE_fieldLength = 178, RULE_statementLabelDefinition = 179, 
		RULE_identifierStatementLabel = 180, RULE_lineNumberLabel = 181, RULE_numberLiteral = 182, 
		RULE_type = 183, RULE_typeHint = 184, RULE_visibility = 185, RULE_expression = 186, 
		RULE_literalExpression = 187, RULE_literalIdentifier = 188, RULE_booleanLiteralIdentifier = 189, 
		RULE_objectLiteralIdentifier = 190, RULE_variantLiteralIdentifier = 191, 
		RULE_lExpression = 192, RULE_builtInType = 193, RULE_argumentList = 194, 
		RULE_requiredArgument = 195, RULE_argument = 196, RULE_positionalArgument = 197, 
		RULE_namedArgument = 198, RULE_argumentExpression = 199, RULE_lowerBoundArgumentExpression = 200, 
		RULE_upperBoundArgumentExpression = 201, RULE_addressOfExpression = 202, 
		RULE_keyword = 203, RULE_markerKeyword = 204, RULE_statementKeyword = 205, 
		RULE_endOfLine = 206, RULE_endOfStatement = 207, RULE_commentOrAnnotation = 208, 
		RULE_remComment = 209, RULE_comment = 210, RULE_commentBody = 211, RULE_annotationList = 212, 
		RULE_annotation = 213, RULE_annotationName = 214, RULE_annotationArgList = 215, 
		RULE_annotationArg = 216, RULE_mandatoryLineContinuation = 217, RULE_whiteSpace = 218;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "attributeStmt", "attributeName", "attributeValue", 
		"moduleDeclarations", "moduleOption", "moduleDeclarationsElement", "moduleBody", 
		"moduleBodyElement", "block", "blockStmt", "fileStmt", "openStmt", "pathName", 
		"modeClause", "fileMode", "accessClause", "access", "lock", "lenClause", 
		"recLength", "fileNumber", "markedFileNumber", "unmarkedFileNumber", "closeStmt", 
		"resetStmt", "fileNumberList", "seekStmt", "position", "lockStmt", "recordRange", 
		"startRecordNumber", "endRecordNumber", "unlockStmt", "lineInputStmt", 
		"variableName", "widthStmt", "lineWidth", "debugPrintStmt", "debugPrint", 
		"debugModule", "debugPrintSub", "printStmt", "outputList", "outputItem", 
		"outputClause", "charPosition", "outputExpression", "spcClause", "spcNumber", 
		"tabClause", "tabNumberClause", "tabNumber", "writeStmt", "inputStmt", 
		"inputList", "inputVariable", "putStmt", "recordNumber", "data", "getStmt", 
		"variable", "constStmt", "constSubStmt", "declareStmt", "argList", "arg", 
		"argDefaultValue", "defDirective", "defType", "letterSpec", "singleLetter", 
		"universalLetterRange", "upperCaseA", "upperCaseZ", "letterRange", "firstLetter", 
		"lastLetter", "doLoopStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"endStmt", "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "functionName", "goSubStmt", "goToStmt", 
		"ifStmt", "elseIfBlock", "elseBlock", "singleLineIfStmt", "ifWithNonEmptyThen", 
		"ifWithEmptyThen", "singleLineElseClause", "listOrLabel", "sameLineStatement", 
		"booleanExpression", "implementsStmt", "letStmt", "lsetStmt", "onErrorStmt", 
		"onGoToStmt", "onGoSubStmt", "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
		"raiseEventStmt", "eventArgumentList", "eventArgument", "redimStmt", "redimDeclarationList", 
		"redimVariableDeclaration", "midStatement", "modeSpecifier", "integerExpression", 
		"callStmt", "resumeStmt", "returnStmt", "rsetStmt", "stopStmt", "nameStmt", 
		"selectCaseStmt", "selectExpression", "caseClause", "caseElseClause", 
		"rangeClause", "selectStartValue", "selectEndValue", "setStmt", "subStmt", 
		"subroutineName", "publicTypeDeclaration", "privateTypeDeclaration", "udtDeclaration", 
		"udtMemberList", "udtMember", "untypedNameMemberDeclaration", "reservedNameMemberDeclaration", 
		"optionalArrayClause", "arrayDim", "boundsList", "dimSpec", "lowerBound", 
		"upperBound", "constantExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "withStmt", "lineSpecialForm", "circleSpecialForm", 
		"scaleSpecialForm", "tuple", "lineSpecialFormOption", "subscripts", "subscript", 
		"unrestrictedIdentifier", "identifier", "untypedIdentifier", "typedIdentifier", 
		"identifierValue", "foreignName", "foreignIdentifier", "asTypeClause", 
		"baseType", "comparisonOperator", "complexType", "fieldLength", "statementLabelDefinition", 
		"identifierStatementLabel", "lineNumberLabel", "numberLiteral", "type", 
		"typeHint", "visibility", "expression", "literalExpression", "literalIdentifier", 
		"booleanLiteralIdentifier", "objectLiteralIdentifier", "variantLiteralIdentifier", 
		"lExpression", "builtInType", "argumentList", "requiredArgument", "argument", 
		"positionalArgument", "namedArgument", "argumentExpression", "lowerBoundArgumentExpression", 
		"upperBoundArgumentExpression", "addressOfExpression", "keyword", "markerKeyword", 
		"statementKeyword", "endOfLine", "endOfStatement", "commentOrAnnotation", 
		"remComment", "comment", "commentBody", "annotationList", "annotation", 
		"annotationName", "annotationArgList", "annotationArg", "mandatoryLineContinuation", 
		"whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; module();
			State = 439; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleAttributesContext moduleAttributes(int i) {
			return GetRuleContext<ModuleAttributesContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public IReadOnlyList<ModuleAttributesContext> moduleAttributes() {
			return GetRuleContexts<ModuleAttributesContext>();
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; endOfStatement();
			State = 442; moduleAttributes();
			State = 444;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 443; moduleHeader();
				}
				break;
			}
			State = 446; moduleAttributes();
			State = 448;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 447; moduleConfig();
				}
				break;
			}
			State = 450; moduleAttributes();
			State = 451; moduleDeclarations();
			State = 452; moduleAttributes();
			State = 453; moduleBody();
			State = 454; moduleAttributes();
			State = 456;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 455; whiteSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(VERSION);
			State = 459; whiteSpace();
			State = 460; numberLiteral();
			State = 462;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 461; whiteSpace();
				}
				break;
			}
			State = 465;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 464; Match(CLASS);
				}
				break;
			}
			State = 467; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; Match(BEGIN);
			State = 477;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 470; whiteSpace();
				State = 471; Match(GUIDLITERAL);
				State = 472; whiteSpace();
				State = 473; unrestrictedIdentifier();
				State = 475;
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 474; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 479; endOfStatement();
			State = 481;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 480; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 483;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 485; Match(END);
			State = 486; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; unrestrictedIdentifier();
			State = 492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 489; whiteSpace();
				}
				}
				State = 494;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 495; Match(EQ);
			State = 499;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 496; whiteSpace();
					}
					} 
				}
				State = 501;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 502; expression(0);
			State = 505;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 503; Match(COLON);
				State = 504; numberLiteral();
				}
				break;
			}
			State = 507; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 509; attributeStmt();
					State = 510; endOfStatement();
					}
					} 
				}
				State = 516;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AttributeValueContext> attributeValue() {
			return GetRuleContexts<AttributeValueContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeValueContext attributeValue(int i) {
			return GetRuleContext<AttributeValueContext>(i);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; Match(ATTRIBUTE);
			State = 518; whiteSpace();
			State = 519; attributeName();
			State = 521;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 520; whiteSpace();
				}
			}

			State = 523; Match(EQ);
			State = 525;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 524; whiteSpace();
				}
				break;
			}
			State = 527; attributeValue();
			State = 538;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 529;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 528; whiteSpace();
						}
					}

					State = 531; Match(COMMA);
					State = 533;
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						State = 532; whiteSpace();
						}
						break;
					}
					State = 535; attributeValue();
					}
					} 
				}
				State = 540;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541; lExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_attributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 545; moduleDeclarationsElement();
					State = 546; endOfStatement();
					}
					} 
				}
				State = 552;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleOption);
		int _la;
		try {
			State = 563;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 553; Match(OPTION_BASE);
				State = 554; whiteSpace();
				State = 555; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 557; Match(OPTION_COMPARE);
				State = 558; whiteSpace();
				State = 559;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 561; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 562; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public DefDirectiveContext defDirective() {
			return GetRuleContext<DefDirectiveContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public PrivateTypeDeclarationContext privateTypeDeclaration() {
			return GetRuleContext<PrivateTypeDeclarationContext>(0);
		}
		public PublicTypeDeclarationContext publicTypeDeclaration() {
			return GetRuleContext<PublicTypeDeclarationContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleDeclarationsElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 565; whiteSpace();
				}
			}

			State = 579;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 568; attributeStmt();
				}
				break;

			case 2:
				{
				State = 569; declareStmt();
				}
				break;

			case 3:
				{
				State = 570; defDirective();
				}
				break;

			case 4:
				{
				State = 571; enumerationStmt();
				}
				break;

			case 5:
				{
				State = 572; eventStmt();
				}
				break;

			case 6:
				{
				State = 573; constStmt();
				}
				break;

			case 7:
				{
				State = 574; implementsStmt();
				}
				break;

			case 8:
				{
				State = 575; variableStmt();
				}
				break;

			case 9:
				{
				State = 576; moduleOption();
				}
				break;

			case 10:
				{
				State = 577; publicTypeDeclaration();
				}
				break;

			case 11:
				{
				State = 578; privateTypeDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 581; whiteSpace();
				}
				break;
			}
			State = 589;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 584; moduleBodyElement();
					State = 585; endOfStatement();
					}
					} 
				}
				State = 591;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleBodyElement);
		try {
			State = 597;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 594; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 595; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 596; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 599; blockStmt();
					State = 600; endOfStatement();
					}
					} 
				}
				State = 606;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public LineSpecialFormContext lineSpecialForm() {
			return GetRuleContext<LineSpecialFormContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public SingleLineIfStmtContext singleLineIfStmt() {
			return GetRuleContext<SingleLineIfStmtContext>(0);
		}
		public FileStmtContext fileStmt() {
			return GetRuleContext<FileStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public ScaleSpecialFormContext scaleSpecialForm() {
			return GetRuleContext<ScaleSpecialFormContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public CircleSpecialFormContext circleSpecialForm() {
			return GetRuleContext<CircleSpecialFormContext>(0);
		}
		public CallStmtContext callStmt() {
			return GetRuleContext<CallStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_blockStmt);
		try {
			State = 644;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607; statementLabelDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 608; fileStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 609; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 610; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 611; doLoopStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 612; endStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 613; eraseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 614; errorStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 615; exitStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 616; forEachStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 617; forNextStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 618; goSubStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 619; goToStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 620; ifStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 621; singleLineIfStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 622; implementsStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 623; letStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 624; lsetStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 625; onErrorStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 626; onGoToStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 627; onGoSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 628; raiseEventStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 629; redimStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 630; resumeStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 631; returnStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 632; rsetStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 633; selectCaseStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 634; setStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 635; stopStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 636; variableStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 637; whileWendStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 638; withStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 639; lineSpecialForm();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 640; circleSpecialForm();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 641; scaleSpecialForm();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 642; callStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 643; nameStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileStmtContext : ParserRuleContext {
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public DebugPrintStmtContext debugPrintStmt() {
			return GetRuleContext<DebugPrintStmtContext>(0);
		}
		public FileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileStmtContext fileStmt() {
		FileStmtContext _localctx = new FileStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_fileStmt);
		try {
			State = 660;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646; openStmt();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 647; resetStmt();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 648; closeStmt();
				}
				break;
			case SEEK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 649; seekStmt();
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 650; lockStmt();
				}
				break;
			case UNLOCK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 651; unlockStmt();
				}
				break;
			case LINE_INPUT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 652; lineInputStmt();
				}
				break;
			case WIDTH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 653; widthStmt();
				}
				break;
			case DEBUG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 654; debugPrintStmt();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 655; printStmt();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 656; writeStmt();
				}
				break;
			case INPUT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 657; inputStmt();
				}
				break;
			case PUT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 658; putStmt();
				}
				break;
			case GET:
				EnterOuterAlt(_localctx, 14);
				{
				State = 659; getStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ModeClauseContext modeClause() {
			return GetRuleContext<ModeClauseContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public AccessClauseContext accessClause() {
			return GetRuleContext<AccessClauseContext>(0);
		}
		public LockContext @lock() {
			return GetRuleContext<LockContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LenClauseContext lenClause() {
			return GetRuleContext<LenClauseContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PathNameContext pathName() {
			return GetRuleContext<PathNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_openStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662; Match(OPEN);
			State = 663; whiteSpace();
			State = 664; pathName();
			State = 668;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 665; whiteSpace();
				State = 666; modeClause();
				}
				break;
			}
			State = 673;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 670; whiteSpace();
				State = 671; accessClause();
				}
				break;
			}
			State = 678;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 675; whiteSpace();
				State = 676; @lock();
				}
				break;
			}
			State = 680; whiteSpace();
			State = 681; Match(AS);
			State = 682; whiteSpace();
			State = 683; fileNumber();
			State = 687;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 684; whiteSpace();
				State = 685; lenClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PathNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPathName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPathName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathNameContext pathName() {
		PathNameContext _localctx = new PathNameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_pathName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeClauseContext : ParserRuleContext {
		public FileModeContext fileMode() {
			return GetRuleContext<FileModeContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeClauseContext modeClause() {
		ModeClauseContext _localctx = new ModeClauseContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_modeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691; Match(FOR);
			State = 692; whiteSpace();
			State = 693; fileMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileModeContext : ParserRuleContext {
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public FileModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileModeContext fileMode() {
		FileModeContext _localctx = new FileModeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_fileMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (INPUT - 121)) | (1L << (OUTPUT - 121)) | (1L << (RANDOM - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessClauseContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public AccessClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccessClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccessClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessClauseContext accessClause() {
		AccessClauseContext _localctx = new AccessClauseContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_accessClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; Match(ACCESS);
			State = 698; whiteSpace();
			State = 699; access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			_la = _input.La(1);
			if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (READ - 168)) | (1L << (READ_WRITE - 168)) | (1L << (WRITE - 168)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public LockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockContext @lock() {
		LockContext _localctx = new LockContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_lock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			_la = _input.La(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LOCK_READ - 131)) | (1L << (LOCK_WRITE - 131)) | (1L << (LOCK_READ_WRITE - 131)) | (1L << (SHARED - 131)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public RecLengthContext recLength() {
			return GetRuleContext<RecLengthContext>(0);
		}
		public LenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLenClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLenClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenClauseContext lenClause() {
		LenClauseContext _localctx = new LenClauseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_lenClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705; Match(LEN);
			State = 707;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 706; whiteSpace();
				}
			}

			State = 709; Match(EQ);
			State = 711;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 710; whiteSpace();
				}
				break;
			}
			State = 713; recLength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecLengthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecLengthContext recLength() {
		RecLengthContext _localctx = new RecLengthContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_recLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public UnmarkedFileNumberContext unmarkedFileNumber() {
			return GetRuleContext<UnmarkedFileNumberContext>(0);
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_fileNumber);
		try {
			State = 719;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717; markedFileNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718; unmarkedFileNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkedFileNumberContext markedFileNumber() {
		MarkedFileNumberContext _localctx = new MarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_markedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721; Match(HASH);
			State = 722; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnmarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnmarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unmarkedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnmarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnmarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnmarkedFileNumberContext unmarkedFileNumber() {
		UnmarkedFileNumberContext _localctx = new UnmarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_unmarkedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FileNumberListContext fileNumberList() {
			return GetRuleContext<FileNumberListContext>(0);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_closeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; Match(CLOSE);
			State = 730;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 727; whiteSpace();
				State = 728; fileNumberList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public FileNumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberListContext fileNumberList() {
		FileNumberListContext _localctx = new FileNumberListContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_fileNumberList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; fileNumber();
			State = 745;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 736;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 735; whiteSpace();
						}
					}

					State = 738; Match(COMMA);
					State = 740;
					switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						State = 739; whiteSpace();
						}
						break;
					}
					State = 742; fileNumber();
					}
					} 
				}
				State = 747;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; Match(SEEK);
			State = 749; whiteSpace();
			State = 750; fileNumber();
			State = 752;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 751; whiteSpace();
				}
			}

			State = 754; Match(COMMA);
			State = 756;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 755; whiteSpace();
				}
				break;
			}
			State = 758; position();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_position);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762; Match(LOCK);
			State = 763; whiteSpace();
			State = 764; fileNumber();
			State = 773;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 766;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 765; whiteSpace();
					}
				}

				State = 768; Match(COMMA);
				State = 770;
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 769; whiteSpace();
					}
					break;
				}
				State = 772; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public StartRecordNumberContext startRecordNumber() {
			return GetRuleContext<StartRecordNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public EndRecordNumberContext endRecordNumber() {
			return GetRuleContext<EndRecordNumberContext>(0);
		}
		public RecordRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordRangeContext recordRange() {
		RecordRangeContext _localctx = new RecordRangeContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_recordRange);
		try {
			State = 785;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 775; startRecordNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 776; startRecordNumber();
					State = 777; whiteSpace();
					}
					break;
				}
				State = 781; Match(TO);
				State = 782; whiteSpace();
				State = 783; endRecordNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRecordNumberContext startRecordNumber() {
		StartRecordNumberContext _localctx = new StartRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_startRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRecordNumberContext endRecordNumber() {
		EndRecordNumberContext _localctx = new EndRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_endRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791; Match(UNLOCK);
			State = 792; whiteSpace();
			State = 793; fileNumber();
			State = 802;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 795;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 794; whiteSpace();
					}
				}

				State = 797; Match(COMMA);
				State = 799;
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 798; whiteSpace();
					}
					break;
				}
				State = 801; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804; Match(LINE_INPUT);
			State = 805; whiteSpace();
			State = 806; markedFileNumber();
			State = 808;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 807; whiteSpace();
				}
			}

			State = 810; Match(COMMA);
			State = 812;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 811; whiteSpace();
				}
				break;
			}
			State = 814; variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public LineWidthContext lineWidth() {
			return GetRuleContext<LineWidthContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(WIDTH);
			State = 819; whiteSpace();
			State = 820; markedFileNumber();
			State = 822;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 821; whiteSpace();
				}
			}

			State = 824; Match(COMMA);
			State = 826;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 825; whiteSpace();
				}
				break;
			}
			State = 828; lineWidth();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineWidthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineWidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineWidth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineWidth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineWidth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWidth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineWidthContext lineWidth() {
		LineWidthContext _localctx = new LineWidthContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_lineWidth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintStmtContext : ParserRuleContext {
		public DebugPrintContext debugPrint() {
			return GetRuleContext<DebugPrintContext>(0);
		}
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DebugPrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintStmtContext debugPrintStmt() {
		DebugPrintStmtContext _localctx = new DebugPrintStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_debugPrintStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832; debugPrint();
			State = 836;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 833; whiteSpace();
				State = 834; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public DebugPrintSubContext debugPrintSub() {
			return GetRuleContext<DebugPrintSubContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public DebugModuleContext debugModule() {
			return GetRuleContext<DebugModuleContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DebugPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintContext debugPrint() {
		DebugPrintContext _localctx = new DebugPrintContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_debugPrint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838; debugModule();
			State = 840;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 839; whiteSpace();
				}
			}

			State = 842; Match(DOT);
			State = 844;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 843; whiteSpace();
				}
			}

			State = 846; debugPrintSub();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugModuleContext : ParserRuleContext {
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public DebugModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugModule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugModuleContext debugModule() {
		DebugModuleContext _localctx = new DebugModuleContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_debugModule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848; Match(DEBUG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintSubContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public DebugPrintSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintSubContext debugPrintSub() {
		DebugPrintSubContext _localctx = new DebugPrintSubContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_debugPrintSub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850; Match(PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852; Match(PRINT);
			State = 853; whiteSpace();
			State = 854; markedFileNumber();
			State = 856;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 855; whiteSpace();
				}
			}

			State = 858; Match(COMMA);
			State = 863;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 860;
				switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					State = 859; whiteSpace();
					}
					break;
				}
				State = 862; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public OutputItemContext outputItem(int i) {
			return GetRuleContext<OutputItemContext>(i);
		}
		public IReadOnlyList<OutputItemContext> outputItem() {
			return GetRuleContexts<OutputItemContext>();
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_outputList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 865; outputItem();
			State = 872;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 867;
					switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
					case 1:
						{
						State = 866; whiteSpace();
						}
						break;
					}
					State = 869; outputItem();
					}
					} 
				}
				State = 874;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputItemContext : ParserRuleContext {
		public OutputClauseContext outputClause() {
			return GetRuleContext<OutputClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public CharPositionContext charPosition() {
			return GetRuleContext<CharPositionContext>(0);
		}
		public OutputItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputItemContext outputItem() {
		OutputItemContext _localctx = new OutputItemContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_outputItem);
		int _la;
		try {
			State = 883;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875; outputClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 876; charPosition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 877; outputClause();
				State = 879;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 878; whiteSpace();
					}
				}

				State = 881; charPosition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputClauseContext : ParserRuleContext {
		public TabClauseContext tabClause() {
			return GetRuleContext<TabClauseContext>(0);
		}
		public OutputExpressionContext outputExpression() {
			return GetRuleContext<OutputExpressionContext>(0);
		}
		public SpcClauseContext spcClause() {
			return GetRuleContext<SpcClauseContext>(0);
		}
		public OutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputClauseContext outputClause() {
		OutputClauseContext _localctx = new OutputClauseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_outputClause);
		try {
			State = 888;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 885; spcClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 886; tabClause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 887; outputExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharPositionContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(VBAParser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public CharPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charPosition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCharPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCharPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharPositionContext charPosition() {
		CharPositionContext _localctx = new CharPositionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_charPosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			_la = _input.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OutputExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputExpressionContext outputExpression() {
		OutputExpressionContext _localctx = new OutputExpressionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_outputExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcClauseContext : ParserRuleContext {
		public SpcNumberContext spcNumber() {
			return GetRuleContext<SpcNumberContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SpcClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcClauseContext spcClause() {
		SpcClauseContext _localctx = new SpcClauseContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_spcClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894; Match(SPC);
			State = 896;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 895; whiteSpace();
				}
			}

			State = 898; Match(LPAREN);
			State = 900;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 899; whiteSpace();
				}
				break;
			}
			State = 902; spcNumber();
			State = 904;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 903; whiteSpace();
				}
			}

			State = 906; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpcNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcNumberContext spcNumber() {
		SpcNumberContext _localctx = new SpcNumberContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_spcNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabClauseContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public TabNumberClauseContext tabNumberClause() {
			return GetRuleContext<TabNumberClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public TabClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabClauseContext tabClause() {
		TabClauseContext _localctx = new TabClauseContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_tabClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; Match(TAB);
			State = 915;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 912;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 911; whiteSpace();
					}
				}

				State = 914; tabNumberClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TabNumberContext tabNumber() {
			return GetRuleContext<TabNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public TabNumberClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumberClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumberClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumberClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumberClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberClauseContext tabNumberClause() {
		TabNumberClauseContext _localctx = new TabNumberClauseContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_tabNumberClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917; Match(LPAREN);
			State = 919;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 918; whiteSpace();
				}
				break;
			}
			State = 921; tabNumber();
			State = 923;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 922; whiteSpace();
				}
			}

			State = 925; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TabNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberContext tabNumber() {
		TabNumberContext _localctx = new TabNumberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_tabNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; Match(WRITE);
			State = 930; whiteSpace();
			State = 931; markedFileNumber();
			State = 933;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 932; whiteSpace();
				}
			}

			State = 935; Match(COMMA);
			State = 940;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 937;
				switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					State = 936; whiteSpace();
					}
					break;
				}
				State = 939; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public InputListContext inputList() {
			return GetRuleContext<InputListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_inputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942; Match(INPUT);
			State = 943; whiteSpace();
			State = 944; markedFileNumber();
			State = 946;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 945; whiteSpace();
				}
			}

			State = 948; Match(COMMA);
			State = 950;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 949; whiteSpace();
				}
				break;
			}
			State = 952; inputList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<InputVariableContext> inputVariable() {
			return GetRuleContexts<InputVariableContext>();
		}
		public InputVariableContext inputVariable(int i) {
			return GetRuleContext<InputVariableContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public InputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputListContext inputList() {
		InputListContext _localctx = new InputListContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_inputList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; inputVariable();
			State = 965;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 956;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 955; whiteSpace();
						}
					}

					State = 958; Match(COMMA);
					State = 960;
					switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
					case 1:
						{
						State = 959; whiteSpace();
						}
						break;
					}
					State = 962; inputVariable();
					}
					} 
				}
				State = 967;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InputVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVariableContext inputVariable() {
		InputVariableContext _localctx = new InputVariableContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_inputVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; Match(PUT);
			State = 971; whiteSpace();
			State = 972; fileNumber();
			State = 974;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 973; whiteSpace();
				}
			}

			State = 976; Match(COMMA);
			State = 978;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 977; whiteSpace();
				}
				break;
			}
			State = 981;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 980; recordNumber();
				}
				break;
			}
			State = 984;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 983; whiteSpace();
				}
			}

			State = 986; Match(COMMA);
			State = 988;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 987; whiteSpace();
				}
				break;
			}
			State = 990; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordNumberContext recordNumber() {
		RecordNumberContext _localctx = new RecordNumberContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_recordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996; Match(GET);
			State = 997; whiteSpace();
			State = 998; fileNumber();
			State = 1000;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 999; whiteSpace();
				}
			}

			State = 1002; Match(COMMA);
			State = 1004;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 1003; whiteSpace();
				}
				break;
			}
			State = 1007;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 1006; recordNumber();
				}
				break;
			}
			State = 1010;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1009; whiteSpace();
				}
			}

			State = 1012; Match(COMMA);
			State = 1014;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 1013; whiteSpace();
				}
				break;
			}
			State = 1016; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1020; visibility();
				State = 1021; whiteSpace();
				}
			}

			State = 1025; Match(CONST);
			State = 1026; whiteSpace();
			State = 1027; constSubStmt();
			State = 1038;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,91,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1029;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1028; whiteSpace();
						}
					}

					State = 1031; Match(COMMA);
					State = 1033;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1032; whiteSpace();
						}
					}

					State = 1035; constSubStmt();
					}
					} 
				}
				State = 1040;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,91,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041; identifier();
			State = 1045;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 1042; whiteSpace();
				State = 1043; asTypeClause();
				}
				break;
			}
			State = 1048;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1047; whiteSpace();
				}
			}

			State = 1050; Match(EQ);
			State = 1052;
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				State = 1051; whiteSpace();
				}
				break;
			}
			State = 1054; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1056; visibility();
				State = 1057; whiteSpace();
				}
			}

			State = 1061; Match(DECLARE);
			State = 1062; whiteSpace();
			State = 1065;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 1063; Match(PTRSAFE);
				State = 1064; whiteSpace();
				}
			}

			State = 1067;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1068; whiteSpace();
			State = 1069; identifier();
			State = 1070; whiteSpace();
			State = 1071; Match(LIB);
			State = 1072; whiteSpace();
			State = 1073; Match(STRINGLITERAL);
			State = 1079;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 1074; whiteSpace();
				State = 1075; Match(ALIAS);
				State = 1076; whiteSpace();
				State = 1077; Match(STRINGLITERAL);
				}
				break;
			}
			State = 1085;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 1082;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1081; whiteSpace();
					}
				}

				State = 1084; argList();
				}
				break;
			}
			State = 1090;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 1087; whiteSpace();
				State = 1088; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092; Match(LPAREN);
			State = 1110;
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 1094;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1093; whiteSpace();
					}
				}

				State = 1096; arg();
				State = 1107;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,104,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1098;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1097; whiteSpace();
							}
						}

						State = 1100; Match(COMMA);
						State = 1102;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1101; whiteSpace();
							}
						}

						State = 1104; arg();
						}
						} 
					}
					State = 1109;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,104,_ctx);
				}
				}
				break;
			}
			State = 1113;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1112; whiteSpace();
				}
			}

			State = 1115; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119;
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				State = 1117; Match(OPTIONAL);
				State = 1118; whiteSpace();
				}
				break;
			}
			State = 1123;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 1121;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1122; whiteSpace();
				}
				break;
			}
			State = 1127;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 1125; Match(PARAMARRAY);
				State = 1126; whiteSpace();
				}
				break;
			}
			State = 1129; unrestrictedIdentifier();
			State = 1138;
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				State = 1131;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1130; whiteSpace();
					}
				}

				State = 1133; Match(LPAREN);
				State = 1135;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1134; whiteSpace();
					}
				}

				State = 1137; Match(RPAREN);
				}
				break;
			}
			State = 1144;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				State = 1141;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1140; whiteSpace();
					}
				}

				State = 1143; asTypeClause();
				}
				break;
			}
			State = 1150;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				State = 1147;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1146; whiteSpace();
					}
				}

				State = 1149; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152; Match(EQ);
			State = 1154;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				State = 1153; whiteSpace();
				}
				break;
			}
			State = 1156; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDirectiveContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LetterSpecContext letterSpec(int i) {
			return GetRuleContext<LetterSpecContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LetterSpecContext> letterSpec() {
			return GetRuleContexts<LetterSpecContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DefTypeContext defType() {
			return GetRuleContext<DefTypeContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDirectiveContext defDirective() {
		DefDirectiveContext _localctx = new DefDirectiveContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_defDirective);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158; defType();
			State = 1159; whiteSpace();
			State = 1160; letterSpec();
			State = 1171;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1162;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1161; whiteSpace();
						}
					}

					State = 1164; Match(COMMA);
					State = 1166;
					switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
					case 1:
						{
						State = 1165; whiteSpace();
						}
						break;
					}
					State = 1168; letterSpec();
					}
					} 
				}
				State = 1173;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefTypeContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefTypeContext defType() {
		DefTypeContext _localctx = new DefTypeContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_defType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (DEFBOOL - 70)) | (1L << (DEFBYTE - 70)) | (1L << (DEFDATE - 70)) | (1L << (DEFDBL - 70)) | (1L << (DEFCUR - 70)) | (1L << (DEFINT - 70)) | (1L << (DEFLNG - 70)) | (1L << (DEFLNGLNG - 70)) | (1L << (DEFLNGPTR - 70)) | (1L << (DEFOBJ - 70)) | (1L << (DEFSNG - 70)) | (1L << (DEFSTR - 70)) | (1L << (DEFVAR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterSpecContext : ParserRuleContext {
		public SingleLetterContext singleLetter() {
			return GetRuleContext<SingleLetterContext>(0);
		}
		public UniversalLetterRangeContext universalLetterRange() {
			return GetRuleContext<UniversalLetterRangeContext>(0);
		}
		public LetterRangeContext letterRange() {
			return GetRuleContext<LetterRangeContext>(0);
		}
		public LetterSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterSpecContext letterSpec() {
		LetterSpecContext _localctx = new LetterSpecContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_letterSpec);
		try {
			State = 1179;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1176; singleLetter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1177; universalLetterRange();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1178; letterRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public SingleLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLetterContext singleLetter() {
		SingleLetterContext _localctx = new SingleLetterContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_singleLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalLetterRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public UpperCaseAContext upperCaseA() {
			return GetRuleContext<UpperCaseAContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public UpperCaseZContext upperCaseZ() {
			return GetRuleContext<UpperCaseZContext>(0);
		}
		public UniversalLetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalLetterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUniversalLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUniversalLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalLetterRangeContext universalLetterRange() {
		UniversalLetterRangeContext _localctx = new UniversalLetterRangeContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_universalLetterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183; upperCaseA();
			State = 1185;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1184; whiteSpace();
				}
			}

			State = 1187; Match(MINUS);
			State = 1189;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1188; whiteSpace();
				}
				break;
			}
			State = 1191; upperCaseZ();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseAContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseAContext upperCaseA() {
		UpperCaseAContext _localctx = new UpperCaseAContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_upperCaseA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			if (!(_input.Lt(1).Text.Equals("A"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"A\")");
			State = 1194; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseZContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseZ; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseZ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseZ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseZ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseZContext upperCaseZ() {
		UpperCaseZContext _localctx = new UpperCaseZContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_upperCaseZ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			if (!(_input.Lt(1).Text.Equals("Z"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"Z\")");
			State = 1197; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterRangeContext : ParserRuleContext {
		public LastLetterContext lastLetter() {
			return GetRuleContext<LastLetterContext>(0);
		}
		public FirstLetterContext firstLetter() {
			return GetRuleContext<FirstLetterContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterRangeContext letterRange() {
		LetterRangeContext _localctx = new LetterRangeContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_letterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199; firstLetter();
			State = 1201;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1200; whiteSpace();
				}
			}

			State = 1203; Match(MINUS);
			State = 1205;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1204; whiteSpace();
				}
			}

			State = 1207; lastLetter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public FirstLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFirstLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFirstLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstLetterContext firstLetter() {
		FirstLetterContext _localctx = new FirstLetterContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_firstLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LastLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLastLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLastLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastLetterContext lastLetter() {
		LastLetterContext _localctx = new LastLetterContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_lastLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_doLoopStmt);
		int _la;
		try {
			State = 1236;
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1213; Match(DO);
				State = 1214; endOfStatement();
				State = 1215; block();
				State = 1216; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1218; Match(DO);
				State = 1219; whiteSpace();
				State = 1220;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1221; whiteSpace();
				State = 1222; expression(0);
				State = 1223; endOfStatement();
				State = 1224; block();
				State = 1225; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1227; Match(DO);
				State = 1228; endOfStatement();
				State = 1229; block();
				State = 1230; Match(LOOP);
				State = 1231; whiteSpace();
				State = 1232;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1233; whiteSpace();
				State = 1234; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1238; visibility();
				State = 1239; whiteSpace();
				}
			}

			State = 1243; Match(ENUM);
			State = 1244; whiteSpace();
			State = 1245; identifier();
			State = 1246; endOfStatement();
			State = 1250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				{
				State = 1247; enumerationStmt_Constant();
				}
				}
				State = 1252;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1253; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255; identifier();
			State = 1264;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1257;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1256; whiteSpace();
					}
				}

				State = 1259; Match(EQ);
				State = 1261;
				switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					State = 1260; whiteSpace();
					}
					break;
				}
				State = 1263; expression(0);
				}
				break;
			}
			State = 1266; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; Match(ERASE);
			State = 1271; whiteSpace();
			State = 1272; expression(0);
			State = 1283;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,134,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1274;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1273; whiteSpace();
						}
					}

					State = 1276; Match(COMMA);
					State = 1278;
					switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
					case 1:
						{
						State = 1277; whiteSpace();
						}
						break;
					}
					State = 1280; expression(0);
					}
					} 
				}
				State = 1285;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,134,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286; Match(ERROR);
			State = 1287; whiteSpace();
			State = 1288; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1290; visibility();
				State = 1291; whiteSpace();
				}
			}

			State = 1295; Match(EVENT);
			State = 1296; whiteSpace();
			State = 1297; identifier();
			State = 1299;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1298; whiteSpace();
				}
			}

			State = 1301; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			_la = _input.La(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EXIT_DO - 104)) | (1L << (EXIT_FOR - 104)) | (1L << (EXIT_FUNCTION - 104)) | (1L << (EXIT_PROPERTY - 104)) | (1L << (EXIT_SUB - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_forEachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305; Match(FOR);
			State = 1306; whiteSpace();
			State = 1307; Match(EACH);
			State = 1308; whiteSpace();
			State = 1309; expression(0);
			State = 1310; whiteSpace();
			State = 1311; Match(IN);
			State = 1312; whiteSpace();
			State = 1313; expression(0);
			State = 1314; endOfStatement();
			State = 1315; block();
			State = 1316; Match(NEXT);
			State = 1320;
			switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				State = 1317; whiteSpace();
				State = 1318; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_forNextStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322; Match(FOR);
			State = 1323; whiteSpace();
			State = 1324; expression(0);
			State = 1325; whiteSpace();
			State = 1326; Match(TO);
			State = 1327; whiteSpace();
			State = 1328; expression(0);
			State = 1334;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				State = 1329; whiteSpace();
				State = 1330; Match(STEP);
				State = 1331; whiteSpace();
				State = 1332; expression(0);
				}
				break;
			}
			State = 1336; endOfStatement();
			State = 1337; block();
			State = 1338; Match(NEXT);
			State = 1342;
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				State = 1339; whiteSpace();
				State = 1340; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1344; visibility();
				State = 1345; whiteSpace();
				}
			}

			State = 1351;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1349; Match(STATIC);
				State = 1350; whiteSpace();
				}
			}

			State = 1353; Match(FUNCTION);
			State = 1355;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1354; whiteSpace();
				}
			}

			State = 1357; functionName();
			State = 1362;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1359;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1358; whiteSpace();
					}
				}

				State = 1361; argList();
				}
				break;
			}
			State = 1368;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1365;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1364; whiteSpace();
					}
				}

				State = 1367; asTypeClause();
				}
				break;
			}
			State = 1370; endOfStatement();
			State = 1371; block();
			State = 1372; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1374; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376; Match(GOSUB);
			State = 1377; whiteSpace();
			State = 1378; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1380; Match(GOTO);
			State = 1381; whiteSpace();
			State = 1382; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<ElseIfBlockContext> elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1384; Match(IF);
			State = 1385; whiteSpace();
			State = 1386; booleanExpression();
			State = 1387; whiteSpace();
			State = 1388; Match(THEN);
			State = 1389; endOfStatement();
			State = 1390; block();
			State = 1394;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ELSEIF) {
				{
				{
				State = 1391; elseIfBlock();
				}
				}
				State = 1396;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1398;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 1397; elseBlock();
				}
			}

			State = 1400; Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_elseIfBlock);
		try {
			State = 1420;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1402; Match(ELSEIF);
				State = 1403; whiteSpace();
				State = 1404; booleanExpression();
				State = 1405; whiteSpace();
				State = 1406; Match(THEN);
				State = 1407; endOfStatement();
				State = 1408; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1410; Match(ELSEIF);
				State = 1411; whiteSpace();
				State = 1412; booleanExpression();
				State = 1413; whiteSpace();
				State = 1414; Match(THEN);
				State = 1416;
				switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					State = 1415; whiteSpace();
					}
					break;
				}
				State = 1418; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422; Match(ELSE);
			State = 1423; endOfStatement();
			State = 1424; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineIfStmtContext : ParserRuleContext {
		public IfWithEmptyThenContext ifWithEmptyThen() {
			return GetRuleContext<IfWithEmptyThenContext>(0);
		}
		public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
			return GetRuleContext<IfWithNonEmptyThenContext>(0);
		}
		public SingleLineIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineIfStmtContext singleLineIfStmt() {
		SingleLineIfStmtContext _localctx = new SingleLineIfStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_singleLineIfStmt);
		try {
			State = 1428;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1426; ifWithNonEmptyThen();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1427; ifWithEmptyThen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithNonEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithNonEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithNonEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithNonEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithNonEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithNonEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
		IfWithNonEmptyThenContext _localctx = new IfWithNonEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_ifWithNonEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; Match(IF);
			State = 1432;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				State = 1431; whiteSpace();
				}
				break;
			}
			State = 1434; booleanExpression();
			State = 1436;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1435; whiteSpace();
				}
			}

			State = 1438; Match(THEN);
			State = 1440;
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1439; whiteSpace();
				}
				break;
			}
			State = 1442; listOrLabel();
			State = 1446;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1443; whiteSpace();
				State = 1444; singleLineElseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IfWithEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithEmptyThenContext ifWithEmptyThen() {
		IfWithEmptyThenContext _localctx = new IfWithEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_ifWithEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448; Match(IF);
			State = 1450;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1449; whiteSpace();
				}
				break;
			}
			State = 1452; booleanExpression();
			State = 1454;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1453; whiteSpace();
				}
			}

			State = 1456; Match(THEN);
			State = 1457; endOfStatement();
			State = 1459;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1458; whiteSpace();
				}
			}

			State = 1461; singleLineElseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineElseClauseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public SingleLineElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineElseClauseContext singleLineElseClause() {
		SingleLineElseClauseContext _localctx = new SingleLineElseClauseContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_singleLineElseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463; Match(ELSE);
			State = 1465;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1464; whiteSpace();
				}
				break;
			}
			State = 1468;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1467; listOrLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOrLabelContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public SameLineStatementContext sameLineStatement(int i) {
			return GetRuleContext<SameLineStatementContext>(i);
		}
		public IReadOnlyList<SameLineStatementContext> sameLineStatement() {
			return GetRuleContexts<SameLineStatementContext>();
		}
		public ListOrLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOrLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterListOrLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitListOrLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOrLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOrLabelContext listOrLabel() {
		ListOrLabelContext _localctx = new ListOrLabelContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_listOrLabel);
		int _la;
		try {
			int _alt;
			State = 1508;
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1470; lineNumberLabel();
				State = 1483;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,164,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1472;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1471; whiteSpace();
							}
						}

						State = 1474; Match(COLON);
						State = 1476;
						switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
						case 1:
							{
							State = 1475; whiteSpace();
							}
							break;
						}
						State = 1479;
						switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
						case 1:
							{
							State = 1478; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1485;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,164,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1490;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1486; Match(COLON);
					State = 1488;
					switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
					case 1:
						{
						State = 1487; whiteSpace();
						}
						break;
					}
					}
				}

				State = 1492; sameLineStatement();
				State = 1505;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,170,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1494;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1493; whiteSpace();
							}
						}

						State = 1496; Match(COLON);
						State = 1498;
						switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
						case 1:
							{
							State = 1497; whiteSpace();
							}
							break;
						}
						State = 1501;
						switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
						case 1:
							{
							State = 1500; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1507;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,170,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SameLineStatementContext : ParserRuleContext {
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public SameLineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sameLineStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSameLineStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSameLineStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameLineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SameLineStatementContext sameLineStatement() {
		SameLineStatementContext _localctx = new SameLineStatementContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_sameLineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1510; blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; Match(IMPLEMENTS);
			State = 1515; whiteSpace();
			State = 1516; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1520;
			_la = _input.La(1);
			if (_la==LET) {
				{
				State = 1518; Match(LET);
				State = 1519; whiteSpace();
				}
			}

			State = 1522; lExpression(0);
			State = 1524;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1523; whiteSpace();
				}
			}

			State = 1526; Match(EQ);
			State = 1528;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				State = 1527; whiteSpace();
				}
				break;
			}
			State = 1530; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532; Match(LSET);
			State = 1533; whiteSpace();
			State = 1534; expression(0);
			State = 1536;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1535; whiteSpace();
				}
			}

			State = 1538; Match(EQ);
			State = 1540;
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1539; whiteSpace();
				}
				break;
			}
			State = 1542; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1544;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1545; whiteSpace();
			State = 1554;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1546; Match(GOTO);
				State = 1547; whiteSpace();
				State = 1548; expression(0);
				}
				break;
			case RESUME:
				{
				State = 1550; Match(RESUME);
				State = 1551; whiteSpace();
				State = 1552; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556; Match(ON);
			State = 1557; whiteSpace();
			State = 1558; expression(0);
			State = 1559; whiteSpace();
			State = 1560; Match(GOTO);
			State = 1561; whiteSpace();
			State = 1562; expression(0);
			State = 1573;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,180,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1564;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1563; whiteSpace();
						}
					}

					State = 1566; Match(COMMA);
					State = 1568;
					switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
					case 1:
						{
						State = 1567; whiteSpace();
						}
						break;
					}
					State = 1570; expression(0);
					}
					} 
				}
				State = 1575;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,180,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576; Match(ON);
			State = 1577; whiteSpace();
			State = 1578; expression(0);
			State = 1579; whiteSpace();
			State = 1580; Match(GOSUB);
			State = 1581; whiteSpace();
			State = 1582; expression(0);
			State = 1593;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1584;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1583; whiteSpace();
						}
					}

					State = 1586; Match(COMMA);
					State = 1588;
					switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
					case 1:
						{
						State = 1587; whiteSpace();
						}
						break;
					}
					State = 1590; expression(0);
					}
					} 
				}
				State = 1595;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1599;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1596; visibility();
				State = 1597; whiteSpace();
				}
			}

			State = 1603;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1601; Match(STATIC);
				State = 1602; whiteSpace();
				}
			}

			State = 1605; Match(PROPERTY_GET);
			State = 1606; whiteSpace();
			State = 1607; functionName();
			State = 1612;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 1609;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1608; whiteSpace();
					}
				}

				State = 1611; argList();
				}
				break;
			}
			State = 1617;
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1614; whiteSpace();
				State = 1615; asTypeClause();
				}
				break;
			}
			State = 1619; endOfStatement();
			State = 1620; block();
			State = 1621; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1623; visibility();
				State = 1624; whiteSpace();
				}
			}

			State = 1630;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1628; Match(STATIC);
				State = 1629; whiteSpace();
				}
			}

			State = 1632; Match(PROPERTY_SET);
			State = 1633; whiteSpace();
			State = 1634; subroutineName();
			State = 1639;
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 1636;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1635; whiteSpace();
					}
				}

				State = 1638; argList();
				}
				break;
			}
			State = 1641; endOfStatement();
			State = 1642; block();
			State = 1643; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1645; visibility();
				State = 1646; whiteSpace();
				}
			}

			State = 1652;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1650; Match(STATIC);
				State = 1651; whiteSpace();
				}
			}

			State = 1654; Match(PROPERTY_LET);
			State = 1655; whiteSpace();
			State = 1656; subroutineName();
			State = 1661;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1658;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1657; whiteSpace();
					}
				}

				State = 1660; argList();
				}
				break;
			}
			State = 1663; endOfStatement();
			State = 1664; block();
			State = 1665; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EventArgumentListContext eventArgumentList() {
			return GetRuleContext<EventArgumentListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667; Match(RAISEEVENT);
			State = 1668; whiteSpace();
			State = 1669; identifier();
			State = 1684;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1671;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1670; whiteSpace();
					}
				}

				State = 1673; Match(LPAREN);
				State = 1675;
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 1674; whiteSpace();
					}
					break;
				}
				State = 1678;
				switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					State = 1677; eventArgumentList();
					}
					break;
				}
				State = 1681;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1680; whiteSpace();
					}
				}

				State = 1683; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentListContext : ParserRuleContext {
		public EventArgumentContext eventArgument(int i) {
			return GetRuleContext<EventArgumentContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<EventArgumentContext> eventArgument() {
			return GetRuleContexts<EventArgumentContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EventArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentListContext eventArgumentList() {
		EventArgumentListContext _localctx = new EventArgumentListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_eventArgumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686; eventArgument();
			State = 1697;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1688;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1687; whiteSpace();
						}
					}

					State = 1690; Match(COMMA);
					State = 1692;
					switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
					case 1:
						{
						State = 1691; whiteSpace();
						}
						break;
					}
					State = 1694; eventArgument();
					}
					} 
				}
				State = 1699;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public EventArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentContext eventArgument() {
		EventArgumentContext _localctx = new EventArgumentContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_eventArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1700; Match(BYVAL);
				State = 1701; whiteSpace();
				}
				break;
			}
			State = 1704; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public RedimDeclarationListContext redimDeclarationList() {
			return GetRuleContext<RedimDeclarationListContext>(0);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_redimStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706; Match(REDIM);
			State = 1707; whiteSpace();
			State = 1710;
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				State = 1708; Match(PRESERVE);
				State = 1709; whiteSpace();
				}
				break;
			}
			State = 1712; redimDeclarationList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimDeclarationListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<RedimVariableDeclarationContext> redimVariableDeclaration() {
			return GetRuleContexts<RedimVariableDeclarationContext>();
		}
		public RedimVariableDeclarationContext redimVariableDeclaration(int i) {
			return GetRuleContext<RedimVariableDeclarationContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimDeclarationListContext redimDeclarationList() {
		RedimDeclarationListContext _localctx = new RedimDeclarationListContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_redimDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; redimVariableDeclaration();
			State = 1725;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,209,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1716;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1715; whiteSpace();
						}
					}

					State = 1718; Match(COMMA);
					State = 1720;
					switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
					case 1:
						{
						State = 1719; whiteSpace();
						}
						break;
					}
					State = 1722; redimVariableDeclaration();
					}
					} 
				}
				State = 1727;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,209,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimVariableDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RedimVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimVariableDeclarationContext redimVariableDeclaration() {
		RedimVariableDeclarationContext _localctx = new RedimVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_redimVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; expression(0);
			State = 1732;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 1729; whiteSpace();
				State = 1730; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStatementContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public LExpressionContext lExpression(int i) {
			return GetRuleContext<LExpressionContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<LExpressionContext> lExpression() {
			return GetRuleContexts<LExpressionContext>();
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ModeSpecifierContext modeSpecifier() {
			return GetRuleContext<ModeSpecifierContext>(0);
		}
		public MidStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStatementContext midStatement() {
		MidStatementContext _localctx = new MidStatementContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_midStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734; modeSpecifier();
			State = 1735; Match(LPAREN);
			State = 1737;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1736; whiteSpace();
				}
			}

			State = 1739; lExpression(0);
			State = 1741;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1740; whiteSpace();
				}
			}

			State = 1743; Match(COMMA);
			State = 1745;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1744; whiteSpace();
				}
			}

			State = 1747; lExpression(0);
			State = 1749;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1748; whiteSpace();
				}
			}

			State = 1759;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1751; Match(COMMA);
				State = 1753;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1752; whiteSpace();
					}
				}

				State = 1755; lExpression(0);
				State = 1757;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1756; whiteSpace();
					}
				}

				}
			}

			State = 1761; Match(RPAREN);
			State = 1763;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1762; whiteSpace();
				}
			}

			State = 1765; Match(ASSIGN);
			State = 1767;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 1766; whiteSpace();
				}
				break;
			}
			State = 1769; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecifierContext : ParserRuleContext {
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ModeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecifierContext modeSpecifier() {
		ModeSpecifierContext _localctx = new ModeSpecifierContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_modeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1771;
			_la = _input.La(1);
			if ( !(_la==MIDB || _la==MID) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1773;
			_la = _input.La(1);
			if (_la==DOLLAR) {
				{
				State = 1772; Match(DOLLAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerExpressionContext integerExpression() {
		IntegerExpressionContext _localctx = new IntegerExpressionContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_integerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStmtContext callStmt() {
		CallStmtContext _localctx = new CallStmtContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_callStmt);
		try {
			State = 1787;
			switch (_input.La(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1777; Match(CALL);
				State = 1778; whiteSpace();
				State = 1779; expression(0);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case EMPTY:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case LPAREN:
			case MINUS:
			case L_SQUARE_BRACKET:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case WS:
			case IDENTIFIER:
			case LINE_CONTINUATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1781; expression(0);
				State = 1785;
				switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					State = 1782; whiteSpace();
					State = 1783; argumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789; Match(RESUME);
			State = 1795;
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 1790; whiteSpace();
				State = 1793;
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1791; Match(NEXT);
					}
					break;
				case ABS:
				case ANY:
				case ARRAY:
				case B_CHAR:
				case BF:
				case CBOOL:
				case CBYTE:
				case CCUR:
				case CDATE:
				case CDBL:
				case CDEC:
				case CINT:
				case CLNG:
				case CLNGLNG:
				case CLNGPTR:
				case CSNG:
				case CSTR:
				case CURRENCY:
				case CVAR:
				case CVERR:
				case DEBUG:
				case DOEVENTS:
				case FIX:
				case INPUTB:
				case INT:
				case LBOUND:
				case LEN:
				case LENB:
				case LONGLONG:
				case LONGPTR:
				case MIDB:
				case PSET:
				case SGN:
				case UBOUND:
				case EXCLAMATIONPOINT:
				case DOT:
				case HASH:
				case ACCESS:
				case ADDRESSOF:
				case ALIAS:
				case AND:
				case ATTRIBUTE:
				case APPEND:
				case BEGIN:
				case BINARY:
				case BOOLEAN:
				case BYVAL:
				case BYREF:
				case BYTE:
				case CLASS:
				case CLOSE:
				case DATABASE:
				case DATE:
				case DOUBLE:
				case EMPTY:
				case END:
				case EQV:
				case ERROR:
				case FALSE:
				case GET:
				case IMP:
				case IN:
				case INPUT:
				case IS:
				case INTEGER:
				case LOCK:
				case LONG:
				case LIB:
				case LIKE:
				case LINE_INPUT:
				case LOCK_READ:
				case LOCK_WRITE:
				case LOCK_READ_WRITE:
				case ME:
				case MID:
				case MOD:
				case NAME:
				case NEW:
				case NOT:
				case NOTHING:
				case NULL:
				case OBJECT:
				case ON_ERROR:
				case OPEN:
				case OPTIONAL:
				case OR:
				case OUTPUT:
				case PARAMARRAY:
				case PRESERVE:
				case PRINT:
				case PTRSAFE:
				case PUT:
				case RANDOM:
				case READ:
				case READ_WRITE:
				case REM:
				case RESET:
				case SEEK:
				case SHARED:
				case SINGLE:
				case SPC:
				case STEP:
				case STRING:
				case TAB:
				case TEXT:
				case THEN:
				case TO:
				case TRUE:
				case TYPEOF:
				case UNLOCK:
				case UNTIL:
				case VARIANT:
				case VERSION:
				case WIDTH:
				case WITHEVENTS:
				case WRITE:
				case XOR:
				case LPAREN:
				case MINUS:
				case L_SQUARE_BRACKET:
				case STRINGLITERAL:
				case OCTLITERAL:
				case HEXLITERAL:
				case FLOATLITERAL:
				case INTEGERLITERAL:
				case DATELITERAL:
				case WS:
				case IDENTIFIER:
				case LINE_CONTINUATION:
					{
					State = 1792; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799; Match(RSET);
			State = 1800; whiteSpace();
			State = 1801; expression(0);
			State = 1803;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1802; whiteSpace();
				}
			}

			State = 1805; Match(EQ);
			State = 1807;
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 1806; whiteSpace();
				}
				break;
			}
			State = 1809; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813; Match(NAME);
			State = 1814; whiteSpace();
			State = 1815; expression(0);
			State = 1816; whiteSpace();
			State = 1817; Match(AS);
			State = 1818; whiteSpace();
			State = 1819; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public IReadOnlyList<CaseClauseContext> caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		public CaseElseClauseContext caseElseClause() {
			return GetRuleContext<CaseElseClauseContext>(0);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_selectCaseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821; Match(SELECT);
			State = 1823;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1822; whiteSpace();
				}
			}

			State = 1825; Match(CASE);
			State = 1827;
			switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				State = 1826; whiteSpace();
				}
				break;
			}
			State = 1829; selectExpression();
			State = 1830; endOfStatement();
			State = 1834;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,229,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1831; caseClause();
					}
					} 
				}
				State = 1836;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,229,_ctx);
			}
			State = 1838;
			_la = _input.La(1);
			if (_la==CASE) {
				{
				State = 1837; caseElseClause();
				}
			}

			State = 1840; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_selectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public IReadOnlyList<RangeClauseContext> rangeClause() {
			return GetRuleContexts<RangeClauseContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public RangeClauseContext rangeClause(int i) {
			return GetRuleContext<RangeClauseContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844; Match(CASE);
			State = 1845; whiteSpace();
			State = 1846; rangeClause();
			State = 1857;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,233,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1848;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1847; whiteSpace();
						}
					}

					State = 1850; Match(COMMA);
					State = 1852;
					switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
					case 1:
						{
						State = 1851; whiteSpace();
						}
						break;
					}
					State = 1854; rangeClause();
					}
					} 
				}
				State = 1859;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,233,_ctx);
			}
			State = 1860; endOfStatement();
			State = 1861; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CaseElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseClauseContext caseElseClause() {
		CaseElseClauseContext _localctx = new CaseElseClauseContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_caseElseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863; Match(CASE);
			State = 1865;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1864; whiteSpace();
				}
			}

			State = 1867; Match(ELSE);
			State = 1868; endOfStatement();
			State = 1869; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SelectEndValueContext selectEndValue() {
			return GetRuleContext<SelectEndValueContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SelectStartValueContext selectStartValue() {
			return GetRuleContext<SelectStartValueContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_rangeClause);
		int _la;
		try {
			State = 1890;
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1875;
				switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
				case 1:
					{
					State = 1871; Match(IS);
					State = 1873;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1872; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1877; comparisonOperator();
				State = 1879;
				switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					State = 1878; whiteSpace();
					}
					break;
				}
				State = 1881; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1883; selectStartValue();
				State = 1884; whiteSpace();
				State = 1885; Match(TO);
				State = 1886; whiteSpace();
				State = 1887; selectEndValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1889; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStartValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectStartValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStartValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectStartValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectStartValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStartValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStartValueContext selectStartValue() {
		SelectStartValueContext _localctx = new SelectStartValueContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_selectStartValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectEndValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectEndValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectEndValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectEndValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectEndValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectEndValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectEndValueContext selectEndValue() {
		SelectEndValueContext _localctx = new SelectEndValueContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_selectEndValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896; Match(SET);
			State = 1897; whiteSpace();
			State = 1898; lExpression(0);
			State = 1900;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1899; whiteSpace();
				}
			}

			State = 1902; Match(EQ);
			State = 1904;
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 1903; whiteSpace();
				}
				break;
			}
			State = 1906; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1908; visibility();
				State = 1909; whiteSpace();
				}
			}

			State = 1915;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1913; Match(STATIC);
				State = 1914; whiteSpace();
				}
			}

			State = 1917; Match(SUB);
			State = 1919;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1918; whiteSpace();
				}
			}

			State = 1921; subroutineName();
			State = 1926;
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				State = 1923;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1922; whiteSpace();
					}
				}

				State = 1925; argList();
				}
				break;
			}
			State = 1928; endOfStatement();
			State = 1929; block();
			State = 1930; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1932; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicTypeDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public UdtDeclarationContext udtDeclaration() {
			return GetRuleContext<UdtDeclarationContext>(0);
		}
		public PublicTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPublicTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPublicTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicTypeDeclarationContext publicTypeDeclaration() {
		PublicTypeDeclarationContext _localctx = new PublicTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_publicTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1936;
			_la = _input.La(1);
			if (_la==GLOBAL || _la==PUBLIC) {
				{
				State = 1934;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==PUBLIC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1935; whiteSpace();
				}
			}

			State = 1938; udtDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivateTypeDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public UdtDeclarationContext udtDeclaration() {
			return GetRuleContext<UdtDeclarationContext>(0);
		}
		public PrivateTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privateTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrivateTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrivateTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivateTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivateTypeDeclarationContext privateTypeDeclaration() {
		PrivateTypeDeclarationContext _localctx = new PrivateTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_privateTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940; Match(PRIVATE);
			State = 1941; whiteSpace();
			State = 1942; udtDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtDeclarationContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public UdtMemberListContext udtMemberList() {
			return GetRuleContext<UdtMemberListContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public UdtDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtDeclarationContext udtDeclaration() {
		UdtDeclarationContext _localctx = new UdtDeclarationContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_udtDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944; Match(TYPE);
			State = 1945; whiteSpace();
			State = 1946; untypedIdentifier();
			State = 1947; endOfStatement();
			State = 1948; udtMemberList();
			State = 1949; endOfStatement();
			State = 1950; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtMemberListContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public UdtMemberContext udtMember(int i) {
			return GetRuleContext<UdtMemberContext>(i);
		}
		public IReadOnlyList<UdtMemberContext> udtMember() {
			return GetRuleContexts<UdtMemberContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public UdtMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtMemberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtMemberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtMemberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtMemberListContext udtMemberList() {
		UdtMemberListContext _localctx = new UdtMemberListContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_udtMemberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952; udtMember();
			State = 1958;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,247,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1953; endOfStatement();
					State = 1954; udtMember();
					}
					} 
				}
				State = 1960;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,247,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtMemberContext : ParserRuleContext {
		public UntypedNameMemberDeclarationContext untypedNameMemberDeclaration() {
			return GetRuleContext<UntypedNameMemberDeclarationContext>(0);
		}
		public ReservedNameMemberDeclarationContext reservedNameMemberDeclaration() {
			return GetRuleContext<ReservedNameMemberDeclarationContext>(0);
		}
		public UdtMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtMemberContext udtMember() {
		UdtMemberContext _localctx = new UdtMemberContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_udtMember);
		try {
			State = 1963;
			switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1961; reservedNameMemberDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1962; untypedNameMemberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedNameMemberDeclarationContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public OptionalArrayClauseContext optionalArrayClause() {
			return GetRuleContext<OptionalArrayClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public UntypedNameMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedNameMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUntypedNameMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUntypedNameMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedNameMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedNameMemberDeclarationContext untypedNameMemberDeclaration() {
		UntypedNameMemberDeclarationContext _localctx = new UntypedNameMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_untypedNameMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1965; untypedIdentifier();
			State = 1967;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1966; whiteSpace();
				}
			}

			State = 1969; optionalArrayClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedNameMemberDeclarationContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ReservedNameMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedNameMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReservedNameMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReservedNameMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedNameMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedNameMemberDeclarationContext reservedNameMemberDeclaration() {
		ReservedNameMemberDeclarationContext _localctx = new ReservedNameMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_reservedNameMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971; unrestrictedIdentifier();
			State = 1972; whiteSpace();
			State = 1973; asTypeClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalArrayClauseContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ArrayDimContext arrayDim() {
			return GetRuleContext<ArrayDimContext>(0);
		}
		public OptionalArrayClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalArrayClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionalArrayClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionalArrayClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalArrayClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalArrayClauseContext optionalArrayClause() {
		OptionalArrayClauseContext _localctx = new OptionalArrayClauseContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_optionalArrayClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1975; arrayDim();
				State = 1976; whiteSpace();
				}
			}

			State = 1980; asTypeClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BoundsListContext boundsList() {
			return GetRuleContext<BoundsListContext>(0);
		}
		public ArrayDimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDim; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArrayDim(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArrayDim(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimContext arrayDim() {
		ArrayDimContext _localctx = new ArrayDimContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_arrayDim);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982; Match(LPAREN);
			State = 1984;
			switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				State = 1983; whiteSpace();
				}
				break;
			}
			State = 1987;
			switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				State = 1986; boundsList();
				}
				break;
			}
			State = 1990;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1989; whiteSpace();
				}
			}

			State = 1992; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundsListContext : ParserRuleContext {
		public DimSpecContext dimSpec(int i) {
			return GetRuleContext<DimSpecContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<DimSpecContext> dimSpec() {
			return GetRuleContexts<DimSpecContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public BoundsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBoundsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBoundsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoundsListContext boundsList() {
		BoundsListContext _localctx = new BoundsListContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_boundsList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1994; dimSpec();
			State = 2005;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1996;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1995; whiteSpace();
						}
					}

					State = 1998; Match(COMMA);
					State = 2000;
					switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
					case 1:
						{
						State = 1999; whiteSpace();
						}
						break;
					}
					State = 2002; dimSpec();
					}
					} 
				}
				State = 2007;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimSpecContext : ParserRuleContext {
		public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DimSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDimSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDimSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimSpecContext dimSpec() {
		DimSpecContext _localctx = new DimSpecContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_dimSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2012;
			switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				State = 2008; lowerBound();
				State = 2010;
				switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					State = 2009; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 2014; upperBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLowerBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLowerBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_lowerBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2016; constantExpression();
			State = 2018;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2017; whiteSpace();
				}
			}

			State = 2020; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022; constantExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2024; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2029;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2026; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2027; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2028; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2031; whiteSpace();
			State = 2034;
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				State = 2032; Match(WITHEVENTS);
				State = 2033; whiteSpace();
				}
				break;
			}
			State = 2036; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2038; variableSubStmt();
			State = 2049;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,264,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2040;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2039; whiteSpace();
						}
					}

					State = 2042; Match(COMMA);
					State = 2044;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2043; whiteSpace();
						}
					}

					State = 2046; variableSubStmt();
					}
					} 
				}
				State = 2051;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,264,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2052; identifier();
			State = 2070;
			switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				State = 2054;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2053; whiteSpace();
					}
				}

				State = 2056; Match(LPAREN);
				State = 2058;
				switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					State = 2057; whiteSpace();
					}
					break;
				}
				State = 2064;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
					{
					State = 2060; subscripts();
					State = 2062;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2061; whiteSpace();
						}
					}

					}
				}

				State = 2066; Match(RPAREN);
				State = 2068;
				switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					State = 2067; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 2075;
			switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				State = 2072; whiteSpace();
				State = 2073; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2077; Match(WHILE);
			State = 2078; whiteSpace();
			State = 2079; expression(0);
			State = 2080; endOfStatement();
			State = 2081; block();
			State = 2082; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_withStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2084; Match(WITH);
			State = 2085; whiteSpace();
			State = 2086; expression(0);
			State = 2087; endOfStatement();
			State = 2088; block();
			State = 2089; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineSpecialFormContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STEP(int i) {
			return GetToken(VBAParser.STEP, i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<TupleContext> tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<ITerminalNode> STEP() { return GetTokens(VBAParser.STEP); }
		public LineSpecialFormOptionContext lineSpecialFormOption() {
			return GetRuleContext<LineSpecialFormOptionContext>(0);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public LineSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineSpecialFormContext lineSpecialForm() {
		LineSpecialFormContext _localctx = new LineSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_lineSpecialForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2091; expression(0);
			State = 2092; whiteSpace();
			State = 2097;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2093; Match(STEP);
				State = 2095;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2094; whiteSpace();
					}
				}

				}
			}

			State = 2099; tuple();
			State = 2100; Match(MINUS);
			State = 2105;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2101; Match(STEP);
				State = 2103;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2102; whiteSpace();
					}
				}

				}
			}

			State = 2107; tuple();
			State = 2109;
			switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				State = 2108; whiteSpace();
				}
				break;
			}
			State = 2116;
			switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				State = 2111; Match(COMMA);
				State = 2113;
				switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					State = 2112; whiteSpace();
					}
					break;
				}
				State = 2115; expression(0);
				}
				break;
			}
			State = 2119;
			switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				State = 2118; whiteSpace();
				}
				break;
			}
			State = 2126;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 2121; Match(COMMA);
				State = 2123;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2122; whiteSpace();
					}
				}

				State = 2125; lineSpecialFormOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleSpecialFormContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public CircleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCircleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCircleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleSpecialFormContext circleSpecialForm() {
		CircleSpecialFormContext _localctx = new CircleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_circleSpecialForm);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2136;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
				{
				State = 2128; expression(0);
				State = 2130;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2129; whiteSpace();
					}
				}

				State = 2132; Match(DOT);
				State = 2134;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2133; whiteSpace();
					}
				}

				}
			}

			State = 2138; Match(CIRCLE);
			State = 2139; whiteSpace();
			State = 2144;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2140; Match(STEP);
				State = 2142;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2141; whiteSpace();
					}
				}

				}
			}

			State = 2146; tuple();
			State = 2155;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2148;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2147; whiteSpace();
						}
					}

					State = 2150; Match(COMMA);
					State = 2152;
					switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
					case 1:
						{
						State = 2151; whiteSpace();
						}
						break;
					}
					State = 2154; expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2157;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,289,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScaleSpecialFormContext : ParserRuleContext {
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<TupleContext> tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public ScaleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scaleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterScaleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitScaleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScaleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScaleSpecialFormContext scaleSpecialForm() {
		ScaleSpecialFormContext _localctx = new ScaleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_scaleSpecialForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
				{
				State = 2159; expression(0);
				State = 2161;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2160; whiteSpace();
					}
				}

				State = 2163; Match(DOT);
				State = 2165;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2164; whiteSpace();
					}
				}

				}
			}

			State = 2169; Match(SCALE);
			State = 2170; whiteSpace();
			State = 2171; tuple();
			State = 2173;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2172; whiteSpace();
				}
			}

			State = 2175; Match(MINUS);
			State = 2177;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2176; whiteSpace();
				}
			}

			State = 2179; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2181; Match(LPAREN);
			State = 2183;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				State = 2182; whiteSpace();
				}
				break;
			}
			State = 2185; expression(0);
			State = 2187;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2186; whiteSpace();
				}
			}

			State = 2189; Match(COMMA);
			State = 2191;
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 2190; whiteSpace();
				}
				break;
			}
			State = 2193; expression(0);
			State = 2195;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2194; whiteSpace();
				}
			}

			State = 2197; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineSpecialFormOptionContext : ParserRuleContext {
		public ITerminalNode B_CHAR() { return GetToken(VBAParser.B_CHAR, 0); }
		public ITerminalNode BF() { return GetToken(VBAParser.BF, 0); }
		public LineSpecialFormOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineSpecialFormOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineSpecialFormOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineSpecialFormOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineSpecialFormOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineSpecialFormOptionContext lineSpecialFormOption() {
		LineSpecialFormOptionContext _localctx = new LineSpecialFormOptionContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_lineSpecialFormOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199;
			_la = _input.La(1);
			if ( !(_la==B_CHAR || _la==BF) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201; subscript();
			State = 2212;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2203;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2202; whiteSpace();
						}
					}

					State = 2205; Match(COMMA);
					State = 2207;
					switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
					case 1:
						{
						State = 2206; whiteSpace();
						}
						break;
					}
					State = 2209; subscript();
					}
					} 
				}
				State = 2214;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2220;
			switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				State = 2215; expression(0);
				State = 2216; whiteSpace();
				State = 2217; Match(TO);
				State = 2218; whiteSpace();
				}
				break;
			}
			State = 2222; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public MarkerKeywordContext markerKeyword() {
			return GetRuleContext<MarkerKeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_unrestrictedIdentifier);
		try {
			State = 2227;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2224; identifier();
				}
				break;
			case EXIT:
			case OPTION:
			case CALL:
			case CASE:
			case CONST:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case ENUM:
			case ERASE:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case LOOP:
			case LET:
			case LSET:
			case NEXT:
			case ON:
			case PRIVATE:
			case PUBLIC:
			case RAISEEVENT:
			case REDIM:
			case RESUME:
			case RETURN:
			case RSET:
			case SELECT:
			case SET:
			case STATIC:
			case STOP:
			case SUB:
			case TYPE:
			case WEND:
			case WHILE:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2225; statementKeyword();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2226; markerKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public TypedIdentifierContext typedIdentifier() {
			return GetRuleContext<TypedIdentifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_identifier);
		try {
			State = 2231;
			switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2229; typedIdentifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2230; untypedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedIdentifierContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public UntypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUntypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUntypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedIdentifierContext untypedIdentifier() {
		UntypedIdentifierContext _localctx = new UntypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_untypedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233; identifierValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentifierContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public TypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentifierContext typedIdentifier() {
		TypedIdentifierContext _localctx = new TypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_typedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2235; untypedIdentifier();
			State = 2236; typeHint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public ITerminalNode BF() { return GetToken(VBAParser.BF, 0); }
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_identifierValue);
		try {
			State = 2242;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2238; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2239; keyword();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2240; foreignName();
				}
				break;
			case BF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2241; Match(BF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignNameContext : ParserRuleContext {
		public IReadOnlyList<ForeignIdentifierContext> foreignIdentifier() {
			return GetRuleContexts<ForeignIdentifierContext>();
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext foreignIdentifier(int i) {
			return GetRuleContext<ForeignIdentifierContext>(i);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignNameContext foreignName() {
		ForeignNameContext _localctx = new ForeignNameContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_foreignName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2244; Match(L_SQUARE_BRACKET);
			State = 2248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << COMMA) | (1L << COLON) | (1L << SEMICOLON) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_ENUM - 64)) | (1L << (END_FUNCTION - 64)) | (1L << (END_IF - 64)) | (1L << (END_PROPERTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_SUB - 64)) | (1L << (END_TYPE - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OPTION_BASE - 128)) | (1L << (OPTION_EXPLICIT - 128)) | (1L << (OPTION_COMPARE - 128)) | (1L << (OPTION_PRIVATE_MODULE - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (ASSIGN - 192)) | (1L << (DIV - 192)) | (1L << (INTDIV - 192)) | (1L << (EQ - 192)) | (1L << (GEQ - 192)) | (1L << (GT - 192)) | (1L << (LEQ - 192)) | (1L << (LPAREN - 192)) | (1L << (LT - 192)) | (1L << (MINUS - 192)) | (1L << (MULT - 192)) | (1L << (NEQ - 192)) | (1L << (PLUS - 192)) | (1L << (POW - 192)) | (1L << (RPAREN - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (NEWLINE - 192)) | (1L << (SINGLEQUOTE - 192)) | (1L << (UNDERSCORE - 192)) | (1L << (WS - 192)) | (1L << (GUIDLITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (ERRORCHAR - 192)))) != 0)) {
				{
				{
				State = 2245; foreignIdentifier();
				}
				}
				State = 2250;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2251; Match(R_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignIdentifierContext : ParserRuleContext {
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignIdentifierContext foreignIdentifier() {
		ForeignIdentifierContext _localctx = new ForeignIdentifierContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_foreignIdentifier);
		int _la;
		try {
			State = 2255;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case COMMA:
			case COLON:
			case SEMICOLON:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case AT:
			case PERCENT:
			case DOLLAR:
			case AMPERSAND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case EMPTY:
			case END_ENUM:
			case END_FUNCTION:
			case END_IF:
			case END_PROPERTY:
			case END_SELECT:
			case END_SUB:
			case END_TYPE:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case ON_ERROR:
			case ON_LOCAL_ERROR:
			case OPEN:
			case OPTIONAL:
			case OPTION_BASE:
			case OPTION_EXPLICIT:
			case OPTION_COMPARE:
			case OPTION_PRIVATE_MODULE:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PROPERTY_GET:
			case PROPERTY_LET:
			case PROPERTY_SET:
			case PTRSAFE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case ASSIGN:
			case DIV:
			case INTDIV:
			case EQ:
			case GEQ:
			case GT:
			case LEQ:
			case LPAREN:
			case LT:
			case MINUS:
			case MULT:
			case NEQ:
			case PLUS:
			case POW:
			case RPAREN:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case NEWLINE:
			case SINGLEQUOTE:
			case UNDERSCORE:
			case WS:
			case GUIDLITERAL:
			case IDENTIFIER:
			case LINE_CONTINUATION:
			case ERRORCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2253;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==L_SQUARE_BRACKET || _la==R_SQUARE_BRACKET) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2254; foreignName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2257; Match(AS);
			State = 2259;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2258; whiteSpace();
				}
			}

			State = 2263;
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				State = 2261; Match(NEW);
				State = 2262; whiteSpace();
				}
				break;
			}
			State = 2265; type();
			State = 2270;
			switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				State = 2267;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2266; whiteSpace();
					}
				}

				State = 2269; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2272;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DATE - 68)) | (1L << (DOUBLE - 68)) | (1L << (INTEGER - 68)) | (1L << (LONG - 68)))) != 0) || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (SINGLE - 180)) | (1L << (STRING - 180)) | (1L << (VARIANT - 180)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2274;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (EQ - 208)) | (1L << (GEQ - 208)) | (1L << (GT - 208)) | (1L << (LEQ - 208)) | (1L << (LT - 208)) | (1L << (NEQ - 208)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
	 
		public ComplexTypeContext() { }
		public virtual void CopyFrom(ComplexTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CtTypeofexprContext : ComplexTypeContext {
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtTypeofexprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtTypeofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtTypeofexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtTypeofexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtMarkedFileNumberExprContext : ComplexTypeContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public CtMarkedFileNumberExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtMarkedFileNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtMarkedFileNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtMarkedFileNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtLiteralExprContext : ComplexTypeContext {
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public CtLiteralExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtBuiltInTypeExprContext : ComplexTypeContext {
		public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		public CtBuiltInTypeExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtBuiltInTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtBuiltInTypeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtBuiltInTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtNewExprContext : ComplexTypeContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtNewExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtParenthesizedExprContext : ComplexTypeContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtParenthesizedExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtLExprContext : ComplexTypeContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public CtLExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_complexType);
		int _la;
		try {
			State = 2299;
			switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
			case 1:
				_localctx = new CtLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2276; literalExpression();
				}
				break;

			case 2:
				_localctx = new CtLExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2277; lExpression(0);
				}
				break;

			case 3:
				_localctx = new CtBuiltInTypeExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2278; builtInType();
				}
				break;

			case 4:
				_localctx = new CtParenthesizedExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2279; Match(LPAREN);
				State = 2281;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2280; whiteSpace();
					}
				}

				State = 2283; complexType();
				State = 2285;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2284; whiteSpace();
					}
				}

				State = 2287; Match(RPAREN);
				}
				break;

			case 5:
				_localctx = new CtTypeofexprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2289; Match(TYPEOF);
				State = 2290; whiteSpace();
				State = 2291; complexType();
				}
				break;

			case 6:
				_localctx = new CtNewExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2293; Match(NEW);
				State = 2294; whiteSpace();
				State = 2295; complexType();
				}
				break;

			case 7:
				_localctx = new CtMarkedFileNumberExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2297; Match(HASH);
				State = 2298; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301; Match(MULT);
			State = 2303;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2302; whiteSpace();
				}
			}

			State = 2307;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2305; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2306; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelDefinitionContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public StatementLabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelDefinitionContext statementLabelDefinition() {
		StatementLabelDefinitionContext _localctx = new StatementLabelDefinitionContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_statementLabelDefinition);
		try {
			State = 2311;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case OPTION:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PTRSAFE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2309; identifierStatementLabel();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2310; lineNumberLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierStatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementLabelContext identifierStatementLabel() {
		IdentifierStatementLabelContext _localctx = new IdentifierStatementLabelContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_identifierStatementLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2313; unrestrictedIdentifier();
			State = 2315;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2314; whiteSpace();
				}
			}

			State = 2317; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberLabelContext lineNumberLabel() {
		LineNumberLabelContext _localctx = new LineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_lineNumberLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2319; numberLiteral();
			State = 2321;
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				State = 2320; whiteSpace();
				}
				break;
			}
			State = 2324;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				State = 2323; Match(COLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2326;
			_la = _input.La(1);
			if ( !(((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (OCTLITERAL - 223)) | (1L << (HEXLITERAL - 223)) | (1L << (FLOATLITERAL - 223)) | (1L << (INTEGERLITERAL - 223)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2330;
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 2328; baseType();
				}
				break;

			case 2:
				{
				State = 2329; complexType();
				}
				break;
			}
			State = 2340;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				State = 2333;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2332; whiteSpace();
					}
				}

				State = 2335; Match(LPAREN);
				State = 2337;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2336; whiteSpace();
					}
				}

				State = 2339; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2342;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344;
			_la = _input.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public NewExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public PowOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPowOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPowOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AddOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofexprContext : ExpressionContext {
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeofexprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeofexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntDivOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public IntDivOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntDivOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntDivOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDivOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalImpOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public LogicalImpOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalImpOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalImpOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalImpOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ConcatOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConcatOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConcatOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MarkedFileNumberExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ModOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LExprContext : ExpressionContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public LExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public MultOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalXorOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalAndOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalOrOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalOpContext : ExpressionContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RelationalOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalEqvOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalEqvOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalEqvOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalEqvOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalEqvOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuiltInTypeExprContext : ExpressionContext {
		public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		public BuiltInTypeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInTypeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotOpContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicalNotOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalNotOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalNotOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNotOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 372;
		EnterRecursionRule(_localctx, 372, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2383;
			switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				_localctx = new TypeofexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2347; Match(TYPEOF);
				State = 2348; whiteSpace();
				State = 2349; expression(17);
				}
				break;

			case 2:
				{
				_localctx = new NewExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2351; Match(NEW);
				State = 2352; whiteSpace();
				State = 2353; expression(16);
				}
				break;

			case 3:
				{
				_localctx = new UnaryMinusOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2355; Match(MINUS);
				State = 2357;
				switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
				case 1:
					{
					State = 2356; whiteSpace();
					}
					break;
				}
				State = 2359; expression(14);
				}
				break;

			case 4:
				{
				_localctx = new LogicalNotOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2360; Match(NOT);
				State = 2362;
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 2361; whiteSpace();
					}
					break;
				}
				State = 2364; expression(7);
				}
				break;

			case 5:
				{
				_localctx = new MarkedFileNumberExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2365; Match(HASH);
				State = 2366; expression(1);
				}
				break;

			case 6:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2368;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2367; whiteSpace();
					}
				}

				State = 2370; Match(LPAREN);
				State = 2372;
				switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					State = 2371; whiteSpace();
					}
					break;
				}
				State = 2374; expression(0);
				State = 2376;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2375; whiteSpace();
					}
				}

				State = 2378; Match(RPAREN);
				}
				break;

			case 7:
				{
				_localctx = new LiteralExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2380; literalExpression();
				}
				break;

			case 8:
				{
				_localctx = new LExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2381; lExpression(0);
				}
				break;

			case 9:
				{
				_localctx = new BuiltInTypeExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2382; builtInType();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2495;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2493;
					switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
					case 1:
						{
						_localctx = new PowOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2385;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2387;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2386; whiteSpace();
							}
						}

						State = 2389; Match(POW);
						State = 2391;
						switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
						case 1:
							{
							State = 2390; whiteSpace();
							}
							break;
						}
						State = 2393; expression(16);
						}
						break;

					case 2:
						{
						_localctx = new MultOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2394;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2396;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2395; whiteSpace();
							}
						}

						State = 2398;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2400;
						switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
						case 1:
							{
							State = 2399; whiteSpace();
							}
							break;
						}
						State = 2402; expression(14);
						}
						break;

					case 3:
						{
						_localctx = new IntDivOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2403;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2405;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2404; whiteSpace();
							}
						}

						State = 2407; Match(INTDIV);
						State = 2409;
						switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
						case 1:
							{
							State = 2408; whiteSpace();
							}
							break;
						}
						State = 2411; expression(13);
						}
						break;

					case 4:
						{
						_localctx = new ModOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2412;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2414;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2413; whiteSpace();
							}
						}

						State = 2416; Match(MOD);
						State = 2418;
						switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
						case 1:
							{
							State = 2417; whiteSpace();
							}
							break;
						}
						State = 2420; expression(12);
						}
						break;

					case 5:
						{
						_localctx = new AddOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2421;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2423;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2422; whiteSpace();
							}
						}

						State = 2425;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2427;
						switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
						case 1:
							{
							State = 2426; whiteSpace();
							}
							break;
						}
						State = 2429; expression(11);
						}
						break;

					case 6:
						{
						_localctx = new ConcatOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2430;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2432;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2431; whiteSpace();
							}
						}

						State = 2434; Match(AMPERSAND);
						State = 2436;
						switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
						case 1:
							{
							State = 2435; whiteSpace();
							}
							break;
						}
						State = 2438; expression(10);
						}
						break;

					case 7:
						{
						_localctx = new RelationalOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2439;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2441;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2440; whiteSpace();
							}
						}

						State = 2443;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (EQ - 208)) | (1L << (GEQ - 208)) | (1L << (GT - 208)) | (1L << (LEQ - 208)) | (1L << (LT - 208)) | (1L << (NEQ - 208)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2445;
						switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
						case 1:
							{
							State = 2444; whiteSpace();
							}
							break;
						}
						State = 2447; expression(9);
						}
						break;

					case 8:
						{
						_localctx = new LogicalAndOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2448;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2450;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2449; whiteSpace();
							}
						}

						State = 2452; Match(AND);
						State = 2454;
						switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
						case 1:
							{
							State = 2453; whiteSpace();
							}
							break;
						}
						State = 2456; expression(7);
						}
						break;

					case 9:
						{
						_localctx = new LogicalOrOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2457;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2459;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2458; whiteSpace();
							}
						}

						State = 2461; Match(OR);
						State = 2463;
						switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
						case 1:
							{
							State = 2462; whiteSpace();
							}
							break;
						}
						State = 2465; expression(6);
						}
						break;

					case 10:
						{
						_localctx = new LogicalXorOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2466;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2468;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2467; whiteSpace();
							}
						}

						State = 2470; Match(XOR);
						State = 2472;
						switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
						case 1:
							{
							State = 2471; whiteSpace();
							}
							break;
						}
						State = 2474; expression(5);
						}
						break;

					case 11:
						{
						_localctx = new LogicalEqvOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2475;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2477;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2476; whiteSpace();
							}
						}

						State = 2479; Match(EQV);
						State = 2481;
						switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
						case 1:
							{
							State = 2480; whiteSpace();
							}
							break;
						}
						State = 2483; expression(4);
						}
						break;

					case 12:
						{
						_localctx = new LogicalImpOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2484;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2486;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2485; whiteSpace();
							}
						}

						State = 2488; Match(IMP);
						State = 2490;
						switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
						case 1:
							{
							State = 2489; whiteSpace();
							}
							break;
						}
						State = 2492; expression(3);
						}
						break;
					}
					} 
				}
				State = 2497;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LiteralIdentifierContext literalIdentifier() {
			return GetRuleContext<LiteralIdentifierContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_literalExpression);
		try {
			State = 2505;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2498; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2499; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2500; Match(STRINGLITERAL);
				}
				break;
			case EMPTY:
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2501; literalIdentifier();
				State = 2503;
				switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					State = 2502; typeHint();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIdentifierContext : ParserRuleContext {
		public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
			return GetRuleContext<ObjectLiteralIdentifierContext>(0);
		}
		public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
			return GetRuleContext<BooleanLiteralIdentifierContext>(0);
		}
		public VariantLiteralIdentifierContext variantLiteralIdentifier() {
			return GetRuleContext<VariantLiteralIdentifierContext>(0);
		}
		public LiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIdentifierContext literalIdentifier() {
		LiteralIdentifierContext _localctx = new LiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_literalIdentifier);
		try {
			State = 2510;
			switch (_input.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2507; booleanLiteralIdentifier();
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2508; objectLiteralIdentifier();
				}
				break;
			case EMPTY:
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2509; variantLiteralIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public BooleanLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
		BooleanLiteralIdentifierContext _localctx = new BooleanLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_booleanLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2512;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ObjectLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
		ObjectLiteralIdentifierContext _localctx = new ObjectLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_objectLiteralIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2514; Match(NOTHING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public VariantLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariantLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariantLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantLiteralIdentifierContext variantLiteralIdentifier() {
		VariantLiteralIdentifierContext _localctx = new VariantLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_variantLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516;
			_la = _input.La(1);
			if ( !(_la==EMPTY || _la==NULL) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LExpressionContext : ParserRuleContext {
		public LExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lExpression; } }
	 
		public LExpressionContext() { }
		public virtual void CopyFrom(LExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexExprContext : LExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IndexExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithMemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithMemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithDictionaryAccessExprContext : LExpressionContext {
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithDictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExprContext : LExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleNameExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public MemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceExprContext : LExpressionContext {
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public InstanceExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DictionaryAccessExprContext : LExpressionContext {
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public DictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LExpressionContext lExpression() {
		return lExpression(0);
	}

	private LExpressionContext lExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LExpressionContext _localctx = new LExpressionContext(_ctx, _parentState);
		LExpressionContext _prevctx = _localctx;
		int _startState = 384;
		EnterRecursionRule(_localctx, 384, RULE_lExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2531;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				_localctx = new InstanceExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2519; Match(ME);
				}
				break;

			case 2:
				{
				_localctx = new SimpleNameExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2520; identifier();
				}
				break;

			case 3:
				{
				_localctx = new WithMemberAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2521; Match(DOT);
				State = 2523;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2522; mandatoryLineContinuation();
					}
				}

				State = 2525; unrestrictedIdentifier();
				}
				break;

			case 4:
				{
				_localctx = new WithDictionaryAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2526; Match(EXCLAMATIONPOINT);
				State = 2528;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2527; mandatoryLineContinuation();
					}
				}

				State = 2530; unrestrictedIdentifier();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2565;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,371,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2563;
					switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
					case 1:
						{
						_localctx = new IndexExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2533;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2534; Match(LPAREN);
						State = 2536;
						switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
						case 1:
							{
							State = 2535; whiteSpace();
							}
							break;
						}
						State = 2539;
						switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
						case 1:
							{
							State = 2538; argumentList();
							}
							break;
						}
						State = 2542;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2541; whiteSpace();
							}
						}

						State = 2544; Match(RPAREN);
						}
						break;

					case 2:
						{
						_localctx = new MemberAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2545;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2547;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2546; mandatoryLineContinuation();
							}
						}

						State = 2549; Match(DOT);
						State = 2551;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2550; mandatoryLineContinuation();
							}
						}

						State = 2553; unrestrictedIdentifier();
						}
						break;

					case 3:
						{
						_localctx = new DictionaryAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2554;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2556;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2555; mandatoryLineContinuation();
							}
						}

						State = 2558; Match(EXCLAMATIONPOINT);
						State = 2560;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2559; mandatoryLineContinuation();
							}
						}

						State = 2562; unrestrictedIdentifier();
						}
						break;
					}
					} 
				}
				State = 2567;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,371,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BuiltInTypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtInType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInTypeContext builtInType() {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_builtInType);
		int _la;
		try {
			State = 2589;
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2568; baseType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2569; Match(L_SQUARE_BRACKET);
				State = 2571;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2570; whiteSpace();
					}
				}

				State = 2573; baseType();
				State = 2575;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2574; whiteSpace();
					}
				}

				State = 2577; Match(R_SQUARE_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2579; Match(OBJECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2580; Match(L_SQUARE_BRACKET);
				State = 2582;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2581; whiteSpace();
					}
				}

				State = 2584; Match(OBJECT);
				State = 2586;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2585; whiteSpace();
					}
				}

				State = 2588; Match(R_SQUARE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ArgumentContext> argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_argumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610;
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 2592;
				switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					State = 2591; whiteSpace();
					}
					break;
				}
				State = 2595;
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 2594; argument();
					}
					break;
				}
				State = 2607;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,381,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2598;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2597; whiteSpace();
							}
						}

						State = 2600; Match(COMMA);
						State = 2602;
						switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
						case 1:
							{
							State = 2601; whiteSpace();
							}
							break;
						}
						State = 2604; argument();
						}
						} 
					}
					State = 2609;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,381,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredArgumentContext : ParserRuleContext {
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public RequiredArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRequiredArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRequiredArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredArgumentContext requiredArgument() {
		RequiredArgumentContext _localctx = new RequiredArgumentContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_requiredArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612; argument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NamedArgumentContext namedArgument() {
			return GetRuleContext<NamedArgumentContext>(0);
		}
		public PositionalArgumentContext positionalArgument() {
			return GetRuleContext<PositionalArgumentContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_argument);
		try {
			State = 2616;
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2614; positionalArgument();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2615; namedArgument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalArgumentContext : ParserRuleContext {
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public PositionalArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPositionalArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPositionalArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalArgumentContext positionalArgument() {
		PositionalArgumentContext _localctx = new PositionalArgumentContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_positionalArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2618; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_namedArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620; unrestrictedIdentifier();
			State = 2622;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2621; whiteSpace();
				}
			}

			State = 2624; Match(ASSIGN);
			State = 2626;
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2625; whiteSpace();
				}
				break;
			}
			State = 2628; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
			return GetRuleContext<LowerBoundArgumentExpressionContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
			return GetRuleContext<UpperBoundArgumentExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public AddressOfExpressionContext addressOfExpression() {
			return GetRuleContext<AddressOfExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_argumentExpression);
		try {
			State = 2642;
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2632;
				switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					State = 2630; Match(BYVAL);
					State = 2631; whiteSpace();
					}
					break;
				}
				State = 2634; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2635; addressOfExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2636; lowerBoundArgumentExpression();
				State = 2637; whiteSpace();
				State = 2638; Match(TO);
				State = 2639; whiteSpace();
				State = 2640; upperBoundArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLowerBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLowerBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
		LowerBoundArgumentExpressionContext _localctx = new LowerBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_lowerBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2644; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
		UpperBoundArgumentExpressionContext _localctx = new UpperBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_upperBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressOfExpressionContext : ParserRuleContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddressOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddressOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddressOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddressOfExpressionContext addressOfExpression() {
		AddressOfExpressionContext _localctx = new AddressOfExpressionContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_addressOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2648; Match(ADDRESSOF);
			State = 2649; whiteSpace();
			State = 2650; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode WRITE(int i) {
			return GetToken(VBAParser.WRITE, i);
		}
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode B_CHAR() { return GetToken(VBAParser.B_CHAR, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WRITE() { return GetTokens(VBAParser.WRITE); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2652;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerKeywordContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public MarkerKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkerKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkerKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerKeywordContext markerKeyword() {
		MarkerKeywordContext _localctx = new MarkerKeywordContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_markerKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2656;
			_la = _input.La(1);
			if ( !(((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (EXIT - 24)) | (1L << (OPTION - 24)) | (1L << (CALL - 24)) | (1L << (CASE - 24)) | (1L << (CONST - 24)) | (1L << (DECLARE - 24)) | (1L << (DEFBOOL - 24)) | (1L << (DEFBYTE - 24)) | (1L << (DEFDATE - 24)) | (1L << (DEFDBL - 24)) | (1L << (DEFCUR - 24)) | (1L << (DEFINT - 24)) | (1L << (DEFLNG - 24)) | (1L << (DEFLNGLNG - 24)) | (1L << (DEFLNGPTR - 24)) | (1L << (DEFOBJ - 24)) | (1L << (DEFSNG - 24)) | (1L << (DEFSTR - 24)) | (1L << (DEFVAR - 24)) | (1L << (DIM - 24)) | (1L << (DO - 24)) | (1L << (ELSE - 24)))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (ELSEIF - 88)) | (1L << (END_SELECT - 88)) | (1L << (END_WITH - 88)) | (1L << (ENUM - 88)) | (1L << (ERASE - 88)) | (1L << (EVENT - 88)) | (1L << (EXIT_DO - 88)) | (1L << (EXIT_FOR - 88)) | (1L << (EXIT_FUNCTION - 88)) | (1L << (EXIT_PROPERTY - 88)) | (1L << (EXIT_SUB - 88)) | (1L << (FRIEND - 88)) | (1L << (FOR - 88)) | (1L << (FUNCTION - 88)) | (1L << (GLOBAL - 88)) | (1L << (GOSUB - 88)) | (1L << (GOTO - 88)) | (1L << (IF - 88)) | (1L << (IMPLEMENTS - 88)) | (1L << (LOOP - 88)) | (1L << (LET - 88)) | (1L << (LSET - 88)) | (1L << (NEXT - 88)) | (1L << (ON - 88)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (PRIVATE - 159)) | (1L << (PUBLIC - 159)) | (1L << (RAISEEVENT - 159)) | (1L << (REDIM - 159)) | (1L << (RESUME - 159)) | (1L << (RETURN - 159)) | (1L << (RSET - 159)) | (1L << (SELECT - 159)) | (1L << (SET - 159)) | (1L << (STATIC - 159)) | (1L << (STOP - 159)) | (1L << (SUB - 159)) | (1L << (TYPE - 159)) | (1L << (WEND - 159)) | (1L << (WHILE - 159)) | (1L << (WITH - 159)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CommentOrAnnotationContext commentOrAnnotation() {
			return GetRuleContext<CommentOrAnnotationContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_endOfLine);
		int _la;
		try {
			State = 2669;
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2659;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2658; whiteSpace();
					}
				}

				State = 2661; Match(NEWLINE);
				State = 2663;
				switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					State = 2662; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2666;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2665; whiteSpace();
					}
				}

				State = 2668; commentOrAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2681;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2679;
					switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
					case 1:
						{
						State = 2671; endOfLine();
						}
						break;

					case 2:
						{
						{
						State = 2673;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2672; whiteSpace();
							}
						}

						State = 2675; Match(COLON);
						State = 2677;
						switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
						case 1:
							{
							State = 2676; whiteSpace();
							}
							break;
						}
						}
						}
						break;
					}
					} 
				}
				State = 2683;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentOrAnnotationContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public CommentOrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentOrAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentOrAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentOrAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentOrAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentOrAnnotationContext commentOrAnnotation() {
		CommentOrAnnotationContext _localctx = new CommentOrAnnotationContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_commentOrAnnotation);
		try {
			State = 2687;
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2684; annotationList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2685; remComment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2686; comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2689; Match(REM);
			State = 2691;
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				State = 2690; whiteSpace();
				}
				break;
			}
			State = 2693; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2695; Match(SINGLEQUOTE);
			State = 2696; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public CommentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBodyContext commentBody() {
		CommentBodyContext _localctx = new CommentBodyContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_commentBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2702;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,399,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2700;
					switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
					case 1:
						{
						State = 2698; Match(LINE_CONTINUATION);
						}
						break;

					case 2:
						{
						State = 2699;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==NEWLINE) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						}
						break;
					}
					} 
				}
				State = 2704;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> AT() { return GetTokens(VBAParser.AT); }
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode AT(int i) {
			return GetToken(VBAParser.AT, i);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2705; Match(SINGLEQUOTE);
			State = 2711;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2706; Match(AT);
				State = 2707; annotation();
				State = 2709;
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 2708; whiteSpace();
					}
					break;
				}
				}
				}
				State = 2713;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			State = 2720;
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2716;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2715; whiteSpace();
					}
				}

				State = 2718; Match(COLON);
				State = 2719; commentBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2722; annotationName();
			State = 2724;
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2723; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2726; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2788;
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2728; whiteSpace();
				State = 2729; annotationArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2731; whiteSpace();
				State = 2732; annotationArg();
				State = 2741;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2734;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2733; whiteSpace();
							}
						}

						State = 2736; Match(COMMA);
						State = 2738;
						switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
						case 1:
							{
							State = 2737; whiteSpace();
							}
							break;
						}
						State = 2740; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2743;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,407,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2746;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2745; whiteSpace();
					}
				}

				State = 2748; Match(LPAREN);
				State = 2750;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2749; whiteSpace();
					}
				}

				State = 2752; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2754;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2753; whiteSpace();
					}
				}

				State = 2756; Match(LPAREN);
				State = 2758;
				switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					State = 2757; whiteSpace();
					}
					break;
				}
				State = 2760; annotationArg();
				State = 2762;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2761; whiteSpace();
					}
				}

				State = 2764; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2767;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2766; whiteSpace();
					}
				}

				State = 2769; Match(LPAREN);
				State = 2770; annotationArg();
				State = 2779;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2772;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2771; whiteSpace();
							}
						}

						State = 2774; Match(COMMA);
						State = 2776;
						switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
						case 1:
							{
							State = 2775; whiteSpace();
							}
							break;
						}
						State = 2778; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2781;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,416,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2784;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2783; whiteSpace();
					}
				}

				State = 2786; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_annotationArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2790; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MandatoryLineContinuationContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LINE_CONTINUATION() { return GetToken(VBAParser.LINE_CONTINUATION, 0); }
		public MandatoryLineContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mandatoryLineContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMandatoryLineContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMandatoryLineContinuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMandatoryLineContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MandatoryLineContinuationContext mandatoryLineContinuation() {
		MandatoryLineContinuationContext _localctx = new MandatoryLineContinuationContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_mandatoryLineContinuation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2792; Match(LINE_CONTINUATION);
			State = 2796;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 2793; Match(WS);
				}
				}
				State = 2798;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2800;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2799;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2802;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,420,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 78: return upperCaseA_sempred((UpperCaseAContext)_localctx, predIndex);

		case 79: return upperCaseZ_sempred((UpperCaseZContext)_localctx, predIndex);

		case 186: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 192: return lExpression_sempred((LExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 15);

		case 3: return Precpred(_ctx, 13);

		case 4: return Precpred(_ctx, 12);

		case 5: return Precpred(_ctx, 11);

		case 6: return Precpred(_ctx, 10);

		case 7: return Precpred(_ctx, 9);

		case 8: return Precpred(_ctx, 8);

		case 9: return Precpred(_ctx, 6);

		case 10: return Precpred(_ctx, 5);

		case 11: return Precpred(_ctx, 4);

		case 12: return Precpred(_ctx, 3);

		case 13: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool upperCaseZ_sempred(UpperCaseZContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _input.Lt(1).Text.Equals("Z");
		}
		return true;
	}
	private bool lExpression_sempred(LExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(_ctx, 5);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);
		}
		return true;
	}
	private bool upperCaseA_sempred(UpperCaseAContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _input.Lt(1).Text.Equals("A");
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xED\xAF7\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5"+
		"\x3\x1BF\n\x3\x3\x3\x3\x3\x5\x3\x1C3\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3\x1CB\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x1D1\n\x4\x3\x4\x5"+
		"\x4\x1D4\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x1DE"+
		"\n\x5\x5\x5\x1E0\n\x5\x3\x5\x3\x5\x6\x5\x1E4\n\x5\r\x5\xE\x5\x1E5\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x1ED\n\x6\f\x6\xE\x6\x1F0\v\x6\x3\x6\x3"+
		"\x6\a\x6\x1F4\n\x6\f\x6\xE\x6\x1F7\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1FC\n"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\x203\n\a\f\a\xE\a\x206\v\a\x3\b\x3"+
		"\b\x3\b\x3\b\x5\b\x20C\n\b\x3\b\x3\b\x5\b\x210\n\b\x3\b\x3\b\x5\b\x214"+
		"\n\b\x3\b\x3\b\x5\b\x218\n\b\x3\b\a\b\x21B\n\b\f\b\xE\b\x21E\v\b\x3\t"+
		"\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\x227\n\v\f\v\xE\v\x22A\v\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x236\n\f\x3\r\x5\r\x239"+
		"\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x246"+
		"\n\r\x3\xE\x5\xE\x249\n\xE\x3\xE\x3\xE\x3\xE\a\xE\x24E\n\xE\f\xE\xE\xE"+
		"\x251\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x258\n\xF\x3\x10\x3\x10"+
		"\x3\x10\a\x10\x25D\n\x10\f\x10\xE\x10\x260\v\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x287\n\x11\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\x297\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\x29F\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x2A4\n\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\x2A9\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\x2B2\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x5\x1A\x2C6\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2CA\n\x1A\x3\x1A\x3\x1A\x3\x1B"+
		"\x3\x1B\x3\x1C\x3\x1C\x5\x1C\x2D2\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2DD\n\x1F\x3 \x3 \x3!\x3!\x5"+
		"!\x2E3\n!\x3!\x3!\x5!\x2E7\n!\x3!\a!\x2EA\n!\f!\xE!\x2ED\v!\x3\"\x3\""+
		"\x3\"\x3\"\x5\"\x2F3\n\"\x3\"\x3\"\x5\"\x2F7\n\"\x3\"\x3\"\x3#\x3#\x3"+
		"$\x3$\x3$\x3$\x5$\x301\n$\x3$\x3$\x5$\x305\n$\x3$\x5$\x308\n$\x3%\x3%"+
		"\x3%\x3%\x5%\x30E\n%\x3%\x3%\x3%\x3%\x5%\x314\n%\x3&\x3&\x3\'\x3\'\x3"+
		"(\x3(\x3(\x3(\x5(\x31E\n(\x3(\x3(\x5(\x322\n(\x3(\x5(\x325\n(\x3)\x3)"+
		"\x3)\x3)\x5)\x32B\n)\x3)\x3)\x5)\x32F\n)\x3)\x3)\x3*\x3*\x3+\x3+\x3+\x3"+
		"+\x5+\x339\n+\x3+\x3+\x5+\x33D\n+\x3+\x3+\x3,\x3,\x3-\x3-\x3-\x3-\x5-"+
		"\x347\n-\x3.\x3.\x5.\x34B\n.\x3.\x3.\x5.\x34F\n.\x3.\x3.\x3/\x3/\x3\x30"+
		"\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x35B\n\x31\x3\x31\x3\x31\x5"+
		"\x31\x35F\n\x31\x3\x31\x5\x31\x362\n\x31\x3\x32\x3\x32\x5\x32\x366\n\x32"+
		"\x3\x32\a\x32\x369\n\x32\f\x32\xE\x32\x36C\v\x32\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x5\x33\x372\n\x33\x3\x33\x3\x33\x5\x33\x376\n\x33\x3\x34\x3\x34"+
		"\x3\x34\x5\x34\x37B\n\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x37\x3\x37\x5"+
		"\x37\x383\n\x37\x3\x37\x3\x37\x5\x37\x387\n\x37\x3\x37\x3\x37\x5\x37\x38B"+
		"\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x5\x39\x393\n\x39\x3"+
		"\x39\x5\x39\x396\n\x39\x3:\x3:\x5:\x39A\n:\x3:\x3:\x5:\x39E\n:\x3:\x3"+
		":\x3;\x3;\x3<\x3<\x3<\x3<\x5<\x3A8\n<\x3<\x3<\x5<\x3AC\n<\x3<\x5<\x3AF"+
		"\n<\x3=\x3=\x3=\x3=\x5=\x3B5\n=\x3=\x3=\x5=\x3B9\n=\x3=\x3=\x3>\x3>\x5"+
		">\x3BF\n>\x3>\x3>\x5>\x3C3\n>\x3>\a>\x3C6\n>\f>\xE>\x3C9\v>\x3?\x3?\x3"+
		"@\x3@\x3@\x3@\x5@\x3D1\n@\x3@\x3@\x5@\x3D5\n@\x3@\x5@\x3D8\n@\x3@\x5@"+
		"\x3DB\n@\x3@\x3@\x5@\x3DF\n@\x3@\x3@\x3\x41\x3\x41\x3\x42\x3\x42\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x5\x43\x3EB\n\x43\x3\x43\x3\x43\x5\x43\x3EF\n\x43"+
		"\x3\x43\x5\x43\x3F2\n\x43\x3\x43\x5\x43\x3F5\n\x43\x3\x43\x3\x43\x5\x43"+
		"\x3F9\n\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x5\x45\x402"+
		"\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x408\n\x45\x3\x45\x3\x45\x5"+
		"\x45\x40C\n\x45\x3\x45\a\x45\x40F\n\x45\f\x45\xE\x45\x412\v\x45\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x5\x46\x418\n\x46\x3\x46\x5\x46\x41B\n\x46\x3\x46"+
		"\x3\x46\x5\x46\x41F\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x5G\x426\nG\x3G\x3"+
		"G\x3G\x3G\x5G\x42C\nG\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G"+
		"\x5G\x43A\nG\x3G\x5G\x43D\nG\x3G\x5G\x440\nG\x3G\x3G\x3G\x5G\x445\nG\x3"+
		"H\x3H\x5H\x449\nH\x3H\x3H\x5H\x44D\nH\x3H\x3H\x5H\x451\nH\x3H\aH\x454"+
		"\nH\fH\xEH\x457\vH\x5H\x459\nH\x3H\x5H\x45C\nH\x3H\x3H\x3I\x3I\x5I\x462"+
		"\nI\x3I\x3I\x5I\x466\nI\x3I\x3I\x5I\x46A\nI\x3I\x3I\x5I\x46E\nI\x3I\x3"+
		"I\x5I\x472\nI\x3I\x5I\x475\nI\x3I\x5I\x478\nI\x3I\x5I\x47B\nI\x3I\x5I"+
		"\x47E\nI\x3I\x5I\x481\nI\x3J\x3J\x5J\x485\nJ\x3J\x3J\x3K\x3K\x3K\x3K\x5"+
		"K\x48D\nK\x3K\x3K\x5K\x491\nK\x3K\aK\x494\nK\fK\xEK\x497\vK\x3L\x3L\x3"+
		"M\x3M\x3M\x5M\x49E\nM\x3N\x3N\x3O\x3O\x5O\x4A4\nO\x3O\x3O\x5O\x4A8\nO"+
		"\x3O\x3O\x3P\x3P\x3P\x3Q\x3Q\x3Q\x3R\x3R\x5R\x4B4\nR\x3R\x3R\x5R\x4B8"+
		"\nR\x3R\x3R\x3S\x3S\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3"+
		"U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x4D7\nU\x3V\x3V"+
		"\x3V\x5V\x4DC\nV\x3V\x3V\x3V\x3V\x3V\aV\x4E3\nV\fV\xEV\x4E6\vV\x3V\x3"+
		"V\x3W\x3W\x5W\x4EC\nW\x3W\x3W\x5W\x4F0\nW\x3W\x5W\x4F3\nW\x3W\x3W\x3X"+
		"\x3X\x3Y\x3Y\x3Y\x3Y\x5Y\x4FD\nY\x3Y\x3Y\x5Y\x501\nY\x3Y\aY\x504\nY\f"+
		"Y\xEY\x507\vY\x3Z\x3Z\x3Z\x3Z\x3[\x3[\x3[\x5[\x510\n[\x3[\x3[\x3[\x3["+
		"\x5[\x516\n[\x3[\x3[\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3"+
		"]\x3]\x3]\x3]\x3]\x3]\x5]\x52B\n]\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^"+
		"\x3^\x3^\x3^\x5^\x539\n^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x541\n^\x3_\x3_\x3"+
		"_\x5_\x546\n_\x3_\x3_\x5_\x54A\n_\x3_\x3_\x5_\x54E\n_\x3_\x3_\x5_\x552"+
		"\n_\x3_\x5_\x555\n_\x3_\x5_\x558\n_\x3_\x5_\x55B\n_\x3_\x3_\x3_\x3_\x3"+
		"`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x573\n\x63\f\x63"+
		"\xE\x63\x576\v\x63\x3\x63\x5\x63\x579\n\x63\x3\x63\x3\x63\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x5\x64\x58B\n\x64\x3\x64\x3\x64\x5\x64\x58F\n\x64\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x5\x66\x597\n\x66\x3g\x3g\x5g\x59B"+
		"\ng\x3g\x3g\x5g\x59F\ng\x3g\x3g\x5g\x5A3\ng\x3g\x3g\x3g\x3g\x5g\x5A9\n"+
		"g\x3h\x3h\x5h\x5AD\nh\x3h\x3h\x5h\x5B1\nh\x3h\x3h\x3h\x5h\x5B6\nh\x3h"+
		"\x3h\x3i\x3i\x5i\x5BC\ni\x3i\x5i\x5BF\ni\x3j\x3j\x5j\x5C3\nj\x3j\x3j\x5"+
		"j\x5C7\nj\x3j\x5j\x5CA\nj\aj\x5CC\nj\fj\xEj\x5CF\vj\x3j\x3j\x5j\x5D3\n"+
		"j\x5j\x5D5\nj\x3j\x3j\x5j\x5D9\nj\x3j\x3j\x5j\x5DD\nj\x3j\x5j\x5E0\nj"+
		"\aj\x5E2\nj\fj\xEj\x5E5\vj\x5j\x5E7\nj\x3k\x3k\x3l\x3l\x3m\x3m\x3m\x3"+
		"m\x3n\x3n\x5n\x5F3\nn\x3n\x3n\x5n\x5F7\nn\x3n\x3n\x5n\x5FB\nn\x3n\x3n"+
		"\x3o\x3o\x3o\x3o\x5o\x603\no\x3o\x3o\x5o\x607\no\x3o\x3o\x3p\x3p\x3p\x3"+
		"p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x615\np\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x5q\x61F\nq\x3q\x3q\x5q\x623\nq\x3q\aq\x626\nq\fq\xEq\x629\vq\x3r\x3"+
		"r\x3r\x3r\x3r\x3r\x3r\x3r\x5r\x633\nr\x3r\x3r\x5r\x637\nr\x3r\ar\x63A"+
		"\nr\fr\xEr\x63D\vr\x3s\x3s\x3s\x5s\x642\ns\x3s\x3s\x5s\x646\ns\x3s\x3"+
		"s\x3s\x3s\x5s\x64C\ns\x3s\x5s\x64F\ns\x3s\x3s\x3s\x5s\x654\ns\x3s\x3s"+
		"\x3s\x3s\x3t\x3t\x3t\x5t\x65D\nt\x3t\x3t\x5t\x661\nt\x3t\x3t\x3t\x3t\x5"+
		"t\x667\nt\x3t\x5t\x66A\nt\x3t\x3t\x3t\x3t\x3u\x3u\x3u\x5u\x673\nu\x3u"+
		"\x3u\x5u\x677\nu\x3u\x3u\x3u\x3u\x5u\x67D\nu\x3u\x5u\x680\nu\x3u\x3u\x3"+
		"u\x3u\x3v\x3v\x3v\x3v\x5v\x68A\nv\x3v\x3v\x5v\x68E\nv\x3v\x5v\x691\nv"+
		"\x3v\x5v\x694\nv\x3v\x5v\x697\nv\x3w\x3w\x5w\x69B\nw\x3w\x3w\x5w\x69F"+
		"\nw\x3w\aw\x6A2\nw\fw\xEw\x6A5\vw\x3x\x3x\x5x\x6A9\nx\x3x\x3x\x3y\x3y"+
		"\x3y\x3y\x5y\x6B1\ny\x3y\x3y\x3z\x3z\x5z\x6B7\nz\x3z\x3z\x5z\x6BB\nz\x3"+
		"z\az\x6BE\nz\fz\xEz\x6C1\vz\x3{\x3{\x3{\x3{\x5{\x6C7\n{\x3|\x3|\x3|\x5"+
		"|\x6CC\n|\x3|\x3|\x5|\x6D0\n|\x3|\x3|\x5|\x6D4\n|\x3|\x3|\x5|\x6D8\n|"+
		"\x3|\x3|\x5|\x6DC\n|\x3|\x3|\x5|\x6E0\n|\x5|\x6E2\n|\x3|\x3|\x5|\x6E6"+
		"\n|\x3|\x3|\x5|\x6EA\n|\x3|\x3|\x3}\x3}\x5}\x6F0\n}\x3~\x3~\x3\x7F\x3"+
		"\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\x6FC\n\x7F\x5\x7F"+
		"\x6FE\n\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\x704\n\x80\x5\x80\x706"+
		"\n\x80\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\x70E\n\x82\x3"+
		"\x82\x3\x82\x5\x82\x712\n\x82\x3\x82\x3\x82\x3\x83\x3\x83\x3\x84\x3\x84"+
		"\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x5\x85\x722\n"+
		"\x85\x3\x85\x3\x85\x5\x85\x726\n\x85\x3\x85\x3\x85\x3\x85\a\x85\x72B\n"+
		"\x85\f\x85\xE\x85\x72E\v\x85\x3\x85\x5\x85\x731\n\x85\x3\x85\x3\x85\x3"+
		"\x86\x3\x86\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\x73B\n\x87\x3\x87\x3\x87"+
		"\x5\x87\x73F\n\x87\x3\x87\a\x87\x742\n\x87\f\x87\xE\x87\x745\v\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x88\x3\x88\x5\x88\x74C\n\x88\x3\x88\x3\x88\x3\x88"+
		"\x3\x88\x3\x89\x3\x89\x5\x89\x754\n\x89\x5\x89\x756\n\x89\x3\x89\x3\x89"+
		"\x5\x89\x75A\n\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3"+
		"\x89\x3\x89\x5\x89\x765\n\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x3\x8C"+
		"\x3\x8C\x3\x8C\x5\x8C\x76F\n\x8C\x3\x8C\x3\x8C\x5\x8C\x773\n\x8C\x3\x8C"+
		"\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x5\x8D\x77A\n\x8D\x3\x8D\x3\x8D\x5\x8D\x77E"+
		"\n\x8D\x3\x8D\x3\x8D\x5\x8D\x782\n\x8D\x3\x8D\x3\x8D\x5\x8D\x786\n\x8D"+
		"\x3\x8D\x5\x8D\x789\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3"+
		"\x8F\x3\x8F\x5\x8F\x793\n\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\a\x92\x7A7\n\x92\f\x92\xE\x92\x7AA\v\x92\x3\x93\x3\x93"+
		"\x5\x93\x7AE\n\x93\x3\x94\x3\x94\x5\x94\x7B2\n\x94\x3\x94\x3\x94\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x96\x3\x96\x3\x96\x5\x96\x7BD\n\x96\x3\x96\x3"+
		"\x96\x3\x97\x3\x97\x5\x97\x7C3\n\x97\x3\x97\x5\x97\x7C6\n\x97\x3\x97\x5"+
		"\x97\x7C9\n\x97\x3\x97\x3\x97\x3\x98\x3\x98\x5\x98\x7CF\n\x98\x3\x98\x3"+
		"\x98\x5\x98\x7D3\n\x98\x3\x98\a\x98\x7D6\n\x98\f\x98\xE\x98\x7D9\v\x98"+
		"\x3\x99\x3\x99\x5\x99\x7DD\n\x99\x5\x99\x7DF\n\x99\x3\x99\x3\x99\x3\x9A"+
		"\x3\x9A\x5\x9A\x7E5\n\x9A\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3"+
		"\x9D\x3\x9D\x3\x9D\x5\x9D\x7F0\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x7F5"+
		"\n\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x5\x9E\x7FB\n\x9E\x3\x9E\x3\x9E\x5"+
		"\x9E\x7FF\n\x9E\x3\x9E\a\x9E\x802\n\x9E\f\x9E\xE\x9E\x805\v\x9E\x3\x9F"+
		"\x3\x9F\x5\x9F\x809\n\x9F\x3\x9F\x3\x9F\x5\x9F\x80D\n\x9F\x3\x9F\x3\x9F"+
		"\x5\x9F\x811\n\x9F\x5\x9F\x813\n\x9F\x3\x9F\x3\x9F\x5\x9F\x817\n\x9F\x5"+
		"\x9F\x819\n\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\x81E\n\x9F\x3\xA0\x3\xA0\x3"+
		"\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\x832\n\xA2\x5\xA2\x834"+
		"\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\x83A\n\xA2\x5\xA2\x83C\n\xA2"+
		"\x3\xA2\x3\xA2\x5\xA2\x840\n\xA2\x3\xA2\x3\xA2\x5\xA2\x844\n\xA2\x3\xA2"+
		"\x5\xA2\x847\n\xA2\x3\xA2\x5\xA2\x84A\n\xA2\x3\xA2\x3\xA2\x5\xA2\x84E"+
		"\n\xA2\x3\xA2\x5\xA2\x851\n\xA2\x3\xA3\x3\xA3\x5\xA3\x855\n\xA3\x3\xA3"+
		"\x3\xA3\x5\xA3\x859\n\xA3\x5\xA3\x85B\n\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3"+
		"\x5\xA3\x861\n\xA3\x5\xA3\x863\n\xA3\x3\xA3\x3\xA3\x5\xA3\x867\n\xA3\x3"+
		"\xA3\x3\xA3\x5\xA3\x86B\n\xA3\x3\xA3\x6\xA3\x86E\n\xA3\r\xA3\xE\xA3\x86F"+
		"\x3\xA4\x3\xA4\x5\xA4\x874\n\xA4\x3\xA4\x3\xA4\x5\xA4\x878\n\xA4\x5\xA4"+
		"\x87A\n\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x880\n\xA4\x3\xA4\x3\xA4"+
		"\x5\xA4\x884\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x5\xA5\x88A\n\xA5\x3\xA5"+
		"\x3\xA5\x5\xA5\x88E\n\xA5\x3\xA5\x3\xA5\x5\xA5\x892\n\xA5\x3\xA5\x3\xA5"+
		"\x5\xA5\x896\n\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x5\xA7\x89E"+
		"\n\xA7\x3\xA7\x3\xA7\x5\xA7\x8A2\n\xA7\x3\xA7\a\xA7\x8A5\n\xA7\f\xA7\xE"+
		"\xA7\x8A8\v\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x8AF\n\xA8\x3"+
		"\xA8\x3\xA8\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x8B6\n\xA9\x3\xAA\x3\xAA\x5\xAA"+
		"\x8BA\n\xAA\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD\x3"+
		"\xAD\x5\xAD\x8C5\n\xAD\x3\xAE\x3\xAE\a\xAE\x8C9\n\xAE\f\xAE\xE\xAE\x8CC"+
		"\v\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x5\xAF\x8D2\n\xAF\x3\xB0\x3\xB0\x5"+
		"\xB0\x8D6\n\xB0\x3\xB0\x3\xB0\x5\xB0\x8DA\n\xB0\x3\xB0\x3\xB0\x5\xB0\x8DE"+
		"\n\xB0\x3\xB0\x5\xB0\x8E1\n\xB0\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x3\xB3\x3"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x8EC\n\xB3\x3\xB3\x3\xB3\x5\xB3\x8F0"+
		"\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x8FE\n\xB3\x3\xB4\x3\xB4\x5\xB4\x902\n\xB4"+
		"\x3\xB4\x3\xB4\x5\xB4\x906\n\xB4\x3\xB5\x3\xB5\x5\xB5\x90A\n\xB5\x3\xB6"+
		"\x3\xB6\x5\xB6\x90E\n\xB6\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x5\xB7\x914\n\xB7"+
		"\x3\xB7\x5\xB7\x917\n\xB7\x3\xB8\x3\xB8\x3\xB9\x3\xB9\x5\xB9\x91D\n\xB9"+
		"\x3\xB9\x5\xB9\x920\n\xB9\x3\xB9\x3\xB9\x5\xB9\x924\n\xB9\x3\xB9\x5\xB9"+
		"\x927\n\xB9\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3"+
		"\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x938\n\xBC\x3\xBC"+
		"\x3\xBC\x3\xBC\x5\xBC\x93D\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x943"+
		"\n\xBC\x3\xBC\x3\xBC\x5\xBC\x947\n\xBC\x3\xBC\x3\xBC\x5\xBC\x94B\n\xBC"+
		"\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x952\n\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x956\n\xBC\x3\xBC\x3\xBC\x5\xBC\x95A\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x95F\n\xBC\x3\xBC\x3\xBC\x5\xBC\x963\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x968\n\xBC\x3\xBC\x3\xBC\x5\xBC\x96C\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x971\n\xBC\x3\xBC\x3\xBC\x5\xBC\x975\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x97A\n\xBC\x3\xBC\x3\xBC\x5\xBC\x97E\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x983\n\xBC\x3\xBC\x3\xBC\x5\xBC\x987\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x98C\n\xBC\x3\xBC\x3\xBC\x5\xBC\x990\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x995\n\xBC\x3\xBC\x3\xBC\x5\xBC\x999\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x99E\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9A2\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9A7\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9AB\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9B0\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9B4\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9B9\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9BD\n\xBC\x3\xBC\a\xBC\x9C0\n\xBC"+
		"\f\xBC\xE\xBC\x9C3\v\xBC\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x9CA"+
		"\n\xBD\x5\xBD\x9CC\n\xBD\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x9D1\n\xBE\x3\xBF"+
		"\x3\xBF\x3\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2"+
		"\x5\xC2\x9DE\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x9E3\n\xC2\x3\xC2\x5\xC2"+
		"\x9E6\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x9EB\n\xC2\x3\xC2\x5\xC2\x9EE"+
		"\n\xC2\x3\xC2\x5\xC2\x9F1\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x9F6\n\xC2"+
		"\x3\xC2\x3\xC2\x5\xC2\x9FA\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x9FF\n\xC2"+
		"\x3\xC2\x3\xC2\x5\xC2\xA03\n\xC2\x3\xC2\a\xC2\xA06\n\xC2\f\xC2\xE\xC2"+
		"\xA09\v\xC2\x3\xC3\x3\xC3\x3\xC3\x5\xC3\xA0E\n\xC3\x3\xC3\x3\xC3\x5\xC3"+
		"\xA12\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\xA19\n\xC3\x3\xC3"+
		"\x3\xC3\x5\xC3\xA1D\n\xC3\x3\xC3\x5\xC3\xA20\n\xC3\x3\xC4\x5\xC4\xA23"+
		"\n\xC4\x3\xC4\x5\xC4\xA26\n\xC4\x3\xC4\x5\xC4\xA29\n\xC4\x3\xC4\x3\xC4"+
		"\x5\xC4\xA2D\n\xC4\x3\xC4\a\xC4\xA30\n\xC4\f\xC4\xE\xC4\xA33\v\xC4\x5"+
		"\xC4\xA35\n\xC4\x3\xC5\x3\xC5\x3\xC6\x3\xC6\x5\xC6\xA3B\n\xC6\x3\xC7\x3"+
		"\xC7\x3\xC8\x3\xC8\x5\xC8\xA41\n\xC8\x3\xC8\x3\xC8\x5\xC8\xA45\n\xC8\x3"+
		"\xC8\x3\xC8\x3\xC9\x3\xC9\x5\xC9\xA4B\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\xA55\n\xC9\x3\xCA\x3\xCA\x3\xCB\x3"+
		"\xCB\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCD\x3\xCD\x3\xCE\x3\xCE\x3\xCF\x3"+
		"\xCF\x3\xD0\x5\xD0\xA66\n\xD0\x3\xD0\x3\xD0\x5\xD0\xA6A\n\xD0\x3\xD0\x5"+
		"\xD0\xA6D\n\xD0\x3\xD0\x5\xD0\xA70\n\xD0\x3\xD1\x3\xD1\x5\xD1\xA74\n\xD1"+
		"\x3\xD1\x3\xD1\x5\xD1\xA78\n\xD1\a\xD1\xA7A\n\xD1\f\xD1\xE\xD1\xA7D\v"+
		"\xD1\x3\xD2\x3\xD2\x3\xD2\x5\xD2\xA82\n\xD2\x3\xD3\x3\xD3\x5\xD3\xA86"+
		"\n\xD3\x3\xD3\x3\xD3\x3\xD4\x3\xD4\x3\xD4\x3\xD5\x3\xD5\a\xD5\xA8F\n\xD5"+
		"\f\xD5\xE\xD5\xA92\v\xD5\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\xA98\n\xD6"+
		"\x6\xD6\xA9A\n\xD6\r\xD6\xE\xD6\xA9B\x3\xD6\x5\xD6\xA9F\n\xD6\x3\xD6\x3"+
		"\xD6\x5\xD6\xAA3\n\xD6\x3\xD7\x3\xD7\x5\xD7\xAA7\n\xD7\x3\xD8\x3\xD8\x3"+
		"\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\xAB1\n\xD9\x3\xD9\x3\xD9"+
		"\x5\xD9\xAB5\n\xD9\x3\xD9\x6\xD9\xAB8\n\xD9\r\xD9\xE\xD9\xAB9\x3\xD9\x5"+
		"\xD9\xABD\n\xD9\x3\xD9\x3\xD9\x5\xD9\xAC1\n\xD9\x3\xD9\x3\xD9\x5\xD9\xAC5"+
		"\n\xD9\x3\xD9\x3\xD9\x5\xD9\xAC9\n\xD9\x3\xD9\x3\xD9\x5\xD9\xACD\n\xD9"+
		"\x3\xD9\x3\xD9\x3\xD9\x5\xD9\xAD2\n\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\xAD7"+
		"\n\xD9\x3\xD9\x3\xD9\x5\xD9\xADB\n\xD9\x3\xD9\x6\xD9\xADE\n\xD9\r\xD9"+
		"\xE\xD9\xADF\x3\xD9\x5\xD9\xAE3\n\xD9\x3\xD9\x3\xD9\x5\xD9\xAE7\n\xD9"+
		"\x3\xDA\x3\xDA\x3\xDB\x3\xDB\a\xDB\xAED\n\xDB\f\xDB\xE\xDB\xAF0\v\xDB"+
		"\x3\xDC\x6\xDC\xAF3\n\xDC\r\xDC\xE\xDC\xAF4\x3\xDC\x2\x2\x4\x176\x182"+
		"\xDD\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2"+
		"j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86"+
		"\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A"+
		"\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE"+
		"\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2"+
		"\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6"+
		"\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA"+
		"\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE"+
		"\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110"+
		"\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122"+
		"\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134"+
		"\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146"+
		"\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158"+
		"\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A"+
		"\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C"+
		"\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E"+
		"\x2\x190\x2\x192\x2\x194\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0"+
		"\x2\x1A2\x2\x1A4\x2\x1A6\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2"+
		"\x2\x1B4\x2\x1B6\x2\x2\x1E\x5\x2;;\x45\x45\xBE\xBE\a\x2\x38\x38;;{{\x9D"+
		"\x9D\xA8\xA8\x4\x2\xAA\xAB\xCD\xCD\x4\x2\x85\x87\xB5\xB5\x4\x2))++\x4"+
		"\x2rr\xBC\xBC\x3\x2=>\x3\x2HT\x4\x2\xC5\xC5\xC9\xC9\x3\x2jn\x3\x2\x94"+
		"\x95\x4\x2##\x8A\x8A\x4\x2tt\xA6\xA6\x3\x2\x6\a\x3\x2\xDE\xDF\xE\x2\x4"+
		"\x4\x15\x15!\"<<??\x46\x46WW}}\x7F\x7F\xB6\xB6\xBB\xBB\xC6\xC6\a\x2||"+
		"\x83\x83\xD2\xD5\xD7\xD7\xDA\xDA\x3\x2\xE1\xE4\x5\x2,,.\x32\xDC\xDC\x6"+
		"\x2pptt\xA1\xA1\xA6\xA6\x4\x2\xD0\xD0\xD9\xD9\x4\x2\xD8\xD8\xDB\xDB\x4"+
		"\x2oo\xC1\xC1\x4\x2[[\x91\x91&\x2\x3\x6\b\xE\x10\x19\x1B#%%\'(\x33\x38"+
		":?\x42\x43\x45\x46WW\x64\x64\x66\x66hhoossxxz\x7F\x82\x87\x89\x8C\x8E"+
		"\x92\x94\x94\x96\x97\x9C\xA0\xA5\xA5\xA7\xA8\xAA\xAB\xAD\xAE\xB2\xB2\xB5"+
		"\xB7\xB9\xB9\xBB\xBB\xBD\xC1\xC3\xC7\xCA\xCA\xCC\xCE \x2\x1A\x1A$$@\x41"+
		"\x44\x44GVYZ``\x63\x63\x65\x65gginprtwyy\x80\x81\x88\x88\x8D\x8D\x93\x93"+
		"\xA1\xA1\xA6\xA6\xA9\xA9\xAC\xAC\xAF\xB1\xB3\xB4\xB8\xB8\xBA\xBA\xBC\xBC"+
		"\xC2\xC2\xC8\xC9\xCB\xCB\x3\x2\xE6\xE6\x4\x2\xE9\xE9\xEC\xEC\xC29\x2\x1B8"+
		"\x3\x2\x2\x2\x4\x1BB\x3\x2\x2\x2\x6\x1CC\x3\x2\x2\x2\b\x1D7\x3\x2\x2\x2"+
		"\n\x1EA\x3\x2\x2\x2\f\x204\x3\x2\x2\x2\xE\x207\x3\x2\x2\x2\x10\x21F\x3"+
		"\x2\x2\x2\x12\x221\x3\x2\x2\x2\x14\x228\x3\x2\x2\x2\x16\x235\x3\x2\x2"+
		"\x2\x18\x238\x3\x2\x2\x2\x1A\x248\x3\x2\x2\x2\x1C\x257\x3\x2\x2\x2\x1E"+
		"\x25E\x3\x2\x2\x2 \x286\x3\x2\x2\x2\"\x296\x3\x2\x2\x2$\x298\x3\x2\x2"+
		"\x2&\x2B3\x3\x2\x2\x2(\x2B5\x3\x2\x2\x2*\x2B9\x3\x2\x2\x2,\x2BB\x3\x2"+
		"\x2\x2.\x2BF\x3\x2\x2\x2\x30\x2C1\x3\x2\x2\x2\x32\x2C3\x3\x2\x2\x2\x34"+
		"\x2CD\x3\x2\x2\x2\x36\x2D1\x3\x2\x2\x2\x38\x2D3\x3\x2\x2\x2:\x2D6\x3\x2"+
		"\x2\x2<\x2D8\x3\x2\x2\x2>\x2DE\x3\x2\x2\x2@\x2E0\x3\x2\x2\x2\x42\x2EE"+
		"\x3\x2\x2\x2\x44\x2FA\x3\x2\x2\x2\x46\x2FC\x3\x2\x2\x2H\x313\x3\x2\x2"+
		"\x2J\x315\x3\x2\x2\x2L\x317\x3\x2\x2\x2N\x319\x3\x2\x2\x2P\x326\x3\x2"+
		"\x2\x2R\x332\x3\x2\x2\x2T\x334\x3\x2\x2\x2V\x340\x3\x2\x2\x2X\x342\x3"+
		"\x2\x2\x2Z\x348\x3\x2\x2\x2\\\x352\x3\x2\x2\x2^\x354\x3\x2\x2\x2`\x356"+
		"\x3\x2\x2\x2\x62\x363\x3\x2\x2\x2\x64\x375\x3\x2\x2\x2\x66\x37A\x3\x2"+
		"\x2\x2h\x37C\x3\x2\x2\x2j\x37E\x3\x2\x2\x2l\x380\x3\x2\x2\x2n\x38E\x3"+
		"\x2\x2\x2p\x390\x3\x2\x2\x2r\x397\x3\x2\x2\x2t\x3A1\x3\x2\x2\x2v\x3A3"+
		"\x3\x2\x2\x2x\x3B0\x3\x2\x2\x2z\x3BC\x3\x2\x2\x2|\x3CA\x3\x2\x2\x2~\x3CC"+
		"\x3\x2\x2\x2\x80\x3E2\x3\x2\x2\x2\x82\x3E4\x3\x2\x2\x2\x84\x3E6\x3\x2"+
		"\x2\x2\x86\x3FC\x3\x2\x2\x2\x88\x401\x3\x2\x2\x2\x8A\x413\x3\x2\x2\x2"+
		"\x8C\x425\x3\x2\x2\x2\x8E\x446\x3\x2\x2\x2\x90\x461\x3\x2\x2\x2\x92\x482"+
		"\x3\x2\x2\x2\x94\x488\x3\x2\x2\x2\x96\x498\x3\x2\x2\x2\x98\x49D\x3\x2"+
		"\x2\x2\x9A\x49F\x3\x2\x2\x2\x9C\x4A1\x3\x2\x2\x2\x9E\x4AB\x3\x2\x2\x2"+
		"\xA0\x4AE\x3\x2\x2\x2\xA2\x4B1\x3\x2\x2\x2\xA4\x4BB\x3\x2\x2\x2\xA6\x4BD"+
		"\x3\x2\x2\x2\xA8\x4D6\x3\x2\x2\x2\xAA\x4DB\x3\x2\x2\x2\xAC\x4E9\x3\x2"+
		"\x2\x2\xAE\x4F6\x3\x2\x2\x2\xB0\x4F8\x3\x2\x2\x2\xB2\x508\x3\x2\x2\x2"+
		"\xB4\x50F\x3\x2\x2\x2\xB6\x519\x3\x2\x2\x2\xB8\x51B\x3\x2\x2\x2\xBA\x52C"+
		"\x3\x2\x2\x2\xBC\x545\x3\x2\x2\x2\xBE\x560\x3\x2\x2\x2\xC0\x562\x3\x2"+
		"\x2\x2\xC2\x566\x3\x2\x2\x2\xC4\x56A\x3\x2\x2\x2\xC6\x58E\x3\x2\x2\x2"+
		"\xC8\x590\x3\x2\x2\x2\xCA\x596\x3\x2\x2\x2\xCC\x598\x3\x2\x2\x2\xCE\x5AA"+
		"\x3\x2\x2\x2\xD0\x5B9\x3\x2\x2\x2\xD2\x5E6\x3\x2\x2\x2\xD4\x5E8\x3\x2"+
		"\x2\x2\xD6\x5EA\x3\x2\x2\x2\xD8\x5EC\x3\x2\x2\x2\xDA\x5F2\x3\x2\x2\x2"+
		"\xDC\x5FE\x3\x2\x2\x2\xDE\x60A\x3\x2\x2\x2\xE0\x616\x3\x2\x2\x2\xE2\x62A"+
		"\x3\x2\x2\x2\xE4\x641\x3\x2\x2\x2\xE6\x65C\x3\x2\x2\x2\xE8\x672\x3\x2"+
		"\x2\x2\xEA\x685\x3\x2\x2\x2\xEC\x698\x3\x2\x2\x2\xEE\x6A8\x3\x2\x2\x2"+
		"\xF0\x6AC\x3\x2\x2\x2\xF2\x6B4\x3\x2\x2\x2\xF4\x6C2\x3\x2\x2\x2\xF6\x6C8"+
		"\x3\x2\x2\x2\xF8\x6ED\x3\x2\x2\x2\xFA\x6F1\x3\x2\x2\x2\xFC\x6FD\x3\x2"+
		"\x2\x2\xFE\x6FF\x3\x2\x2\x2\x100\x707\x3\x2\x2\x2\x102\x709\x3\x2\x2\x2"+
		"\x104\x715\x3\x2\x2\x2\x106\x717\x3\x2\x2\x2\x108\x71F\x3\x2\x2\x2\x10A"+
		"\x734\x3\x2\x2\x2\x10C\x736\x3\x2\x2\x2\x10E\x749\x3\x2\x2\x2\x110\x764"+
		"\x3\x2\x2\x2\x112\x766\x3\x2\x2\x2\x114\x768\x3\x2\x2\x2\x116\x76A\x3"+
		"\x2\x2\x2\x118\x779\x3\x2\x2\x2\x11A\x78E\x3\x2\x2\x2\x11C\x792\x3\x2"+
		"\x2\x2\x11E\x796\x3\x2\x2\x2\x120\x79A\x3\x2\x2\x2\x122\x7A2\x3\x2\x2"+
		"\x2\x124\x7AD\x3\x2\x2\x2\x126\x7AF\x3\x2\x2\x2\x128\x7B5\x3\x2\x2\x2"+
		"\x12A\x7BC\x3\x2\x2\x2\x12C\x7C0\x3\x2\x2\x2\x12E\x7CC\x3\x2\x2\x2\x130"+
		"\x7DE\x3\x2\x2\x2\x132\x7E2\x3\x2\x2\x2\x134\x7E8\x3\x2\x2\x2\x136\x7EA"+
		"\x3\x2\x2\x2\x138\x7EF\x3\x2\x2\x2\x13A\x7F8\x3\x2\x2\x2\x13C\x806\x3"+
		"\x2\x2\x2\x13E\x81F\x3\x2\x2\x2\x140\x826\x3\x2\x2\x2\x142\x82D\x3\x2"+
		"\x2\x2\x144\x85A\x3\x2\x2\x2\x146\x879\x3\x2\x2\x2\x148\x887\x3\x2\x2"+
		"\x2\x14A\x899\x3\x2\x2\x2\x14C\x89B\x3\x2\x2\x2\x14E\x8AE\x3\x2\x2\x2"+
		"\x150\x8B5\x3\x2\x2\x2\x152\x8B9\x3\x2\x2\x2\x154\x8BB\x3\x2\x2\x2\x156"+
		"\x8BD\x3\x2\x2\x2\x158\x8C4\x3\x2\x2\x2\x15A\x8C6\x3\x2\x2\x2\x15C\x8D1"+
		"\x3\x2\x2\x2\x15E\x8D3\x3\x2\x2\x2\x160\x8E2\x3\x2\x2\x2\x162\x8E4\x3"+
		"\x2\x2\x2\x164\x8FD\x3\x2\x2\x2\x166\x8FF\x3\x2\x2\x2\x168\x909\x3\x2"+
		"\x2\x2\x16A\x90B\x3\x2\x2\x2\x16C\x911\x3\x2\x2\x2\x16E\x918\x3\x2\x2"+
		"\x2\x170\x91C\x3\x2\x2\x2\x172\x928\x3\x2\x2\x2\x174\x92A\x3\x2\x2\x2"+
		"\x176\x951\x3\x2\x2\x2\x178\x9CB\x3\x2\x2\x2\x17A\x9D0\x3\x2\x2\x2\x17C"+
		"\x9D2\x3\x2\x2\x2\x17E\x9D4\x3\x2\x2\x2\x180\x9D6\x3\x2\x2\x2\x182\x9E5"+
		"\x3\x2\x2\x2\x184\xA1F\x3\x2\x2\x2\x186\xA34\x3\x2\x2\x2\x188\xA36\x3"+
		"\x2\x2\x2\x18A\xA3A\x3\x2\x2\x2\x18C\xA3C\x3\x2\x2\x2\x18E\xA3E\x3\x2"+
		"\x2\x2\x190\xA54\x3\x2\x2\x2\x192\xA56\x3\x2\x2\x2\x194\xA58\x3\x2\x2"+
		"\x2\x196\xA5A\x3\x2\x2\x2\x198\xA5E\x3\x2\x2\x2\x19A\xA60\x3\x2\x2\x2"+
		"\x19C\xA62\x3\x2\x2\x2\x19E\xA6F\x3\x2\x2\x2\x1A0\xA7B\x3\x2\x2\x2\x1A2"+
		"\xA81\x3\x2\x2\x2\x1A4\xA83\x3\x2\x2\x2\x1A6\xA89\x3\x2\x2\x2\x1A8\xA90"+
		"\x3\x2\x2\x2\x1AA\xA93\x3\x2\x2\x2\x1AC\xAA4\x3\x2\x2\x2\x1AE\xAA8\x3"+
		"\x2\x2\x2\x1B0\xAE6\x3\x2\x2\x2\x1B2\xAE8\x3\x2\x2\x2\x1B4\xAEA\x3\x2"+
		"\x2\x2\x1B6\xAF2\x3\x2\x2\x2\x1B8\x1B9\x5\x4\x3\x2\x1B9\x1BA\a\x2\x2\x3"+
		"\x1BA\x3\x3\x2\x2\x2\x1BB\x1BC\x5\x1A0\xD1\x2\x1BC\x1BE\x5\f\a\x2\x1BD"+
		"\x1BF\x5\x6\x4\x2\x1BE\x1BD\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C0"+
		"\x3\x2\x2\x2\x1C0\x1C2\x5\f\a\x2\x1C1\x1C3\x5\b\x5\x2\x1C2\x1C1\x3\x2"+
		"\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C5\x5\f\a\x2"+
		"\x1C5\x1C6\x5\x14\v\x2\x1C6\x1C7\x5\f\a\x2\x1C7\x1C8\x5\x1A\xE\x2\x1C8"+
		"\x1CA\x5\f\a\x2\x1C9\x1CB\x5\x1B6\xDC\x2\x1CA\x1C9\x3\x2\x2\x2\x1CA\x1CB"+
		"\x3\x2\x2\x2\x1CB\x5\x3\x2\x2\x2\x1CC\x1CD\a\xC7\x2\x2\x1CD\x1CE\x5\x1B6"+
		"\xDC\x2\x1CE\x1D0\x5\x16E\xB8\x2\x1CF\x1D1\x5\x1B6\xDC\x2\x1D0\x1CF\x3"+
		"\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D3\x3\x2\x2\x2\x1D2\x1D4\a\x42"+
		"\x2\x2\x1D3\x1D2\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2"+
		"\x2\x1D5\x1D6\x5\x1A0\xD1\x2\x1D6\a\x3\x2\x2\x2\x1D7\x1DF\a:\x2\x2\x1D8"+
		"\x1D9\x5\x1B6\xDC\x2\x1D9\x1DA\a\xEA\x2\x2\x1DA\x1DB\x5\x1B6\xDC\x2\x1DB"+
		"\x1DD\x5\x150\xA9\x2\x1DC\x1DE\x5\x1B6\xDC\x2\x1DD\x1DC\x3\x2\x2\x2\x1DD"+
		"\x1DE\x3\x2\x2\x2\x1DE\x1E0\x3\x2\x2\x2\x1DF\x1D8\x3\x2\x2\x2\x1DF\x1E0"+
		"\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E3\x5\x1A0\xD1\x2\x1E2\x1E4"+
		"\x5\n\x6\x2\x1E3\x1E2\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E3\x3\x2"+
		"\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E8\a\x64\x2"+
		"\x2\x1E8\x1E9\x5\x1A0\xD1\x2\x1E9\t\x3\x2\x2\x2\x1EA\x1EE\x5\x150\xA9"+
		"\x2\x1EB\x1ED\x5\x1B6\xDC\x2\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1F0\x3\x2\x2"+
		"\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F1\x3\x2\x2\x2"+
		"\x1F0\x1EE\x3\x2\x2\x2\x1F1\x1F5\a\xD2\x2\x2\x1F2\x1F4\x5\x1B6\xDC\x2"+
		"\x1F3\x1F2\x3\x2\x2\x2\x1F4\x1F7\x3\x2\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F5"+
		"\x1F6\x3\x2\x2\x2\x1F6\x1F8\x3\x2\x2\x2\x1F7\x1F5\x3\x2\x2\x2\x1F8\x1FB"+
		"\x5\x176\xBC\x2\x1F9\x1FA\a*\x2\x2\x1FA\x1FC\x5\x16E\xB8\x2\x1FB\x1F9"+
		"\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FE\x5"+
		"\x1A0\xD1\x2\x1FE\v\x3\x2\x2\x2\x1FF\x200\x5\xE\b\x2\x200\x201\x5\x1A0"+
		"\xD1\x2\x201\x203\x3\x2\x2\x2\x202\x1FF\x3\x2\x2\x2\x203\x206\x3\x2\x2"+
		"\x2\x204\x202\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\r\x3\x2\x2\x2\x206"+
		"\x204\x3\x2\x2\x2\x207\x208\a\x37\x2\x2\x208\x209\x5\x1B6\xDC\x2\x209"+
		"\x20B\x5\x10\t\x2\x20A\x20C\x5\x1B6\xDC\x2\x20B\x20A\x3\x2\x2\x2\x20B"+
		"\x20C\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20F\a\xD2\x2\x2\x20E\x210"+
		"\x5\x1B6\xDC\x2\x20F\x20E\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x211"+
		"\x3\x2\x2\x2\x211\x21C\x5\x12\n\x2\x212\x214\x5\x1B6\xDC\x2\x213\x212"+
		"\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x217\a)"+
		"\x2\x2\x216\x218\x5\x1B6\xDC\x2\x217\x216\x3\x2\x2\x2\x217\x218\x3\x2"+
		"\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21B\x5\x12\n\x2\x21A\x213\x3\x2\x2"+
		"\x2\x21B\x21E\x3\x2\x2\x2\x21C\x21A\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2"+
		"\x21D\xF\x3\x2\x2\x2\x21E\x21C\x3\x2\x2\x2\x21F\x220\x5\x182\xC2\x2\x220"+
		"\x11\x3\x2\x2\x2\x221\x222\x5\x176\xBC\x2\x222\x13\x3\x2\x2\x2\x223\x224"+
		"\x5\x18\r\x2\x224\x225\x5\x1A0\xD1\x2\x225\x227\x3\x2\x2\x2\x226\x223"+
		"\x3\x2\x2\x2\x227\x22A\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3"+
		"\x2\x2\x2\x229\x15\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22B\x22C\a\x98\x2"+
		"\x2\x22C\x22D\x5\x1B6\xDC\x2\x22D\x22E\x5\x16E\xB8\x2\x22E\x236\x3\x2"+
		"\x2\x2\x22F\x230\a\x9A\x2\x2\x230\x231\x5\x1B6\xDC\x2\x231\x232\t\x2\x2"+
		"\x2\x232\x236\x3\x2\x2\x2\x233\x236\a\x99\x2\x2\x234\x236\a\x9B\x2\x2"+
		"\x235\x22B\x3\x2\x2\x2\x235\x22F\x3\x2\x2\x2\x235\x233\x3\x2\x2\x2\x235"+
		"\x234\x3\x2\x2\x2\x236\x17\x3\x2\x2\x2\x237\x239\x5\x1B6\xDC\x2\x238\x237"+
		"\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x245\x3\x2\x2\x2\x23A\x246\x5"+
		"\xE\b\x2\x23B\x246\x5\x8CG\x2\x23C\x246\x5\x94K\x2\x23D\x246\x5\xAAV\x2"+
		"\x23E\x246\x5\xB4[\x2\x23F\x246\x5\x88\x45\x2\x240\x246\x5\xD8m\x2\x241"+
		"\x246\x5\x138\x9D\x2\x242\x246\x5\x16\f\x2\x243\x246\x5\x11C\x8F\x2\x244"+
		"\x246\x5\x11E\x90\x2\x245\x23A\x3\x2\x2\x2\x245\x23B\x3\x2\x2\x2\x245"+
		"\x23C\x3\x2\x2\x2\x245\x23D\x3\x2\x2\x2\x245\x23E\x3\x2\x2\x2\x245\x23F"+
		"\x3\x2\x2\x2\x245\x240\x3\x2\x2\x2\x245\x241\x3\x2\x2\x2\x245\x242\x3"+
		"\x2\x2\x2\x245\x243\x3\x2\x2\x2\x245\x244\x3\x2\x2\x2\x246\x19\x3\x2\x2"+
		"\x2\x247\x249\x5\x1B6\xDC\x2\x248\x247\x3\x2\x2\x2\x248\x249\x3\x2\x2"+
		"\x2\x249\x24F\x3\x2\x2\x2\x24A\x24B\x5\x1C\xF\x2\x24B\x24C\x5\x1A0\xD1"+
		"\x2\x24C\x24E\x3\x2\x2\x2\x24D\x24A\x3\x2\x2\x2\x24E\x251\x3\x2\x2\x2"+
		"\x24F\x24D\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x1B\x3\x2\x2\x2\x251"+
		"\x24F\x3\x2\x2\x2\x252\x258\x5\xBC_\x2\x253\x258\x5\xE4s\x2\x254\x258"+
		"\x5\xE6t\x2\x255\x258\x5\xE8u\x2\x256\x258\x5\x118\x8D\x2\x257\x252\x3"+
		"\x2\x2\x2\x257\x253\x3\x2\x2\x2\x257\x254\x3\x2\x2\x2\x257\x255\x3\x2"+
		"\x2\x2\x257\x256\x3\x2\x2\x2\x258\x1D\x3\x2\x2\x2\x259\x25A\x5 \x11\x2"+
		"\x25A\x25B\x5\x1A0\xD1\x2\x25B\x25D\x3\x2\x2\x2\x25C\x259\x3\x2\x2\x2"+
		"\x25D\x260\x3\x2\x2\x2\x25E\x25C\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F"+
		"\x1F\x3\x2\x2\x2\x260\x25E\x3\x2\x2\x2\x261\x287\x5\x168\xB5\x2\x262\x287"+
		"\x5\"\x12\x2\x263\x287\x5\xE\b\x2\x264\x287\x5\x88\x45\x2\x265\x287\x5"+
		"\xA8U\x2\x266\x287\x5\xAEX\x2\x267\x287\x5\xB0Y\x2\x268\x287\x5\xB2Z\x2"+
		"\x269\x287\x5\xB6\\\x2\x26A\x287\x5\xB8]\x2\x26B\x287\x5\xBA^\x2\x26C"+
		"\x287\x5\xC0\x61\x2\x26D\x287\x5\xC2\x62\x2\x26E\x287\x5\xC4\x63\x2\x26F"+
		"\x287\x5\xCA\x66\x2\x270\x287\x5\xD8m\x2\x271\x287\x5\xDAn\x2\x272\x287"+
		"\x5\xDCo\x2\x273\x287\x5\xDEp\x2\x274\x287\x5\xE0q\x2\x275\x287\x5\xE2"+
		"r\x2\x276\x287\x5\xEAv\x2\x277\x287\x5\xF0y\x2\x278\x287\x5\xFE\x80\x2"+
		"\x279\x287\x5\x100\x81\x2\x27A\x287\x5\x102\x82\x2\x27B\x287\x5\x108\x85"+
		"\x2\x27C\x287\x5\x116\x8C\x2\x27D\x287\x5\x104\x83\x2\x27E\x287\x5\x138"+
		"\x9D\x2\x27F\x287\x5\x13E\xA0\x2\x280\x287\x5\x140\xA1\x2\x281\x287\x5"+
		"\x142\xA2\x2\x282\x287\x5\x144\xA3\x2\x283\x287\x5\x146\xA4\x2\x284\x287"+
		"\x5\xFC\x7F\x2\x285\x287\x5\x106\x84\x2\x286\x261\x3\x2\x2\x2\x286\x262"+
		"\x3\x2\x2\x2\x286\x263\x3\x2\x2\x2\x286\x264\x3\x2\x2\x2\x286\x265\x3"+
		"\x2\x2\x2\x286\x266\x3\x2\x2\x2\x286\x267\x3\x2\x2\x2\x286\x268\x3\x2"+
		"\x2\x2\x286\x269\x3\x2\x2\x2\x286\x26A\x3\x2\x2\x2\x286\x26B\x3\x2\x2"+
		"\x2\x286\x26C\x3\x2\x2\x2\x286\x26D\x3\x2\x2\x2\x286\x26E\x3\x2\x2\x2"+
		"\x286\x26F\x3\x2\x2\x2\x286\x270\x3\x2\x2\x2\x286\x271\x3\x2\x2\x2\x286"+
		"\x272\x3\x2\x2\x2\x286\x273\x3\x2\x2\x2\x286\x274\x3\x2\x2\x2\x286\x275"+
		"\x3\x2\x2\x2\x286\x276\x3\x2\x2\x2\x286\x277\x3\x2\x2\x2\x286\x278\x3"+
		"\x2\x2\x2\x286\x279\x3\x2\x2\x2\x286\x27A\x3\x2\x2\x2\x286\x27B\x3\x2"+
		"\x2\x2\x286\x27C\x3\x2\x2\x2\x286\x27D\x3\x2\x2\x2\x286\x27E\x3\x2\x2"+
		"\x2\x286\x27F\x3\x2\x2\x2\x286\x280\x3\x2\x2\x2\x286\x281\x3\x2\x2\x2"+
		"\x286\x282\x3\x2\x2\x2\x286\x283\x3\x2\x2\x2\x286\x284\x3\x2\x2\x2\x286"+
		"\x285\x3\x2\x2\x2\x287!\x3\x2\x2\x2\x288\x297\x5$\x13\x2\x289\x297\x5"+
		"> \x2\x28A\x297\x5<\x1F\x2\x28B\x297\x5\x42\"\x2\x28C\x297\x5\x46$\x2"+
		"\x28D\x297\x5N(\x2\x28E\x297\x5P)\x2\x28F\x297\x5T+\x2\x290\x297\x5X-"+
		"\x2\x291\x297\x5`\x31\x2\x292\x297\x5v<\x2\x293\x297\x5x=\x2\x294\x297"+
		"\x5~@\x2\x295\x297\x5\x84\x43\x2\x296\x288\x3\x2\x2\x2\x296\x289\x3\x2"+
		"\x2\x2\x296\x28A\x3\x2\x2\x2\x296\x28B\x3\x2\x2\x2\x296\x28C\x3\x2\x2"+
		"\x2\x296\x28D\x3\x2\x2\x2\x296\x28E\x3\x2\x2\x2\x296\x28F\x3\x2\x2\x2"+
		"\x296\x290\x3\x2\x2\x2\x296\x291\x3\x2\x2\x2\x296\x292\x3\x2\x2\x2\x296"+
		"\x293\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2\x296\x295\x3\x2\x2\x2\x297#\x3"+
		"\x2\x2\x2\x298\x299\a\x96\x2\x2\x299\x29A\x5\x1B6\xDC\x2\x29A\x29E\x5"+
		"&\x14\x2\x29B\x29C\x5\x1B6\xDC\x2\x29C\x29D\x5(\x15\x2\x29D\x29F\x3\x2"+
		"\x2\x2\x29E\x29B\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A3\x3\x2\x2"+
		"\x2\x2A0\x2A1\x5\x1B6\xDC\x2\x2A1\x2A2\x5,\x17\x2\x2A2\x2A4\x3\x2\x2\x2"+
		"\x2A3\x2A0\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A8\x3\x2\x2\x2\x2A5"+
		"\x2A6\x5\x1B6\xDC\x2\x2A6\x2A7\x5\x30\x19\x2\x2A7\x2A9\x3\x2\x2\x2\x2A8"+
		"\x2A5\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2AB"+
		"\x5\x1B6\xDC\x2\x2AB\x2AC\a\x39\x2\x2\x2AC\x2AD\x5\x1B6\xDC\x2\x2AD\x2B1"+
		"\x5\x36\x1C\x2\x2AE\x2AF\x5\x1B6\xDC\x2\x2AF\x2B0\x5\x32\x1A\x2\x2B0\x2B2"+
		"\x3\x2\x2\x2\x2B1\x2AE\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2%\x3\x2\x2"+
		"\x2\x2B3\x2B4\x5\x176\xBC\x2\x2B4\'\x3\x2\x2\x2\x2B5\x2B6\aq\x2\x2\x2B6"+
		"\x2B7\x5\x1B6\xDC\x2\x2B7\x2B8\x5*\x16\x2\x2B8)\x3\x2\x2\x2\x2B9\x2BA"+
		"\t\x3\x2\x2\x2BA+\x3\x2\x2\x2\x2BB\x2BC\a\x33\x2\x2\x2BC\x2BD\x5\x1B6"+
		"\xDC\x2\x2BD\x2BE\x5.\x18\x2\x2BE-\x3\x2\x2\x2\x2BF\x2C0\t\x4\x2\x2\x2C0"+
		"/\x3\x2\x2\x2\x2C1\x2C2\t\x5\x2\x2\x2C2\x31\x3\x2\x2\x2\x2C3\x2C5\a\x1F"+
		"\x2\x2\x2C4\x2C6\x5\x1B6\xDC\x2\x2C5\x2C4\x3\x2\x2\x2\x2C5\x2C6\x3\x2"+
		"\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C9\a\xD2\x2\x2\x2C8\x2CA\x5\x1B6\xDC"+
		"\x2\x2C9\x2C8\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2"+
		"\x2CB\x2CC\x5\x34\x1B\x2\x2CC\x33\x3\x2\x2\x2\x2CD\x2CE\x5\x176\xBC\x2"+
		"\x2CE\x35\x3\x2\x2\x2\x2CF\x2D2\x5\x38\x1D\x2\x2D0\x2D2\x5:\x1E\x2\x2D1"+
		"\x2CF\x3\x2\x2\x2\x2D1\x2D0\x3\x2\x2\x2\x2D2\x37\x3\x2\x2\x2\x2D3\x2D4"+
		"\a.\x2\x2\x2D4\x2D5\x5\x176\xBC\x2\x2D5\x39\x3\x2\x2\x2\x2D6\x2D7\x5\x176"+
		"\xBC\x2\x2D7;\x3\x2\x2\x2\x2D8\x2DC\a\x43\x2\x2\x2D9\x2DA\x5\x1B6\xDC"+
		"\x2\x2DA\x2DB\x5@!\x2\x2DB\x2DD\x3\x2\x2\x2\x2DC\x2D9\x3\x2\x2\x2\x2DC"+
		"\x2DD\x3\x2\x2\x2\x2DD=\x3\x2\x2\x2\x2DE\x2DF\a\xAE\x2\x2\x2DF?\x3\x2"+
		"\x2\x2\x2E0\x2EB\x5\x36\x1C\x2\x2E1\x2E3\x5\x1B6\xDC\x2\x2E2\x2E1\x3\x2"+
		"\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E6\a)\x2\x2"+
		"\x2E5\x2E7\x5\x1B6\xDC\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2"+
		"\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2EA\x5\x36\x1C\x2\x2E9\x2E2\x3\x2\x2\x2\x2EA"+
		"\x2ED\x3\x2\x2\x2\x2EB\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x41"+
		"\x3\x2\x2\x2\x2ED\x2EB\x3\x2\x2\x2\x2EE\x2EF\a\xB2\x2\x2\x2EF\x2F0\x5"+
		"\x1B6\xDC\x2\x2F0\x2F2\x5\x36\x1C\x2\x2F1\x2F3\x5\x1B6\xDC\x2\x2F2\x2F1"+
		"\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x2F6\a)"+
		"\x2\x2\x2F5\x2F7\x5\x1B6\xDC\x2\x2F6\x2F5\x3\x2\x2\x2\x2F6\x2F7\x3\x2"+
		"\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F9\x5\x44#\x2\x2F9\x43\x3\x2\x2\x2"+
		"\x2FA\x2FB\x5\x176\xBC\x2\x2FB\x45\x3\x2\x2\x2\x2FC\x2FD\a~\x2\x2\x2FD"+
		"\x2FE\x5\x1B6\xDC\x2\x2FE\x307\x5\x36\x1C\x2\x2FF\x301\x5\x1B6\xDC\x2"+
		"\x300\x2FF\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302"+
		"\x304\a)\x2\x2\x303\x305\x5\x1B6\xDC\x2\x304\x303\x3\x2\x2\x2\x304\x305"+
		"\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x308\x5H%\x2\x307\x300\x3\x2\x2"+
		"\x2\x307\x308\x3\x2\x2\x2\x308G\x3\x2\x2\x2\x309\x314\x5J&\x2\x30A\x30B"+
		"\x5J&\x2\x30B\x30C\x5\x1B6\xDC\x2\x30C\x30E\x3\x2\x2\x2\x30D\x30A\x3\x2"+
		"\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30F\x310\a\xC0\x2"+
		"\x2\x310\x311\x5\x1B6\xDC\x2\x311\x312\x5L\'\x2\x312\x314\x3\x2\x2\x2"+
		"\x313\x309\x3\x2\x2\x2\x313\x30D\x3\x2\x2\x2\x314I\x3\x2\x2\x2\x315\x316"+
		"\x5\x176\xBC\x2\x316K\x3\x2\x2\x2\x317\x318\x5\x176\xBC\x2\x318M\x3\x2"+
		"\x2\x2\x319\x31A\a\xC4\x2\x2\x31A\x31B\x5\x1B6\xDC\x2\x31B\x324\x5\x36"+
		"\x1C\x2\x31C\x31E\x5\x1B6\xDC\x2\x31D\x31C\x3\x2\x2\x2\x31D\x31E\x3\x2"+
		"\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x321\a)\x2\x2\x320\x322\x5\x1B6\xDC"+
		"\x2\x321\x320\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2"+
		"\x323\x325\x5H%\x2\x324\x31D\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325O\x3"+
		"\x2\x2\x2\x326\x327\a\x84\x2\x2\x327\x328\x5\x1B6\xDC\x2\x328\x32A\x5"+
		"\x38\x1D\x2\x329\x32B\x5\x1B6\xDC\x2\x32A\x329\x3\x2\x2\x2\x32A\x32B\x3"+
		"\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32E\a)\x2\x2\x32D\x32F\x5\x1B6\xDC"+
		"\x2\x32E\x32D\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2"+
		"\x330\x331\x5R*\x2\x331Q\x3\x2\x2\x2\x332\x333\x5\x176\xBC\x2\x333S\x3"+
		"\x2\x2\x2\x334\x335\a\xCA\x2\x2\x335\x336\x5\x1B6\xDC\x2\x336\x338\x5"+
		"\x38\x1D\x2\x337\x339\x5\x1B6\xDC\x2\x338\x337\x3\x2\x2\x2\x338\x339\x3"+
		"\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A\x33C\a)\x2\x2\x33B\x33D\x5\x1B6\xDC"+
		"\x2\x33C\x33B\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2"+
		"\x33E\x33F\x5V,\x2\x33FU\x3\x2\x2\x2\x340\x341\x5\x176\xBC\x2\x341W\x3"+
		"\x2\x2\x2\x342\x346\x5Z.\x2\x343\x344\x5\x1B6\xDC\x2\x344\x345\x5\x62"+
		"\x32\x2\x345\x347\x3\x2\x2\x2\x346\x343\x3\x2\x2\x2\x346\x347\x3\x2\x2"+
		"\x2\x347Y\x3\x2\x2\x2\x348\x34A\x5\\/\x2\x349\x34B\x5\x1B6\xDC\x2\x34A"+
		"\x349\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x34E"+
		"\a-\x2\x2\x34D\x34F\x5\x1B6\xDC\x2\x34E\x34D\x3\x2\x2\x2\x34E\x34F\x3"+
		"\x2\x2\x2\x34F\x350\x3\x2\x2\x2\x350\x351\x5^\x30\x2\x351[\x3\x2\x2\x2"+
		"\x352\x353\a\x18\x2\x2\x353]\x3\x2\x2\x2\x354\x355\a\xA0\x2\x2\x355_\x3"+
		"\x2\x2\x2\x356\x357\a\xA0\x2\x2\x357\x358\x5\x1B6\xDC\x2\x358\x35A\x5"+
		"\x38\x1D\x2\x359\x35B\x5\x1B6\xDC\x2\x35A\x359\x3\x2\x2\x2\x35A\x35B\x3"+
		"\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C\x361\a)\x2\x2\x35D\x35F\x5\x1B6\xDC"+
		"\x2\x35E\x35D\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2"+
		"\x360\x362\x5\x62\x32\x2\x361\x35E\x3\x2\x2\x2\x361\x362\x3\x2\x2\x2\x362"+
		"\x61\x3\x2\x2\x2\x363\x36A\x5\x64\x33\x2\x364\x366\x5\x1B6\xDC\x2\x365"+
		"\x364\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2\x366\x367\x3\x2\x2\x2\x367\x369"+
		"\x5\x64\x33\x2\x368\x365\x3\x2\x2\x2\x369\x36C\x3\x2\x2\x2\x36A\x368\x3"+
		"\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x63\x3\x2\x2\x2\x36C\x36A\x3\x2\x2"+
		"\x2\x36D\x376\x5\x66\x34\x2\x36E\x376\x5h\x35\x2\x36F\x371\x5\x66\x34"+
		"\x2\x370\x372\x5\x1B6\xDC\x2\x371\x370\x3\x2\x2\x2\x371\x372\x3\x2\x2"+
		"\x2\x372\x373\x3\x2\x2\x2\x373\x374\x5h\x35\x2\x374\x376\x3\x2\x2\x2\x375"+
		"\x36D\x3\x2\x2\x2\x375\x36E\x3\x2\x2\x2\x375\x36F\x3\x2\x2\x2\x376\x65"+
		"\x3\x2\x2\x2\x377\x37B\x5l\x37\x2\x378\x37B\x5p\x39\x2\x379\x37B\x5j\x36"+
		"\x2\x37A\x377\x3\x2\x2\x2\x37A\x378\x3\x2\x2\x2\x37A\x379\x3\x2\x2\x2"+
		"\x37Bg\x3\x2\x2\x2\x37C\x37D\t\x6\x2\x2\x37Di\x3\x2\x2\x2\x37E\x37F\x5"+
		"\x176\xBC\x2\x37Fk\x3\x2\x2\x2\x380\x382\a\xB7\x2\x2\x381\x383\x5\x1B6"+
		"\xDC\x2\x382\x381\x3\x2\x2\x2\x382\x383\x3\x2\x2\x2\x383\x384\x3\x2\x2"+
		"\x2\x384\x386\a\xD6\x2\x2\x385\x387\x5\x1B6\xDC\x2\x386\x385\x3\x2\x2"+
		"\x2\x386\x387\x3\x2\x2\x2\x387\x388\x3\x2\x2\x2\x388\x38A\x5n\x38\x2\x389"+
		"\x38B\x5\x1B6\xDC\x2\x38A\x389\x3\x2\x2\x2\x38A\x38B\x3\x2\x2\x2\x38B"+
		"\x38C\x3\x2\x2\x2\x38C\x38D\a\xDD\x2\x2\x38Dm\x3\x2\x2\x2\x38E\x38F\x5"+
		"\x176\xBC\x2\x38Fo\x3\x2\x2\x2\x390\x395\a\xBD\x2\x2\x391\x393\x5\x1B6"+
		"\xDC\x2\x392\x391\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x394\x3\x2\x2"+
		"\x2\x394\x396\x5r:\x2\x395\x392\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396"+
		"q\x3\x2\x2\x2\x397\x399\a\xD6\x2\x2\x398\x39A\x5\x1B6\xDC\x2\x399\x398"+
		"\x3\x2\x2\x2\x399\x39A\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39D\x5"+
		"t;\x2\x39C\x39E\x5\x1B6\xDC\x2\x39D\x39C\x3\x2\x2\x2\x39D\x39E\x3\x2\x2"+
		"\x2\x39E\x39F\x3\x2\x2\x2\x39F\x3A0\a\xDD\x2\x2\x3A0s\x3\x2\x2\x2\x3A1"+
		"\x3A2\x5\x176\xBC\x2\x3A2u\x3\x2\x2\x2\x3A3\x3A4\a\xCD\x2\x2\x3A4\x3A5"+
		"\x5\x1B6\xDC\x2\x3A5\x3A7\x5\x38\x1D\x2\x3A6\x3A8\x5\x1B6\xDC\x2\x3A7"+
		"\x3A6\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3AE"+
		"\a)\x2\x2\x3AA\x3AC\x5\x1B6\xDC\x2\x3AB\x3AA\x3\x2\x2\x2\x3AB\x3AC\x3"+
		"\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AF\x5\x62\x32\x2\x3AE\x3AB\x3\x2"+
		"\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AFw\x3\x2\x2\x2\x3B0\x3B1\a{\x2\x2\x3B1"+
		"\x3B2\x5\x1B6\xDC\x2\x3B2\x3B4\x5\x38\x1D\x2\x3B3\x3B5\x5\x1B6\xDC\x2"+
		"\x3B4\x3B3\x3\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B6\x3\x2\x2\x2\x3B6"+
		"\x3B8\a)\x2\x2\x3B7\x3B9\x5\x1B6\xDC\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9"+
		"\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BB\x5z>\x2\x3BBy\x3\x2\x2\x2"+
		"\x3BC\x3C7\x5|?\x2\x3BD\x3BF\x5\x1B6\xDC\x2\x3BE\x3BD\x3\x2\x2\x2\x3BE"+
		"\x3BF\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C2\a)\x2\x2\x3C1\x3C3\x5"+
		"\x1B6\xDC\x2\x3C2\x3C1\x3\x2\x2\x2\x3C2\x3C3\x3\x2\x2\x2\x3C3\x3C4\x3"+
		"\x2\x2\x2\x3C4\x3C6\x5|?\x2\x3C5\x3BE\x3\x2\x2\x2\x3C6\x3C9\x3\x2\x2\x2"+
		"\x3C7\x3C5\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8{\x3\x2\x2\x2\x3C9\x3C7"+
		"\x3\x2\x2\x2\x3CA\x3CB\x5\x176\xBC\x2\x3CB}\x3\x2\x2\x2\x3CC\x3CD\a\xA7"+
		"\x2\x2\x3CD\x3CE\x5\x1B6\xDC\x2\x3CE\x3D0\x5\x36\x1C\x2\x3CF\x3D1\x5\x1B6"+
		"\xDC\x2\x3D0\x3CF\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2"+
		"\x2\x3D2\x3D4\a)\x2\x2\x3D3\x3D5\x5\x1B6\xDC\x2\x3D4\x3D3\x3\x2\x2\x2"+
		"\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D7\x3\x2\x2\x2\x3D6\x3D8\x5\x80\x41\x2\x3D7"+
		"\x3D6\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3DA\x3\x2\x2\x2\x3D9\x3DB"+
		"\x5\x1B6\xDC\x2\x3DA\x3D9\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DC"+
		"\x3\x2\x2\x2\x3DC\x3DE\a)\x2\x2\x3DD\x3DF\x5\x1B6\xDC\x2\x3DE\x3DD\x3"+
		"\x2\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E1\x5\x82"+
		"\x42\x2\x3E1\x7F\x3\x2\x2\x2\x3E2\x3E3\x5\x176\xBC\x2\x3E3\x81\x3\x2\x2"+
		"\x2\x3E4\x3E5\x5\x176\xBC\x2\x3E5\x83\x3\x2\x2\x2\x3E6\x3E7\as\x2\x2\x3E7"+
		"\x3E8\x5\x1B6\xDC\x2\x3E8\x3EA\x5\x36\x1C\x2\x3E9\x3EB\x5\x1B6\xDC\x2"+
		"\x3EA\x3E9\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC"+
		"\x3EE\a)\x2\x2\x3ED\x3EF\x5\x1B6\xDC\x2\x3EE\x3ED\x3\x2\x2\x2\x3EE\x3EF"+
		"\x3\x2\x2\x2\x3EF\x3F1\x3\x2\x2\x2\x3F0\x3F2\x5\x80\x41\x2\x3F1\x3F0\x3"+
		"\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F4\x3\x2\x2\x2\x3F3\x3F5\x5\x1B6"+
		"\xDC\x2\x3F4\x3F3\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2\x3F5\x3F6\x3\x2\x2"+
		"\x2\x3F6\x3F8\a)\x2\x2\x3F7\x3F9\x5\x1B6\xDC\x2\x3F8\x3F7\x3\x2\x2\x2"+
		"\x3F8\x3F9\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2\x3FA\x3FB\x5\x86\x44\x2\x3FB"+
		"\x85\x3\x2\x2\x2\x3FC\x3FD\x5\x176\xBC\x2\x3FD\x87\x3\x2\x2\x2\x3FE\x3FF"+
		"\x5\x174\xBB\x2\x3FF\x400\x5\x1B6\xDC\x2\x400\x402\x3\x2\x2\x2\x401\x3FE"+
		"\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x404\a\x44"+
		"\x2\x2\x404\x405\x5\x1B6\xDC\x2\x405\x410\x5\x8A\x46\x2\x406\x408\x5\x1B6"+
		"\xDC\x2\x407\x406\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x409\x3\x2\x2"+
		"\x2\x409\x40B\a)\x2\x2\x40A\x40C\x5\x1B6\xDC\x2\x40B\x40A\x3\x2\x2\x2"+
		"\x40B\x40C\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40F\x5\x8A\x46\x2\x40E"+
		"\x407\x3\x2\x2\x2\x40F\x412\x3\x2\x2\x2\x410\x40E\x3\x2\x2\x2\x410\x411"+
		"\x3\x2\x2\x2\x411\x89\x3\x2\x2\x2\x412\x410\x3\x2\x2\x2\x413\x417\x5\x152"+
		"\xAA\x2\x414\x415\x5\x1B6\xDC\x2\x415\x416\x5\x15E\xB0\x2\x416\x418\x3"+
		"\x2\x2\x2\x417\x414\x3\x2\x2\x2\x417\x418\x3\x2\x2\x2\x418\x41A\x3\x2"+
		"\x2\x2\x419\x41B\x5\x1B6\xDC\x2\x41A\x419\x3\x2\x2\x2\x41A\x41B\x3\x2"+
		"\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41E\a\xD2\x2\x2\x41D\x41F\x5\x1B6\xDC"+
		"\x2\x41E\x41D\x3\x2\x2\x2\x41E\x41F\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2"+
		"\x420\x421\x5\x176\xBC\x2\x421\x8B\x3\x2\x2\x2\x422\x423\x5\x174\xBB\x2"+
		"\x423\x424\x5\x1B6\xDC\x2\x424\x426\x3\x2\x2\x2\x425\x422\x3\x2\x2\x2"+
		"\x425\x426\x3\x2\x2\x2\x426\x427\x3\x2\x2\x2\x427\x428\aG\x2\x2\x428\x42B"+
		"\x5\x1B6\xDC\x2\x429\x42A\a\xA5\x2\x2\x42A\x42C\x5\x1B6\xDC\x2\x42B\x429"+
		"\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x42D\x3\x2\x2\x2\x42D\x42E\t\a"+
		"\x2\x2\x42E\x42F\x5\x1B6\xDC\x2\x42F\x430\x5\x152\xAA\x2\x430\x431\x5"+
		"\x1B6\xDC\x2\x431\x432\a\x82\x2\x2\x432\x433\x5\x1B6\xDC\x2\x433\x439"+
		"\a\xE0\x2\x2\x434\x435\x5\x1B6\xDC\x2\x435\x436\a\x35\x2\x2\x436\x437"+
		"\x5\x1B6\xDC\x2\x437\x438\a\xE0\x2\x2\x438\x43A\x3\x2\x2\x2\x439\x434"+
		"\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43F\x3\x2\x2\x2\x43B\x43D\x5"+
		"\x1B6\xDC\x2\x43C\x43B\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2\x43D\x43E\x3"+
		"\x2\x2\x2\x43E\x440\x5\x8EH\x2\x43F\x43C\x3\x2\x2\x2\x43F\x440\x3\x2\x2"+
		"\x2\x440\x444\x3\x2\x2\x2\x441\x442\x5\x1B6\xDC\x2\x442\x443\x5\x15E\xB0"+
		"\x2\x443\x445\x3\x2\x2\x2\x444\x441\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2"+
		"\x445\x8D\x3\x2\x2\x2\x446\x458\a\xD6\x2\x2\x447\x449\x5\x1B6\xDC\x2\x448"+
		"\x447\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44A\x3\x2\x2\x2\x44A\x455"+
		"\x5\x90I\x2\x44B\x44D\x5\x1B6\xDC\x2\x44C\x44B\x3\x2\x2\x2\x44C\x44D\x3"+
		"\x2\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x450\a)\x2\x2\x44F\x451\x5\x1B6\xDC"+
		"\x2\x450\x44F\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x452\x3\x2\x2\x2"+
		"\x452\x454\x5\x90I\x2\x453\x44C\x3\x2\x2\x2\x454\x457\x3\x2\x2\x2\x455"+
		"\x453\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x459\x3\x2\x2\x2\x457\x455"+
		"\x3\x2\x2\x2\x458\x448\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2\x459\x45B\x3"+
		"\x2\x2\x2\x45A\x45C\x5\x1B6\xDC\x2\x45B\x45A\x3\x2\x2\x2\x45B\x45C\x3"+
		"\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x45E\a\xDD\x2\x2\x45E\x8F\x3\x2\x2"+
		"\x2\x45F\x460\a\x97\x2\x2\x460\x462\x5\x1B6\xDC\x2\x461\x45F\x3\x2\x2"+
		"\x2\x461\x462\x3\x2\x2\x2\x462\x465\x3\x2\x2\x2\x463\x464\t\b\x2\x2\x464"+
		"\x466\x5\x1B6\xDC\x2\x465\x463\x3\x2\x2\x2\x465\x466\x3\x2\x2\x2\x466"+
		"\x469\x3\x2\x2\x2\x467\x468\a\x9E\x2\x2\x468\x46A\x5\x1B6\xDC\x2\x469"+
		"\x467\x3\x2\x2\x2\x469\x46A\x3\x2\x2\x2\x46A\x46B\x3\x2\x2\x2\x46B\x474"+
		"\x5\x150\xA9\x2\x46C\x46E\x5\x1B6\xDC\x2\x46D\x46C\x3\x2\x2\x2\x46D\x46E"+
		"\x3\x2\x2\x2\x46E\x46F\x3\x2\x2\x2\x46F\x471\a\xD6\x2\x2\x470\x472\x5"+
		"\x1B6\xDC\x2\x471\x470\x3\x2\x2\x2\x471\x472\x3\x2\x2\x2\x472\x473\x3"+
		"\x2\x2\x2\x473\x475\a\xDD\x2\x2\x474\x46D\x3\x2\x2\x2\x474\x475\x3\x2"+
		"\x2\x2\x475\x47A\x3\x2\x2\x2\x476\x478\x5\x1B6\xDC\x2\x477\x476\x3\x2"+
		"\x2\x2\x477\x478\x3\x2\x2\x2\x478\x479\x3\x2\x2\x2\x479\x47B\x5\x15E\xB0"+
		"\x2\x47A\x477\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x480\x3\x2\x2\x2"+
		"\x47C\x47E\x5\x1B6\xDC\x2\x47D\x47C\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2"+
		"\x47E\x47F\x3\x2\x2\x2\x47F\x481\x5\x92J\x2\x480\x47D\x3\x2\x2\x2\x480"+
		"\x481\x3\x2\x2\x2\x481\x91\x3\x2\x2\x2\x482\x484\a\xD2\x2\x2\x483\x485"+
		"\x5\x1B6\xDC\x2\x484\x483\x3\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486"+
		"\x3\x2\x2\x2\x486\x487\x5\x176\xBC\x2\x487\x93\x3\x2\x2\x2\x488\x489\x5"+
		"\x96L\x2\x489\x48A\x5\x1B6\xDC\x2\x48A\x495\x5\x98M\x2\x48B\x48D\x5\x1B6"+
		"\xDC\x2\x48C\x48B\x3\x2\x2\x2\x48C\x48D\x3\x2\x2\x2\x48D\x48E\x3\x2\x2"+
		"\x2\x48E\x490\a)\x2\x2\x48F\x491\x5\x1B6\xDC\x2\x490\x48F\x3\x2\x2\x2"+
		"\x490\x491\x3\x2\x2\x2\x491\x492\x3\x2\x2\x2\x492\x494\x5\x98M\x2\x493"+
		"\x48C\x3\x2\x2\x2\x494\x497\x3\x2\x2\x2\x495\x493\x3\x2\x2\x2\x495\x496"+
		"\x3\x2\x2\x2\x496\x95\x3\x2\x2\x2\x497\x495\x3\x2\x2\x2\x498\x499\t\t"+
		"\x2\x2\x499\x97\x3\x2\x2\x2\x49A\x49E\x5\x9AN\x2\x49B\x49E\x5\x9CO\x2"+
		"\x49C\x49E\x5\xA2R\x2\x49D\x49A\x3\x2\x2\x2\x49D\x49B\x3\x2\x2\x2\x49D"+
		"\x49C\x3\x2\x2\x2\x49E\x99\x3\x2\x2\x2\x49F\x4A0\x5\x150\xA9\x2\x4A0\x9B"+
		"\x3\x2\x2\x2\x4A1\x4A3\x5\x9EP\x2\x4A2\x4A4\x5\x1B6\xDC\x2\x4A3\x4A2\x3"+
		"\x2\x2\x2\x4A3\x4A4\x3\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A7\a\xD8"+
		"\x2\x2\x4A6\x4A8\x5\x1B6\xDC\x2\x4A7\x4A6\x3\x2\x2\x2\x4A7\x4A8\x3\x2"+
		"\x2\x2\x4A8\x4A9\x3\x2\x2\x2\x4A9\x4AA\x5\xA0Q\x2\x4AA\x9D\x3\x2\x2\x2"+
		"\x4AB\x4AC\x6P\x2\x2\x4AC\x4AD\x5\x150\xA9\x2\x4AD\x9F\x3\x2\x2\x2\x4AE"+
		"\x4AF\x6Q\x3\x2\x4AF\x4B0\x5\x150\xA9\x2\x4B0\xA1\x3\x2\x2\x2\x4B1\x4B3"+
		"\x5\xA4S\x2\x4B2\x4B4\x5\x1B6\xDC\x2\x4B3\x4B2\x3\x2\x2\x2\x4B3\x4B4\x3"+
		"\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B7\a\xD8\x2\x2\x4B6\x4B8\x5\x1B6"+
		"\xDC\x2\x4B7\x4B6\x3\x2\x2\x2\x4B7\x4B8\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2"+
		"\x2\x4B9\x4BA\x5\xA6T\x2\x4BA\xA3\x3\x2\x2\x2\x4BB\x4BC\x5\x150\xA9\x2"+
		"\x4BC\xA5\x3\x2\x2\x2\x4BD\x4BE\x5\x150\xA9\x2\x4BE\xA7\x3\x2\x2\x2\x4BF"+
		"\x4C0\aV\x2\x2\x4C0\x4C1\x5\x1A0\xD1\x2\x4C1\x4C2\x5\x1E\x10\x2\x4C2\x4C3"+
		"\a\x80\x2\x2\x4C3\x4D7\x3\x2\x2\x2\x4C4\x4C5\aV\x2\x2\x4C5\x4C6\x5\x1B6"+
		"\xDC\x2\x4C6\x4C7\t\n\x2\x2\x4C7\x4C8\x5\x1B6\xDC\x2\x4C8\x4C9\x5\x176"+
		"\xBC\x2\x4C9\x4CA\x5\x1A0\xD1\x2\x4CA\x4CB\x5\x1E\x10\x2\x4CB\x4CC\a\x80"+
		"\x2\x2\x4CC\x4D7\x3\x2\x2\x2\x4CD\x4CE\aV\x2\x2\x4CE\x4CF\x5\x1A0\xD1"+
		"\x2\x4CF\x4D0\x5\x1E\x10\x2\x4D0\x4D1\a\x80\x2\x2\x4D1\x4D2\x5\x1B6\xDC"+
		"\x2\x4D2\x4D3\t\n\x2\x2\x4D3\x4D4\x5\x1B6\xDC\x2\x4D4\x4D5\x5\x176\xBC"+
		"\x2\x4D5\x4D7\x3\x2\x2\x2\x4D6\x4BF\x3\x2\x2\x2\x4D6\x4C4\x3\x2\x2\x2"+
		"\x4D6\x4CD\x3\x2\x2\x2\x4D7\xA9\x3\x2\x2\x2\x4D8\x4D9\x5\x174\xBB\x2\x4D9"+
		"\x4DA\x5\x1B6\xDC\x2\x4DA\x4DC\x3\x2\x2\x2\x4DB\x4D8\x3\x2\x2\x2\x4DB"+
		"\x4DC\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4DE\a\x65\x2\x2\x4DE\x4DF"+
		"\x5\x1B6\xDC\x2\x4DF\x4E0\x5\x152\xAA\x2\x4E0\x4E4\x5\x1A0\xD1\x2\x4E1"+
		"\x4E3\x5\xACW\x2\x4E2\x4E1\x3\x2\x2\x2\x4E3\x4E6\x3\x2\x2\x2\x4E4\x4E2"+
		"\x3\x2\x2\x2\x4E4\x4E5\x3\x2\x2\x2\x4E5\x4E7\x3\x2\x2\x2\x4E6\x4E4\x3"+
		"\x2\x2\x2\x4E7\x4E8\a\\\x2\x2\x4E8\xAB\x3\x2\x2\x2\x4E9\x4F2\x5\x152\xAA"+
		"\x2\x4EA\x4EC\x5\x1B6\xDC\x2\x4EB\x4EA\x3\x2\x2\x2\x4EB\x4EC\x3\x2\x2"+
		"\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EF\a\xD2\x2\x2\x4EE\x4F0\x5\x1B6\xDC"+
		"\x2\x4EF\x4EE\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2"+
		"\x4F1\x4F3\x5\x176\xBC\x2\x4F2\x4EB\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2"+
		"\x4F3\x4F4\x3\x2\x2\x2\x4F4\x4F5\x5\x1A0\xD1\x2\x4F5\xAD\x3\x2\x2\x2\x4F6"+
		"\x4F7\a\x64\x2\x2\x4F7\xAF\x3\x2\x2\x2\x4F8\x4F9\ag\x2\x2\x4F9\x4FA\x5"+
		"\x1B6\xDC\x2\x4FA\x505\x5\x176\xBC\x2\x4FB\x4FD\x5\x1B6\xDC\x2\x4FC\x4FB"+
		"\x3\x2\x2\x2\x4FC\x4FD\x3\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE\x500\a)"+
		"\x2\x2\x4FF\x501\x5\x1B6\xDC\x2\x500\x4FF\x3\x2\x2\x2\x500\x501\x3\x2"+
		"\x2\x2\x501\x502\x3\x2\x2\x2\x502\x504\x5\x176\xBC\x2\x503\x4FC\x3\x2"+
		"\x2\x2\x504\x507\x3\x2\x2\x2\x505\x503\x3\x2\x2\x2\x505\x506\x3\x2\x2"+
		"\x2\x506\xB1\x3\x2\x2\x2\x507\x505\x3\x2\x2\x2\x508\x509\ah\x2\x2\x509"+
		"\x50A\x5\x1B6\xDC\x2\x50A\x50B\x5\x176\xBC\x2\x50B\xB3\x3\x2\x2\x2\x50C"+
		"\x50D\x5\x174\xBB\x2\x50D\x50E\x5\x1B6\xDC\x2\x50E\x510\x3\x2\x2\x2\x50F"+
		"\x50C\x3\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511\x512"+
		"\ai\x2\x2\x512\x513\x5\x1B6\xDC\x2\x513\x515\x5\x152\xAA\x2\x514\x516"+
		"\x5\x1B6\xDC\x2\x515\x514\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x517"+
		"\x3\x2\x2\x2\x517\x518\x5\x8EH\x2\x518\xB5\x3\x2\x2\x2\x519\x51A\t\v\x2"+
		"\x2\x51A\xB7\x3\x2\x2\x2\x51B\x51C\aq\x2\x2\x51C\x51D\x5\x1B6\xDC\x2\x51D"+
		"\x51E\aX\x2\x2\x51E\x51F\x5\x1B6\xDC\x2\x51F\x520\x5\x176\xBC\x2\x520"+
		"\x521\x5\x1B6\xDC\x2\x521\x522\az\x2\x2\x522\x523\x5\x1B6\xDC\x2\x523"+
		"\x524\x5\x176\xBC\x2\x524\x525\x5\x1A0\xD1\x2\x525\x526\x5\x1E\x10\x2"+
		"\x526\x52A\a\x8D\x2\x2\x527\x528\x5\x1B6\xDC\x2\x528\x529\x5\x176\xBC"+
		"\x2\x529\x52B\x3\x2\x2\x2\x52A\x527\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2"+
		"\x52B\xB9\x3\x2\x2\x2\x52C\x52D\aq\x2\x2\x52D\x52E\x5\x1B6\xDC\x2\x52E"+
		"\x52F\x5\x176\xBC\x2\x52F\x530\x5\x1B6\xDC\x2\x530\x531\a\xC0\x2\x2\x531"+
		"\x532\x5\x1B6\xDC\x2\x532\x538\x5\x176\xBC\x2\x533\x534\x5\x1B6\xDC\x2"+
		"\x534\x535\a\xB9\x2\x2\x535\x536\x5\x1B6\xDC\x2\x536\x537\x5\x176\xBC"+
		"\x2\x537\x539\x3\x2\x2\x2\x538\x533\x3\x2\x2\x2\x538\x539\x3\x2\x2\x2"+
		"\x539\x53A\x3\x2\x2\x2\x53A\x53B\x5\x1A0\xD1\x2\x53B\x53C\x5\x1E\x10\x2"+
		"\x53C\x540\a\x8D\x2\x2\x53D\x53E\x5\x1B6\xDC\x2\x53E\x53F\x5\x176\xBC"+
		"\x2\x53F\x541\x3\x2\x2\x2\x540\x53D\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2"+
		"\x541\xBB\x3\x2\x2\x2\x542\x543\x5\x174\xBB\x2\x543\x544\x5\x1B6\xDC\x2"+
		"\x544\x546\x3\x2\x2\x2\x545\x542\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546"+
		"\x549\x3\x2\x2\x2\x547\x548\a\xB8\x2\x2\x548\x54A\x5\x1B6\xDC\x2\x549"+
		"\x547\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A\x54B\x3\x2\x2\x2\x54B\x54D"+
		"\ar\x2\x2\x54C\x54E\x5\x1B6\xDC\x2\x54D\x54C\x3\x2\x2\x2\x54D\x54E\x3"+
		"\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x554\x5\xBE`\x2\x550\x552\x5\x1B6"+
		"\xDC\x2\x551\x550\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x553\x3\x2\x2"+
		"\x2\x553\x555\x5\x8EH\x2\x554\x551\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555"+
		"\x55A\x3\x2\x2\x2\x556\x558\x5\x1B6\xDC\x2\x557\x556\x3\x2\x2\x2\x557"+
		"\x558\x3\x2\x2\x2\x558\x559\x3\x2\x2\x2\x559\x55B\x5\x15E\xB0\x2\x55A"+
		"\x557\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x55C\x3\x2\x2\x2\x55C\x55D"+
		"\x5\x1A0\xD1\x2\x55D\x55E\x5\x1E\x10\x2\x55E\x55F\a]\x2\x2\x55F\xBD\x3"+
		"\x2\x2\x2\x560\x561\x5\x152\xAA\x2\x561\xBF\x3\x2\x2\x2\x562\x563\au\x2"+
		"\x2\x563\x564\x5\x1B6\xDC\x2\x564\x565\x5\x176\xBC\x2\x565\xC1\x3\x2\x2"+
		"\x2\x566\x567\av\x2\x2\x567\x568\x5\x1B6\xDC\x2\x568\x569\x5\x176\xBC"+
		"\x2\x569\xC3\x3\x2\x2\x2\x56A\x56B\aw\x2\x2\x56B\x56C\x5\x1B6\xDC\x2\x56C"+
		"\x56D\x5\xD6l\x2\x56D\x56E\x5\x1B6\xDC\x2\x56E\x56F\a\xBF\x2\x2\x56F\x570"+
		"\x5\x1A0\xD1\x2\x570\x574\x5\x1E\x10\x2\x571\x573\x5\xC6\x64\x2\x572\x571"+
		"\x3\x2\x2\x2\x573\x576\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x574\x575\x3"+
		"\x2\x2\x2\x575\x578\x3\x2\x2\x2\x576\x574\x3\x2\x2\x2\x577\x579\x5\xC8"+
		"\x65\x2\x578\x577\x3\x2\x2\x2\x578\x579\x3\x2\x2\x2\x579\x57A\x3\x2\x2"+
		"\x2\x57A\x57B\a^\x2\x2\x57B\xC5\x3\x2\x2\x2\x57C\x57D\aZ\x2\x2\x57D\x57E"+
		"\x5\x1B6\xDC\x2\x57E\x57F\x5\xD6l\x2\x57F\x580\x5\x1B6\xDC\x2\x580\x581"+
		"\a\xBF\x2\x2\x581\x582\x5\x1A0\xD1\x2\x582\x583\x5\x1E\x10\x2\x583\x58F"+
		"\x3\x2\x2\x2\x584\x585\aZ\x2\x2\x585\x586\x5\x1B6\xDC\x2\x586\x587\x5"+
		"\xD6l\x2\x587\x588\x5\x1B6\xDC\x2\x588\x58A\a\xBF\x2\x2\x589\x58B\x5\x1B6"+
		"\xDC\x2\x58A\x589\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58C\x3\x2\x2"+
		"\x2\x58C\x58D\x5\x1E\x10\x2\x58D\x58F\x3\x2\x2\x2\x58E\x57C\x3\x2\x2\x2"+
		"\x58E\x584\x3\x2\x2\x2\x58F\xC7\x3\x2\x2\x2\x590\x591\aY\x2\x2\x591\x592"+
		"\x5\x1A0\xD1\x2\x592\x593\x5\x1E\x10\x2\x593\xC9\x3\x2\x2\x2\x594\x597"+
		"\x5\xCCg\x2\x595\x597\x5\xCEh\x2\x596\x594\x3\x2\x2\x2\x596\x595\x3\x2"+
		"\x2\x2\x597\xCB\x3\x2\x2\x2\x598\x59A\aw\x2\x2\x599\x59B\x5\x1B6\xDC\x2"+
		"\x59A\x599\x3\x2\x2\x2\x59A\x59B\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C"+
		"\x59E\x5\xD6l\x2\x59D\x59F\x5\x1B6\xDC\x2\x59E\x59D\x3\x2\x2\x2\x59E\x59F"+
		"\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A2\a\xBF\x2\x2\x5A1\x5A3\x5"+
		"\x1B6\xDC\x2\x5A2\x5A1\x3\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x5A4\x3"+
		"\x2\x2\x2\x5A4\x5A8\x5\xD2j\x2\x5A5\x5A6\x5\x1B6\xDC\x2\x5A6\x5A7\x5\xD0"+
		"i\x2\x5A7\x5A9\x3\x2\x2\x2\x5A8\x5A5\x3\x2\x2\x2\x5A8\x5A9\x3\x2\x2\x2"+
		"\x5A9\xCD\x3\x2\x2\x2\x5AA\x5AC\aw\x2\x2\x5AB\x5AD\x5\x1B6\xDC\x2\x5AC"+
		"\x5AB\x3\x2\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5B0"+
		"\x5\xD6l\x2\x5AF\x5B1\x5\x1B6\xDC\x2\x5B0\x5AF\x3\x2\x2\x2\x5B0\x5B1\x3"+
		"\x2\x2\x2\x5B1\x5B2\x3\x2\x2\x2\x5B2\x5B3\a\xBF\x2\x2\x5B3\x5B5\x5\x1A0"+
		"\xD1\x2\x5B4\x5B6\x5\x1B6\xDC\x2\x5B5\x5B4\x3\x2\x2\x2\x5B5\x5B6\x3\x2"+
		"\x2\x2\x5B6\x5B7\x3\x2\x2\x2\x5B7\x5B8\x5\xD0i\x2\x5B8\xCF\x3\x2\x2\x2"+
		"\x5B9\x5BB\aY\x2\x2\x5BA\x5BC\x5\x1B6\xDC\x2\x5BB\x5BA\x3\x2\x2\x2\x5BB"+
		"\x5BC\x3\x2\x2\x2\x5BC\x5BE\x3\x2\x2\x2\x5BD\x5BF\x5\xD2j\x2\x5BE\x5BD"+
		"\x3\x2\x2\x2\x5BE\x5BF\x3\x2\x2\x2\x5BF\xD1\x3\x2\x2\x2\x5C0\x5CD\x5\x16C"+
		"\xB7\x2\x5C1\x5C3\x5\x1B6\xDC\x2\x5C2\x5C1\x3\x2\x2\x2\x5C2\x5C3\x3\x2"+
		"\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C6\a*\x2\x2\x5C5\x5C7\x5\x1B6\xDC"+
		"\x2\x5C6\x5C5\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5C9\x3\x2\x2\x2"+
		"\x5C8\x5CA\x5\xD4k\x2\x5C9\x5C8\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA"+
		"\x5CC\x3\x2\x2\x2\x5CB\x5C2\x3\x2\x2\x2\x5CC\x5CF\x3\x2\x2\x2\x5CD\x5CB"+
		"\x3\x2\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\x5E7\x3\x2\x2\x2\x5CF\x5CD\x3"+
		"\x2\x2\x2\x5D0\x5D2\a*\x2\x2\x5D1\x5D3\x5\x1B6\xDC\x2\x5D2\x5D1\x3\x2"+
		"\x2\x2\x5D2\x5D3\x3\x2\x2\x2\x5D3\x5D5\x3\x2\x2\x2\x5D4\x5D0\x3\x2\x2"+
		"\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6\x5E3\x5\xD4k\x2\x5D7"+
		"\x5D9\x5\x1B6\xDC\x2\x5D8\x5D7\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9"+
		"\x5DA\x3\x2\x2\x2\x5DA\x5DC\a*\x2\x2\x5DB\x5DD\x5\x1B6\xDC\x2\x5DC\x5DB"+
		"\x3\x2\x2\x2\x5DC\x5DD\x3\x2\x2\x2\x5DD\x5DF\x3\x2\x2\x2\x5DE\x5E0\x5"+
		"\xD4k\x2\x5DF\x5DE\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5E2\x3\x2\x2"+
		"\x2\x5E1\x5D8\x3\x2\x2\x2\x5E2\x5E5\x3\x2\x2\x2\x5E3\x5E1\x3\x2\x2\x2"+
		"\x5E3\x5E4\x3\x2\x2\x2\x5E4\x5E7\x3\x2\x2\x2\x5E5\x5E3\x3\x2\x2\x2\x5E6"+
		"\x5C0\x3\x2\x2\x2\x5E6\x5D4\x3\x2\x2\x2\x5E7\xD3\x3\x2\x2\x2\x5E8\x5E9"+
		"\x5 \x11\x2\x5E9\xD5\x3\x2\x2\x2\x5EA\x5EB\x5\x176\xBC\x2\x5EB\xD7\x3"+
		"\x2\x2\x2\x5EC\x5ED\ay\x2\x2\x5ED\x5EE\x5\x1B6\xDC\x2\x5EE\x5EF\x5\x176"+
		"\xBC\x2\x5EF\xD9\x3\x2\x2\x2\x5F0\x5F1\a\x81\x2\x2\x5F1\x5F3\x5\x1B6\xDC"+
		"\x2\x5F2\x5F0\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2"+
		"\x5F4\x5F6\x5\x182\xC2\x2\x5F5\x5F7\x5\x1B6\xDC\x2\x5F6\x5F5\x3\x2\x2"+
		"\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\x5FA\a\xD2\x2\x2"+
		"\x5F9\x5FB\x5\x1B6\xDC\x2\x5FA\x5F9\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2"+
		"\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FD\x5\x176\xBC\x2\x5FD\xDB\x3\x2\x2\x2\x5FE"+
		"\x5FF\a\x88\x2\x2\x5FF\x600\x5\x1B6\xDC\x2\x600\x602\x5\x176\xBC\x2\x601"+
		"\x603\x5\x1B6\xDC\x2\x602\x601\x3\x2\x2\x2\x602\x603\x3\x2\x2\x2\x603"+
		"\x604\x3\x2\x2\x2\x604\x606\a\xD2\x2\x2\x605\x607\x5\x1B6\xDC\x2\x606"+
		"\x605\x3\x2\x2\x2\x606\x607\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x609"+
		"\x5\x176\xBC\x2\x609\xDD\x3\x2\x2\x2\x60A\x60B\t\f\x2\x2\x60B\x614\x5"+
		"\x1B6\xDC\x2\x60C\x60D\av\x2\x2\x60D\x60E\x5\x1B6\xDC\x2\x60E\x60F\x5"+
		"\x176\xBC\x2\x60F\x615\x3\x2\x2\x2\x610\x611\a\xAF\x2\x2\x611\x612\x5"+
		"\x1B6\xDC\x2\x612\x613\a\x8D\x2\x2\x613\x615\x3\x2\x2\x2\x614\x60C\x3"+
		"\x2\x2\x2\x614\x610\x3\x2\x2\x2\x615\xDF\x3\x2\x2\x2\x616\x617\a\x93\x2"+
		"\x2\x617\x618\x5\x1B6\xDC\x2\x618\x619\x5\x176\xBC\x2\x619\x61A\x5\x1B6"+
		"\xDC\x2\x61A\x61B\av\x2\x2\x61B\x61C\x5\x1B6\xDC\x2\x61C\x627\x5\x176"+
		"\xBC\x2\x61D\x61F\x5\x1B6\xDC\x2\x61E\x61D\x3\x2\x2\x2\x61E\x61F\x3\x2"+
		"\x2\x2\x61F\x620\x3\x2\x2\x2\x620\x622\a)\x2\x2\x621\x623\x5\x1B6\xDC"+
		"\x2\x622\x621\x3\x2\x2\x2\x622\x623\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2"+
		"\x624\x626\x5\x176\xBC\x2\x625\x61E\x3\x2\x2\x2\x626\x629\x3\x2\x2\x2"+
		"\x627\x625\x3\x2\x2\x2\x627\x628\x3\x2\x2\x2\x628\xE1\x3\x2\x2\x2\x629"+
		"\x627\x3\x2\x2\x2\x62A\x62B\a\x93\x2\x2\x62B\x62C\x5\x1B6\xDC\x2\x62C"+
		"\x62D\x5\x176\xBC\x2\x62D\x62E\x5\x1B6\xDC\x2\x62E\x62F\au\x2\x2\x62F"+
		"\x630\x5\x1B6\xDC\x2\x630\x63B\x5\x176\xBC\x2\x631\x633\x5\x1B6\xDC\x2"+
		"\x632\x631\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633\x634\x3\x2\x2\x2\x634"+
		"\x636\a)\x2\x2\x635\x637\x5\x1B6\xDC\x2\x636\x635\x3\x2\x2\x2\x636\x637"+
		"\x3\x2\x2\x2\x637\x638\x3\x2\x2\x2\x638\x63A\x5\x176\xBC\x2\x639\x632"+
		"\x3\x2\x2\x2\x63A\x63D\x3\x2\x2\x2\x63B\x639\x3\x2\x2\x2\x63B\x63C\x3"+
		"\x2\x2\x2\x63C\xE3\x3\x2\x2\x2\x63D\x63B\x3\x2\x2\x2\x63E\x63F\x5\x174"+
		"\xBB\x2\x63F\x640\x5\x1B6\xDC\x2\x640\x642\x3\x2\x2\x2\x641\x63E\x3\x2"+
		"\x2\x2\x641\x642\x3\x2\x2\x2\x642\x645\x3\x2\x2\x2\x643\x644\a\xB8\x2"+
		"\x2\x644\x646\x5\x1B6\xDC\x2\x645\x643\x3\x2\x2\x2\x645\x646\x3\x2\x2"+
		"\x2\x646\x647\x3\x2\x2\x2\x647\x648\a\xA2\x2\x2\x648\x649\x5\x1B6\xDC"+
		"\x2\x649\x64E\x5\xBE`\x2\x64A\x64C\x5\x1B6\xDC\x2\x64B\x64A\x3\x2\x2\x2"+
		"\x64B\x64C\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2\x64D\x64F\x5\x8EH\x2\x64E"+
		"\x64B\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x653\x3\x2\x2\x2\x650\x651"+
		"\x5\x1B6\xDC\x2\x651\x652\x5\x15E\xB0\x2\x652\x654\x3\x2\x2\x2\x653\x650"+
		"\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2\x655\x656\x5"+
		"\x1A0\xD1\x2\x656\x657\x5\x1E\x10\x2\x657\x658\a_\x2\x2\x658\xE5\x3\x2"+
		"\x2\x2\x659\x65A\x5\x174\xBB\x2\x65A\x65B\x5\x1B6\xDC\x2\x65B\x65D\x3"+
		"\x2\x2\x2\x65C\x659\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x660\x3\x2"+
		"\x2\x2\x65E\x65F\a\xB8\x2\x2\x65F\x661\x5\x1B6\xDC\x2\x660\x65E\x3\x2"+
		"\x2\x2\x660\x661\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662\x663\a\xA4\x2"+
		"\x2\x663\x664\x5\x1B6\xDC\x2\x664\x669\x5\x11A\x8E\x2\x665\x667\x5\x1B6"+
		"\xDC\x2\x666\x665\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x668\x3\x2\x2"+
		"\x2\x668\x66A\x5\x8EH\x2\x669\x666\x3\x2\x2\x2\x669\x66A\x3\x2\x2\x2\x66A"+
		"\x66B\x3\x2\x2\x2\x66B\x66C\x5\x1A0\xD1\x2\x66C\x66D\x5\x1E\x10\x2\x66D"+
		"\x66E\a_\x2\x2\x66E\xE7\x3\x2\x2\x2\x66F\x670\x5\x174\xBB\x2\x670\x671"+
		"\x5\x1B6\xDC\x2\x671\x673\x3\x2\x2\x2\x672\x66F\x3\x2\x2\x2\x672\x673"+
		"\x3\x2\x2\x2\x673\x676\x3\x2\x2\x2\x674\x675\a\xB8\x2\x2\x675\x677\x5"+
		"\x1B6\xDC\x2\x676\x674\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677\x678\x3"+
		"\x2\x2\x2\x678\x679\a\xA3\x2\x2\x679\x67A\x5\x1B6\xDC\x2\x67A\x67F\x5"+
		"\x11A\x8E\x2\x67B\x67D\x5\x1B6\xDC\x2\x67C\x67B\x3\x2\x2\x2\x67C\x67D"+
		"\x3\x2\x2\x2\x67D\x67E\x3\x2\x2\x2\x67E\x680\x5\x8EH\x2\x67F\x67C\x3\x2"+
		"\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x681\x3\x2\x2\x2\x681\x682\x5\x1A0\xD1"+
		"\x2\x682\x683\x5\x1E\x10\x2\x683\x684\a_\x2\x2\x684\xE9\x3\x2\x2\x2\x685"+
		"\x686\a\xA9\x2\x2\x686\x687\x5\x1B6\xDC\x2\x687\x696\x5\x152\xAA\x2\x688"+
		"\x68A\x5\x1B6\xDC\x2\x689\x688\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2\x68A"+
		"\x68B\x3\x2\x2\x2\x68B\x68D\a\xD6\x2\x2\x68C\x68E\x5\x1B6\xDC\x2\x68D"+
		"\x68C\x3\x2\x2\x2\x68D\x68E\x3\x2\x2\x2\x68E\x690\x3\x2\x2\x2\x68F\x691"+
		"\x5\xECw\x2\x690\x68F\x3\x2\x2\x2\x690\x691\x3\x2\x2\x2\x691\x693\x3\x2"+
		"\x2\x2\x692\x694\x5\x1B6\xDC\x2\x693\x692\x3\x2\x2\x2\x693\x694\x3\x2"+
		"\x2\x2\x694\x695\x3\x2\x2\x2\x695\x697\a\xDD\x2\x2\x696\x689\x3\x2\x2"+
		"\x2\x696\x697\x3\x2\x2\x2\x697\xEB\x3\x2\x2\x2\x698\x6A3\x5\xEEx\x2\x699"+
		"\x69B\x5\x1B6\xDC\x2\x69A\x699\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B"+
		"\x69C\x3\x2\x2\x2\x69C\x69E\a)\x2\x2\x69D\x69F\x5\x1B6\xDC\x2\x69E\x69D"+
		"\x3\x2\x2\x2\x69E\x69F\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A2\x5"+
		"\xEEx\x2\x6A1\x69A\x3\x2\x2\x2\x6A2\x6A5\x3\x2\x2\x2\x6A3\x6A1\x3\x2\x2"+
		"\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\xED\x3\x2\x2\x2\x6A5\x6A3\x3\x2\x2\x2\x6A6"+
		"\x6A7\a=\x2\x2\x6A7\x6A9\x5\x1B6\xDC\x2\x6A8\x6A6\x3\x2\x2\x2\x6A8\x6A9"+
		"\x3\x2\x2\x2\x6A9\x6AA\x3\x2\x2\x2\x6AA\x6AB\x5\x176\xBC\x2\x6AB\xEF\x3"+
		"\x2\x2\x2\x6AC\x6AD\a\xAC\x2\x2\x6AD\x6B0\x5\x1B6\xDC\x2\x6AE\x6AF\a\x9F"+
		"\x2\x2\x6AF\x6B1\x5\x1B6\xDC\x2\x6B0\x6AE\x3\x2\x2\x2\x6B0\x6B1\x3\x2"+
		"\x2\x2\x6B1\x6B2\x3\x2\x2\x2\x6B2\x6B3\x5\xF2z\x2\x6B3\xF1\x3\x2\x2\x2"+
		"\x6B4\x6BF\x5\xF4{\x2\x6B5\x6B7\x5\x1B6\xDC\x2\x6B6\x6B5\x3\x2\x2\x2\x6B6"+
		"\x6B7\x3\x2\x2\x2\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6BA\a)\x2\x2\x6B9\x6BB\x5"+
		"\x1B6\xDC\x2\x6BA\x6B9\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\x6BC\x3"+
		"\x2\x2\x2\x6BC\x6BE\x5\xF4{\x2\x6BD\x6B6\x3\x2\x2\x2\x6BE\x6C1\x3\x2\x2"+
		"\x2\x6BF\x6BD\x3\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2\x6C0\xF3\x3\x2\x2\x2\x6C1"+
		"\x6BF\x3\x2\x2\x2\x6C2\x6C6\x5\x176\xBC\x2\x6C3\x6C4\x5\x1B6\xDC\x2\x6C4"+
		"\x6C5\x5\x15E\xB0\x2\x6C5\x6C7\x3\x2\x2\x2\x6C6\x6C3\x3\x2\x2\x2\x6C6"+
		"\x6C7\x3\x2\x2\x2\x6C7\xF5\x3\x2\x2\x2\x6C8\x6C9\x5\xF8}\x2\x6C9\x6CB"+
		"\a\xD6\x2\x2\x6CA\x6CC\x5\x1B6\xDC\x2\x6CB\x6CA\x3\x2\x2\x2\x6CB\x6CC"+
		"\x3\x2\x2\x2\x6CC\x6CD\x3\x2\x2\x2\x6CD\x6CF\x5\x182\xC2\x2\x6CE\x6D0"+
		"\x5\x1B6\xDC\x2\x6CF\x6CE\x3\x2\x2\x2\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D1"+
		"\x3\x2\x2\x2\x6D1\x6D3\a)\x2\x2\x6D2\x6D4\x5\x1B6\xDC\x2\x6D3\x6D2\x3"+
		"\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D7\x5\x182"+
		"\xC2\x2\x6D6\x6D8\x5\x1B6\xDC\x2\x6D7\x6D6\x3\x2\x2\x2\x6D7\x6D8\x3\x2"+
		"\x2\x2\x6D8\x6E1\x3\x2\x2\x2\x6D9\x6DB\a)\x2\x2\x6DA\x6DC\x5\x1B6\xDC"+
		"\x2\x6DB\x6DA\x3\x2\x2\x2\x6DB\x6DC\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2"+
		"\x6DD\x6DF\x5\x182\xC2\x2\x6DE\x6E0\x5\x1B6\xDC\x2\x6DF\x6DE\x3\x2\x2"+
		"\x2\x6DF\x6E0\x3\x2\x2\x2\x6E0\x6E2\x3\x2\x2\x2\x6E1\x6D9\x3\x2\x2\x2"+
		"\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E5\a\xDD\x2\x2\x6E4"+
		"\x6E6\x5\x1B6\xDC\x2\x6E5\x6E4\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6"+
		"\x6E7\x3\x2\x2\x2\x6E7\x6E9\a\xCF\x2\x2\x6E8\x6EA\x5\x1B6\xDC\x2\x6E9"+
		"\x6E8\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6EC"+
		"\x5\x176\xBC\x2\x6EC\xF7\x3\x2\x2\x2\x6ED\x6EF\t\r\x2\x2\x6EE\x6F0\a\x31"+
		"\x2\x2\x6EF\x6EE\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\xF9\x3\x2\x2\x2"+
		"\x6F1\x6F2\x5\x176\xBC\x2\x6F2\xFB\x3\x2\x2\x2\x6F3\x6F4\a@\x2\x2\x6F4"+
		"\x6F5\x5\x1B6\xDC\x2\x6F5\x6F6\x5\x176\xBC\x2\x6F6\x6FE\x3\x2\x2\x2\x6F7"+
		"\x6FB\x5\x176\xBC\x2\x6F8\x6F9\x5\x1B6\xDC\x2\x6F9\x6FA\x5\x186\xC4\x2"+
		"\x6FA\x6FC\x3\x2\x2\x2\x6FB\x6F8\x3\x2\x2\x2\x6FB\x6FC\x3\x2\x2\x2\x6FC"+
		"\x6FE\x3\x2\x2\x2\x6FD\x6F3\x3\x2\x2\x2\x6FD\x6F7\x3\x2\x2\x2\x6FE\xFD"+
		"\x3\x2\x2\x2\x6FF\x705\a\xAF\x2\x2\x700\x703\x5\x1B6\xDC\x2\x701\x704"+
		"\a\x8D\x2\x2\x702\x704\x5\x176\xBC\x2\x703\x701\x3\x2\x2\x2\x703\x702"+
		"\x3\x2\x2\x2\x704\x706\x3\x2\x2\x2\x705\x700\x3\x2\x2\x2\x705\x706\x3"+
		"\x2\x2\x2\x706\xFF\x3\x2\x2\x2\x707\x708\a\xB0\x2\x2\x708\x101\x3\x2\x2"+
		"\x2\x709\x70A\a\xB1\x2\x2\x70A\x70B\x5\x1B6\xDC\x2\x70B\x70D\x5\x176\xBC"+
		"\x2\x70C\x70E\x5\x1B6\xDC\x2\x70D\x70C\x3\x2\x2\x2\x70D\x70E\x3\x2\x2"+
		"\x2\x70E\x70F\x3\x2\x2\x2\x70F\x711\a\xD2\x2\x2\x710\x712\x5\x1B6\xDC"+
		"\x2\x711\x710\x3\x2\x2\x2\x711\x712\x3\x2\x2\x2\x712\x713\x3\x2\x2\x2"+
		"\x713\x714\x5\x176\xBC\x2\x714\x103\x3\x2\x2\x2\x715\x716\a\xBA\x2\x2"+
		"\x716\x105\x3\x2\x2\x2\x717\x718\a\x8C\x2\x2\x718\x719\x5\x1B6\xDC\x2"+
		"\x719\x71A\x5\x176\xBC\x2\x71A\x71B\x5\x1B6\xDC\x2\x71B\x71C\a\x39\x2"+
		"\x2\x71C\x71D\x5\x1B6\xDC\x2\x71D\x71E\x5\x176\xBC\x2\x71E\x107\x3\x2"+
		"\x2\x2\x71F\x721\a\xB3\x2\x2\x720\x722\x5\x1B6\xDC\x2\x721\x720\x3\x2"+
		"\x2\x2\x721\x722\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2\x723\x725\a\x41\x2"+
		"\x2\x724\x726\x5\x1B6\xDC\x2\x725\x724\x3\x2\x2\x2\x725\x726\x3\x2\x2"+
		"\x2\x726\x727\x3\x2\x2\x2\x727\x728\x5\x10A\x86\x2\x728\x72C\x5\x1A0\xD1"+
		"\x2\x729\x72B\x5\x10C\x87\x2\x72A\x729\x3\x2\x2\x2\x72B\x72E\x3\x2\x2"+
		"\x2\x72C\x72A\x3\x2\x2\x2\x72C\x72D\x3\x2\x2\x2\x72D\x730\x3\x2\x2\x2"+
		"\x72E\x72C\x3\x2\x2\x2\x72F\x731\x5\x10E\x88\x2\x730\x72F\x3\x2\x2\x2"+
		"\x730\x731\x3\x2\x2\x2\x731\x732\x3\x2\x2\x2\x732\x733\a`\x2\x2\x733\x109"+
		"\x3\x2\x2\x2\x734\x735\x5\x176\xBC\x2\x735\x10B\x3\x2\x2\x2\x736\x737"+
		"\a\x41\x2\x2\x737\x738\x5\x1B6\xDC\x2\x738\x743\x5\x110\x89\x2\x739\x73B"+
		"\x5\x1B6\xDC\x2\x73A\x739\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73C"+
		"\x3\x2\x2\x2\x73C\x73E\a)\x2\x2\x73D\x73F\x5\x1B6\xDC\x2\x73E\x73D\x3"+
		"\x2\x2\x2\x73E\x73F\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x742\x5\x110"+
		"\x89\x2\x741\x73A\x3\x2\x2\x2\x742\x745\x3\x2\x2\x2\x743\x741\x3\x2\x2"+
		"\x2\x743\x744\x3\x2\x2\x2\x744\x746\x3\x2\x2\x2\x745\x743\x3\x2\x2\x2"+
		"\x746\x747\x5\x1A0\xD1\x2\x747\x748\x5\x1E\x10\x2\x748\x10D\x3\x2\x2\x2"+
		"\x749\x74B\a\x41\x2\x2\x74A\x74C\x5\x1B6\xDC\x2\x74B\x74A\x3\x2\x2\x2"+
		"\x74B\x74C\x3\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\aY\x2\x2\x74E\x74F"+
		"\x5\x1A0\xD1\x2\x74F\x750\x5\x1E\x10\x2\x750\x10F\x3\x2\x2\x2\x751\x753"+
		"\a|\x2\x2\x752\x754\x5\x1B6\xDC\x2\x753\x752\x3\x2\x2\x2\x753\x754\x3"+
		"\x2\x2\x2\x754\x756\x3\x2\x2\x2\x755\x751\x3\x2\x2\x2\x755\x756\x3\x2"+
		"\x2\x2\x756\x757\x3\x2\x2\x2\x757\x759\x5\x162\xB2\x2\x758\x75A\x5\x1B6"+
		"\xDC\x2\x759\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B\x3\x2\x2"+
		"\x2\x75B\x75C\x5\x176\xBC\x2\x75C\x765\x3\x2\x2\x2\x75D\x75E\x5\x112\x8A"+
		"\x2\x75E\x75F\x5\x1B6\xDC\x2\x75F\x760\a\xC0\x2\x2\x760\x761\x5\x1B6\xDC"+
		"\x2\x761\x762\x5\x114\x8B\x2\x762\x765\x3\x2\x2\x2\x763\x765\x5\x176\xBC"+
		"\x2\x764\x755\x3\x2\x2\x2\x764\x75D\x3\x2\x2\x2\x764\x763\x3\x2\x2\x2"+
		"\x765\x111\x3\x2\x2\x2\x766\x767\x5\x176\xBC\x2\x767\x113\x3\x2\x2\x2"+
		"\x768\x769\x5\x176\xBC\x2\x769\x115\x3\x2\x2\x2\x76A\x76B\a\xB4\x2\x2"+
		"\x76B\x76C\x5\x1B6\xDC\x2\x76C\x76E\x5\x182\xC2\x2\x76D\x76F\x5\x1B6\xDC"+
		"\x2\x76E\x76D\x3\x2\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x770\x3\x2\x2\x2"+
		"\x770\x772\a\xD2\x2\x2\x771\x773\x5\x1B6\xDC\x2\x772\x771\x3\x2\x2\x2"+
		"\x772\x773\x3\x2\x2\x2\x773\x774\x3\x2\x2\x2\x774\x775\x5\x176\xBC\x2"+
		"\x775\x117\x3\x2\x2\x2\x776\x777\x5\x174\xBB\x2\x777\x778\x5\x1B6\xDC"+
		"\x2\x778\x77A\x3\x2\x2\x2\x779\x776\x3\x2\x2\x2\x779\x77A\x3\x2\x2\x2"+
		"\x77A\x77D\x3\x2\x2\x2\x77B\x77C\a\xB8\x2\x2\x77C\x77E\x5\x1B6\xDC\x2"+
		"\x77D\x77B\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F"+
		"\x781\a\xBC\x2\x2\x780\x782\x5\x1B6\xDC\x2\x781\x780\x3\x2\x2\x2\x781"+
		"\x782\x3\x2\x2\x2\x782\x783\x3\x2\x2\x2\x783\x788\x5\x11A\x8E\x2\x784"+
		"\x786\x5\x1B6\xDC\x2\x785\x784\x3\x2\x2\x2\x785\x786\x3\x2\x2\x2\x786"+
		"\x787\x3\x2\x2\x2\x787\x789\x5\x8EH\x2\x788\x785\x3\x2\x2\x2\x788\x789"+
		"\x3\x2\x2\x2\x789\x78A\x3\x2\x2\x2\x78A\x78B\x5\x1A0\xD1\x2\x78B\x78C"+
		"\x5\x1E\x10\x2\x78C\x78D\a\x61\x2\x2\x78D\x119\x3\x2\x2\x2\x78E\x78F\x5"+
		"\x152\xAA\x2\x78F\x11B\x3\x2\x2\x2\x790\x791\t\xE\x2\x2\x791\x793\x5\x1B6"+
		"\xDC\x2\x792\x790\x3\x2\x2\x2\x792\x793\x3\x2\x2\x2\x793\x794\x3\x2\x2"+
		"\x2\x794\x795\x5\x120\x91\x2\x795\x11D\x3\x2\x2\x2\x796\x797\a\xA1\x2"+
		"\x2\x797\x798\x5\x1B6\xDC\x2\x798\x799\x5\x120\x91\x2\x799\x11F\x3\x2"+
		"\x2\x2\x79A\x79B\a\xC2\x2\x2\x79B\x79C\x5\x1B6\xDC\x2\x79C\x79D\x5\x154"+
		"\xAB\x2\x79D\x79E\x5\x1A0\xD1\x2\x79E\x79F\x5\x122\x92\x2\x79F\x7A0\x5"+
		"\x1A0\xD1\x2\x7A0\x7A1\a\x62\x2\x2\x7A1\x121\x3\x2\x2\x2\x7A2\x7A8\x5"+
		"\x124\x93\x2\x7A3\x7A4\x5\x1A0\xD1\x2\x7A4\x7A5\x5\x124\x93\x2\x7A5\x7A7"+
		"\x3\x2\x2\x2\x7A6\x7A3\x3\x2\x2\x2\x7A7\x7AA\x3\x2\x2\x2\x7A8\x7A6\x3"+
		"\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\x123\x3\x2\x2\x2\x7AA\x7A8\x3\x2"+
		"\x2\x2\x7AB\x7AE\x5\x128\x95\x2\x7AC\x7AE\x5\x126\x94\x2\x7AD\x7AB\x3"+
		"\x2\x2\x2\x7AD\x7AC\x3\x2\x2\x2\x7AE\x125\x3\x2\x2\x2\x7AF\x7B1\x5\x154"+
		"\xAB\x2\x7B0\x7B2\x5\x1B6\xDC\x2\x7B1\x7B0\x3\x2\x2\x2\x7B1\x7B2\x3\x2"+
		"\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B4\x5\x12A\x96\x2\x7B4\x127\x3\x2"+
		"\x2\x2\x7B5\x7B6\x5\x150\xA9\x2\x7B6\x7B7\x5\x1B6\xDC\x2\x7B7\x7B8\x5"+
		"\x15E\xB0\x2\x7B8\x129\x3\x2\x2\x2\x7B9\x7BA\x5\x12C\x97\x2\x7BA\x7BB"+
		"\x5\x1B6\xDC\x2\x7BB\x7BD\x3\x2\x2\x2\x7BC\x7B9\x3\x2\x2\x2\x7BC\x7BD"+
		"\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x7BF\x5\x15E\xB0\x2\x7BF\x12B"+
		"\x3\x2\x2\x2\x7C0\x7C2\a\xD6\x2\x2\x7C1\x7C3\x5\x1B6\xDC\x2\x7C2\x7C1"+
		"\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2\x7C3\x7C5\x3\x2\x2\x2\x7C4\x7C6\x5"+
		"\x12E\x98\x2\x7C5\x7C4\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C8\x3"+
		"\x2\x2\x2\x7C7\x7C9\x5\x1B6\xDC\x2\x7C8\x7C7\x3\x2\x2\x2\x7C8\x7C9\x3"+
		"\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CB\a\xDD\x2\x2\x7CB\x12D\x3\x2"+
		"\x2\x2\x7CC\x7D7\x5\x130\x99\x2\x7CD\x7CF\x5\x1B6\xDC\x2\x7CE\x7CD\x3"+
		"\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7D2\a)\x2"+
		"\x2\x7D1\x7D3\x5\x1B6\xDC\x2\x7D2\x7D1\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2"+
		"\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D6\x5\x130\x99\x2\x7D5\x7CE\x3\x2\x2"+
		"\x2\x7D6\x7D9\x3\x2\x2\x2\x7D7\x7D5\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2"+
		"\x7D8\x12F\x3\x2\x2\x2\x7D9\x7D7\x3\x2\x2\x2\x7DA\x7DC\x5\x132\x9A\x2"+
		"\x7DB\x7DD\x5\x1B6\xDC\x2\x7DC\x7DB\x3\x2\x2\x2\x7DC\x7DD\x3\x2\x2\x2"+
		"\x7DD\x7DF\x3\x2\x2\x2\x7DE\x7DA\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF"+
		"\x7E0\x3\x2\x2\x2\x7E0\x7E1\x5\x134\x9B\x2\x7E1\x131\x3\x2\x2\x2\x7E2"+
		"\x7E4\x5\x136\x9C\x2\x7E3\x7E5\x5\x1B6\xDC\x2\x7E4\x7E3\x3\x2\x2\x2\x7E4"+
		"\x7E5\x3\x2\x2\x2\x7E5\x7E6\x3\x2\x2\x2\x7E6\x7E7\a\xC0\x2\x2\x7E7\x133"+
		"\x3\x2\x2\x2\x7E8\x7E9\x5\x136\x9C\x2\x7E9\x135\x3\x2\x2\x2\x7EA\x7EB"+
		"\x5\x176\xBC\x2\x7EB\x137\x3\x2\x2\x2\x7EC\x7F0\aU\x2\x2\x7ED\x7F0\a\xB8"+
		"\x2\x2\x7EE\x7F0\x5\x174\xBB\x2\x7EF\x7EC\x3\x2\x2\x2\x7EF\x7ED\x3\x2"+
		"\x2\x2\x7EF\x7EE\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7F4\x5\x1B6\xDC"+
		"\x2\x7F2\x7F3\a\xCC\x2\x2\x7F3\x7F5\x5\x1B6\xDC\x2\x7F4\x7F2\x3\x2\x2"+
		"\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5\x7F6\x3\x2\x2\x2\x7F6\x7F7\x5\x13A\x9E"+
		"\x2\x7F7\x139\x3\x2\x2\x2\x7F8\x803\x5\x13C\x9F\x2\x7F9\x7FB\x5\x1B6\xDC"+
		"\x2\x7FA\x7F9\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2\x2"+
		"\x7FC\x7FE\a)\x2\x2\x7FD\x7FF\x5\x1B6\xDC\x2\x7FE\x7FD\x3\x2\x2\x2\x7FE"+
		"\x7FF\x3\x2\x2\x2\x7FF\x800\x3\x2\x2\x2\x800\x802\x5\x13C\x9F\x2\x801"+
		"\x7FA\x3\x2\x2\x2\x802\x805\x3\x2\x2\x2\x803\x801\x3\x2\x2\x2\x803\x804"+
		"\x3\x2\x2\x2\x804\x13B\x3\x2\x2\x2\x805\x803\x3\x2\x2\x2\x806\x818\x5"+
		"\x152\xAA\x2\x807\x809\x5\x1B6\xDC\x2\x808\x807\x3\x2\x2\x2\x808\x809"+
		"\x3\x2\x2\x2\x809\x80A\x3\x2\x2\x2\x80A\x80C\a\xD6\x2\x2\x80B\x80D\x5"+
		"\x1B6\xDC\x2\x80C\x80B\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\x812\x3"+
		"\x2\x2\x2\x80E\x810\x5\x14C\xA7\x2\x80F\x811\x5\x1B6\xDC\x2\x810\x80F"+
		"\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x813\x3\x2\x2\x2\x812\x80E\x3"+
		"\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\x3\x2\x2\x2\x814\x816\a\xDD"+
		"\x2\x2\x815\x817\x5\x1B6\xDC\x2\x816\x815\x3\x2\x2\x2\x816\x817\x3\x2"+
		"\x2\x2\x817\x819\x3\x2\x2\x2\x818\x808\x3\x2\x2\x2\x818\x819\x3\x2\x2"+
		"\x2\x819\x81D\x3\x2\x2\x2\x81A\x81B\x5\x1B6\xDC\x2\x81B\x81C\x5\x15E\xB0"+
		"\x2\x81C\x81E\x3\x2\x2\x2\x81D\x81A\x3\x2\x2\x2\x81D\x81E\x3\x2\x2\x2"+
		"\x81E\x13D\x3\x2\x2\x2\x81F\x820\a\xC9\x2\x2\x820\x821\x5\x1B6\xDC\x2"+
		"\x821\x822\x5\x176\xBC\x2\x822\x823\x5\x1A0\xD1\x2\x823\x824\x5\x1E\x10"+
		"\x2\x824\x825\a\xC8\x2\x2\x825\x13F\x3\x2\x2\x2\x826\x827\a\xCB\x2\x2"+
		"\x827\x828\x5\x1B6\xDC\x2\x828\x829\x5\x176\xBC\x2\x829\x82A\x5\x1A0\xD1"+
		"\x2\x82A\x82B\x5\x1E\x10\x2\x82B\x82C\a\x63\x2\x2\x82C\x141\x3\x2\x2\x2"+
		"\x82D\x82E\x5\x176\xBC\x2\x82E\x833\x5\x1B6\xDC\x2\x82F\x831\a\xB9\x2"+
		"\x2\x830\x832\x5\x1B6\xDC\x2\x831\x830\x3\x2\x2\x2\x831\x832\x3\x2\x2"+
		"\x2\x832\x834\x3\x2\x2\x2\x833\x82F\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2"+
		"\x834\x835\x3\x2\x2\x2\x835\x836\x5\x148\xA5\x2\x836\x83B\a\xD8\x2\x2"+
		"\x837\x839\a\xB9\x2\x2\x838\x83A\x5\x1B6\xDC\x2\x839\x838\x3\x2\x2\x2"+
		"\x839\x83A\x3\x2\x2\x2\x83A\x83C\x3\x2\x2\x2\x83B\x837\x3\x2\x2\x2\x83B"+
		"\x83C\x3\x2\x2\x2\x83C\x83D\x3\x2\x2\x2\x83D\x83F\x5\x148\xA5\x2\x83E"+
		"\x840\x5\x1B6\xDC\x2\x83F\x83E\x3\x2\x2\x2\x83F\x840\x3\x2\x2\x2\x840"+
		"\x846\x3\x2\x2\x2\x841\x843\a)\x2\x2\x842\x844\x5\x1B6\xDC\x2\x843\x842"+
		"\x3\x2\x2\x2\x843\x844\x3\x2\x2\x2\x844\x845\x3\x2\x2\x2\x845\x847\x5"+
		"\x176\xBC\x2\x846\x841\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x849\x3"+
		"\x2\x2\x2\x848\x84A\x5\x1B6\xDC\x2\x849\x848\x3\x2\x2\x2\x849\x84A\x3"+
		"\x2\x2\x2\x84A\x850\x3\x2\x2\x2\x84B\x84D\a)\x2\x2\x84C\x84E\x5\x1B6\xDC"+
		"\x2\x84D\x84C\x3\x2\x2\x2\x84D\x84E\x3\x2\x2\x2\x84E\x84F\x3\x2\x2\x2"+
		"\x84F\x851\x5\x14A\xA6\x2\x850\x84B\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2"+
		"\x851\x143\x3\x2\x2\x2\x852\x854\x5\x176\xBC\x2\x853\x855\x5\x1B6\xDC"+
		"\x2\x854\x853\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\x856\x3\x2\x2\x2"+
		"\x856\x858\a-\x2\x2\x857\x859\x5\x1B6\xDC\x2\x858\x857\x3\x2\x2\x2\x858"+
		"\x859\x3\x2\x2\x2\x859\x85B\x3\x2\x2\x2\x85A\x852\x3\x2\x2\x2\x85A\x85B"+
		"\x3\x2\x2\x2\x85B\x85C\x3\x2\x2\x2\x85C\x85D\a\xF\x2\x2\x85D\x862\x5\x1B6"+
		"\xDC\x2\x85E\x860\a\xB9\x2\x2\x85F\x861\x5\x1B6\xDC\x2\x860\x85F\x3\x2"+
		"\x2\x2\x860\x861\x3\x2\x2\x2\x861\x863\x3\x2\x2\x2\x862\x85E\x3\x2\x2"+
		"\x2\x862\x863\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864\x86D\x5\x148\xA5"+
		"\x2\x865\x867\x5\x1B6\xDC\x2\x866\x865\x3\x2\x2\x2\x866\x867\x3\x2\x2"+
		"\x2\x867\x868\x3\x2\x2\x2\x868\x86A\a)\x2\x2\x869\x86B\x5\x1B6\xDC\x2"+
		"\x86A\x869\x3\x2\x2\x2\x86A\x86B\x3\x2\x2\x2\x86B\x86C\x3\x2\x2\x2\x86C"+
		"\x86E\x5\x176\xBC\x2\x86D\x866\x3\x2\x2\x2\x86E\x86F\x3\x2\x2\x2\x86F"+
		"\x86D\x3\x2\x2\x2\x86F\x870\x3\x2\x2\x2\x870\x145\x3\x2\x2\x2\x871\x873"+
		"\x5\x176\xBC\x2\x872\x874\x5\x1B6\xDC\x2\x873\x872\x3\x2\x2\x2\x873\x874"+
		"\x3\x2\x2\x2\x874\x875\x3\x2\x2\x2\x875\x877\a-\x2\x2\x876\x878\x5\x1B6"+
		"\xDC\x2\x877\x876\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\x87A\x3\x2\x2"+
		"\x2\x879\x871\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\x87B\x3\x2\x2\x2"+
		"\x87B\x87C\a&\x2\x2\x87C\x87D\x5\x1B6\xDC\x2\x87D\x87F\x5\x148\xA5\x2"+
		"\x87E\x880\x5\x1B6\xDC\x2\x87F\x87E\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2"+
		"\x880\x881\x3\x2\x2\x2\x881\x883\a\xD8\x2\x2\x882\x884\x5\x1B6\xDC\x2"+
		"\x883\x882\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885"+
		"\x886\x5\x148\xA5\x2\x886\x147\x3\x2\x2\x2\x887\x889\a\xD6\x2\x2\x888"+
		"\x88A\x5\x1B6\xDC\x2\x889\x888\x3\x2\x2\x2\x889\x88A\x3\x2\x2\x2\x88A"+
		"\x88B\x3\x2\x2\x2\x88B\x88D\x5\x176\xBC\x2\x88C\x88E\x5\x1B6\xDC\x2\x88D"+
		"\x88C\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x88F\x3\x2\x2\x2\x88F\x891"+
		"\a)\x2\x2\x890\x892\x5\x1B6\xDC\x2\x891\x890\x3\x2\x2\x2\x891\x892\x3"+
		"\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\x895\x5\x176\xBC\x2\x894\x896\x5"+
		"\x1B6\xDC\x2\x895\x894\x3\x2\x2\x2\x895\x896\x3\x2\x2\x2\x896\x897\x3"+
		"\x2\x2\x2\x897\x898\a\xDD\x2\x2\x898\x149\x3\x2\x2\x2\x899\x89A\t\xF\x2"+
		"\x2\x89A\x14B\x3\x2\x2\x2\x89B\x8A6\x5\x14E\xA8\x2\x89C\x89E\x5\x1B6\xDC"+
		"\x2\x89D\x89C\x3\x2\x2\x2\x89D\x89E\x3\x2\x2\x2\x89E\x89F\x3\x2\x2\x2"+
		"\x89F\x8A1\a)\x2\x2\x8A0\x8A2\x5\x1B6\xDC\x2\x8A1\x8A0\x3\x2\x2\x2\x8A1"+
		"\x8A2\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8A5\x5\x14E\xA8\x2\x8A4"+
		"\x89D\x3\x2\x2\x2\x8A5\x8A8\x3\x2\x2\x2\x8A6\x8A4\x3\x2\x2\x2\x8A6\x8A7"+
		"\x3\x2\x2\x2\x8A7\x14D\x3\x2\x2\x2\x8A8\x8A6\x3\x2\x2\x2\x8A9\x8AA\x5"+
		"\x176\xBC\x2\x8AA\x8AB\x5\x1B6\xDC\x2\x8AB\x8AC\a\xC0\x2\x2\x8AC\x8AD"+
		"\x5\x1B6\xDC\x2\x8AD\x8AF\x3\x2\x2\x2\x8AE\x8A9\x3\x2\x2\x2\x8AE\x8AF"+
		"\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B1\x5\x176\xBC\x2\x8B1\x14F"+
		"\x3\x2\x2\x2\x8B2\x8B6\x5\x152\xAA\x2\x8B3\x8B6\x5\x19C\xCF\x2\x8B4\x8B6"+
		"\x5\x19A\xCE\x2\x8B5\x8B2\x3\x2\x2\x2\x8B5\x8B3\x3\x2\x2\x2\x8B5\x8B4"+
		"\x3\x2\x2\x2\x8B6\x151\x3\x2\x2\x2\x8B7\x8BA\x5\x156\xAC\x2\x8B8\x8BA"+
		"\x5\x154\xAB\x2\x8B9\x8B7\x3\x2\x2\x2\x8B9\x8B8\x3\x2\x2\x2\x8BA\x153"+
		"\x3\x2\x2\x2\x8BB\x8BC\x5\x158\xAD\x2\x8BC\x155\x3\x2\x2\x2\x8BD\x8BE"+
		"\x5\x154\xAB\x2\x8BE\x8BF\x5\x172\xBA\x2\x8BF\x157\x3\x2\x2\x2\x8C0\x8C5"+
		"\a\xEB\x2\x2\x8C1\x8C5\x5\x198\xCD\x2\x8C2\x8C5\x5\x15A\xAE\x2\x8C3\x8C5"+
		"\a\a\x2\x2\x8C4\x8C0\x3\x2\x2\x2\x8C4\x8C1\x3\x2\x2\x2\x8C4\x8C2\x3\x2"+
		"\x2\x2\x8C4\x8C3\x3\x2\x2\x2\x8C5\x159\x3\x2\x2\x2\x8C6\x8CA\a\xDE\x2"+
		"\x2\x8C7\x8C9\x5\x15C\xAF\x2\x8C8\x8C7\x3\x2\x2\x2\x8C9\x8CC\x3\x2\x2"+
		"\x2\x8CA\x8C8\x3\x2\x2\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB\x8CD\x3\x2\x2\x2"+
		"\x8CC\x8CA\x3\x2\x2\x2\x8CD\x8CE\a\xDF\x2\x2\x8CE\x15B\x3\x2\x2\x2\x8CF"+
		"\x8D2\n\x10\x2\x2\x8D0\x8D2\x5\x15A\xAE\x2\x8D1\x8CF\x3\x2\x2\x2\x8D1"+
		"\x8D0\x3\x2\x2\x2\x8D2\x15D\x3\x2\x2\x2\x8D3\x8D5\a\x39\x2\x2\x8D4\x8D6"+
		"\x5\x1B6\xDC\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D9"+
		"\x3\x2\x2\x2\x8D7\x8D8\a\x8E\x2\x2\x8D8\x8DA\x5\x1B6\xDC\x2\x8D9\x8D7"+
		"\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB\x8E0\x5"+
		"\x170\xB9\x2\x8DC\x8DE\x5\x1B6\xDC\x2\x8DD\x8DC\x3\x2\x2\x2\x8DD\x8DE"+
		"\x3\x2\x2\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8E1\x5\x166\xB4\x2\x8E0\x8DD"+
		"\x3\x2\x2\x2\x8E0\x8E1\x3\x2\x2\x2\x8E1\x15F\x3\x2\x2\x2\x8E2\x8E3\t\x11"+
		"\x2\x2\x8E3\x161\x3\x2\x2\x2\x8E4\x8E5\t\x12\x2\x2\x8E5\x163\x3\x2\x2"+
		"\x2\x8E6\x8FE\x5\x178\xBD\x2\x8E7\x8FE\x5\x182\xC2\x2\x8E8\x8FE\x5\x184"+
		"\xC3\x2\x8E9\x8EB\a\xD6\x2\x2\x8EA\x8EC\x5\x1B6\xDC\x2\x8EB\x8EA\x3\x2"+
		"\x2\x2\x8EB\x8EC\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8EF\x5\x164\xB3"+
		"\x2\x8EE\x8F0\x5\x1B6\xDC\x2\x8EF\x8EE\x3\x2\x2\x2\x8EF\x8F0\x3\x2\x2"+
		"\x2\x8F0\x8F1\x3\x2\x2\x2\x8F1\x8F2\a\xDD\x2\x2\x8F2\x8FE\x3\x2\x2\x2"+
		"\x8F3\x8F4\a\xC3\x2\x2\x8F4\x8F5\x5\x1B6\xDC\x2\x8F5\x8F6\x5\x164\xB3"+
		"\x2\x8F6\x8FE\x3\x2\x2\x2\x8F7\x8F8\a\x8E\x2\x2\x8F8\x8F9\x5\x1B6\xDC"+
		"\x2\x8F9\x8FA\x5\x164\xB3\x2\x8FA\x8FE\x3\x2\x2\x2\x8FB\x8FC\a.\x2\x2"+
		"\x8FC\x8FE\x5\x176\xBC\x2\x8FD\x8E6\x3\x2\x2\x2\x8FD\x8E7\x3\x2\x2\x2"+
		"\x8FD\x8E8\x3\x2\x2\x2\x8FD\x8E9\x3\x2\x2\x2\x8FD\x8F3\x3\x2\x2\x2\x8FD"+
		"\x8F7\x3\x2\x2\x2\x8FD\x8FB\x3\x2\x2\x2\x8FE\x165\x3\x2\x2\x2\x8FF\x901"+
		"\a\xD9\x2\x2\x900\x902\x5\x1B6\xDC\x2\x901\x900\x3\x2\x2\x2\x901\x902"+
		"\x3\x2\x2\x2\x902\x905\x3\x2\x2\x2\x903\x906\x5\x16E\xB8\x2\x904\x906"+
		"\x5\x158\xAD\x2\x905\x903\x3\x2\x2\x2\x905\x904\x3\x2\x2\x2\x906\x167"+
		"\x3\x2\x2\x2\x907\x90A\x5\x16A\xB6\x2\x908\x90A\x5\x16C\xB7\x2\x909\x907"+
		"\x3\x2\x2\x2\x909\x908\x3\x2\x2\x2\x90A\x169\x3\x2\x2\x2\x90B\x90D\x5"+
		"\x150\xA9\x2\x90C\x90E\x5\x1B6\xDC\x2\x90D\x90C\x3\x2\x2\x2\x90D\x90E"+
		"\x3\x2\x2\x2\x90E\x90F\x3\x2\x2\x2\x90F\x910\a*\x2\x2\x910\x16B\x3\x2"+
		"\x2\x2\x911\x913\x5\x16E\xB8\x2\x912\x914\x5\x1B6\xDC\x2\x913\x912\x3"+
		"\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x916\x3\x2\x2\x2\x915\x917\a*\x2"+
		"\x2\x916\x915\x3\x2\x2\x2\x916\x917\x3\x2\x2\x2\x917\x16D\x3\x2\x2\x2"+
		"\x918\x919\t\x13\x2\x2\x919\x16F\x3\x2\x2\x2\x91A\x91D\x5\x160\xB1\x2"+
		"\x91B\x91D\x5\x164\xB3\x2\x91C\x91A\x3\x2\x2\x2\x91C\x91B\x3\x2\x2\x2"+
		"\x91D\x926\x3\x2\x2\x2\x91E\x920\x5\x1B6\xDC\x2\x91F\x91E\x3\x2\x2\x2"+
		"\x91F\x920\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x923\a\xD6\x2\x2\x922"+
		"\x924\x5\x1B6\xDC\x2\x923\x922\x3\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924"+
		"\x925\x3\x2\x2\x2\x925\x927\a\xDD\x2\x2\x926\x91F\x3\x2\x2\x2\x926\x927"+
		"\x3\x2\x2\x2\x927\x171\x3\x2\x2\x2\x928\x929\t\x14\x2\x2\x929\x173\x3"+
		"\x2\x2\x2\x92A\x92B\t\x15\x2\x2\x92B\x175\x3\x2\x2\x2\x92C\x92D\b\xBC"+
		"\x1\x2\x92D\x92E\a\xC3\x2\x2\x92E\x92F\x5\x1B6\xDC\x2\x92F\x930\x5\x176"+
		"\xBC\x13\x930\x952\x3\x2\x2\x2\x931\x932\a\x8E\x2\x2\x932\x933\x5\x1B6"+
		"\xDC\x2\x933\x934\x5\x176\xBC\x12\x934\x952\x3\x2\x2\x2\x935\x937\a\xD8"+
		"\x2\x2\x936\x938\x5\x1B6\xDC\x2\x937\x936\x3\x2\x2\x2\x937\x938\x3\x2"+
		"\x2\x2\x938\x939\x3\x2\x2\x2\x939\x952\x5\x176\xBC\x10\x93A\x93C\a\x8F"+
		"\x2\x2\x93B\x93D\x5\x1B6\xDC\x2\x93C\x93B\x3\x2\x2\x2\x93C\x93D\x3\x2"+
		"\x2\x2\x93D\x93E\x3\x2\x2\x2\x93E\x952\x5\x176\xBC\t\x93F\x940\a.\x2\x2"+
		"\x940\x952\x5\x176\xBC\x3\x941\x943\x5\x1B6\xDC\x2\x942\x941\x3\x2\x2"+
		"\x2\x942\x943\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2\x944\x946\a\xD6\x2\x2"+
		"\x945\x947\x5\x1B6\xDC\x2\x946\x945\x3\x2\x2\x2\x946\x947\x3\x2\x2\x2"+
		"\x947\x948\x3\x2\x2\x2\x948\x94A\x5\x176\xBC\x2\x949\x94B\x5\x1B6\xDC"+
		"\x2\x94A\x949\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x94C\x3\x2\x2\x2"+
		"\x94C\x94D\a\xDD\x2\x2\x94D\x952\x3\x2\x2\x2\x94E\x952\x5\x178\xBD\x2"+
		"\x94F\x952\x5\x182\xC2\x2\x950\x952\x5\x184\xC3\x2\x951\x92C\x3\x2\x2"+
		"\x2\x951\x931\x3\x2\x2\x2\x951\x935\x3\x2\x2\x2\x951\x93A\x3\x2\x2\x2"+
		"\x951\x93F\x3\x2\x2\x2\x951\x942\x3\x2\x2\x2\x951\x94E\x3\x2\x2\x2\x951"+
		"\x94F\x3\x2\x2\x2\x951\x950\x3\x2\x2\x2\x952\x9C1\x3\x2\x2\x2\x953\x955"+
		"\f\x11\x2\x2\x954\x956\x5\x1B6\xDC\x2\x955\x954\x3\x2\x2\x2\x955\x956"+
		"\x3\x2\x2\x2\x956\x957\x3\x2\x2\x2\x957\x959\a\xDC\x2\x2\x958\x95A\x5"+
		"\x1B6\xDC\x2\x959\x958\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x95B\x3"+
		"\x2\x2\x2\x95B\x9C0\x5\x176\xBC\x12\x95C\x95E\f\xF\x2\x2\x95D\x95F\x5"+
		"\x1B6\xDC\x2\x95E\x95D\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x960\x3"+
		"\x2\x2\x2\x960\x962\t\x16\x2\x2\x961\x963\x5\x1B6\xDC\x2\x962\x961\x3"+
		"\x2\x2\x2\x962\x963\x3\x2\x2\x2\x963\x964\x3\x2\x2\x2\x964\x9C0\x5\x176"+
		"\xBC\x10\x965\x967\f\xE\x2\x2\x966\x968\x5\x1B6\xDC\x2\x967\x966\x3\x2"+
		"\x2\x2\x967\x968\x3\x2\x2\x2\x968\x969\x3\x2\x2\x2\x969\x96B\a\xD1\x2"+
		"\x2\x96A\x96C\x5\x1B6\xDC\x2\x96B\x96A\x3\x2\x2\x2\x96B\x96C\x3\x2\x2"+
		"\x2\x96C\x96D\x3\x2\x2\x2\x96D\x9C0\x5\x176\xBC\xF\x96E\x970\f\r\x2\x2"+
		"\x96F\x971\x5\x1B6\xDC\x2\x970\x96F\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2"+
		"\x971\x972\x3\x2\x2\x2\x972\x974\a\x8B\x2\x2\x973\x975\x5\x1B6\xDC\x2"+
		"\x974\x973\x3\x2\x2\x2\x974\x975\x3\x2\x2\x2\x975\x976\x3\x2\x2\x2\x976"+
		"\x9C0\x5\x176\xBC\xE\x977\x979\f\f\x2\x2\x978\x97A\x5\x1B6\xDC\x2\x979"+
		"\x978\x3\x2\x2\x2\x979\x97A\x3\x2\x2\x2\x97A\x97B\x3\x2\x2\x2\x97B\x97D"+
		"\t\x17\x2\x2\x97C\x97E\x5\x1B6\xDC\x2\x97D\x97C\x3\x2\x2\x2\x97D\x97E"+
		"\x3\x2\x2\x2\x97E\x97F\x3\x2\x2\x2\x97F\x9C0\x5\x176\xBC\r\x980\x982\f"+
		"\v\x2\x2\x981\x983\x5\x1B6\xDC\x2\x982\x981\x3\x2\x2\x2\x982\x983\x3\x2"+
		"\x2\x2\x983\x984\x3\x2\x2\x2\x984\x986\a\x32\x2\x2\x985\x987\x5\x1B6\xDC"+
		"\x2\x986\x985\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2\x987\x988\x3\x2\x2\x2"+
		"\x988\x9C0\x5\x176\xBC\f\x989\x98B\f\n\x2\x2\x98A\x98C\x5\x1B6\xDC\x2"+
		"\x98B\x98A\x3\x2\x2\x2\x98B\x98C\x3\x2\x2\x2\x98C\x98D\x3\x2\x2\x2\x98D"+
		"\x98F\t\x12\x2\x2\x98E\x990\x5\x1B6\xDC\x2\x98F\x98E\x3\x2\x2\x2\x98F"+
		"\x990\x3\x2\x2\x2\x990\x991\x3\x2\x2\x2\x991\x9C0\x5\x176\xBC\v\x992\x994"+
		"\f\b\x2\x2\x993\x995\x5\x1B6\xDC\x2\x994\x993\x3\x2\x2\x2\x994\x995\x3"+
		"\x2\x2\x2\x995\x996\x3\x2\x2\x2\x996\x998\a\x36\x2\x2\x997\x999\x5\x1B6"+
		"\xDC\x2\x998\x997\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x99A\x3\x2\x2"+
		"\x2\x99A\x9C0\x5\x176\xBC\t\x99B\x99D\f\a\x2\x2\x99C\x99E\x5\x1B6\xDC"+
		"\x2\x99D\x99C\x3\x2\x2\x2\x99D\x99E\x3\x2\x2\x2\x99E\x99F\x3\x2\x2\x2"+
		"\x99F\x9A1\a\x9C\x2\x2\x9A0\x9A2\x5\x1B6\xDC\x2\x9A1\x9A0\x3\x2\x2\x2"+
		"\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9C0\x5\x176\xBC\b\x9A4"+
		"\x9A6\f\x6\x2\x2\x9A5\x9A7\x5\x1B6\xDC\x2\x9A6\x9A5\x3\x2\x2\x2\x9A6\x9A7"+
		"\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9AA\a\xCE\x2\x2\x9A9\x9AB\x5"+
		"\x1B6\xDC\x2\x9AA\x9A9\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\x9AC\x3"+
		"\x2\x2\x2\x9AC\x9C0\x5\x176\xBC\a\x9AD\x9AF\f\x5\x2\x2\x9AE\x9B0\x5\x1B6"+
		"\xDC\x2\x9AF\x9AE\x3\x2\x2\x2\x9AF\x9B0\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2"+
		"\x2\x9B1\x9B3\a\x66\x2\x2\x9B2\x9B4\x5\x1B6\xDC\x2\x9B3\x9B2\x3\x2\x2"+
		"\x2\x9B3\x9B4\x3\x2\x2\x2\x9B4\x9B5\x3\x2\x2\x2\x9B5\x9C0\x5\x176\xBC"+
		"\x6\x9B6\x9B8\f\x4\x2\x2\x9B7\x9B9\x5\x1B6\xDC\x2\x9B8\x9B7\x3\x2\x2\x2"+
		"\x9B8\x9B9\x3\x2\x2\x2\x9B9\x9BA\x3\x2\x2\x2\x9BA\x9BC\ax\x2\x2\x9BB\x9BD"+
		"\x5\x1B6\xDC\x2\x9BC\x9BB\x3\x2\x2\x2\x9BC\x9BD\x3\x2\x2\x2\x9BD\x9BE"+
		"\x3\x2\x2\x2\x9BE\x9C0\x5\x176\xBC\x5\x9BF\x953\x3\x2\x2\x2\x9BF\x95C"+
		"\x3\x2\x2\x2\x9BF\x965\x3\x2\x2\x2\x9BF\x96E\x3\x2\x2\x2\x9BF\x977\x3"+
		"\x2\x2\x2\x9BF\x980\x3\x2\x2\x2\x9BF\x989\x3\x2\x2\x2\x9BF\x992\x3\x2"+
		"\x2\x2\x9BF\x99B\x3\x2\x2\x2\x9BF\x9A4\x3\x2\x2\x2\x9BF\x9AD\x3\x2\x2"+
		"\x2\x9BF\x9B6\x3\x2\x2\x2\x9C0\x9C3\x3\x2\x2\x2\x9C1\x9BF\x3\x2\x2\x2"+
		"\x9C1\x9C2\x3\x2\x2\x2\x9C2\x177\x3\x2\x2\x2\x9C3\x9C1\x3\x2\x2\x2\x9C4"+
		"\x9CC\x5\x16E\xB8\x2\x9C5\x9CC\a\xE5\x2\x2\x9C6\x9CC\a\xE0\x2\x2\x9C7"+
		"\x9C9\x5\x17A\xBE\x2\x9C8\x9CA\x5\x172\xBA\x2\x9C9\x9C8\x3\x2\x2\x2\x9C9"+
		"\x9CA\x3\x2\x2\x2\x9CA\x9CC\x3\x2\x2\x2\x9CB\x9C4\x3\x2\x2\x2\x9CB\x9C5"+
		"\x3\x2\x2\x2\x9CB\x9C6\x3\x2\x2\x2\x9CB\x9C7\x3\x2\x2\x2\x9CC\x179\x3"+
		"\x2\x2\x2\x9CD\x9D1\x5\x17C\xBF\x2\x9CE\x9D1\x5\x17E\xC0\x2\x9CF\x9D1"+
		"\x5\x180\xC1\x2\x9D0\x9CD\x3\x2\x2\x2\x9D0\x9CE\x3\x2\x2\x2\x9D0\x9CF"+
		"\x3\x2\x2\x2\x9D1\x17B\x3\x2\x2\x2\x9D2\x9D3\t\x18\x2\x2\x9D3\x17D\x3"+
		"\x2\x2\x2\x9D4\x9D5\a\x90\x2\x2\x9D5\x17F\x3\x2\x2\x2\x9D6\x9D7\t\x19"+
		"\x2\x2\x9D7\x181\x3\x2\x2\x2\x9D8\x9D9\b\xC2\x1\x2\x9D9\x9E6\a\x89\x2"+
		"\x2\x9DA\x9E6\x5\x152\xAA\x2\x9DB\x9DD\a-\x2\x2\x9DC\x9DE\x5\x1B4\xDB"+
		"\x2\x9DD\x9DC\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE\x9DF\x3\x2\x2\x2"+
		"\x9DF\x9E6\x5\x150\xA9\x2\x9E0\x9E2\a,\x2\x2\x9E1\x9E3\x5\x1B4\xDB\x2"+
		"\x9E2\x9E1\x3\x2\x2\x2\x9E2\x9E3\x3\x2\x2\x2\x9E3\x9E4\x3\x2\x2\x2\x9E4"+
		"\x9E6\x5\x150\xA9\x2\x9E5\x9D8\x3\x2\x2\x2\x9E5\x9DA\x3\x2\x2\x2\x9E5"+
		"\x9DB\x3\x2\x2\x2\x9E5\x9E0\x3\x2\x2\x2\x9E6\xA07\x3\x2\x2\x2\x9E7\x9E8"+
		"\f\t\x2\x2\x9E8\x9EA\a\xD6\x2\x2\x9E9\x9EB\x5\x1B6\xDC\x2\x9EA\x9E9\x3"+
		"\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9ED\x3\x2\x2\x2\x9EC\x9EE\x5\x186"+
		"\xC4\x2\x9ED\x9EC\x3\x2\x2\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x9F0\x3\x2\x2"+
		"\x2\x9EF\x9F1\x5\x1B6\xDC\x2\x9F0\x9EF\x3\x2\x2\x2\x9F0\x9F1\x3\x2\x2"+
		"\x2\x9F1\x9F2\x3\x2\x2\x2\x9F2\xA06\a\xDD\x2\x2\x9F3\x9F5\f\b\x2\x2\x9F4"+
		"\x9F6\x5\x1B4\xDB\x2\x9F5\x9F4\x3\x2\x2\x2\x9F5\x9F6\x3\x2\x2\x2\x9F6"+
		"\x9F7\x3\x2\x2\x2\x9F7\x9F9\a-\x2\x2\x9F8\x9FA\x5\x1B4\xDB\x2\x9F9\x9F8"+
		"\x3\x2\x2\x2\x9F9\x9FA\x3\x2\x2\x2\x9FA\x9FB\x3\x2\x2\x2\x9FB\xA06\x5"+
		"\x150\xA9\x2\x9FC\x9FE\f\a\x2\x2\x9FD\x9FF\x5\x1B4\xDB\x2\x9FE\x9FD\x3"+
		"\x2\x2\x2\x9FE\x9FF\x3\x2\x2\x2\x9FF\xA00\x3\x2\x2\x2\xA00\xA02\a,\x2"+
		"\x2\xA01\xA03\x5\x1B4\xDB\x2\xA02\xA01\x3\x2\x2\x2\xA02\xA03\x3\x2\x2"+
		"\x2\xA03\xA04\x3\x2\x2\x2\xA04\xA06\x5\x150\xA9\x2\xA05\x9E7\x3\x2\x2"+
		"\x2\xA05\x9F3\x3\x2\x2\x2\xA05\x9FC\x3\x2\x2\x2\xA06\xA09\x3\x2\x2\x2"+
		"\xA07\xA05\x3\x2\x2\x2\xA07\xA08\x3\x2\x2\x2\xA08\x183\x3\x2\x2\x2\xA09"+
		"\xA07\x3\x2\x2\x2\xA0A\xA20\x5\x160\xB1\x2\xA0B\xA0D\a\xDE\x2\x2\xA0C"+
		"\xA0E\x5\x1B6\xDC\x2\xA0D\xA0C\x3\x2\x2\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E"+
		"\xA0F\x3\x2\x2\x2\xA0F\xA11\x5\x160\xB1\x2\xA10\xA12\x5\x1B6\xDC\x2\xA11"+
		"\xA10\x3\x2\x2\x2\xA11\xA12\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2\xA13\xA14"+
		"\a\xDF\x2\x2\xA14\xA20\x3\x2\x2\x2\xA15\xA20\a\x92\x2\x2\xA16\xA18\a\xDE"+
		"\x2\x2\xA17\xA19\x5\x1B6\xDC\x2\xA18\xA17\x3\x2\x2\x2\xA18\xA19\x3\x2"+
		"\x2\x2\xA19\xA1A\x3\x2\x2\x2\xA1A\xA1C\a\x92\x2\x2\xA1B\xA1D\x5\x1B6\xDC"+
		"\x2\xA1C\xA1B\x3\x2\x2\x2\xA1C\xA1D\x3\x2\x2\x2\xA1D\xA1E\x3\x2\x2\x2"+
		"\xA1E\xA20\a\xDF\x2\x2\xA1F\xA0A\x3\x2\x2\x2\xA1F\xA0B\x3\x2\x2\x2\xA1F"+
		"\xA15\x3\x2\x2\x2\xA1F\xA16\x3\x2\x2\x2\xA20\x185\x3\x2\x2\x2\xA21\xA23"+
		"\x5\x1B6\xDC\x2\xA22\xA21\x3\x2\x2\x2\xA22\xA23\x3\x2\x2\x2\xA23\xA25"+
		"\x3\x2\x2\x2\xA24\xA26\x5\x18A\xC6\x2\xA25\xA24\x3\x2\x2\x2\xA25\xA26"+
		"\x3\x2\x2\x2\xA26\xA31\x3\x2\x2\x2\xA27\xA29\x5\x1B6\xDC\x2\xA28\xA27"+
		"\x3\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2A\x3\x2\x2\x2\xA2A\xA2C\a)"+
		"\x2\x2\xA2B\xA2D\x5\x1B6\xDC\x2\xA2C\xA2B\x3\x2\x2\x2\xA2C\xA2D\x3\x2"+
		"\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA30\x5\x18A\xC6\x2\xA2F\xA28\x3\x2"+
		"\x2\x2\xA30\xA33\x3\x2\x2\x2\xA31\xA2F\x3\x2\x2\x2\xA31\xA32\x3\x2\x2"+
		"\x2\xA32\xA35\x3\x2\x2\x2\xA33\xA31\x3\x2\x2\x2\xA34\xA22\x3\x2\x2\x2"+
		"\xA34\xA35\x3\x2\x2\x2\xA35\x187\x3\x2\x2\x2\xA36\xA37\x5\x18A\xC6\x2"+
		"\xA37\x189\x3\x2\x2\x2\xA38\xA3B\x5\x18C\xC7\x2\xA39\xA3B\x5\x18E\xC8"+
		"\x2\xA3A\xA38\x3\x2\x2\x2\xA3A\xA39\x3\x2\x2\x2\xA3B\x18B\x3\x2\x2\x2"+
		"\xA3C\xA3D\x5\x190\xC9\x2\xA3D\x18D\x3\x2\x2\x2\xA3E\xA40\x5\x150\xA9"+
		"\x2\xA3F\xA41\x5\x1B6\xDC\x2\xA40\xA3F\x3\x2\x2\x2\xA40\xA41\x3\x2\x2"+
		"\x2\xA41\xA42\x3\x2\x2\x2\xA42\xA44\a\xCF\x2\x2\xA43\xA45\x5\x1B6\xDC"+
		"\x2\xA44\xA43\x3\x2\x2\x2\xA44\xA45\x3\x2\x2\x2\xA45\xA46\x3\x2\x2\x2"+
		"\xA46\xA47\x5\x190\xC9\x2\xA47\x18F\x3\x2\x2\x2\xA48\xA49\a=\x2\x2\xA49"+
		"\xA4B\x5\x1B6\xDC\x2\xA4A\xA48\x3\x2\x2\x2\xA4A\xA4B\x3\x2\x2\x2\xA4B"+
		"\xA4C\x3\x2\x2\x2\xA4C\xA55\x5\x176\xBC\x2\xA4D\xA55\x5\x196\xCC\x2\xA4E"+
		"\xA4F\x5\x192\xCA\x2\xA4F\xA50\x5\x1B6\xDC\x2\xA50\xA51\a\xC0\x2\x2\xA51"+
		"\xA52\x5\x1B6\xDC\x2\xA52\xA53\x5\x194\xCB\x2\xA53\xA55\x3\x2\x2\x2\xA54"+
		"\xA4A\x3\x2\x2\x2\xA54\xA4D\x3\x2\x2\x2\xA54\xA4E\x3\x2\x2\x2\xA55\x191"+
		"\x3\x2\x2\x2\xA56\xA57\x5\x176\xBC\x2\xA57\x193\x3\x2\x2\x2\xA58\xA59"+
		"\x5\x176\xBC\x2\xA59\x195\x3\x2\x2\x2\xA5A\xA5B\a\x34\x2\x2\xA5B\xA5C"+
		"\x5\x1B6\xDC\x2\xA5C\xA5D\x5\x176\xBC\x2\xA5D\x197\x3\x2\x2\x2\xA5E\xA5F"+
		"\t\x1A\x2\x2\xA5F\x199\x3\x2\x2\x2\xA60\xA61\a\x39\x2\x2\xA61\x19B\x3"+
		"\x2\x2\x2\xA62\xA63\t\x1B\x2\x2\xA63\x19D\x3\x2\x2\x2\xA64\xA66\x5\x1B6"+
		"\xDC\x2\xA65\xA64\x3\x2\x2\x2\xA65\xA66\x3\x2\x2\x2\xA66\xA67\x3\x2\x2"+
		"\x2\xA67\xA69\a\xE6\x2\x2\xA68\xA6A\x5\x1B6\xDC\x2\xA69\xA68\x3\x2\x2"+
		"\x2\xA69\xA6A\x3\x2\x2\x2\xA6A\xA70\x3\x2\x2\x2\xA6B\xA6D\x5\x1B6\xDC"+
		"\x2\xA6C\xA6B\x3\x2\x2\x2\xA6C\xA6D\x3\x2\x2\x2\xA6D\xA6E\x3\x2\x2\x2"+
		"\xA6E\xA70\x5\x1A2\xD2\x2\xA6F\xA65\x3\x2\x2\x2\xA6F\xA6C\x3\x2\x2\x2"+
		"\xA70\x19F\x3\x2\x2\x2\xA71\xA7A\x5\x19E\xD0\x2\xA72\xA74\x5\x1B6\xDC"+
		"\x2\xA73\xA72\x3\x2\x2\x2\xA73\xA74\x3\x2\x2\x2\xA74\xA75\x3\x2\x2\x2"+
		"\xA75\xA77\a*\x2\x2\xA76\xA78\x5\x1B6\xDC\x2\xA77\xA76\x3\x2\x2\x2\xA77"+
		"\xA78\x3\x2\x2\x2\xA78\xA7A\x3\x2\x2\x2\xA79\xA71\x3\x2\x2\x2\xA79\xA73"+
		"\x3\x2\x2\x2\xA7A\xA7D\x3\x2\x2\x2\xA7B\xA79\x3\x2\x2\x2\xA7B\xA7C\x3"+
		"\x2\x2\x2\xA7C\x1A1\x3\x2\x2\x2\xA7D\xA7B\x3\x2\x2\x2\xA7E\xA82\x5\x1AA"+
		"\xD6\x2\xA7F\xA82\x5\x1A4\xD3\x2\xA80\xA82\x5\x1A6\xD4\x2\xA81\xA7E\x3"+
		"\x2\x2\x2\xA81\xA7F\x3\x2\x2\x2\xA81\xA80\x3\x2\x2\x2\xA82\x1A3\x3\x2"+
		"\x2\x2\xA83\xA85\a\xAD\x2\x2\xA84\xA86\x5\x1B6\xDC\x2\xA85\xA84\x3\x2"+
		"\x2\x2\xA85\xA86\x3\x2\x2\x2\xA86\xA87\x3\x2\x2\x2\xA87\xA88\x5\x1A8\xD5"+
		"\x2\xA88\x1A5\x3\x2\x2\x2\xA89\xA8A\a\xE7\x2\x2\xA8A\xA8B\x5\x1A8\xD5"+
		"\x2\xA8B\x1A7\x3\x2\x2\x2\xA8C\xA8F\a\xEC\x2\x2\xA8D\xA8F\n\x1C\x2\x2"+
		"\xA8E\xA8C\x3\x2\x2\x2\xA8E\xA8D\x3\x2\x2\x2\xA8F\xA92\x3\x2\x2\x2\xA90"+
		"\xA8E\x3\x2\x2\x2\xA90\xA91\x3\x2\x2\x2\xA91\x1A9\x3\x2\x2\x2\xA92\xA90"+
		"\x3\x2\x2\x2\xA93\xA99\a\xE7\x2\x2\xA94\xA95\a/\x2\x2\xA95\xA97\x5\x1AC"+
		"\xD7\x2\xA96\xA98\x5\x1B6\xDC\x2\xA97\xA96\x3\x2\x2\x2\xA97\xA98\x3\x2"+
		"\x2\x2\xA98\xA9A\x3\x2\x2\x2\xA99\xA94\x3\x2\x2\x2\xA9A\xA9B\x3\x2\x2"+
		"\x2\xA9B\xA99\x3\x2\x2\x2\xA9B\xA9C\x3\x2\x2\x2\xA9C\xAA2\x3\x2\x2\x2"+
		"\xA9D\xA9F\x5\x1B6\xDC\x2\xA9E\xA9D\x3\x2\x2\x2\xA9E\xA9F\x3\x2\x2\x2"+
		"\xA9F\xAA0\x3\x2\x2\x2\xAA0\xAA1\a*\x2\x2\xAA1\xAA3\x5\x1A8\xD5\x2\xAA2"+
		"\xA9E\x3\x2\x2\x2\xAA2\xAA3\x3\x2\x2\x2\xAA3\x1AB\x3\x2\x2\x2\xAA4\xAA6"+
		"\x5\x1AE\xD8\x2\xAA5\xAA7\x5\x1B0\xD9\x2\xAA6\xAA5\x3\x2\x2\x2\xAA6\xAA7"+
		"\x3\x2\x2\x2\xAA7\x1AD\x3\x2\x2\x2\xAA8\xAA9\x5\x150\xA9\x2\xAA9\x1AF"+
		"\x3\x2\x2\x2\xAAA\xAAB\x5\x1B6\xDC\x2\xAAB\xAAC\x5\x1B2\xDA\x2\xAAC\xAE7"+
		"\x3\x2\x2\x2\xAAD\xAAE\x5\x1B6\xDC\x2\xAAE\xAB7\x5\x1B2\xDA\x2\xAAF\xAB1"+
		"\x5\x1B6\xDC\x2\xAB0\xAAF\x3\x2\x2\x2\xAB0\xAB1\x3\x2\x2\x2\xAB1\xAB2"+
		"\x3\x2\x2\x2\xAB2\xAB4\a)\x2\x2\xAB3\xAB5\x5\x1B6\xDC\x2\xAB4\xAB3\x3"+
		"\x2\x2\x2\xAB4\xAB5\x3\x2\x2\x2\xAB5\xAB6\x3\x2\x2\x2\xAB6\xAB8\x5\x1B2"+
		"\xDA\x2\xAB7\xAB0\x3\x2\x2\x2\xAB8\xAB9\x3\x2\x2\x2\xAB9\xAB7\x3\x2\x2"+
		"\x2\xAB9\xABA\x3\x2\x2\x2\xABA\xAE7\x3\x2\x2\x2\xABB\xABD\x5\x1B6\xDC"+
		"\x2\xABC\xABB\x3\x2\x2\x2\xABC\xABD\x3\x2\x2\x2\xABD\xABE\x3\x2\x2\x2"+
		"\xABE\xAC0\a\xD6\x2\x2\xABF\xAC1\x5\x1B6\xDC\x2\xAC0\xABF\x3\x2\x2\x2"+
		"\xAC0\xAC1\x3\x2\x2\x2\xAC1\xAC2\x3\x2\x2\x2\xAC2\xAE7\a\xDD\x2\x2\xAC3"+
		"\xAC5\x5\x1B6\xDC\x2\xAC4\xAC3\x3\x2\x2\x2\xAC4\xAC5\x3\x2\x2\x2\xAC5"+
		"\xAC6\x3\x2\x2\x2\xAC6\xAC8\a\xD6\x2\x2\xAC7\xAC9\x5\x1B6\xDC\x2\xAC8"+
		"\xAC7\x3\x2\x2\x2\xAC8\xAC9\x3\x2\x2\x2\xAC9\xACA\x3\x2\x2\x2\xACA\xACC"+
		"\x5\x1B2\xDA\x2\xACB\xACD\x5\x1B6\xDC\x2\xACC\xACB\x3\x2\x2\x2\xACC\xACD"+
		"\x3\x2\x2\x2\xACD\xACE\x3\x2\x2\x2\xACE\xACF\a\xDD\x2\x2\xACF\xAE7\x3"+
		"\x2\x2\x2\xAD0\xAD2\x5\x1B6\xDC\x2\xAD1\xAD0\x3\x2\x2\x2\xAD1\xAD2\x3"+
		"\x2\x2\x2\xAD2\xAD3\x3\x2\x2\x2\xAD3\xAD4\a\xD6\x2\x2\xAD4\xADD\x5\x1B2"+
		"\xDA\x2\xAD5\xAD7\x5\x1B6\xDC\x2\xAD6\xAD5\x3\x2\x2\x2\xAD6\xAD7\x3\x2"+
		"\x2\x2\xAD7\xAD8\x3\x2\x2\x2\xAD8\xADA\a)\x2\x2\xAD9\xADB\x5\x1B6\xDC"+
		"\x2\xADA\xAD9\x3\x2\x2\x2\xADA\xADB\x3\x2\x2\x2\xADB\xADC\x3\x2\x2\x2"+
		"\xADC\xADE\x5\x1B2\xDA\x2\xADD\xAD6\x3\x2\x2\x2\xADE\xADF\x3\x2\x2\x2"+
		"\xADF\xADD\x3\x2\x2\x2\xADF\xAE0\x3\x2\x2\x2\xAE0\xAE2\x3\x2\x2\x2\xAE1"+
		"\xAE3\x5\x1B6\xDC\x2\xAE2\xAE1\x3\x2\x2\x2\xAE2\xAE3\x3\x2\x2\x2\xAE3"+
		"\xAE4\x3\x2\x2\x2\xAE4\xAE5\a\xDD\x2\x2\xAE5\xAE7\x3\x2\x2\x2\xAE6\xAAA"+
		"\x3\x2\x2\x2\xAE6\xAAD\x3\x2\x2\x2\xAE6\xABC\x3\x2\x2\x2\xAE6\xAC4\x3"+
		"\x2\x2\x2\xAE6\xAD1\x3\x2\x2\x2\xAE7\x1B1\x3\x2\x2\x2\xAE8\xAE9\x5\x176"+
		"\xBC\x2\xAE9\x1B3\x3\x2\x2\x2\xAEA\xAEE\a\xEC\x2\x2\xAEB\xAED\a\xE9\x2"+
		"\x2\xAEC\xAEB\x3\x2\x2\x2\xAED\xAF0\x3\x2\x2\x2\xAEE\xAEC\x3\x2\x2\x2"+
		"\xAEE\xAEF\x3\x2\x2\x2\xAEF\x1B5\x3\x2\x2\x2\xAF0\xAEE\x3\x2\x2\x2\xAF1"+
		"\xAF3\t\x1D\x2\x2\xAF2\xAF1\x3\x2\x2\x2\xAF3\xAF4\x3\x2\x2\x2\xAF4\xAF2"+
		"\x3\x2\x2\x2\xAF4\xAF5\x3\x2\x2\x2\xAF5\x1B7\x3\x2\x2\x2\x1A7\x1BE\x1C2"+
		"\x1CA\x1D0\x1D3\x1DD\x1DF\x1E5\x1EE\x1F5\x1FB\x204\x20B\x20F\x213\x217"+
		"\x21C\x228\x235\x238\x245\x248\x24F\x257\x25E\x286\x296\x29E\x2A3\x2A8"+
		"\x2B1\x2C5\x2C9\x2D1\x2DC\x2E2\x2E6\x2EB\x2F2\x2F6\x300\x304\x307\x30D"+
		"\x313\x31D\x321\x324\x32A\x32E\x338\x33C\x346\x34A\x34E\x35A\x35E\x361"+
		"\x365\x36A\x371\x375\x37A\x382\x386\x38A\x392\x395\x399\x39D\x3A7\x3AB"+
		"\x3AE\x3B4\x3B8\x3BE\x3C2\x3C7\x3D0\x3D4\x3D7\x3DA\x3DE\x3EA\x3EE\x3F1"+
		"\x3F4\x3F8\x401\x407\x40B\x410\x417\x41A\x41E\x425\x42B\x439\x43C\x43F"+
		"\x444\x448\x44C\x450\x455\x458\x45B\x461\x465\x469\x46D\x471\x474\x477"+
		"\x47A\x47D\x480\x484\x48C\x490\x495\x49D\x4A3\x4A7\x4B3\x4B7\x4D6\x4DB"+
		"\x4E4\x4EB\x4EF\x4F2\x4FC\x500\x505\x50F\x515\x52A\x538\x540\x545\x549"+
		"\x54D\x551\x554\x557\x55A\x574\x578\x58A\x58E\x596\x59A\x59E\x5A2\x5A8"+
		"\x5AC\x5B0\x5B5\x5BB\x5BE\x5C2\x5C6\x5C9\x5CD\x5D2\x5D4\x5D8\x5DC\x5DF"+
		"\x5E3\x5E6\x5F2\x5F6\x5FA\x602\x606\x614\x61E\x622\x627\x632\x636\x63B"+
		"\x641\x645\x64B\x64E\x653\x65C\x660\x666\x669\x672\x676\x67C\x67F\x689"+
		"\x68D\x690\x693\x696\x69A\x69E\x6A3\x6A8\x6B0\x6B6\x6BA\x6BF\x6C6\x6CB"+
		"\x6CF\x6D3\x6D7\x6DB\x6DF\x6E1\x6E5\x6E9\x6EF\x6FB\x6FD\x703\x705\x70D"+
		"\x711\x721\x725\x72C\x730\x73A\x73E\x743\x74B\x753\x755\x759\x764\x76E"+
		"\x772\x779\x77D\x781\x785\x788\x792\x7A8\x7AD\x7B1\x7BC\x7C2\x7C5\x7C8"+
		"\x7CE\x7D2\x7D7\x7DC\x7DE\x7E4\x7EF\x7F4\x7FA\x7FE\x803\x808\x80C\x810"+
		"\x812\x816\x818\x81D\x831\x833\x839\x83B\x83F\x843\x846\x849\x84D\x850"+
		"\x854\x858\x85A\x860\x862\x866\x86A\x86F\x873\x877\x879\x87F\x883\x889"+
		"\x88D\x891\x895\x89D\x8A1\x8A6\x8AE\x8B5\x8B9\x8C4\x8CA\x8D1\x8D5\x8D9"+
		"\x8DD\x8E0\x8EB\x8EF\x8FD\x901\x905\x909\x90D\x913\x916\x91C\x91F\x923"+
		"\x926\x937\x93C\x942\x946\x94A\x951\x955\x959\x95E\x962\x967\x96B\x970"+
		"\x974\x979\x97D\x982\x986\x98B\x98F\x994\x998\x99D\x9A1\x9A6\x9AA\x9AF"+
		"\x9B3\x9B8\x9BC\x9BF\x9C1\x9C9\x9CB\x9D0\x9DD\x9E2\x9E5\x9EA\x9ED\x9F0"+
		"\x9F5\x9F9\x9FE\xA02\xA05\xA07\xA0D\xA11\xA18\xA1C\xA1F\xA22\xA25\xA28"+
		"\xA2C\xA31\xA34\xA3A\xA40\xA44\xA4A\xA54\xA65\xA69\xA6C\xA6F\xA73\xA77"+
		"\xA79\xA7B\xA81\xA85\xA8E\xA90\xA97\xA9B\xA9E\xAA2\xAA6\xAB0\xAB4\xAB9"+
		"\xABC\xAC0\xAC4\xAC8\xACC\xAD1\xAD6\xADA\xADF\xAE2\xAE6\xAEE\xAF4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
