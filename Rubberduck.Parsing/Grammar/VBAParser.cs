//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=156, ELSEIF=88, CBYTE=5, CLOSE=65, STATIC=180, MINUS=212, OPTION_EXPLICIT=149, 
		L_SQUARE_BRACKET=223, DOEVENTS=21, HASHENDIF=222, DATELITERAL=230, ERROR=102, 
		NOTHING=141, EACH=86, SUB=184, STOP=182, LPAREN=210, MID=136, CVERR=19, 
		AS=55, END_PROPERTY=93, AT=45, DATABASE=67, GOSUB=115, CSNG=15, HASHCONST=218, 
		POW=216, DOLLAR=47, PROPERTY_LET=159, THEN=187, XOR=202, EXIT_FOR=105, 
		DEFINT=75, HASHIF=219, UNLOCK=192, CALL=62, LOCK_READ=131, SET=176, LOCK_READ_WRITE=133, 
		ABS=1, LSET=134, RAISEEVENT=165, MIDBTYPESUFFIX=32, SEEK=174, LONG=125, 
		CBOOL=4, LIB=128, DIM=83, APPEND=54, OPEN=146, DIV=204, PROPERTY_SET=160, 
		CDBL=8, PERCENT=46, END_SELECT=94, STRING=183, HASHELSEIF=220, SGN=37, 
		REM=169, TO=188, DEFDBL=73, BYVAL=59, FRIEND=110, LOOP=126, CLASS=64, 
		DO=84, VARIANT=194, END_WITH=97, DEFBOOL=70, OPTIONAL=147, ADDRESSOF=50, 
		CONST=66, RSET=173, INTEGER=123, CDEC=9, ATTRIBUTE=53, OUTPUT=153, FOR=111, 
		PTRSAFE=161, EQ=206, BOOLEAN=58, CIRCLE=11, END_FUNCTION=91, DEFSNG=80, 
		DEFBYTE=71, NOT=140, CINT=10, END=98, PRESERVE=155, ON_LOCAL_ERROR=145, 
		FLOATLITERAL=228, HASHELSE=221, BINARY=57, LENB=28, RETURN=172, EXCLAMATIONPOINT=42, 
		NEXT=138, GLOBAL=114, INPUTB=24, IDENTIFIER=236, WS=234, EMPTY=89, CURRENCY=17, 
		CCUR=6, MOD=137, WITHEVENTS=200, COLON=40, DEFLNGLNG=77, STEP=181, OPTION_BASE=148, 
		GT=208, PUT=163, WITH=199, CSTR=16, LOCK_WRITE=132, LINE_CONTINUATION=237, 
		TYPEOF=191, DEFVAR=82, DEFLNG=76, UBOUND=38, FALSE=109, ERRORCHAR=238, 
		UNDERSCORE=233, INTEGERLITERAL=229, END_IF=92, LOCK=124, TEXT=186, SINGLEQUOTE=232, 
		MULT=213, SEMICOLON=41, BYTE=61, HEXLITERAL=227, ELSE=87, IF=117, TYPE=190, 
		AMPERSAND=48, DEFLNGPTR=78, ENUM=99, DEFOBJ=79, IN=120, OPTION=34, DOT=43, 
		EXIT_DO=104, GUIDLITERAL=235, IS=122, EQV=100, WEND=196, FUNCTION=112, 
		HASH=44, CASE=63, GEQ=207, GET=113, PUBLIC=162, ON_ERROR=144, EXIT=22, 
		MIDB=31, END_ENUM=90, GOTO=116, INTDIV=205, LONGPTR=30, WIDTH=198, BEGIN=56, 
		EXIT_SUB=108, ASSIGN=203, WRITE=201, DOUBLE=85, EXIT_PROPERTY=107, COMMA=39, 
		RANDOM=164, PROPERTY_GET=158, SELECT=175, PRIVATE=157, ERASE=101, TAB=185, 
		BYREF=60, VERSION=195, NEQ=214, END_TYPE=96, NEW=139, ARRAY=3, INPUT=121, 
		SINGLE=178, ALIAS=51, SPC=179, LT=211, RESET=170, END_SUB=95, EVENT=103, 
		READ_WRITE=167, OPTION_COMPARE=150, ME=135, SCALE=36, CDATE=7, MIDTYPESUFFIX=33, 
		NULL=142, NEWLINE=231, TRUE=189, RPAREN=217, IMP=118, STRINGLITERAL=225, 
		OCTLITERAL=226, READ=166, DATE=68, LIKE=129, AND=52, OPTION_PRIVATE_MODULE=151, 
		CLNGLNG=13, PLUS=215, ANY=2, RESUME=171, INT=25, SHARED=177, EXIT_FUNCTION=106, 
		PSET=35, ACCESS=49, LINE_INPUT=130, ON=143, OR=152, PARAMARRAY=154, LBOUND=26, 
		R_SQUARE_BRACKET=224, IMPLEMENTS=119, UNTIL=193, DEBUG=20, DEFCUR=74, 
		CLNGPTR=14, LONGLONG=29, DECLARE=69, DEFDATE=72, FIX=23, LEN=27, REDIM=168, 
		LEQ=209, DEFSTR=81, LET=127, WHILE=197, CVAR=18, CLNG=12, COLLECTION=239, 
		DELETESETTING=240, LOAD=241, RMDIR=242, SENDKEYS=243, SETATTR=244, RESUME_NEXT=245;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "CBOOL", "CBYTE", "CCUR", "CDATE", 
		"CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", "CLNGPTR", "CSNG", 
		"CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", "EXIT", "FIX", 
		"INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", "MIDB", 
		"MIDBTYPESUFFIX", "MIDTYPESUFFIX", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", 
		"','", "':'", "';'", "'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPEND", "AS", "BEGIN", 
		"BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CLASS", 
		"CLOSE", "CONST", "DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", 
		"DEFDATE", "DEFDBL", "DEFCUR", "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", 
		"DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", "DIM", "DO", "DOUBLE", "EACH", 
		"ELSE", "ELSEIF", "EMPTY", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
		"END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENUM", "EQV", 
		"ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", 
		"EXIT_SUB", "FALSE", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
		"GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "LOCK", 
		"LONG", "LOOP", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", 
		"LOCK_READ_WRITE", "LSET", "ME", "MID", "MOD", "NEXT", "NEW", "NOT", "NOTHING", 
		"NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", "READ", 
		"READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RSET", "SEEK", 
		"SELECT", "SET", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", 
		"STRING", "SUB", "TAB", "TEXT", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", 
		"WITHEVENTS", "WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", 
		"LEQ", "'('", "'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "HASHCONST", 
		"HASHIF", "HASHELSEIF", "HASHELSE", "HASHENDIF", "'['", "']'", "STRINGLITERAL", 
		"OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", "DATELITERAL", 
		"NEWLINE", "'''", "'_'", "WS", "GUIDLITERAL", "IDENTIFIER", "LINE_CONTINUATION", 
		"ERRORCHAR", "COLLECTION", "DELETESETTING", "LOAD", "RMDIR", "SENDKEYS", 
		"SETATTR", "RESUME_NEXT"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_attributeStmt = 11, RULE_attributeName = 12, 
		RULE_attributeValue = 13, RULE_block = 14, RULE_blockStmt = 15, RULE_closeStmt = 16, 
		RULE_constStmt = 17, RULE_constSubStmt = 18, RULE_declareStmt = 19, RULE_defDirective = 20, 
		RULE_defType = 21, RULE_letterSpec = 22, RULE_singleLetter = 23, RULE_universalLetterRange = 24, 
		RULE_upperCaseA = 25, RULE_upperCaseZ = 26, RULE_letterRange = 27, RULE_firstLetter = 28, 
		RULE_lastLetter = 29, RULE_doLoopStmt = 30, RULE_enumerationStmt = 31, 
		RULE_enumerationStmt_Constant = 32, RULE_endStmt = 33, RULE_eraseStmt = 34, 
		RULE_errorStmt = 35, RULE_eventStmt = 36, RULE_exitStmt = 37, RULE_forEachStmt = 38, 
		RULE_forNextStmt = 39, RULE_functionStmt = 40, RULE_functionName = 41, 
		RULE_getStmt = 42, RULE_goSubStmt = 43, RULE_goToStmt = 44, RULE_ifStmt = 45, 
		RULE_elseIfBlock = 46, RULE_elseBlock = 47, RULE_singleLineIfStmt = 48, 
		RULE_ifWithNonEmptyThen = 49, RULE_ifWithEmptyThen = 50, RULE_singleLineElseClause = 51, 
		RULE_listOrLabel = 52, RULE_sameLineStatement = 53, RULE_booleanExpression = 54, 
		RULE_implementsStmt = 55, RULE_inputStmt = 56, RULE_letStmt = 57, RULE_lineInputStmt = 58, 
		RULE_lockStmt = 59, RULE_lsetStmt = 60, RULE_midStmt = 61, RULE_onErrorStmt = 62, 
		RULE_onGoToStmt = 63, RULE_onGoSubStmt = 64, RULE_openStmt = 65, RULE_outputList = 66, 
		RULE_outputList_Expression = 67, RULE_printStmt = 68, RULE_propertyGetStmt = 69, 
		RULE_propertySetStmt = 70, RULE_propertyLetStmt = 71, RULE_putStmt = 72, 
		RULE_raiseEventStmt = 73, RULE_redimStmt = 74, RULE_redimSubStmt = 75, 
		RULE_resetStmt = 76, RULE_resumeStmt = 77, RULE_returnStmt = 78, RULE_rsetStmt = 79, 
		RULE_stopStmt = 80, RULE_seekStmt = 81, RULE_selectCaseStmt = 82, RULE_sC_Selection = 83, 
		RULE_sC_Case = 84, RULE_sC_Cond = 85, RULE_setStmt = 86, RULE_subStmt = 87, 
		RULE_subroutineName = 88, RULE_typeStmt = 89, RULE_typeStmt_Element = 90, 
		RULE_unlockStmt = 91, RULE_valueStmt = 92, RULE_typeOfIsExpression = 93, 
		RULE_variableStmt = 94, RULE_variableListStmt = 95, RULE_variableSubStmt = 96, 
		RULE_whileWendStmt = 97, RULE_widthStmt = 98, RULE_withStmt = 99, RULE_withStmtExpression = 100, 
		RULE_writeStmt = 101, RULE_fileNumber = 102, RULE_explicitCallStmt = 103, 
		RULE_explicitCallStmtExpression = 104, RULE_implicitCallStmt_InBlock = 105, 
		RULE_iCS_B_MemberProcedureCall = 106, RULE_iCS_B_ProcedureCall = 107, 
		RULE_implicitCallStmt_InStmt = 108, RULE_iCS_S_VariableOrProcedureCall = 109, 
		RULE_iCS_S_ProcedureOrArrayCall = 110, RULE_iCS_S_VariableOrProcedureCallUnrestricted = 111, 
		RULE_iCS_S_ProcedureOrArrayCallUnrestricted = 112, RULE_iCS_S_MembersCall = 113, 
		RULE_iCS_S_MemberCall = 114, RULE_iCS_S_DictionaryCall = 115, RULE_argsCall = 116, 
		RULE_argCall = 117, RULE_dictionaryCallStmt = 118, RULE_argList = 119, 
		RULE_arg = 120, RULE_argDefaultValue = 121, RULE_subscripts = 122, RULE_subscript = 123, 
		RULE_unrestrictedIdentifier = 124, RULE_identifier = 125, RULE_asTypeClause = 126, 
		RULE_baseType = 127, RULE_comparisonOperator = 128, RULE_complexType = 129, 
		RULE_fieldLength = 130, RULE_statementLabelDefinition = 131, RULE_statementLabel = 132, 
		RULE_identifierStatementLabel = 133, RULE_lineNumberLabel = 134, RULE_literal = 135, 
		RULE_numberLiteral = 136, RULE_type = 137, RULE_typeHint = 138, RULE_visibility = 139, 
		RULE_keyword = 140, RULE_markerKeyword = 141, RULE_statementKeyword = 142, 
		RULE_endOfLine = 143, RULE_endOfStatement = 144, RULE_commentOrAnnotation = 145, 
		RULE_remComment = 146, RULE_comment = 147, RULE_commentBody = 148, RULE_annotationList = 149, 
		RULE_annotation = 150, RULE_annotationName = 151, RULE_annotationArgList = 152, 
		RULE_annotationArg = 153, RULE_whiteSpace = 154;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "attributeStmt", "attributeName", "attributeValue", 
		"block", "blockStmt", "closeStmt", "constStmt", "constSubStmt", "declareStmt", 
		"defDirective", "defType", "letterSpec", "singleLetter", "universalLetterRange", 
		"upperCaseA", "upperCaseZ", "letterRange", "firstLetter", "lastLetter", 
		"doLoopStmt", "enumerationStmt", "enumerationStmt_Constant", "endStmt", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "forEachStmt", "forNextStmt", 
		"functionStmt", "functionName", "getStmt", "goSubStmt", "goToStmt", "ifStmt", 
		"elseIfBlock", "elseBlock", "singleLineIfStmt", "ifWithNonEmptyThen", 
		"ifWithEmptyThen", "singleLineElseClause", "listOrLabel", "sameLineStatement", 
		"booleanExpression", "implementsStmt", "inputStmt", "letStmt", "lineInputStmt", 
		"lockStmt", "lsetStmt", "midStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", 
		"openStmt", "outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
		"propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rsetStmt", "stopStmt", 
		"seekStmt", "selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "setStmt", 
		"subStmt", "subroutineName", "typeStmt", "typeStmt_Element", "unlockStmt", 
		"valueStmt", "typeOfIsExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "withStmtExpression", 
		"writeStmt", "fileNumber", "explicitCallStmt", "explicitCallStmtExpression", 
		"implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", 
		"implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
		"iCS_S_VariableOrProcedureCallUnrestricted", "iCS_S_ProcedureOrArrayCallUnrestricted", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "unrestrictedIdentifier", "identifier", "asTypeClause", 
		"baseType", "comparisonOperator", "complexType", "fieldLength", "statementLabelDefinition", 
		"statementLabel", "identifierStatementLabel", "lineNumberLabel", "literal", 
		"numberLiteral", "type", "typeHint", "visibility", "keyword", "markerKeyword", 
		"statementKeyword", "endOfLine", "endOfStatement", "commentOrAnnotation", 
		"remComment", "comment", "commentBody", "annotationList", "annotation", 
		"annotationName", "annotationArgList", "annotationArg", "whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 312; whiteSpace();
				}
				break;
			}
			State = 315; endOfStatement();
			State = 319;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 316; moduleHeader();
				State = 317; endOfStatement();
				}
				break;
			}
			State = 322;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 321; moduleConfig();
				}
				break;
			}
			State = 324; endOfStatement();
			State = 326;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 325; moduleAttributes();
				}
				break;
			}
			State = 328; endOfStatement();
			State = 330;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 329; moduleDeclarations();
				}
				break;
			}
			State = 332; endOfStatement();
			State = 334;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 333; moduleBody();
				}
				break;
			}
			State = 336; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(VERSION);
			State = 339; whiteSpace();
			State = 340; numberLiteral();
			State = 342;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 341; whiteSpace();
				}
				break;
			}
			State = 345;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 344; Match(CLASS);
				}
				break;
			}
			State = 347; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(BEGIN);
			State = 357;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 350; whiteSpace();
				State = 351; Match(GUIDLITERAL);
				State = 352; whiteSpace();
				State = 353; unrestrictedIdentifier();
				State = 355;
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 354; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 359; endOfStatement();
			State = 361;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 360; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 363;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 365; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; unrestrictedIdentifier();
			State = 371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 368; whiteSpace();
				}
				}
				State = 373;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 374; Match(EQ);
			State = 378;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 375; whiteSpace();
					}
					} 
				}
				State = 380;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			State = 381; valueStmt(0);
			State = 384;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 382; Match(COLON);
				State = 383; numberLiteral();
				}
				break;
			}
			State = 386; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 388; attributeStmt();
					State = 389; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 393;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; moduleDeclarationsElement();
			State = 401;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 396; endOfStatement();
					State = 397; moduleDeclarationsElement();
					}
					} 
				}
				State = 403;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 404; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 416;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 406; Match(OPTION_BASE);
				State = 407; whiteSpace();
				State = 408; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 410; Match(OPTION_COMPARE);
				State = 411; whiteSpace();
				State = 412;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 414; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 415; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public DefDirectiveContext defDirective() {
			return GetRuleContext<DefDirectiveContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 427;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; declareStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419; defDirective();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 420; enumerationStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 421; eventStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 422; constStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 423; implementsStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 424; variableStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 425; moduleOption();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 426; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; moduleBodyElement();
			State = 435;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 430; endOfStatement();
					State = 431; moduleBodyElement();
					}
					} 
				}
				State = 437;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			State = 438; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 445;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 442; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 443; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 444; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AttributeValueContext> attributeValue() {
			return GetRuleContexts<AttributeValueContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeValueContext attributeValue(int i) {
			return GetRuleContext<AttributeValueContext>(i);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(ATTRIBUTE);
			State = 448; whiteSpace();
			State = 449; attributeName();
			State = 451;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 450; whiteSpace();
				}
			}

			State = 453; Match(EQ);
			State = 455;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 454; whiteSpace();
				}
				break;
			}
			State = 457; attributeValue();
			State = 468;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 459;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 458; whiteSpace();
						}
					}

					State = 461; Match(COMMA);
					State = 463;
					switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						State = 462; whiteSpace();
						}
						break;
					}
					State = 465; attributeValue();
					}
					} 
				}
				State = 470;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; implicitCallStmt_InStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_attributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; blockStmt();
			State = 481;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 476; endOfStatement();
					State = 477; blockStmt();
					}
					} 
				}
				State = 483;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			State = 484; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public SingleLineIfStmtContext singleLineIfStmt() {
			return GetRuleContext<SingleLineIfStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_blockStmt);
		try {
			State = 533;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486; statementLabelDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 487; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 488; closeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 489; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 490; doLoopStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 491; endStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 492; eraseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 493; errorStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 494; exitStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 495; explicitCallStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 496; forEachStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 497; forNextStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 498; getStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 499; goSubStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 500; goToStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 501; ifStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 502; singleLineIfStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 503; implementsStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 504; inputStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 505; letStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 506; lineInputStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 507; lockStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 508; lsetStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 509; midStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 510; onErrorStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 511; onGoToStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 512; onGoSubStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 513; openStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 514; printStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 515; putStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 516; raiseEventStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 517; redimStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 518; resetStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 519; resumeStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 520; returnStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 521; rsetStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 522; seekStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 523; selectCaseStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 524; setStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 525; stopStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 526; unlockStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 527; variableStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 528; whileWendStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 529; widthStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 530; withStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 531; writeStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 532; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; Match(CLOSE);
			State = 551;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 536; whiteSpace();
				State = 537; fileNumber();
				State = 548;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 539;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 538; whiteSpace();
							}
						}

						State = 541; Match(COMMA);
						State = 543;
						switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
						case 1:
							{
							State = 542; whiteSpace();
							}
							break;
						}
						State = 545; fileNumber();
						}
						} 
					}
					State = 550;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 553; visibility();
				State = 554; whiteSpace();
				}
			}

			State = 558; Match(CONST);
			State = 559; whiteSpace();
			State = 560; constSubStmt();
			State = 571;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 562;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 561; whiteSpace();
						}
					}

					State = 564; Match(COMMA);
					State = 566;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 565; whiteSpace();
						}
					}

					State = 568; constSubStmt();
					}
					} 
				}
				State = 573;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; identifier();
			State = 576;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 575; typeHint();
				}
			}

			State = 581;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 578; whiteSpace();
				State = 579; asTypeClause();
				}
				break;
			}
			State = 584;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 583; whiteSpace();
				}
			}

			State = 586; Match(EQ);
			State = 588;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 587; whiteSpace();
				}
				break;
			}
			State = 590; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 592; visibility();
				State = 593; whiteSpace();
				}
			}

			State = 597; Match(DECLARE);
			State = 598; whiteSpace();
			State = 601;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 599; Match(PTRSAFE);
				State = 600; whiteSpace();
				}
			}

			State = 603;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 604; whiteSpace();
			State = 605; identifier();
			State = 607;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 606; typeHint();
				}
			}

			State = 609; whiteSpace();
			State = 610; Match(LIB);
			State = 611; whiteSpace();
			State = 612; Match(STRINGLITERAL);
			State = 618;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 613; whiteSpace();
				State = 614; Match(ALIAS);
				State = 615; whiteSpace();
				State = 616; Match(STRINGLITERAL);
				}
				break;
			}
			State = 624;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 621;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 620; whiteSpace();
					}
				}

				State = 623; argList();
				}
				break;
			}
			State = 629;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 626; whiteSpace();
				State = 627; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDirectiveContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LetterSpecContext letterSpec(int i) {
			return GetRuleContext<LetterSpecContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LetterSpecContext> letterSpec() {
			return GetRuleContexts<LetterSpecContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DefTypeContext defType() {
			return GetRuleContext<DefTypeContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDirectiveContext defDirective() {
		DefDirectiveContext _localctx = new DefDirectiveContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_defDirective);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; defType();
			State = 632; whiteSpace();
			State = 633; letterSpec();
			State = 644;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 635;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 634; whiteSpace();
						}
					}

					State = 637; Match(COMMA);
					State = 639;
					switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
					case 1:
						{
						State = 638; whiteSpace();
						}
						break;
					}
					State = 641; letterSpec();
					}
					} 
				}
				State = 646;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefTypeContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefTypeContext defType() {
		DefTypeContext _localctx = new DefTypeContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_defType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (DEFBOOL - 70)) | (1L << (DEFBYTE - 70)) | (1L << (DEFDATE - 70)) | (1L << (DEFDBL - 70)) | (1L << (DEFCUR - 70)) | (1L << (DEFINT - 70)) | (1L << (DEFLNG - 70)) | (1L << (DEFLNGLNG - 70)) | (1L << (DEFLNGPTR - 70)) | (1L << (DEFOBJ - 70)) | (1L << (DEFSNG - 70)) | (1L << (DEFSTR - 70)) | (1L << (DEFVAR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterSpecContext : ParserRuleContext {
		public SingleLetterContext singleLetter() {
			return GetRuleContext<SingleLetterContext>(0);
		}
		public UniversalLetterRangeContext universalLetterRange() {
			return GetRuleContext<UniversalLetterRangeContext>(0);
		}
		public LetterRangeContext letterRange() {
			return GetRuleContext<LetterRangeContext>(0);
		}
		public LetterSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterSpecContext letterSpec() {
		LetterSpecContext _localctx = new LetterSpecContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_letterSpec);
		try {
			State = 652;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 649; singleLetter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 650; universalLetterRange();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 651; letterRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public SingleLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLetterContext singleLetter() {
		SingleLetterContext _localctx = new SingleLetterContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_singleLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalLetterRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public UpperCaseAContext upperCaseA() {
			return GetRuleContext<UpperCaseAContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public UpperCaseZContext upperCaseZ() {
			return GetRuleContext<UpperCaseZContext>(0);
		}
		public UniversalLetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalLetterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUniversalLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUniversalLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalLetterRangeContext universalLetterRange() {
		UniversalLetterRangeContext _localctx = new UniversalLetterRangeContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_universalLetterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; upperCaseA();
			State = 658;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 657; whiteSpace();
				}
			}

			State = 660; Match(MINUS);
			State = 662;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 661; whiteSpace();
				}
				break;
			}
			State = 664; upperCaseZ();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseAContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseAContext upperCaseA() {
		UpperCaseAContext _localctx = new UpperCaseAContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_upperCaseA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			if (!(_input.Lt(1).Text.Equals("A"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"A\")");
			State = 667; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseZContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseZ; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseZ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseZ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseZ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseZContext upperCaseZ() {
		UpperCaseZContext _localctx = new UpperCaseZContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_upperCaseZ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			if (!(_input.Lt(1).Text.Equals("Z"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"Z\")");
			State = 670; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterRangeContext : ParserRuleContext {
		public LastLetterContext lastLetter() {
			return GetRuleContext<LastLetterContext>(0);
		}
		public FirstLetterContext firstLetter() {
			return GetRuleContext<FirstLetterContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterRangeContext letterRange() {
		LetterRangeContext _localctx = new LetterRangeContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_letterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; firstLetter();
			State = 674;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 673; whiteSpace();
				}
			}

			State = 676; Match(MINUS);
			State = 678;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 677; whiteSpace();
				}
			}

			State = 680; lastLetter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public FirstLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFirstLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFirstLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstLetterContext firstLetter() {
		FirstLetterContext _localctx = new FirstLetterContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_firstLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LastLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLastLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLastLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastLetterContext lastLetter() {
		LastLetterContext _localctx = new LastLetterContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_lastLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_doLoopStmt);
		int _la;
		try {
			State = 715;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 686; Match(DO);
				State = 687; endOfStatement();
				State = 689;
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 688; block();
					}
					break;
				}
				State = 691; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693; Match(DO);
				State = 694; whiteSpace();
				State = 695;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 696; whiteSpace();
				State = 697; valueStmt(0);
				State = 698; endOfStatement();
				State = 700;
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 699; block();
					}
					break;
				}
				State = 702; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 704; Match(DO);
				State = 705; endOfStatement();
				State = 707;
				switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					State = 706; block();
					}
					break;
				}
				State = 709; Match(LOOP);
				State = 710; whiteSpace();
				State = 711;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 712; whiteSpace();
				State = 713; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 717; visibility();
				State = 718; whiteSpace();
				}
			}

			State = 722; Match(ENUM);
			State = 723; whiteSpace();
			State = 724; identifier();
			State = 725; endOfStatement();
			State = 729;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) {
				{
				{
				State = 726; enumerationStmt_Constant();
				}
				}
				State = 731;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 732; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; identifier();
			State = 743;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 736;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 735; whiteSpace();
					}
				}

				State = 738; Match(EQ);
				State = 740;
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 739; whiteSpace();
					}
					break;
				}
				State = 742; valueStmt(0);
				}
				break;
			}
			State = 745; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 749; Match(ERASE);
			State = 750; whiteSpace();
			State = 751; valueStmt(0);
			State = 762;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,65,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 753;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 752; whiteSpace();
						}
					}

					State = 755; Match(COMMA);
					State = 757;
					switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
					case 1:
						{
						State = 756; whiteSpace();
						}
						break;
					}
					State = 759; valueStmt(0);
					}
					} 
				}
				State = 764;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,65,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(ERROR);
			State = 766; whiteSpace();
			State = 767; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 769; visibility();
				State = 770; whiteSpace();
				}
			}

			State = 774; Match(EVENT);
			State = 775; whiteSpace();
			State = 776; identifier();
			State = 778;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 777; whiteSpace();
				}
			}

			State = 780; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			_la = _input.La(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EXIT_DO - 104)) | (1L << (EXIT_FOR - 104)) | (1L << (EXIT_FUNCTION - 104)) | (1L << (EXIT_PROPERTY - 104)) | (1L << (EXIT_SUB - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_forEachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; Match(FOR);
			State = 785; whiteSpace();
			State = 786; Match(EACH);
			State = 787; whiteSpace();
			State = 788; valueStmt(0);
			State = 789; whiteSpace();
			State = 790; Match(IN);
			State = 791; whiteSpace();
			State = 792; valueStmt(0);
			State = 793; endOfStatement();
			State = 795;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 794; block();
				}
				break;
			}
			State = 797; Match(NEXT);
			State = 801;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 798; whiteSpace();
				State = 799; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803; Match(FOR);
			State = 804; whiteSpace();
			State = 805; valueStmt(0);
			State = 807;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 806; whiteSpace();
				}
			}

			State = 809; Match(EQ);
			State = 811;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 810; whiteSpace();
				}
				break;
			}
			State = 813; valueStmt(0);
			State = 814; whiteSpace();
			State = 815; Match(TO);
			State = 816; whiteSpace();
			State = 817; valueStmt(0);
			State = 823;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 818; whiteSpace();
				State = 819; Match(STEP);
				State = 820; whiteSpace();
				State = 821; valueStmt(0);
				}
				break;
			}
			State = 825; endOfStatement();
			State = 827;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 826; block();
				}
				break;
			}
			State = 829; Match(NEXT);
			State = 833;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 830; whiteSpace();
				State = 831; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 835; visibility();
				State = 836; whiteSpace();
				}
			}

			State = 842;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 840; Match(STATIC);
				State = 841; whiteSpace();
				}
			}

			State = 844; Match(FUNCTION);
			State = 846;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 845; whiteSpace();
				}
			}

			State = 848; functionName();
			State = 850;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 849; typeHint();
				}
				break;
			}
			State = 856;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 853;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 852; whiteSpace();
					}
				}

				State = 855; argList();
				}
				break;
			}
			State = 862;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 859;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 858; whiteSpace();
					}
				}

				State = 861; asTypeClause();
				}
				break;
			}
			State = 864; endOfStatement();
			State = 866;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 865; block();
				}
			}

			State = 868; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872; Match(GET);
			State = 873; whiteSpace();
			State = 874; fileNumber();
			State = 876;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 875; whiteSpace();
				}
			}

			State = 878; Match(COMMA);
			State = 880;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 879; whiteSpace();
				}
				break;
			}
			State = 883;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 882; valueStmt(0);
				}
				break;
			}
			State = 886;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 885; whiteSpace();
				}
			}

			State = 888; Match(COMMA);
			State = 890;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 889; whiteSpace();
				}
				break;
			}
			State = 892; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894; Match(GOSUB);
			State = 895; whiteSpace();
			State = 896; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; Match(GOTO);
			State = 899; whiteSpace();
			State = 900; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<ElseIfBlockContext> elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902; Match(IF);
			State = 903; whiteSpace();
			State = 904; booleanExpression();
			State = 905; whiteSpace();
			State = 906; Match(THEN);
			State = 907; endOfStatement();
			State = 909;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 908; block();
				}
				break;
			}
			State = 914;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ELSEIF) {
				{
				{
				State = 911; elseIfBlock();
				}
				}
				State = 916;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 918;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 917; elseBlock();
				}
			}

			State = 920; Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_elseIfBlock);
		try {
			State = 942;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 922; Match(ELSEIF);
				State = 923; whiteSpace();
				State = 924; booleanExpression();
				State = 925; whiteSpace();
				State = 926; Match(THEN);
				State = 927; endOfStatement();
				State = 929;
				switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
				case 1:
					{
					State = 928; block();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 931; Match(ELSEIF);
				State = 932; whiteSpace();
				State = 933; booleanExpression();
				State = 934; whiteSpace();
				State = 935; Match(THEN);
				State = 937;
				switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
				case 1:
					{
					State = 936; whiteSpace();
					}
					break;
				}
				State = 940;
				switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					State = 939; block();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_elseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; Match(ELSE);
			State = 945; endOfStatement();
			State = 947;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 946; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineIfStmtContext : ParserRuleContext {
		public IfWithEmptyThenContext ifWithEmptyThen() {
			return GetRuleContext<IfWithEmptyThenContext>(0);
		}
		public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
			return GetRuleContext<IfWithNonEmptyThenContext>(0);
		}
		public SingleLineIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineIfStmtContext singleLineIfStmt() {
		SingleLineIfStmtContext _localctx = new SingleLineIfStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_singleLineIfStmt);
		try {
			State = 951;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 949; ifWithNonEmptyThen();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 950; ifWithEmptyThen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithNonEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithNonEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithNonEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithNonEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithNonEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithNonEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
		IfWithNonEmptyThenContext _localctx = new IfWithNonEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_ifWithNonEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953; Match(IF);
			State = 955;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 954; whiteSpace();
				}
				break;
			}
			State = 957; booleanExpression();
			State = 959;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 958; whiteSpace();
				}
			}

			State = 961; Match(THEN);
			State = 963;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 962; whiteSpace();
				}
				break;
			}
			State = 965; listOrLabel();
			State = 969;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 966; whiteSpace();
				State = 967; singleLineElseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IfWithEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithEmptyThenContext ifWithEmptyThen() {
		IfWithEmptyThenContext _localctx = new IfWithEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_ifWithEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971; Match(IF);
			State = 973;
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 972; whiteSpace();
				}
				break;
			}
			State = 975; booleanExpression();
			State = 977;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 976; whiteSpace();
				}
			}

			State = 979; Match(THEN);
			State = 980; endOfStatement();
			State = 982;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 981; whiteSpace();
				}
			}

			State = 984; singleLineElseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineElseClauseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public SingleLineElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineElseClauseContext singleLineElseClause() {
		SingleLineElseClauseContext _localctx = new SingleLineElseClauseContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_singleLineElseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986; Match(ELSE);
			State = 988;
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 987; whiteSpace();
				}
				break;
			}
			State = 991;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 990; listOrLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOrLabelContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public SameLineStatementContext sameLineStatement(int i) {
			return GetRuleContext<SameLineStatementContext>(i);
		}
		public IReadOnlyList<SameLineStatementContext> sameLineStatement() {
			return GetRuleContexts<SameLineStatementContext>();
		}
		public ListOrLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOrLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterListOrLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitListOrLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOrLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOrLabelContext listOrLabel() {
		ListOrLabelContext _localctx = new ListOrLabelContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_listOrLabel);
		int _la;
		try {
			int _alt;
			State = 1031;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 993; lineNumberLabel();
				State = 1006;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 995;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 994; whiteSpace();
							}
						}

						State = 997; Match(COLON);
						State = 999;
						switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
						case 1:
							{
							State = 998; whiteSpace();
							}
							break;
						}
						State = 1002;
						switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
						case 1:
							{
							State = 1001; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1008;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1009; Match(COLON);
					State = 1011;
					switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
					case 1:
						{
						State = 1010; whiteSpace();
						}
						break;
					}
					}
				}

				State = 1015; sameLineStatement();
				State = 1028;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,116,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1017;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1016; whiteSpace();
							}
						}

						State = 1019; Match(COLON);
						State = 1021;
						switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
						case 1:
							{
							State = 1020; whiteSpace();
							}
							break;
						}
						State = 1024;
						switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
						case 1:
							{
							State = 1023; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1030;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,116,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SameLineStatementContext : ParserRuleContext {
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public SameLineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sameLineStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSameLineStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSameLineStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameLineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SameLineStatementContext sameLineStatement() {
		SameLineStatementContext _localctx = new SameLineStatementContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_sameLineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033; blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037; Match(IMPLEMENTS);
			State = 1038; whiteSpace();
			State = 1039; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041; Match(INPUT);
			State = 1042; whiteSpace();
			State = 1043; fileNumber();
			State = 1052;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1045;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1044; whiteSpace();
						}
					}

					State = 1047; Match(COMMA);
					State = 1049;
					switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
					case 1:
						{
						State = 1048; whiteSpace();
						}
						break;
					}
					State = 1051; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1054;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1056; Match(LET);
				State = 1057; whiteSpace();
				}
				break;
			}
			State = 1060; valueStmt(0);
			State = 1062;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1061; whiteSpace();
				}
			}

			State = 1064; Match(EQ);
			State = 1066;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1065; whiteSpace();
				}
				break;
			}
			State = 1068; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070; Match(LINE_INPUT);
			State = 1071; whiteSpace();
			State = 1072; fileNumber();
			State = 1074;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1073; whiteSpace();
				}
			}

			State = 1076; Match(COMMA);
			State = 1078;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 1077; whiteSpace();
				}
				break;
			}
			State = 1080; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082; Match(LOCK);
			State = 1083; whiteSpace();
			State = 1084; valueStmt(0);
			State = 1100;
			switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				State = 1086;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1085; whiteSpace();
					}
				}

				State = 1088; Match(COMMA);
				State = 1090;
				switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					State = 1089; whiteSpace();
					}
					break;
				}
				State = 1092; valueStmt(0);
				State = 1098;
				switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					State = 1093; whiteSpace();
					State = 1094; Match(TO);
					State = 1095; whiteSpace();
					State = 1096; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102; Match(LSET);
			State = 1103; whiteSpace();
			State = 1104; valueStmt(0);
			State = 1106;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1105; whiteSpace();
				}
			}

			State = 1108; Match(EQ);
			State = 1110;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1109; whiteSpace();
				}
				break;
			}
			State = 1112; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114; Match(MID);
			State = 1116;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1115; whiteSpace();
				}
			}

			State = 1118; Match(LPAREN);
			State = 1120;
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 1119; whiteSpace();
				}
				break;
			}
			State = 1122; argsCall();
			State = 1124;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1123; whiteSpace();
				}
			}

			State = 1126; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1129; whiteSpace();
			State = 1138;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1130; Match(GOTO);
				State = 1131; whiteSpace();
				State = 1132; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1134; Match(RESUME);
				State = 1135; whiteSpace();
				State = 1136; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140; Match(ON);
			State = 1141; whiteSpace();
			State = 1142; valueStmt(0);
			State = 1143; whiteSpace();
			State = 1144; Match(GOTO);
			State = 1145; whiteSpace();
			State = 1146; valueStmt(0);
			State = 1157;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,138,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1148;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1147; whiteSpace();
						}
					}

					State = 1150; Match(COMMA);
					State = 1152;
					switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
					case 1:
						{
						State = 1151; whiteSpace();
						}
						break;
					}
					State = 1154; valueStmt(0);
					}
					} 
				}
				State = 1159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,138,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160; Match(ON);
			State = 1161; whiteSpace();
			State = 1162; valueStmt(0);
			State = 1163; whiteSpace();
			State = 1164; Match(GOSUB);
			State = 1165; whiteSpace();
			State = 1166; valueStmt(0);
			State = 1177;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,141,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1168;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1167; whiteSpace();
						}
					}

					State = 1170; Match(COMMA);
					State = 1172;
					switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
					case 1:
						{
						State = 1171; whiteSpace();
						}
						break;
					}
					State = 1174; valueStmt(0);
					}
					} 
				}
				State = 1179;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,141,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180; Match(OPEN);
			State = 1181; whiteSpace();
			State = 1182; valueStmt(0);
			State = 1183; whiteSpace();
			State = 1184; Match(FOR);
			State = 1185; whiteSpace();
			State = 1186;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (INPUT - 121)) | (1L << (OUTPUT - 121)) | (1L << (RANDOM - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1192;
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 1187; whiteSpace();
				State = 1188; Match(ACCESS);
				State = 1189; whiteSpace();
				State = 1190;
				_la = _input.La(1);
				if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & ((1L << (READ - 166)) | (1L << (READ_WRITE - 166)) | (1L << (WRITE - 166)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1197;
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				State = 1194; whiteSpace();
				State = 1195;
				_la = _input.La(1);
				if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LOCK_READ - 131)) | (1L << (LOCK_WRITE - 131)) | (1L << (LOCK_READ_WRITE - 131)) | (1L << (SHARED - 131)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1199; whiteSpace();
			State = 1200; Match(AS);
			State = 1201; whiteSpace();
			State = 1202; fileNumber();
			State = 1214;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1203; whiteSpace();
				State = 1204; Match(LEN);
				State = 1206;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1205; whiteSpace();
					}
				}

				State = 1208; Match(EQ);
				State = 1210;
				switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					State = 1209; whiteSpace();
					}
					break;
				}
				State = 1212; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1249;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1216; outputList_Expression();
				State = 1229;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,150,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1218;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1217; whiteSpace();
							}
						}

						State = 1220;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1222;
						switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
						case 1:
							{
							State = 1221; whiteSpace();
							}
							break;
						}
						State = 1225;
						switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
						case 1:
							{
							State = 1224; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1231;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,150,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1233;
				switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					State = 1232; outputList_Expression();
					}
					break;
				}
				State = 1245;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1236;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1235; whiteSpace();
							}
						}

						State = 1238;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1240;
						switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
						case 1:
							{
							State = 1239; whiteSpace();
							}
							break;
						}
						State = 1243;
						switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
						case 1:
							{
							State = 1242; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1247;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,155,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_outputList_Expression);
		int _la;
		try {
			State = 1268;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1251; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1252;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1266;
				switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					State = 1254;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1253; whiteSpace();
						}
					}

					State = 1256; Match(LPAREN);
					State = 1258;
					switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
					case 1:
						{
						State = 1257; whiteSpace();
						}
						break;
					}
					State = 1260; argsCall();
					State = 1262;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1261; whiteSpace();
						}
					}

					State = 1264; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; Match(PRINT);
			State = 1271; whiteSpace();
			State = 1272; fileNumber();
			State = 1274;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1273; whiteSpace();
				}
			}

			State = 1276; Match(COMMA);
			State = 1281;
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				State = 1278;
				switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					State = 1277; whiteSpace();
					}
					break;
				}
				State = 1280; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1283; visibility();
				State = 1284; whiteSpace();
				}
			}

			State = 1290;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1288; Match(STATIC);
				State = 1289; whiteSpace();
				}
			}

			State = 1292; Match(PROPERTY_GET);
			State = 1293; whiteSpace();
			State = 1294; functionName();
			State = 1296;
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				State = 1295; typeHint();
				}
				break;
			}
			State = 1302;
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1299;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1298; whiteSpace();
					}
				}

				State = 1301; argList();
				}
				break;
			}
			State = 1307;
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1304; whiteSpace();
				State = 1305; asTypeClause();
				}
				break;
			}
			State = 1309; endOfStatement();
			State = 1311;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1310; block();
				}
			}

			State = 1313; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1315; visibility();
				State = 1316; whiteSpace();
				}
			}

			State = 1322;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1320; Match(STATIC);
				State = 1321; whiteSpace();
				}
			}

			State = 1324; Match(PROPERTY_SET);
			State = 1325; whiteSpace();
			State = 1326; subroutineName();
			State = 1331;
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 1328;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1327; whiteSpace();
					}
				}

				State = 1330; argList();
				}
				break;
			}
			State = 1333; endOfStatement();
			State = 1335;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1334; block();
				}
			}

			State = 1337; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1339; visibility();
				State = 1340; whiteSpace();
				}
			}

			State = 1346;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1344; Match(STATIC);
				State = 1345; whiteSpace();
				}
			}

			State = 1348; Match(PROPERTY_LET);
			State = 1349; whiteSpace();
			State = 1350; subroutineName();
			State = 1355;
			switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				State = 1352;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1351; whiteSpace();
					}
				}

				State = 1354; argList();
				}
				break;
			}
			State = 1357; endOfStatement();
			State = 1359;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1358; block();
				}
			}

			State = 1361; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1363; Match(PUT);
			State = 1364; whiteSpace();
			State = 1365; fileNumber();
			State = 1367;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1366; whiteSpace();
				}
			}

			State = 1369; Match(COMMA);
			State = 1371;
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				State = 1370; whiteSpace();
				}
				break;
			}
			State = 1374;
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 1373; valueStmt(0);
				}
				break;
			}
			State = 1377;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1376; whiteSpace();
				}
			}

			State = 1379; Match(COMMA);
			State = 1381;
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 1380; whiteSpace();
				}
				break;
			}
			State = 1383; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385; Match(RAISEEVENT);
			State = 1386; whiteSpace();
			State = 1387; identifier();
			State = 1402;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1389;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1388; whiteSpace();
					}
				}

				State = 1391; Match(LPAREN);
				State = 1393;
				switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					State = 1392; whiteSpace();
					}
					break;
				}
				State = 1399;
				switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					State = 1395; argsCall();
					State = 1397;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1396; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1401; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404; Match(REDIM);
			State = 1405; whiteSpace();
			State = 1408;
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 1406; Match(PRESERVE);
				State = 1407; whiteSpace();
				}
				break;
			}
			State = 1410; redimSubStmt();
			State = 1421;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,195,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1412;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1411; whiteSpace();
						}
					}

					State = 1414; Match(COMMA);
					State = 1416;
					switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
					case 1:
						{
						State = 1415; whiteSpace();
						}
						break;
					}
					State = 1418; redimSubStmt();
					}
					} 
				}
				State = 1423;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,195,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424; implicitCallStmt_InStmt();
			State = 1426;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1425; whiteSpace();
				}
			}

			State = 1428; Match(LPAREN);
			State = 1430;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1429; whiteSpace();
				}
				break;
			}
			State = 1432; subscripts();
			State = 1434;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1433; whiteSpace();
				}
			}

			State = 1436; Match(RPAREN);
			State = 1440;
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 1437; whiteSpace();
				State = 1438; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444; Match(RESUME);
			State = 1450;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1445; whiteSpace();
				State = 1448;
				switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					State = 1446; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1447; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454; Match(RSET);
			State = 1455; whiteSpace();
			State = 1456; valueStmt(0);
			State = 1458;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1457; whiteSpace();
				}
			}

			State = 1460; Match(EQ);
			State = 1462;
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 1461; whiteSpace();
				}
				break;
			}
			State = 1464; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468; Match(SEEK);
			State = 1469; whiteSpace();
			State = 1470; fileNumber();
			State = 1472;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1471; whiteSpace();
				}
			}

			State = 1474; Match(COMMA);
			State = 1476;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1475; whiteSpace();
				}
				break;
			}
			State = 1478; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480; Match(SELECT);
			State = 1481; whiteSpace();
			State = 1482; Match(CASE);
			State = 1483; whiteSpace();
			State = 1484; valueStmt(0);
			State = 1485; endOfStatement();
			State = 1489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1486; sC_Case();
				}
				}
				State = 1491;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1492; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_SelectionContext : ParserRuleContext {
		public SC_SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Selection; } }
	 
		public SC_SelectionContext() { }
		public virtual void CopyFrom(SC_SelectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_SelectionContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_SelectionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_SelectionContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_SelectionContext sC_Selection() {
		SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_sC_Selection);
		int _la;
		try {
			State = 1511;
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1494; Match(IS);
				State = 1496;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1495; whiteSpace();
					}
				}

				State = 1498; comparisonOperator();
				State = 1500;
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1499; whiteSpace();
					}
					break;
				}
				State = 1502; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1504; valueStmt(0);
				State = 1505; whiteSpace();
				State = 1506; Match(TO);
				State = 1507; whiteSpace();
				State = 1508; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1510; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_sC_Case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513; Match(CASE);
			State = 1514; whiteSpace();
			State = 1515; sC_Cond();
			State = 1516; endOfStatement();
			State = 1518;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 1517; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondSelectionContext : SC_CondContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<SC_SelectionContext> sC_Selection() {
			return GetRuleContexts<SC_SelectionContext>();
		}
		public SC_SelectionContext sC_Selection(int i) {
			return GetRuleContext<SC_SelectionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1535;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1520; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondSelectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1521; sC_Selection();
				State = 1532;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,213,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1523;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1522; whiteSpace();
							}
						}

						State = 1525; Match(COMMA);
						State = 1527;
						switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
						case 1:
							{
							State = 1526; whiteSpace();
							}
							break;
						}
						State = 1529; sC_Selection();
						}
						} 
					}
					State = 1534;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,213,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537; Match(SET);
			State = 1538; whiteSpace();
			State = 1539; valueStmt(0);
			State = 1541;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1540; whiteSpace();
				}
			}

			State = 1543; Match(EQ);
			State = 1545;
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 1544; whiteSpace();
				}
				break;
			}
			State = 1547; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1549; visibility();
				State = 1550; whiteSpace();
				}
			}

			State = 1556;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1554; Match(STATIC);
				State = 1555; whiteSpace();
				}
			}

			State = 1558; Match(SUB);
			State = 1560;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1559; whiteSpace();
				}
			}

			State = 1562; subroutineName();
			State = 1567;
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1564;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1563; whiteSpace();
					}
				}

				State = 1566; argList();
				}
				break;
			}
			State = 1569; endOfStatement();
			State = 1571;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1570; block();
				}
			}

			State = 1573; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1575; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1580;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1577; visibility();
				State = 1578; whiteSpace();
				}
			}

			State = 1582; Match(TYPE);
			State = 1583; whiteSpace();
			State = 1584; identifier();
			State = 1585; endOfStatement();
			State = 1589;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) {
				{
				{
				State = 1586; typeStmt_Element();
				}
				}
				State = 1591;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1592; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594; identifier();
			State = 1609;
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				State = 1596;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1595; whiteSpace();
					}
				}

				State = 1598; Match(LPAREN);
				State = 1603;
				switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					State = 1600;
					switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
					case 1:
						{
						State = 1599; whiteSpace();
						}
						break;
					}
					State = 1602; subscripts();
					}
					break;
				}
				State = 1606;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1605; whiteSpace();
					}
				}

				State = 1608; Match(RPAREN);
				}
				break;
			}
			State = 1614;
			switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				State = 1611; whiteSpace();
				State = 1612; asTypeClause();
				}
				break;
			}
			State = 1616; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618; Match(UNLOCK);
			State = 1619; whiteSpace();
			State = 1620; fileNumber();
			State = 1636;
			switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				State = 1622;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1621; whiteSpace();
					}
				}

				State = 1624; Match(COMMA);
				State = 1626;
				switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					State = 1625; whiteSpace();
					}
					break;
				}
				State = 1628; valueStmt(0);
				State = 1634;
				switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					State = 1629; whiteSpace();
					State = 1630; Match(TO);
					State = 1631; whiteSpace();
					State = 1632; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfIsExpressionContext typeOfIsExpression() {
			return GetRuleContext<TypeOfIsExpressionContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 184;
		EnterRecursionRule(_localctx, 184, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683;
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1639; Match(NEW);
				State = 1641;
				switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					State = 1640; whiteSpace();
					}
					break;
				}
				State = 1643; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1644; Match(ADDRESSOF);
				State = 1646;
				switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
				case 1:
					{
					State = 1645; whiteSpace();
					}
					break;
				}
				State = 1648; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1649; unrestrictedIdentifier();
				State = 1651;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1650; whiteSpace();
					}
				}

				State = 1653; Match(ASSIGN);
				State = 1655;
				switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
				case 1:
					{
					State = 1654; whiteSpace();
					}
					break;
				}
				State = 1657; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1659; Match(MINUS);
				State = 1661;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 1660; whiteSpace();
					}
					break;
				}
				State = 1663; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1664; Match(NOT);
				State = 1666;
				switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					State = 1665; whiteSpace();
					}
					break;
				}
				State = 1668; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1669; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1670; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1671; Match(LPAREN);
				State = 1673;
				switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					State = 1672; whiteSpace();
					}
					break;
				}
				State = 1675; valueStmt(0);
				State = 1677;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1676; whiteSpace();
					}
				}

				State = 1679; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1681; typeOfIsExpression();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1682; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1795;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,269,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1793;
					switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1685;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1687;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1686; whiteSpace();
							}
						}

						State = 1689; Match(POW);
						State = 1691;
						switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
						case 1:
							{
							State = 1690; whiteSpace();
							}
							break;
						}
						State = 1693; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1694;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1696;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1695; whiteSpace();
							}
						}

						State = 1698;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1700;
						switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
						case 1:
							{
							State = 1699; whiteSpace();
							}
							break;
						}
						State = 1702; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1703;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1705;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1704; whiteSpace();
							}
						}

						State = 1707; Match(INTDIV);
						State = 1709;
						switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
						case 1:
							{
							State = 1708; whiteSpace();
							}
							break;
						}
						State = 1711; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1712;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1714;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1713; whiteSpace();
							}
						}

						State = 1716; Match(MOD);
						State = 1718;
						switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
						case 1:
							{
							State = 1717; whiteSpace();
							}
							break;
						}
						State = 1720; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1721;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1723;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1722; whiteSpace();
							}
						}

						State = 1725;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1727;
						switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
						case 1:
							{
							State = 1726; whiteSpace();
							}
							break;
						}
						State = 1729; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1730;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1732;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1731; whiteSpace();
							}
						}

						State = 1734; Match(AMPERSAND);
						State = 1736;
						switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
						case 1:
							{
							State = 1735; whiteSpace();
							}
							break;
						}
						State = 1738; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1739;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1741;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1740; whiteSpace();
							}
						}

						State = 1743;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (EQ - 206)) | (1L << (GEQ - 206)) | (1L << (GT - 206)) | (1L << (LEQ - 206)) | (1L << (LT - 206)) | (1L << (NEQ - 206)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1745;
						switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
						case 1:
							{
							State = 1744; whiteSpace();
							}
							break;
						}
						State = 1747; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1748;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1750;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1749; whiteSpace();
							}
						}

						State = 1752; Match(AND);
						State = 1754;
						switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
						case 1:
							{
							State = 1753; whiteSpace();
							}
							break;
						}
						State = 1756; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1757;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1759;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1758; whiteSpace();
							}
						}

						State = 1761; Match(OR);
						State = 1763;
						switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
						case 1:
							{
							State = 1762; whiteSpace();
							}
							break;
						}
						State = 1765; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1766;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1768;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1767; whiteSpace();
							}
						}

						State = 1770; Match(XOR);
						State = 1772;
						switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
						case 1:
							{
							State = 1771; whiteSpace();
							}
							break;
						}
						State = 1774; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1775;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1777;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1776; whiteSpace();
							}
						}

						State = 1779; Match(EQV);
						State = 1781;
						switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
						case 1:
							{
							State = 1780; whiteSpace();
							}
							break;
						}
						State = 1783; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1784;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1786;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1785; whiteSpace();
							}
						}

						State = 1788; Match(IMP);
						State = 1790;
						switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
						case 1:
							{
							State = 1789; whiteSpace();
							}
							break;
						}
						State = 1792; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 1797;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,269,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeOfIsExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfIsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfIsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeOfIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeOfIsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfIsExpressionContext typeOfIsExpression() {
		TypeOfIsExpressionContext _localctx = new TypeOfIsExpressionContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_typeOfIsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1798; Match(TYPEOF);
			State = 1799; whiteSpace();
			State = 1800; valueStmt(0);
			State = 1806;
			switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				State = 1801; whiteSpace();
				State = 1802; Match(IS);
				State = 1803; whiteSpace();
				State = 1804; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1808; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1809; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1810; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1813; whiteSpace();
			State = 1816;
			switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				State = 1814; Match(WITHEVENTS);
				State = 1815; whiteSpace();
				}
				break;
			}
			State = 1818; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820; variableSubStmt();
			State = 1831;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1822;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1821; whiteSpace();
						}
					}

					State = 1824; Match(COMMA);
					State = 1826;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1825; whiteSpace();
						}
					}

					State = 1828; variableSubStmt();
					}
					} 
				}
				State = 1833;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834; identifier();
			State = 1836;
			switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				State = 1835; typeHint();
				}
				break;
			}
			State = 1855;
			switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				State = 1839;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1838; whiteSpace();
					}
				}

				State = 1841; Match(LPAREN);
				State = 1843;
				switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					State = 1842; whiteSpace();
					}
					break;
				}
				State = 1849;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
					{
					State = 1845; subscripts();
					State = 1847;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1846; whiteSpace();
						}
					}

					}
				}

				State = 1851; Match(RPAREN);
				State = 1853;
				switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					State = 1852; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 1860;
			switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				State = 1857; whiteSpace();
				State = 1858; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862; Match(WHILE);
			State = 1863; whiteSpace();
			State = 1864; valueStmt(0);
			State = 1865; endOfStatement();
			State = 1867;
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				State = 1866; block();
				}
				break;
			}
			State = 1869; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871; Match(WIDTH);
			State = 1872; whiteSpace();
			State = 1873; fileNumber();
			State = 1875;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1874; whiteSpace();
				}
			}

			State = 1877; Match(COMMA);
			State = 1879;
			switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				State = 1878; whiteSpace();
				}
				break;
			}
			State = 1881; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WithStmtExpressionContext withStmtExpression() {
			return GetRuleContext<WithStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_withStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1883; Match(WITH);
			State = 1884; whiteSpace();
			State = 1885; withStmtExpression();
			State = 1886; endOfStatement();
			State = 1888;
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				State = 1887; block();
				}
				break;
			}
			State = 1890; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WithStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmtExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmtExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmtExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtExpressionContext withStmtExpression() {
		WithStmtExpressionContext _localctx = new WithStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_withStmtExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; Match(WRITE);
			State = 1895; whiteSpace();
			State = 1896; fileNumber();
			State = 1898;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1897; whiteSpace();
				}
			}

			State = 1900; Match(COMMA);
			State = 1905;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 1902;
				switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					State = 1901; whiteSpace();
					}
					break;
				}
				State = 1904; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			_la = _input.La(1);
			if (_la==HASH) {
				{
				State = 1907; Match(HASH);
				}
			}

			State = 1910; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
			return GetRuleContext<ExplicitCallStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_explicitCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912; Match(CALL);
			State = 1913; whiteSpace();
			State = 1914; explicitCallStmtExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtExpressionContext : ParserRuleContext {
		public ExplicitCallStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmtExpression; } }
	 
		public ExplicitCallStmtExpressionContext() { }
		public virtual void CopyFrom(ExplicitCallStmtExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ECS_MemberCallContext : ExplicitCallStmtExpressionContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_MemberCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ECS_ProcedureCallContext : ExplicitCallStmtExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
		ExplicitCallStmtExpressionContext _localctx = new ExplicitCallStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_explicitCallStmtExpression);
		int _la;
		try {
			int _alt;
			State = 1982;
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				_localctx = new ECS_MemberCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1917;
				switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					State = 1916; implicitCallStmt_InStmt();
					}
					break;
				}
				State = 1919; Match(DOT);
				State = 1920; identifier();
				State = 1922;
				switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					State = 1921; typeHint();
					}
					break;
				}
				State = 1937;
				switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					State = 1925;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1924; whiteSpace();
						}
					}

					State = 1927; Match(LPAREN);
					State = 1929;
					switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
					case 1:
						{
						State = 1928; whiteSpace();
						}
						break;
					}
					State = 1931; argsCall();
					State = 1933;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1932; whiteSpace();
						}
					}

					State = 1935; Match(RPAREN);
					}
					break;
				}
				State = 1948;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,299,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1940;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1939; whiteSpace();
							}
						}

						State = 1942; Match(LPAREN);
						State = 1943; subscripts();
						State = 1944; Match(RPAREN);
						}
						} 
					}
					State = 1950;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,299,_ctx);
				}
				}
				break;

			case 2:
				_localctx = new ECS_ProcedureCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; identifier();
				State = 1953;
				switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					State = 1952; typeHint();
					}
					break;
				}
				State = 1968;
				switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					State = 1956;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1955; whiteSpace();
						}
					}

					State = 1958; Match(LPAREN);
					State = 1960;
					switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
					case 1:
						{
						State = 1959; whiteSpace();
						}
						break;
					}
					State = 1962; argsCall();
					State = 1964;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1963; whiteSpace();
						}
					}

					State = 1966; Match(RPAREN);
					}
					break;
				}
				State = 1979;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1971;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1970; whiteSpace();
							}
						}

						State = 1973; Match(LPAREN);
						State = 1974; subscripts();
						State = 1975; Match(RPAREN);
						}
						} 
					}
					State = 1981;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_implicitCallStmt_InBlock);
		try {
			State = 1986;
			switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1984; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1985; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989;
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				State = 1988; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 1992;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1991; whiteSpace();
				}
			}

			State = 1994; Match(DOT);
			State = 1996;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1995; whiteSpace();
				}
			}

			State = 1998; unrestrictedIdentifier();
			State = 2000;
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 1999; typeHint();
				}
				break;
			}
			State = 2005;
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 2002; whiteSpace();
				State = 2003; argsCall();
				}
				break;
			}
			State = 2011;
			switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				State = 2008;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2007; whiteSpace();
					}
				}

				State = 2010; dictionaryCallStmt();
				}
				break;
			}
			State = 2022;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,317,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2014;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2013; whiteSpace();
						}
					}

					State = 2016; Match(LPAREN);
					State = 2017; subscripts();
					State = 2018; Match(RPAREN);
					}
					} 
				}
				State = 2024;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,317,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2025; identifier();
			State = 2029;
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				State = 2026; whiteSpace();
				State = 2027; argsCall();
				}
				break;
			}
			State = 2040;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,320,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2032;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2031; whiteSpace();
						}
					}

					State = 2034; Match(LPAREN);
					State = 2035; subscripts();
					State = 2036; Match(RPAREN);
					}
					} 
				}
				State = 2042;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,320,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_implicitCallStmt_InStmt);
		try {
			State = 2047;
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2043; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2044; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2045; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2046; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049; identifier();
			State = 2051;
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 2050; typeHint();
				}
				break;
			}
			State = 2057;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				State = 2054;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2053; whiteSpace();
					}
				}

				State = 2056; dictionaryCallStmt();
				}
				break;
			}
			State = 2068;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,326,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2060;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2059; whiteSpace();
						}
					}

					State = 2062; Match(LPAREN);
					State = 2063; subscripts();
					State = 2064; Match(RPAREN);
					}
					} 
				}
				State = 2070;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,326,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073;
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				State = 2071; identifier();
				}
				break;

			case 2:
				{
				State = 2072; baseType();
				}
				break;
			}
			State = 2076;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2075; typeHint();
				}
			}

			State = 2079;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2078; whiteSpace();
				}
			}

			State = 2081; Match(LPAREN);
			State = 2083;
			switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				State = 2082; whiteSpace();
				}
				break;
			}
			State = 2089;
			switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				State = 2085; argsCall();
				State = 2087;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2086; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2091; Match(RPAREN);
			State = 2096;
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				State = 2093;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2092; whiteSpace();
					}
				}

				State = 2095; dictionaryCallStmt();
				}
				break;
			}
			State = 2107;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,336,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2099;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2098; whiteSpace();
						}
					}

					State = 2101; Match(LPAREN);
					State = 2102; subscripts();
					State = 2103; Match(RPAREN);
					}
					} 
				}
				State = 2109;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,336,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallUnrestrictedContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
		ICS_S_VariableOrProcedureCallUnrestrictedContext _localctx = new ICS_S_VariableOrProcedureCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_iCS_S_VariableOrProcedureCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2110; unrestrictedIdentifier();
			State = 2112;
			switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				State = 2111; typeHint();
				}
				break;
			}
			State = 2118;
			switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				State = 2115;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2114; whiteSpace();
					}
				}

				State = 2117; dictionaryCallStmt();
				}
				break;
			}
			State = 2129;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,341,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2121;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2120; whiteSpace();
						}
					}

					State = 2123; Match(LPAREN);
					State = 2124; subscripts();
					State = 2125; Match(RPAREN);
					}
					} 
				}
				State = 2131;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,341,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallUnrestrictedContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
		ICS_S_ProcedureOrArrayCallUnrestrictedContext _localctx = new ICS_S_ProcedureOrArrayCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_iCS_S_ProcedureOrArrayCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2134;
			switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				State = 2132; unrestrictedIdentifier();
				}
				break;

			case 2:
				{
				State = 2133; baseType();
				}
				break;
			}
			State = 2137;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2136; typeHint();
				}
			}

			State = 2140;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2139; whiteSpace();
				}
			}

			State = 2142; Match(LPAREN);
			State = 2144;
			switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				State = 2143; whiteSpace();
				}
				break;
			}
			State = 2150;
			switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				State = 2146; argsCall();
				State = 2148;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2147; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2152; Match(RPAREN);
			State = 2157;
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				State = 2154;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2153; whiteSpace();
					}
				}

				State = 2156; dictionaryCallStmt();
				}
				break;
			}
			State = 2168;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,351,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2160;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2159; whiteSpace();
						}
					}

					State = 2162; Match(LPAREN);
					State = 2163; subscripts();
					State = 2164; Match(RPAREN);
					}
					} 
				}
				State = 2170;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,351,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2173;
			switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				State = 2171; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2172; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2179;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2175; iCS_S_MemberCall();
					State = 2177;
					switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
					case 1:
						{
						State = 2176; whiteSpace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2181;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,354,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2187;
			switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				State = 2184;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2183; whiteSpace();
					}
				}

				State = 2186; dictionaryCallStmt();
				}
				break;
			}
			State = 2198;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,358,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2190;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2189; whiteSpace();
						}
					}

					State = 2192; Match(LPAREN);
					State = 2193; subscripts();
					State = 2194; Match(RPAREN);
					}
					} 
				}
				State = 2200;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,358,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallUnrestrictedContext>(0);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallUnrestrictedContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			_la = _input.La(1);
			if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2203;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2202; whiteSpace();
				}
			}

			State = 2207;
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				State = 2205; iCS_S_VariableOrProcedureCallUnrestricted();
				}
				break;

			case 2:
				{
				State = 2206; iCS_S_ProcedureOrArrayCallUnrestricted();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2210;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2209; whiteSpace();
				}
			}

			State = 2212; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2215;
					switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
					case 1:
						{
						State = 2214; argCall();
						}
						break;
					}
					State = 2218;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2217; whiteSpace();
						}
					}

					State = 2220;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2222;
					switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						State = 2221; whiteSpace();
						}
						break;
					}
					}
					} 
				}
				State = 2228;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			}
			State = 2229; argCall();
			State = 2242;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,369,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2231;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2230; whiteSpace();
						}
					}

					State = 2233;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2235;
					switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
					case 1:
						{
						State = 2234; whiteSpace();
						}
						break;
					}
					State = 2238;
					switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
					case 1:
						{
						State = 2237; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2244;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,369,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246;
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				State = 2245; Match(LPAREN);
				}
				break;
			}
			State = 2250;
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				State = 2248;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2249; whiteSpace();
				}
				break;
			}
			State = 2253;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 2252; Match(RPAREN);
				}
			}

			State = 2255; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2257; Match(EXCLAMATIONPOINT);
			State = 2259;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2258; whiteSpace();
				}
			}

			State = 2261; unrestrictedIdentifier();
			State = 2263;
			switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				State = 2262; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2265; Match(LPAREN);
			State = 2283;
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 2267;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2266; whiteSpace();
					}
				}

				State = 2269; arg();
				State = 2280;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,378,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2271;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2270; whiteSpace();
							}
						}

						State = 2273; Match(COMMA);
						State = 2275;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2274; whiteSpace();
							}
						}

						State = 2277; arg();
						}
						} 
					}
					State = 2282;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,378,_ctx);
				}
				}
				break;
			}
			State = 2286;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2285; whiteSpace();
				}
			}

			State = 2288; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2292;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2290; Match(OPTIONAL);
				State = 2291; whiteSpace();
				}
				break;
			}
			State = 2296;
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 2294;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2295; whiteSpace();
				}
				break;
			}
			State = 2300;
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2298; Match(PARAMARRAY);
				State = 2299; whiteSpace();
				}
				break;
			}
			State = 2302; unrestrictedIdentifier();
			State = 2304;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2303; typeHint();
				}
			}

			State = 2314;
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				State = 2307;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2306; whiteSpace();
					}
				}

				State = 2309; Match(LPAREN);
				State = 2311;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2310; whiteSpace();
					}
				}

				State = 2313; Match(RPAREN);
				}
				break;
			}
			State = 2320;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2317;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2316; whiteSpace();
					}
				}

				State = 2319; asTypeClause();
				}
				break;
			}
			State = 2326;
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 2323;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2322; whiteSpace();
					}
				}

				State = 2325; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328; Match(EQ);
			State = 2330;
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				State = 2329; whiteSpace();
				}
				break;
			}
			State = 2332; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334; subscript();
			State = 2345;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2336;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2335; whiteSpace();
						}
					}

					State = 2338; Match(COMMA);
					State = 2340;
					switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
					case 1:
						{
						State = 2339; whiteSpace();
						}
						break;
					}
					State = 2342; subscript();
					}
					} 
				}
				State = 2347;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2353;
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				State = 2348; valueStmt(0);
				State = 2349; whiteSpace();
				State = 2350; Match(TO);
				State = 2351; whiteSpace();
				}
				break;
			}
			State = 2355; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public MarkerKeywordContext markerKeyword() {
			return GetRuleContext<MarkerKeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_unrestrictedIdentifier);
		try {
			State = 2360;
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2357; identifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2358; statementKeyword();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2359; markerKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_identifier);
		try {
			State = 2364;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2362; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END_SELECT:
			case END_WITH:
			case END:
			case EQV:
			case ERROR:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON_ERROR:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2363; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366; Match(AS);
			State = 2368;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2367; whiteSpace();
				}
			}

			State = 2372;
			switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				State = 2370; Match(NEW);
				State = 2371; whiteSpace();
				}
				break;
			}
			State = 2374; type();
			State = 2379;
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2376;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2375; whiteSpace();
					}
				}

				State = 2378; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2381;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DATE - 68)) | (1L << (DOUBLE - 68)) | (1L << (INTEGER - 68)) | (1L << (LONG - 68)))) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (SINGLE - 178)) | (1L << (STRING - 178)) | (1L << (VARIANT - 178)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2383;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (EQ - 206)) | (1L << (GEQ - 206)) | (1L << (GT - 206)) | (1L << (LEQ - 206)) | (1L << (LT - 206)) | (1L << (NEQ - 206)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> DOT() { return GetTokens(VBAParser.DOT); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> EXCLAMATIONPOINT() { return GetTokens(VBAParser.EXCLAMATIONPOINT); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT(int i) {
			return GetToken(VBAParser.EXCLAMATIONPOINT, i);
		}
		public ITerminalNode DOT(int i) {
			return GetToken(VBAParser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385; identifier();
			State = 2390;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,403,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2386;
					_la = _input.La(1);
					if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2387; identifier();
					}
					} 
				}
				State = 2392;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,403,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393; Match(MULT);
			State = 2395;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2394; whiteSpace();
				}
			}

			State = 2399;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2397; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END_SELECT:
			case END_WITH:
			case END:
			case EQV:
			case ERROR:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON_ERROR:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				{
				State = 2398; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelDefinitionContext : ParserRuleContext {
		public StatementLabelContext statementLabel() {
			return GetRuleContext<StatementLabelContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public StatementLabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelDefinitionContext statementLabelDefinition() {
		StatementLabelDefinitionContext _localctx = new StatementLabelDefinitionContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_statementLabelDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2401; statementLabel();
			State = 2403;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2402; whiteSpace();
				}
			}

			State = 2405; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public StatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelContext statementLabel() {
		StatementLabelContext _localctx = new StatementLabelContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_statementLabel);
		try {
			State = 2409;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2407; identifierStatementLabel();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2408; lineNumberLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementLabelContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IdentifierStatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementLabelContext identifierStatementLabel() {
		IdentifierStatementLabelContext _localctx = new IdentifierStatementLabelContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_identifierStatementLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2411; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberLabelContext : ParserRuleContext {
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberLabelContext lineNumberLabel() {
		LineNumberLabelContext _localctx = new LineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_lineNumberLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2413; numberLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_literal);
		try {
			State = 2423;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2415; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2416; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2417; Match(STRINGLITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2418; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2419; Match(FALSE);
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2420; Match(NOTHING);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2421; Match(NULL);
				}
				break;
			case EMPTY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2422; Match(EMPTY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			_la = _input.La(1);
			if ( !(((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OCTLITERAL - 226)) | (1L << (HEXLITERAL - 226)) | (1L << (FLOATLITERAL - 226)) | (1L << (INTEGERLITERAL - 226)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2429;
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				State = 2427; baseType();
				}
				break;

			case 2:
				{
				State = 2428; complexType();
				}
				break;
			}
			State = 2439;
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2432;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2431; whiteSpace();
					}
				}

				State = 2434; Match(LPAREN);
				State = 2436;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2435; whiteSpace();
					}
				}

				State = 2438; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2441;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2443;
			_la = _input.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode MIDTYPESUFFIX() { return GetToken(VBAParser.MIDTYPESUFFIX, 0); }
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode MIDBTYPESUFFIX() { return GetToken(VBAParser.MIDBTYPESUFFIX, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode RESUME_NEXT() { return GetToken(VBAParser.RESUME_NEXT, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2445;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerKeywordContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public MarkerKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkerKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkerKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerKeywordContext markerKeyword() {
		MarkerKeywordContext _localctx = new MarkerKeywordContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_markerKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2447; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2449;
			_la = _input.La(1);
			if ( !(((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (EXIT - 22)) | (1L << (OPTION - 22)) | (1L << (CALL - 22)) | (1L << (CASE - 22)) | (1L << (CLOSE - 22)) | (1L << (CONST - 22)) | (1L << (DECLARE - 22)) | (1L << (DEFBOOL - 22)) | (1L << (DEFBYTE - 22)) | (1L << (DEFDATE - 22)) | (1L << (DEFDBL - 22)) | (1L << (DEFCUR - 22)) | (1L << (DEFINT - 22)) | (1L << (DEFLNG - 22)) | (1L << (DEFLNGLNG - 22)) | (1L << (DEFLNGPTR - 22)) | (1L << (DEFOBJ - 22)) | (1L << (DEFSNG - 22)) | (1L << (DEFSTR - 22)) | (1L << (DEFVAR - 22)) | (1L << (DIM - 22)) | (1L << (DO - 22)))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (ELSE - 87)) | (1L << (ELSEIF - 87)) | (1L << (ENUM - 87)) | (1L << (ERASE - 87)) | (1L << (EVENT - 87)) | (1L << (FRIEND - 87)) | (1L << (FOR - 87)) | (1L << (FUNCTION - 87)) | (1L << (GET - 87)) | (1L << (GLOBAL - 87)) | (1L << (GOSUB - 87)) | (1L << (GOTO - 87)) | (1L << (IF - 87)) | (1L << (IMPLEMENTS - 87)) | (1L << (INPUT - 87)) | (1L << (LOCK - 87)) | (1L << (LOOP - 87)) | (1L << (LET - 87)) | (1L << (LSET - 87)) | (1L << (NEXT - 87)) | (1L << (ON - 87)) | (1L << (OPEN - 87)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (PRINT - 156)) | (1L << (PRIVATE - 156)) | (1L << (PUBLIC - 156)) | (1L << (PUT - 156)) | (1L << (RAISEEVENT - 156)) | (1L << (REDIM - 156)) | (1L << (RESUME - 156)) | (1L << (RETURN - 156)) | (1L << (RSET - 156)) | (1L << (SEEK - 156)) | (1L << (SELECT - 156)) | (1L << (SET - 156)) | (1L << (STATIC - 156)) | (1L << (STOP - 156)) | (1L << (SUB - 156)) | (1L << (TYPE - 156)) | (1L << (UNLOCK - 156)) | (1L << (WEND - 156)) | (1L << (WHILE - 156)) | (1L << (WITH - 156)) | (1L << (WRITE - 156)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public CommentOrAnnotationContext commentOrAnnotation() {
			return GetRuleContext<CommentOrAnnotationContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_endOfLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2452;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2451; whiteSpace();
				}
			}

			State = 2455;
			_la = _input.La(1);
			if (_la==REM || _la==SINGLEQUOTE) {
				{
				State = 2454; commentOrAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			State = 2479;
			switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2473;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,419,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2469;
						switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
						case 1:
							{
							{
							State = 2457; endOfLine();
							State = 2458; Match(NEWLINE);
							State = 2460;
							switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
							case 1:
								{
								State = 2459; whiteSpace();
								}
								break;
							}
							}
							}
							break;

						case 2:
							{
							{
							State = 2463;
							_la = _input.La(1);
							if (_la==WS || _la==LINE_CONTINUATION) {
								{
								State = 2462; whiteSpace();
								}
							}

							State = 2465; Match(COLON);
							State = 2467;
							switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
							case 1:
								{
								State = 2466; whiteSpace();
								}
								break;
							}
							}
							}
							break;
						}
						}
						} 
					}
					State = 2475;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,419,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2476; endOfLine();
				State = 2477; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentOrAnnotationContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public CommentOrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentOrAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentOrAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentOrAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentOrAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentOrAnnotationContext commentOrAnnotation() {
		CommentOrAnnotationContext _localctx = new CommentOrAnnotationContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_commentOrAnnotation);
		try {
			State = 2484;
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2481; annotationList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2482; comment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2483; remComment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2486; Match(REM);
			State = 2488;
			switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				State = 2487; whiteSpace();
				}
				break;
			}
			State = 2490; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2492; Match(SINGLEQUOTE);
			State = 2493; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public CommentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBodyContext commentBody() {
		CommentBodyContext _localctx = new CommentBodyContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_commentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << COMMA) | (1L << COLON) | (1L << SEMICOLON) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_ENUM - 64)) | (1L << (END_FUNCTION - 64)) | (1L << (END_IF - 64)) | (1L << (END_PROPERTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_SUB - 64)) | (1L << (END_TYPE - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OPTION_BASE - 128)) | (1L << (OPTION_EXPLICIT - 128)) | (1L << (OPTION_COMPARE - 128)) | (1L << (OPTION_PRIVATE_MODULE - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (ASSIGN - 192)) | (1L << (DIV - 192)) | (1L << (INTDIV - 192)) | (1L << (EQ - 192)) | (1L << (GEQ - 192)) | (1L << (GT - 192)) | (1L << (LEQ - 192)) | (1L << (LPAREN - 192)) | (1L << (LT - 192)) | (1L << (MINUS - 192)) | (1L << (MULT - 192)) | (1L << (NEQ - 192)) | (1L << (PLUS - 192)) | (1L << (POW - 192)) | (1L << (RPAREN - 192)) | (1L << (HASHCONST - 192)) | (1L << (HASHIF - 192)) | (1L << (HASHELSEIF - 192)) | (1L << (HASHELSE - 192)) | (1L << (HASHENDIF - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (R_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (SINGLEQUOTE - 192)) | (1L << (UNDERSCORE - 192)) | (1L << (WS - 192)) | (1L << (GUIDLITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (ERRORCHAR - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 2497;
				switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					State = 2495; Match(LINE_CONTINUATION);
					}
					break;

				case 2:
					{
					State = 2496;
					_la = _input.La(1);
					if ( _la <= 0 || (_la==NEWLINE) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				}
				State = 2501;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> AT() { return GetTokens(VBAParser.AT); }
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode AT(int i) {
			return GetToken(VBAParser.AT, i);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2502; Match(SINGLEQUOTE);
			State = 2508;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2503; Match(AT);
				State = 2504; annotation();
				State = 2506;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2505; whiteSpace();
					}
				}

				}
				}
				State = 2510;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2512; annotationName();
			State = 2514;
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 2513; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2578;
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2518; whiteSpace();
				State = 2519; annotationArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2521; whiteSpace();
				State = 2522; annotationArg();
				State = 2531;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2524;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2523; whiteSpace();
							}
						}

						State = 2526; Match(COMMA);
						State = 2528;
						switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
						case 1:
							{
							State = 2527; whiteSpace();
							}
							break;
						}
						State = 2530; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2533;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,430,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2536;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2535; whiteSpace();
					}
				}

				State = 2538; Match(LPAREN);
				State = 2540;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2539; whiteSpace();
					}
				}

				State = 2542; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2544;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2543; whiteSpace();
					}
				}

				State = 2546; Match(LPAREN);
				State = 2548;
				switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					State = 2547; whiteSpace();
					}
					break;
				}
				State = 2550; annotationArg();
				State = 2552;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2551; whiteSpace();
					}
				}

				State = 2554; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2557;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2556; whiteSpace();
					}
				}

				State = 2559; Match(LPAREN);
				State = 2560; annotationArg();
				State = 2569;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2562;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2561; whiteSpace();
							}
						}

						State = 2564; Match(COMMA);
						State = 2566;
						switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
						case 1:
							{
							State = 2565; whiteSpace();
							}
							break;
						}
						State = 2568; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2571;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,439,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2574;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2573; whiteSpace();
					}
				}

				State = 2576; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_annotationArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2580; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2583;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2582;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2585;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return upperCaseA_sempred((UpperCaseAContext)_localctx, predIndex);

		case 26: return upperCaseZ_sempred((UpperCaseZContext)_localctx, predIndex);

		case 92: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 14);

		case 3: return Precpred(_ctx, 12);

		case 4: return Precpred(_ctx, 11);

		case 5: return Precpred(_ctx, 10);

		case 6: return Precpred(_ctx, 9);

		case 7: return Precpred(_ctx, 8);

		case 8: return Precpred(_ctx, 7);

		case 9: return Precpred(_ctx, 5);

		case 10: return Precpred(_ctx, 4);

		case 11: return Precpred(_ctx, 3);

		case 12: return Precpred(_ctx, 2);

		case 13: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool upperCaseZ_sempred(UpperCaseZContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _input.Lt(1).Text.Equals("Z");
		}
		return true;
	}
	private bool upperCaseA_sempred(UpperCaseAContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _input.Lt(1).Text.Equals("A");
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xF7\xA1E\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x3\x2\x3\x2"+
		"\x3\x3\x5\x3\x13C\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x142\n\x3\x3\x3\x5"+
		"\x3\x145\n\x3\x3\x3\x3\x3\x5\x3\x149\n\x3\x3\x3\x3\x3\x5\x3\x14D\n\x3"+
		"\x3\x3\x3\x3\x5\x3\x151\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"\x159\n\x4\x3\x4\x5\x4\x15C\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x166\n\x5\x5\x5\x168\n\x5\x3\x5\x3\x5\x6\x5\x16C\n\x5"+
		"\r\x5\xE\x5\x16D\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x174\n\x6\f\x6\xE\x6\x177"+
		"\v\x6\x3\x6\x3\x6\a\x6\x17B\n\x6\f\x6\xE\x6\x17E\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x183\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x6\a\x18A\n\a\r\a\xE\a\x18B"+
		"\x3\b\x3\b\x3\b\x3\b\a\b\x192\n\b\f\b\xE\b\x195\v\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x1A3\n\t\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1AE\n\n\x3\v\x3\v\x3\v\x3\v\a\v"+
		"\x1B4\n\v\f\v\xE\v\x1B7\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1C0"+
		"\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\x1C6\n\r\x3\r\x3\r\x5\r\x1CA\n\r\x3\r\x3"+
		"\r\x5\r\x1CE\n\r\x3\r\x3\r\x5\r\x1D2\n\r\x3\r\a\r\x1D5\n\r\f\r\xE\r\x1D8"+
		"\v\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x1E2\n"+
		"\x10\f\x10\xE\x10\x1E5\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x218\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5"+
		"\x12\x21E\n\x12\x3\x12\x3\x12\x5\x12\x222\n\x12\x3\x12\a\x12\x225\n\x12"+
		"\f\x12\xE\x12\x228\v\x12\x5\x12\x22A\n\x12\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\x22F\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x235\n\x13\x3\x13\x3\x13"+
		"\x5\x13\x239\n\x13\x3\x13\a\x13\x23C\n\x13\f\x13\xE\x13\x23F\v\x13\x3"+
		"\x14\x3\x14\x5\x14\x243\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x248\n\x14\x3"+
		"\x14\x5\x14\x24B\n\x14\x3\x14\x3\x14\x5\x14\x24F\n\x14\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x256\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x25C\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x262\n\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x26D\n\x15\x3"+
		"\x15\x5\x15\x270\n\x15\x3\x15\x5\x15\x273\n\x15\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x278\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x27E\n\x16\x3\x16\x3"+
		"\x16\x5\x16\x282\n\x16\x3\x16\a\x16\x285\n\x16\f\x16\xE\x16\x288\v\x16"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5\x18\x28F\n\x18\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x5\x1A\x295\n\x1A\x3\x1A\x3\x1A\x5\x1A\x299\n\x1A\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x5\x1D\x2A5"+
		"\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2A9\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1F\x3\x1F\x3 \x3 \x3 \x5 \x2B4\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3"+
		" \x5 \x2BF\n \x3 \x3 \x3 \x3 \x3 \x5 \x2C6\n \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x5 \x2CE\n \x3!\x3!\x3!\x5!\x2D3\n!\x3!\x3!\x3!\x3!\x3!\a!\x2DA\n!\f"+
		"!\xE!\x2DD\v!\x3!\x3!\x3\"\x3\"\x5\"\x2E3\n\"\x3\"\x3\"\x5\"\x2E7\n\""+
		"\x3\"\x5\"\x2EA\n\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x2F4\n$\x3$"+
		"\x3$\x5$\x2F8\n$\x3$\a$\x2FB\n$\f$\xE$\x2FE\v$\x3%\x3%\x3%\x3%\x3&\x3"+
		"&\x3&\x5&\x307\n&\x3&\x3&\x3&\x3&\x5&\x30D\n&\x3&\x3&\x3\'\x3\'\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x31E\n(\x3(\x3(\x3(\x3(\x5("+
		"\x324\n(\x3)\x3)\x3)\x3)\x5)\x32A\n)\x3)\x3)\x5)\x32E\n)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x33A\n)\x3)\x3)\x5)\x33E\n)\x3)\x3)\x3)"+
		"\x3)\x5)\x344\n)\x3*\x3*\x3*\x5*\x349\n*\x3*\x3*\x5*\x34D\n*\x3*\x3*\x5"+
		"*\x351\n*\x3*\x3*\x5*\x355\n*\x3*\x5*\x358\n*\x3*\x5*\x35B\n*\x3*\x5*"+
		"\x35E\n*\x3*\x5*\x361\n*\x3*\x3*\x5*\x365\n*\x3*\x3*\x3+\x3+\x3,\x3,\x3"+
		",\x3,\x5,\x36F\n,\x3,\x3,\x5,\x373\n,\x3,\x5,\x376\n,\x3,\x5,\x379\n,"+
		"\x3,\x3,\x5,\x37D\n,\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x3/\x3/\x3"+
		"/\x3/\x3/\x3/\x3/\x5/\x390\n/\x3/\a/\x393\n/\f/\xE/\x396\v/\x3/\x5/\x399"+
		"\n/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x3A4"+
		"\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x3AC\n\x30\x3"+
		"\x30\x5\x30\x3AF\n\x30\x5\x30\x3B1\n\x30\x3\x31\x3\x31\x3\x31\x5\x31\x3B6"+
		"\n\x31\x3\x32\x3\x32\x5\x32\x3BA\n\x32\x3\x33\x3\x33\x5\x33\x3BE\n\x33"+
		"\x3\x33\x3\x33\x5\x33\x3C2\n\x33\x3\x33\x3\x33\x5\x33\x3C6\n\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x3CC\n\x33\x3\x34\x3\x34\x5\x34\x3D0\n\x34"+
		"\x3\x34\x3\x34\x5\x34\x3D4\n\x34\x3\x34\x3\x34\x3\x34\x5\x34\x3D9\n\x34"+
		"\x3\x34\x3\x34\x3\x35\x3\x35\x5\x35\x3DF\n\x35\x3\x35\x5\x35\x3E2\n\x35"+
		"\x3\x36\x3\x36\x5\x36\x3E6\n\x36\x3\x36\x3\x36\x5\x36\x3EA\n\x36\x3\x36"+
		"\x5\x36\x3ED\n\x36\a\x36\x3EF\n\x36\f\x36\xE\x36\x3F2\v\x36\x3\x36\x3"+
		"\x36\x5\x36\x3F6\n\x36\x5\x36\x3F8\n\x36\x3\x36\x3\x36\x5\x36\x3FC\n\x36"+
		"\x3\x36\x3\x36\x5\x36\x400\n\x36\x3\x36\x5\x36\x403\n\x36\a\x36\x405\n"+
		"\x36\f\x36\xE\x36\x408\v\x36\x5\x36\x40A\n\x36\x3\x37\x3\x37\x3\x38\x3"+
		"\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x5:\x418\n:\x3:\x3:\x5"+
		":\x41C\n:\x3:\x6:\x41F\n:\r:\xE:\x420\x3;\x3;\x5;\x425\n;\x3;\x3;\x5;"+
		"\x429\n;\x3;\x3;\x5;\x42D\n;\x3;\x3;\x3<\x3<\x3<\x3<\x5<\x435\n<\x3<\x3"+
		"<\x5<\x439\n<\x3<\x3<\x3=\x3=\x3=\x3=\x5=\x441\n=\x3=\x3=\x5=\x445\n="+
		"\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x44D\n=\x5=\x44F\n=\x3>\x3>\x3>\x3>\x5>\x455"+
		"\n>\x3>\x3>\x5>\x459\n>\x3>\x3>\x3?\x3?\x5?\x45F\n?\x3?\x3?\x5?\x463\n"+
		"?\x3?\x3?\x5?\x467\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@"+
		"\x5@\x475\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5"+
		"\x41\x47F\n\x41\x3\x41\x3\x41\x5\x41\x483\n\x41\x3\x41\a\x41\x486\n\x41"+
		"\f\x41\xE\x41\x489\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x5\x42\x493\n\x42\x3\x42\x3\x42\x5\x42\x497\n\x42\x3\x42\a"+
		"\x42\x49A\n\x42\f\x42\xE\x42\x49D\v\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x4AB\n\x43"+
		"\x3\x43\x3\x43\x3\x43\x5\x43\x4B0\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x5\x43\x4B9\n\x43\x3\x43\x3\x43\x5\x43\x4BD\n\x43\x3"+
		"\x43\x3\x43\x5\x43\x4C1\n\x43\x3\x44\x3\x44\x5\x44\x4C5\n\x44\x3\x44\x3"+
		"\x44\x5\x44\x4C9\n\x44\x3\x44\x5\x44\x4CC\n\x44\a\x44\x4CE\n\x44\f\x44"+
		"\xE\x44\x4D1\v\x44\x3\x44\x5\x44\x4D4\n\x44\x3\x44\x5\x44\x4D7\n\x44\x3"+
		"\x44\x3\x44\x5\x44\x4DB\n\x44\x3\x44\x5\x44\x4DE\n\x44\x6\x44\x4E0\n\x44"+
		"\r\x44\xE\x44\x4E1\x5\x44\x4E4\n\x44\x3\x45\x3\x45\x3\x45\x5\x45\x4E9"+
		"\n\x45\x3\x45\x3\x45\x5\x45\x4ED\n\x45\x3\x45\x3\x45\x5\x45\x4F1\n\x45"+
		"\x3\x45\x3\x45\x5\x45\x4F5\n\x45\x5\x45\x4F7\n\x45\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x5\x46\x4FD\n\x46\x3\x46\x3\x46\x5\x46\x501\n\x46\x3\x46\x5\x46"+
		"\x504\n\x46\x3G\x3G\x3G\x5G\x509\nG\x3G\x3G\x5G\x50D\nG\x3G\x3G\x3G\x3"+
		"G\x5G\x513\nG\x3G\x5G\x516\nG\x3G\x5G\x519\nG\x3G\x3G\x3G\x5G\x51E\nG"+
		"\x3G\x3G\x5G\x522\nG\x3G\x3G\x3H\x3H\x3H\x5H\x529\nH\x3H\x3H\x5H\x52D"+
		"\nH\x3H\x3H\x3H\x3H\x5H\x533\nH\x3H\x5H\x536\nH\x3H\x3H\x5H\x53A\nH\x3"+
		"H\x3H\x3I\x3I\x3I\x5I\x541\nI\x3I\x3I\x5I\x545\nI\x3I\x3I\x3I\x3I\x5I"+
		"\x54B\nI\x3I\x5I\x54E\nI\x3I\x3I\x5I\x552\nI\x3I\x3I\x3J\x3J\x3J\x3J\x5"+
		"J\x55A\nJ\x3J\x3J\x5J\x55E\nJ\x3J\x5J\x561\nJ\x3J\x5J\x564\nJ\x3J\x3J"+
		"\x5J\x568\nJ\x3J\x3J\x3K\x3K\x3K\x3K\x5K\x570\nK\x3K\x3K\x5K\x574\nK\x3"+
		"K\x3K\x5K\x578\nK\x5K\x57A\nK\x3K\x5K\x57D\nK\x3L\x3L\x3L\x3L\x5L\x583"+
		"\nL\x3L\x3L\x5L\x587\nL\x3L\x3L\x5L\x58B\nL\x3L\aL\x58E\nL\fL\xEL\x591"+
		"\vL\x3M\x3M\x5M\x595\nM\x3M\x3M\x5M\x599\nM\x3M\x3M\x5M\x59D\nM\x3M\x3"+
		"M\x3M\x3M\x5M\x5A3\nM\x3N\x3N\x3O\x3O\x3O\x3O\x5O\x5AB\nO\x5O\x5AD\nO"+
		"\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x5Q\x5B5\nQ\x3Q\x3Q\x5Q\x5B9\nQ\x3Q\x3Q\x3R\x3"+
		"R\x3S\x3S\x3S\x3S\x5S\x5C3\nS\x3S\x3S\x5S\x5C7\nS\x3S\x3S\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\aT\x5D2\nT\fT\xET\x5D5\vT\x3T\x3T\x3U\x3U\x5U\x5DB\n"+
		"U\x3U\x3U\x5U\x5DF\nU\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x5EA\nU"+
		"\x3V\x3V\x3V\x3V\x3V\x5V\x5F1\nV\x3W\x3W\x3W\x5W\x5F6\nW\x3W\x3W\x5W\x5FA"+
		"\nW\x3W\aW\x5FD\nW\fW\xEW\x600\vW\x5W\x602\nW\x3X\x3X\x3X\x3X\x5X\x608"+
		"\nX\x3X\x3X\x5X\x60C\nX\x3X\x3X\x3Y\x3Y\x3Y\x5Y\x613\nY\x3Y\x3Y\x5Y\x617"+
		"\nY\x3Y\x3Y\x5Y\x61B\nY\x3Y\x3Y\x5Y\x61F\nY\x3Y\x5Y\x622\nY\x3Y\x3Y\x5"+
		"Y\x626\nY\x3Y\x3Y\x3Z\x3Z\x3[\x3[\x3[\x5[\x62F\n[\x3[\x3[\x3[\x3[\x3["+
		"\a[\x636\n[\f[\xE[\x639\v[\x3[\x3[\x3\\\x3\\\x5\\\x63F\n\\\x3\\\x3\\\x5"+
		"\\\x643\n\\\x3\\\x5\\\x646\n\\\x3\\\x5\\\x649\n\\\x3\\\x5\\\x64C\n\\\x3"+
		"\\\x3\\\x3\\\x5\\\x651\n\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x5]\x659\n]\x3]\x3"+
		"]\x5]\x65D\n]\x3]\x3]\x3]\x3]\x3]\x3]\x5]\x665\n]\x5]\x667\n]\x3^\x3^"+
		"\x3^\x5^\x66C\n^\x3^\x3^\x3^\x5^\x671\n^\x3^\x3^\x3^\x5^\x676\n^\x3^\x3"+
		"^\x5^\x67A\n^\x3^\x3^\x3^\x3^\x5^\x680\n^\x3^\x3^\x3^\x5^\x685\n^\x3^"+
		"\x3^\x3^\x3^\x3^\x5^\x68C\n^\x3^\x3^\x5^\x690\n^\x3^\x3^\x3^\x3^\x5^\x696"+
		"\n^\x3^\x3^\x5^\x69A\n^\x3^\x3^\x5^\x69E\n^\x3^\x3^\x3^\x5^\x6A3\n^\x3"+
		"^\x3^\x5^\x6A7\n^\x3^\x3^\x3^\x5^\x6AC\n^\x3^\x3^\x5^\x6B0\n^\x3^\x3^"+
		"\x3^\x5^\x6B5\n^\x3^\x3^\x5^\x6B9\n^\x3^\x3^\x3^\x5^\x6BE\n^\x3^\x3^\x5"+
		"^\x6C2\n^\x3^\x3^\x3^\x5^\x6C7\n^\x3^\x3^\x5^\x6CB\n^\x3^\x3^\x3^\x5^"+
		"\x6D0\n^\x3^\x3^\x5^\x6D4\n^\x3^\x3^\x3^\x5^\x6D9\n^\x3^\x3^\x5^\x6DD"+
		"\n^\x3^\x3^\x3^\x5^\x6E2\n^\x3^\x3^\x5^\x6E6\n^\x3^\x3^\x3^\x5^\x6EB\n"+
		"^\x3^\x3^\x5^\x6EF\n^\x3^\x3^\x3^\x5^\x6F4\n^\x3^\x3^\x5^\x6F8\n^\x3^"+
		"\x3^\x3^\x5^\x6FD\n^\x3^\x3^\x5^\x701\n^\x3^\a^\x704\n^\f^\xE^\x707\v"+
		"^\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x5_\x711\n_\x3`\x3`\x3`\x5`\x716\n`"+
		"\x3`\x3`\x3`\x5`\x71B\n`\x3`\x3`\x3\x61\x3\x61\x5\x61\x721\n\x61\x3\x61"+
		"\x3\x61\x5\x61\x725\n\x61\x3\x61\a\x61\x728\n\x61\f\x61\xE\x61\x72B\v"+
		"\x61\x3\x62\x3\x62\x5\x62\x72F\n\x62\x3\x62\x5\x62\x732\n\x62\x3\x62\x3"+
		"\x62\x5\x62\x736\n\x62\x3\x62\x3\x62\x5\x62\x73A\n\x62\x5\x62\x73C\n\x62"+
		"\x3\x62\x3\x62\x5\x62\x740\n\x62\x5\x62\x742\n\x62\x3\x62\x3\x62\x3\x62"+
		"\x5\x62\x747\n\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x74E\n\x63"+
		"\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x756\n\x64\x3\x64\x3"+
		"\x64\x5\x64\x75A\n\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x5\x65\x763\n\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x5g\x76D"+
		"\ng\x3g\x3g\x5g\x771\ng\x3g\x5g\x774\ng\x3h\x5h\x777\nh\x3h\x3h\x3i\x3"+
		"i\x3i\x3i\x3j\x5j\x780\nj\x3j\x3j\x3j\x5j\x785\nj\x3j\x5j\x788\nj\x3j"+
		"\x3j\x5j\x78C\nj\x3j\x3j\x5j\x790\nj\x3j\x3j\x5j\x794\nj\x3j\x5j\x797"+
		"\nj\x3j\x3j\x3j\x3j\aj\x79D\nj\fj\xEj\x7A0\vj\x3j\x3j\x5j\x7A4\nj\x3j"+
		"\x5j\x7A7\nj\x3j\x3j\x5j\x7AB\nj\x3j\x3j\x5j\x7AF\nj\x3j\x3j\x5j\x7B3"+
		"\nj\x3j\x5j\x7B6\nj\x3j\x3j\x3j\x3j\aj\x7BC\nj\fj\xEj\x7BF\vj\x5j\x7C1"+
		"\nj\x3k\x3k\x5k\x7C5\nk\x3l\x5l\x7C8\nl\x3l\x5l\x7CB\nl\x3l\x3l\x5l\x7CF"+
		"\nl\x3l\x3l\x5l\x7D3\nl\x3l\x3l\x3l\x5l\x7D8\nl\x3l\x5l\x7DB\nl\x3l\x5"+
		"l\x7DE\nl\x3l\x5l\x7E1\nl\x3l\x3l\x3l\x3l\al\x7E7\nl\fl\xEl\x7EA\vl\x3"+
		"m\x3m\x3m\x3m\x5m\x7F0\nm\x3m\x5m\x7F3\nm\x3m\x3m\x3m\x3m\am\x7F9\nm\f"+
		"m\xEm\x7FC\vm\x3n\x3n\x3n\x3n\x5n\x802\nn\x3o\x3o\x5o\x806\no\x3o\x5o"+
		"\x809\no\x3o\x5o\x80C\no\x3o\x5o\x80F\no\x3o\x3o\x3o\x3o\ao\x815\no\f"+
		"o\xEo\x818\vo\x3p\x3p\x5p\x81C\np\x3p\x5p\x81F\np\x3p\x5p\x822\np\x3p"+
		"\x3p\x5p\x826\np\x3p\x3p\x5p\x82A\np\x5p\x82C\np\x3p\x3p\x5p\x830\np\x3"+
		"p\x5p\x833\np\x3p\x5p\x836\np\x3p\x3p\x3p\x3p\ap\x83C\np\fp\xEp\x83F\v"+
		"p\x3q\x3q\x5q\x843\nq\x3q\x5q\x846\nq\x3q\x5q\x849\nq\x3q\x5q\x84C\nq"+
		"\x3q\x3q\x3q\x3q\aq\x852\nq\fq\xEq\x855\vq\x3r\x3r\x5r\x859\nr\x3r\x5"+
		"r\x85C\nr\x3r\x5r\x85F\nr\x3r\x3r\x5r\x863\nr\x3r\x3r\x5r\x867\nr\x5r"+
		"\x869\nr\x3r\x3r\x5r\x86D\nr\x3r\x5r\x870\nr\x3r\x5r\x873\nr\x3r\x3r\x3"+
		"r\x3r\ar\x879\nr\fr\xEr\x87C\vr\x3s\x3s\x5s\x880\ns\x3s\x3s\x5s\x884\n"+
		"s\x6s\x886\ns\rs\xEs\x887\x3s\x5s\x88B\ns\x3s\x5s\x88E\ns\x3s\x5s\x891"+
		"\ns\x3s\x3s\x3s\x3s\as\x897\ns\fs\xEs\x89A\vs\x3t\x3t\x5t\x89E\nt\x3t"+
		"\x3t\x5t\x8A2\nt\x3u\x5u\x8A5\nu\x3u\x3u\x3v\x5v\x8AA\nv\x3v\x5v\x8AD"+
		"\nv\x3v\x3v\x5v\x8B1\nv\av\x8B3\nv\fv\xEv\x8B6\vv\x3v\x3v\x5v\x8BA\nv"+
		"\x3v\x3v\x5v\x8BE\nv\x3v\x5v\x8C1\nv\av\x8C3\nv\fv\xEv\x8C6\vv\x3w\x5"+
		"w\x8C9\nw\x3w\x3w\x5w\x8CD\nw\x3w\x5w\x8D0\nw\x3w\x3w\x3x\x3x\x5x\x8D6"+
		"\nx\x3x\x3x\x5x\x8DA\nx\x3y\x3y\x5y\x8DE\ny\x3y\x3y\x5y\x8E2\ny\x3y\x3"+
		"y\x5y\x8E6\ny\x3y\ay\x8E9\ny\fy\xEy\x8EC\vy\x5y\x8EE\ny\x3y\x5y\x8F1\n"+
		"y\x3y\x3y\x3z\x3z\x5z\x8F7\nz\x3z\x3z\x5z\x8FB\nz\x3z\x3z\x5z\x8FF\nz"+
		"\x3z\x3z\x5z\x903\nz\x3z\x5z\x906\nz\x3z\x3z\x5z\x90A\nz\x3z\x5z\x90D"+
		"\nz\x3z\x5z\x910\nz\x3z\x5z\x913\nz\x3z\x5z\x916\nz\x3z\x5z\x919\nz\x3"+
		"{\x3{\x5{\x91D\n{\x3{\x3{\x3|\x3|\x5|\x923\n|\x3|\x3|\x5|\x927\n|\x3|"+
		"\a|\x92A\n|\f|\xE|\x92D\v|\x3}\x3}\x3}\x3}\x3}\x5}\x934\n}\x3}\x3}\x3"+
		"~\x3~\x3~\x5~\x93B\n~\x3\x7F\x3\x7F\x5\x7F\x93F\n\x7F\x3\x80\x3\x80\x5"+
		"\x80\x943\n\x80\x3\x80\x3\x80\x5\x80\x947\n\x80\x3\x80\x3\x80\x5\x80\x94B"+
		"\n\x80\x3\x80\x5\x80\x94E\n\x80\x3\x81\x3\x81\x3\x82\x3\x82\x3\x83\x3"+
		"\x83\x3\x83\a\x83\x957\n\x83\f\x83\xE\x83\x95A\v\x83\x3\x84\x3\x84\x5"+
		"\x84\x95E\n\x84\x3\x84\x3\x84\x5\x84\x962\n\x84\x3\x85\x3\x85\x5\x85\x966"+
		"\n\x85\x3\x85\x3\x85\x3\x86\x3\x86\x5\x86\x96C\n\x86\x3\x87\x3\x87\x3"+
		"\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x5"+
		"\x89\x97A\n\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x5\x8B\x980\n\x8B\x3\x8B\x5"+
		"\x8B\x983\n\x8B\x3\x8B\x3\x8B\x5\x8B\x987\n\x8B\x3\x8B\x5\x8B\x98A\n\x8B"+
		"\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x90\x3\x90"+
		"\x3\x91\x5\x91\x997\n\x91\x3\x91\x5\x91\x99A\n\x91\x3\x92\x3\x92\x3\x92"+
		"\x5\x92\x99F\n\x92\x3\x92\x5\x92\x9A2\n\x92\x3\x92\x3\x92\x5\x92\x9A6"+
		"\n\x92\x5\x92\x9A8\n\x92\a\x92\x9AA\n\x92\f\x92\xE\x92\x9AD\v\x92\x3\x92"+
		"\x3\x92\x3\x92\x5\x92\x9B2\n\x92\x3\x93\x3\x93\x3\x93\x5\x93\x9B7\n\x93"+
		"\x3\x94\x3\x94\x5\x94\x9BB\n\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\x3"+
		"\x96\x3\x96\a\x96\x9C4\n\x96\f\x96\xE\x96\x9C7\v\x96\x3\x97\x3\x97\x3"+
		"\x97\x3\x97\x5\x97\x9CD\n\x97\x6\x97\x9CF\n\x97\r\x97\xE\x97\x9D0\x3\x98"+
		"\x3\x98\x5\x98\x9D5\n\x98\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x5\x9A\x9DF\n\x9A\x3\x9A\x3\x9A\x5\x9A\x9E3\n\x9A\x3\x9A\x6"+
		"\x9A\x9E6\n\x9A\r\x9A\xE\x9A\x9E7\x3\x9A\x5\x9A\x9EB\n\x9A\x3\x9A\x3\x9A"+
		"\x5\x9A\x9EF\n\x9A\x3\x9A\x3\x9A\x5\x9A\x9F3\n\x9A\x3\x9A\x3\x9A\x5\x9A"+
		"\x9F7\n\x9A\x3\x9A\x3\x9A\x5\x9A\x9FB\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A"+
		"\xA00\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xA05\n\x9A\x3\x9A\x3\x9A\x5\x9A"+
		"\xA09\n\x9A\x3\x9A\x6\x9A\xA0C\n\x9A\r\x9A\xE\x9A\xA0D\x3\x9A\x5\x9A\xA11"+
		"\n\x9A\x3\x9A\x3\x9A\x5\x9A\xA15\n\x9A\x3\x9B\x3\x9B\x3\x9C\x6\x9C\xA1A"+
		"\n\x9C\r\x9C\xE\x9C\xA1B\x3\x9C\x2\x2\x3\xBA\x9D\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2"+
		"\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x2\x1B\x5"+
		"\x2;;\x45\x45\xBC\xBC\x4\x2rr\xBA\xBA\x3\x2HT\x4\x2\xC3\xC3\xC7\xC7\x3"+
		"\x2jn\x3\x2\x92\x93\a\x2\x38\x38;;{{\x9B\x9B\xA6\xA6\x4\x2\xA8\xA9\xCB"+
		"\xCB\x4\x2\x85\x87\xB3\xB3\x4\x2))++\x4\x2\xB5\xB5\xBB\xBB\x4\x2\xCE\xCE"+
		"\xD7\xD7\x4\x2\xD6\xD6\xD9\xD9\a\x2||\x83\x83\xD0\xD3\xD5\xD5\xD8\xD8"+
		"\x3\x2,-\x4\x2=>\x9C\x9C\x3\x2=>\r\x2\x13\x13\x1F <<??\x46\x46WW}}\x7F"+
		"\x7F\xB4\xB4\xB9\xB9\xC4\xC4\x3\x2\xE4\xE7\x5\x2,,.\x32\xDA\xDA\x6\x2"+
		"pptt\x9F\x9F\xA4\xA4%\x2\x3\x17\x19#%(\x33\x38:?\x42\x42\x45\x46WW``\x63"+
		"\x64\x66\x66hhjoxxzz|}\x7F\x7F\x82\x87\x89\x8B\x8D\x90\x92\x92\x95\x95"+
		"\x9A\x9D\xA6\xA6\xA8\xA9\xAB\xAC\xB3\xB5\xB7\xB7\xB9\xB9\xBB\xBF\xC1\xC1"+
		"\xC3\xC5\xC8\xC8\xCA\xCC\xF1\xF7!\x2\x18\x18$$@\x41\x43\x44GVYZ\x65\x65"+
		"ggiipwyy{{~~\x80\x81\x88\x88\x8C\x8C\x91\x91\x94\x94\x9E\x9F\xA4\xA5\xA7"+
		"\xA7\xAA\xAA\xAD\xB2\xB6\xB6\xB8\xB8\xBA\xBA\xC0\xC0\xC2\xC2\xC6\xC7\xC9"+
		"\xC9\xCB\xCB\x3\x2\xE9\xE9\x4\x2\xEC\xEC\xEF\xEF\xB9A\x2\x138\x3\x2\x2"+
		"\x2\x4\x13B\x3\x2\x2\x2\x6\x154\x3\x2\x2\x2\b\x15F\x3\x2\x2\x2\n\x171"+
		"\x3\x2\x2\x2\f\x189\x3\x2\x2\x2\xE\x18D\x3\x2\x2\x2\x10\x1A2\x3\x2\x2"+
		"\x2\x12\x1AD\x3\x2\x2\x2\x14\x1AF\x3\x2\x2\x2\x16\x1BF\x3\x2\x2\x2\x18"+
		"\x1C1\x3\x2\x2\x2\x1A\x1D9\x3\x2\x2\x2\x1C\x1DB\x3\x2\x2\x2\x1E\x1DD\x3"+
		"\x2\x2\x2 \x217\x3\x2\x2\x2\"\x219\x3\x2\x2\x2$\x22E\x3\x2\x2\x2&\x240"+
		"\x3\x2\x2\x2(\x255\x3\x2\x2\x2*\x279\x3\x2\x2\x2,\x289\x3\x2\x2\x2.\x28E"+
		"\x3\x2\x2\x2\x30\x290\x3\x2\x2\x2\x32\x292\x3\x2\x2\x2\x34\x29C\x3\x2"+
		"\x2\x2\x36\x29F\x3\x2\x2\x2\x38\x2A2\x3\x2\x2\x2:\x2AC\x3\x2\x2\x2<\x2AE"+
		"\x3\x2\x2\x2>\x2CD\x3\x2\x2\x2@\x2D2\x3\x2\x2\x2\x42\x2E0\x3\x2\x2\x2"+
		"\x44\x2ED\x3\x2\x2\x2\x46\x2EF\x3\x2\x2\x2H\x2FF\x3\x2\x2\x2J\x306\x3"+
		"\x2\x2\x2L\x310\x3\x2\x2\x2N\x312\x3\x2\x2\x2P\x325\x3\x2\x2\x2R\x348"+
		"\x3\x2\x2\x2T\x368\x3\x2\x2\x2V\x36A\x3\x2\x2\x2X\x380\x3\x2\x2\x2Z\x384"+
		"\x3\x2\x2\x2\\\x388\x3\x2\x2\x2^\x3B0\x3\x2\x2\x2`\x3B2\x3\x2\x2\x2\x62"+
		"\x3B9\x3\x2\x2\x2\x64\x3BB\x3\x2\x2\x2\x66\x3CD\x3\x2\x2\x2h\x3DC\x3\x2"+
		"\x2\x2j\x409\x3\x2\x2\x2l\x40B\x3\x2\x2\x2n\x40D\x3\x2\x2\x2p\x40F\x3"+
		"\x2\x2\x2r\x413\x3\x2\x2\x2t\x424\x3\x2\x2\x2v\x430\x3\x2\x2\x2x\x43C"+
		"\x3\x2\x2\x2z\x450\x3\x2\x2\x2|\x45C\x3\x2\x2\x2~\x46A\x3\x2\x2\x2\x80"+
		"\x476\x3\x2\x2\x2\x82\x48A\x3\x2\x2\x2\x84\x49E\x3\x2\x2\x2\x86\x4E3\x3"+
		"\x2\x2\x2\x88\x4F6\x3\x2\x2\x2\x8A\x4F8\x3\x2\x2\x2\x8C\x508\x3\x2\x2"+
		"\x2\x8E\x528\x3\x2\x2\x2\x90\x540\x3\x2\x2\x2\x92\x555\x3\x2\x2\x2\x94"+
		"\x56B\x3\x2\x2\x2\x96\x57E\x3\x2\x2\x2\x98\x592\x3\x2\x2\x2\x9A\x5A4\x3"+
		"\x2\x2\x2\x9C\x5A6\x3\x2\x2\x2\x9E\x5AE\x3\x2\x2\x2\xA0\x5B0\x3\x2\x2"+
		"\x2\xA2\x5BC\x3\x2\x2\x2\xA4\x5BE\x3\x2\x2\x2\xA6\x5CA\x3\x2\x2\x2\xA8"+
		"\x5E9\x3\x2\x2\x2\xAA\x5EB\x3\x2\x2\x2\xAC\x601\x3\x2\x2\x2\xAE\x603\x3"+
		"\x2\x2\x2\xB0\x612\x3\x2\x2\x2\xB2\x629\x3\x2\x2\x2\xB4\x62E\x3\x2\x2"+
		"\x2\xB6\x63C\x3\x2\x2\x2\xB8\x654\x3\x2\x2\x2\xBA\x695\x3\x2\x2\x2\xBC"+
		"\x708\x3\x2\x2\x2\xBE\x715\x3\x2\x2\x2\xC0\x71E\x3\x2\x2\x2\xC2\x72C\x3"+
		"\x2\x2\x2\xC4\x748\x3\x2\x2\x2\xC6\x751\x3\x2\x2\x2\xC8\x75D\x3\x2\x2"+
		"\x2\xCA\x766\x3\x2\x2\x2\xCC\x768\x3\x2\x2\x2\xCE\x776\x3\x2\x2\x2\xD0"+
		"\x77A\x3\x2\x2\x2\xD2\x7C0\x3\x2\x2\x2\xD4\x7C4\x3\x2\x2\x2\xD6\x7C7\x3"+
		"\x2\x2\x2\xD8\x7EB\x3\x2\x2\x2\xDA\x801\x3\x2\x2\x2\xDC\x803\x3\x2\x2"+
		"\x2\xDE\x81B\x3\x2\x2\x2\xE0\x840\x3\x2\x2\x2\xE2\x858\x3\x2\x2\x2\xE4"+
		"\x87F\x3\x2\x2\x2\xE6\x89B\x3\x2\x2\x2\xE8\x8A4\x3\x2\x2\x2\xEA\x8B4\x3"+
		"\x2\x2\x2\xEC\x8C8\x3\x2\x2\x2\xEE\x8D3\x3\x2\x2\x2\xF0\x8DB\x3\x2\x2"+
		"\x2\xF2\x8F6\x3\x2\x2\x2\xF4\x91A\x3\x2\x2\x2\xF6\x920\x3\x2\x2\x2\xF8"+
		"\x933\x3\x2\x2\x2\xFA\x93A\x3\x2\x2\x2\xFC\x93E\x3\x2\x2\x2\xFE\x940\x3"+
		"\x2\x2\x2\x100\x94F\x3\x2\x2\x2\x102\x951\x3\x2\x2\x2\x104\x953\x3\x2"+
		"\x2\x2\x106\x95B\x3\x2\x2\x2\x108\x963\x3\x2\x2\x2\x10A\x96B\x3\x2\x2"+
		"\x2\x10C\x96D\x3\x2\x2\x2\x10E\x96F\x3\x2\x2\x2\x110\x979\x3\x2\x2\x2"+
		"\x112\x97B\x3\x2\x2\x2\x114\x97F\x3\x2\x2\x2\x116\x98B\x3\x2\x2\x2\x118"+
		"\x98D\x3\x2\x2\x2\x11A\x98F\x3\x2\x2\x2\x11C\x991\x3\x2\x2\x2\x11E\x993"+
		"\x3\x2\x2\x2\x120\x996\x3\x2\x2\x2\x122\x9B1\x3\x2\x2\x2\x124\x9B6\x3"+
		"\x2\x2\x2\x126\x9B8\x3\x2\x2\x2\x128\x9BE\x3\x2\x2\x2\x12A\x9C5\x3\x2"+
		"\x2\x2\x12C\x9C8\x3\x2\x2\x2\x12E\x9D2\x3\x2\x2\x2\x130\x9D6\x3\x2\x2"+
		"\x2\x132\xA14\x3\x2\x2\x2\x134\xA16\x3\x2\x2\x2\x136\xA19\x3\x2\x2\x2"+
		"\x138\x139\x5\x4\x3\x2\x139\x3\x3\x2\x2\x2\x13A\x13C\x5\x136\x9C\x2\x13B"+
		"\x13A\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x141"+
		"\x5\x122\x92\x2\x13E\x13F\x5\x6\x4\x2\x13F\x140\x5\x122\x92\x2\x140\x142"+
		"\x3\x2\x2\x2\x141\x13E\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x144\x3"+
		"\x2\x2\x2\x143\x145\x5\b\x5\x2\x144\x143\x3\x2\x2\x2\x144\x145\x3\x2\x2"+
		"\x2\x145\x146\x3\x2\x2\x2\x146\x148\x5\x122\x92\x2\x147\x149\x5\f\a\x2"+
		"\x148\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A"+
		"\x14C\x5\x122\x92\x2\x14B\x14D\x5\xE\b\x2\x14C\x14B\x3\x2\x2\x2\x14C\x14D"+
		"\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x150\x5\x122\x92\x2\x14F\x151"+
		"\x5\x14\v\x2\x150\x14F\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x152\x3"+
		"\x2\x2\x2\x152\x153\x5\x122\x92\x2\x153\x5\x3\x2\x2\x2\x154\x155\a\xC5"+
		"\x2\x2\x155\x156\x5\x136\x9C\x2\x156\x158\x5\x112\x8A\x2\x157\x159\x5"+
		"\x136\x9C\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15B\x3"+
		"\x2\x2\x2\x15A\x15C\a\x42\x2\x2\x15B\x15A\x3\x2\x2\x2\x15B\x15C\x3\x2"+
		"\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x5\x122\x92\x2\x15E\a\x3\x2\x2"+
		"\x2\x15F\x167\a:\x2\x2\x160\x161\x5\x136\x9C\x2\x161\x162\a\xED\x2\x2"+
		"\x162\x163\x5\x136\x9C\x2\x163\x165\x5\xFA~\x2\x164\x166\x5\x136\x9C\x2"+
		"\x165\x164\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x168\x3\x2\x2\x2\x167"+
		"\x160\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16B"+
		"\x5\x122\x92\x2\x16A\x16C\x5\n\x6\x2\x16B\x16A\x3\x2\x2\x2\x16C\x16D\x3"+
		"\x2\x2\x2\x16D\x16B\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x16F\x3\x2"+
		"\x2\x2\x16F\x170\a\x64\x2\x2\x170\t\x3\x2\x2\x2\x171\x175\x5\xFA~\x2\x172"+
		"\x174\x5\x136\x9C\x2\x173\x172\x3\x2\x2\x2\x174\x177\x3\x2\x2\x2\x175"+
		"\x173\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x178\x3\x2\x2\x2\x177\x175"+
		"\x3\x2\x2\x2\x178\x17C\a\xD0\x2\x2\x179\x17B\x5\x136\x9C\x2\x17A\x179"+
		"\x3\x2\x2\x2\x17B\x17E\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17D\x3"+
		"\x2\x2\x2\x17D\x17F\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17F\x182\x5\xBA"+
		"^\x2\x180\x181\a*\x2\x2\x181\x183\x5\x112\x8A\x2\x182\x180\x3\x2\x2\x2"+
		"\x182\x183\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x185\x5\x122\x92\x2"+
		"\x185\v\x3\x2\x2\x2\x186\x187\x5\x18\r\x2\x187\x188\x5\x122\x92\x2\x188"+
		"\x18A\x3\x2\x2\x2\x189\x186\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x189"+
		"\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\r\x3\x2\x2\x2\x18D\x193\x5\x12"+
		"\n\x2\x18E\x18F\x5\x122\x92\x2\x18F\x190\x5\x12\n\x2\x190\x192\x3\x2\x2"+
		"\x2\x191\x18E\x3\x2\x2\x2\x192\x195\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2"+
		"\x193\x194\x3\x2\x2\x2\x194\x196\x3\x2\x2\x2\x195\x193\x3\x2\x2\x2\x196"+
		"\x197\x5\x122\x92\x2\x197\xF\x3\x2\x2\x2\x198\x199\a\x96\x2\x2\x199\x19A"+
		"\x5\x136\x9C\x2\x19A\x19B\x5\x112\x8A\x2\x19B\x1A3\x3\x2\x2\x2\x19C\x19D"+
		"\a\x98\x2\x2\x19D\x19E\x5\x136\x9C\x2\x19E\x19F\t\x2\x2\x2\x19F\x1A3\x3"+
		"\x2\x2\x2\x1A0\x1A3\a\x97\x2\x2\x1A1\x1A3\a\x99\x2\x2\x1A2\x198\x3\x2"+
		"\x2\x2\x1A2\x19C\x3\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A2\x1A1\x3\x2\x2"+
		"\x2\x1A3\x11\x3\x2\x2\x2\x1A4\x1AE\x5(\x15\x2\x1A5\x1AE\x5*\x16\x2\x1A6"+
		"\x1AE\x5@!\x2\x1A7\x1AE\x5J&\x2\x1A8\x1AE\x5$\x13\x2\x1A9\x1AE\x5p\x39"+
		"\x2\x1AA\x1AE\x5\xBE`\x2\x1AB\x1AE\x5\x10\t\x2\x1AC\x1AE\x5\xB4[\x2\x1AD"+
		"\x1A4\x3\x2\x2\x2\x1AD\x1A5\x3\x2\x2\x2\x1AD\x1A6\x3\x2\x2\x2\x1AD\x1A7"+
		"\x3\x2\x2\x2\x1AD\x1A8\x3\x2\x2\x2\x1AD\x1A9\x3\x2\x2\x2\x1AD\x1AA\x3"+
		"\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AD\x1AC\x3\x2\x2\x2\x1AE\x13\x3\x2\x2"+
		"\x2\x1AF\x1B5\x5\x16\f\x2\x1B0\x1B1\x5\x122\x92\x2\x1B1\x1B2\x5\x16\f"+
		"\x2\x1B2\x1B4\x3\x2\x2\x2\x1B3\x1B0\x3\x2\x2\x2\x1B4\x1B7\x3\x2\x2\x2"+
		"\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7"+
		"\x1B5\x3\x2\x2\x2\x1B8\x1B9\x5\x122\x92\x2\x1B9\x15\x3\x2\x2\x2\x1BA\x1C0"+
		"\x5R*\x2\x1BB\x1C0\x5\x8CG\x2\x1BC\x1C0\x5\x8EH\x2\x1BD\x1C0\x5\x90I\x2"+
		"\x1BE\x1C0\x5\xB0Y\x2\x1BF\x1BA\x3\x2\x2\x2\x1BF\x1BB\x3\x2\x2\x2\x1BF"+
		"\x1BC\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1BF\x1BE\x3\x2\x2\x2\x1C0\x17"+
		"\x3\x2\x2\x2\x1C1\x1C2\a\x37\x2\x2\x1C2\x1C3\x5\x136\x9C\x2\x1C3\x1C5"+
		"\x5\x1A\xE\x2\x1C4\x1C6\x5\x136\x9C\x2\x1C5\x1C4\x3\x2\x2\x2\x1C5\x1C6"+
		"\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1C9\a\xD0\x2\x2\x1C8\x1CA\x5"+
		"\x136\x9C\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CB\x3"+
		"\x2\x2\x2\x1CB\x1D6\x5\x1C\xF\x2\x1CC\x1CE\x5\x136\x9C\x2\x1CD\x1CC\x3"+
		"\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D1\a)\x2"+
		"\x2\x1D0\x1D2\x5\x136\x9C\x2\x1D1\x1D0\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2"+
		"\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D5\x5\x1C\xF\x2\x1D4\x1CD\x3\x2\x2\x2"+
		"\x1D5\x1D8\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7"+
		"\x19\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D9\x1DA\x5\xDAn\x2\x1DA\x1B\x3"+
		"\x2\x2\x2\x1DB\x1DC\x5\xBA^\x2\x1DC\x1D\x3\x2\x2\x2\x1DD\x1E3\x5 \x11"+
		"\x2\x1DE\x1DF\x5\x122\x92\x2\x1DF\x1E0\x5 \x11\x2\x1E0\x1E2\x3\x2\x2\x2"+
		"\x1E1\x1DE\x3\x2\x2\x2\x1E2\x1E5\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E3"+
		"\x1E4\x3\x2\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E6\x1E7"+
		"\x5\x122\x92\x2\x1E7\x1F\x3\x2\x2\x2\x1E8\x218\x5\x108\x85\x2\x1E9\x218"+
		"\x5\x18\r\x2\x1EA\x218\x5\"\x12\x2\x1EB\x218\x5$\x13\x2\x1EC\x218\x5>"+
		" \x2\x1ED\x218\x5\x44#\x2\x1EE\x218\x5\x46$\x2\x1EF\x218\x5H%\x2\x1F0"+
		"\x218\x5L\'\x2\x1F1\x218\x5\xD0i\x2\x1F2\x218\x5N(\x2\x1F3\x218\x5P)\x2"+
		"\x1F4\x218\x5V,\x2\x1F5\x218\x5X-\x2\x1F6\x218\x5Z.\x2\x1F7\x218\x5\\"+
		"/\x2\x1F8\x218\x5\x62\x32\x2\x1F9\x218\x5p\x39\x2\x1FA\x218\x5r:\x2\x1FB"+
		"\x218\x5t;\x2\x1FC\x218\x5v<\x2\x1FD\x218\x5x=\x2\x1FE\x218\x5z>\x2\x1FF"+
		"\x218\x5|?\x2\x200\x218\x5~@\x2\x201\x218\x5\x80\x41\x2\x202\x218\x5\x82"+
		"\x42\x2\x203\x218\x5\x84\x43\x2\x204\x218\x5\x8A\x46\x2\x205\x218\x5\x92"+
		"J\x2\x206\x218\x5\x94K\x2\x207\x218\x5\x96L\x2\x208\x218\x5\x9AN\x2\x209"+
		"\x218\x5\x9CO\x2\x20A\x218\x5\x9EP\x2\x20B\x218\x5\xA0Q\x2\x20C\x218\x5"+
		"\xA4S\x2\x20D\x218\x5\xA6T\x2\x20E\x218\x5\xAEX\x2\x20F\x218\x5\xA2R\x2"+
		"\x210\x218\x5\xB8]\x2\x211\x218\x5\xBE`\x2\x212\x218\x5\xC4\x63\x2\x213"+
		"\x218\x5\xC6\x64\x2\x214\x218\x5\xC8\x65\x2\x215\x218\x5\xCCg\x2\x216"+
		"\x218\x5\xD4k\x2\x217\x1E8\x3\x2\x2\x2\x217\x1E9\x3\x2\x2\x2\x217\x1EA"+
		"\x3\x2\x2\x2\x217\x1EB\x3\x2\x2\x2\x217\x1EC\x3\x2\x2\x2\x217\x1ED\x3"+
		"\x2\x2\x2\x217\x1EE\x3\x2\x2\x2\x217\x1EF\x3\x2\x2\x2\x217\x1F0\x3\x2"+
		"\x2\x2\x217\x1F1\x3\x2\x2\x2\x217\x1F2\x3\x2\x2\x2\x217\x1F3\x3\x2\x2"+
		"\x2\x217\x1F4\x3\x2\x2\x2\x217\x1F5\x3\x2\x2\x2\x217\x1F6\x3\x2\x2\x2"+
		"\x217\x1F7\x3\x2\x2\x2\x217\x1F8\x3\x2\x2\x2\x217\x1F9\x3\x2\x2\x2\x217"+
		"\x1FA\x3\x2\x2\x2\x217\x1FB\x3\x2\x2\x2\x217\x1FC\x3\x2\x2\x2\x217\x1FD"+
		"\x3\x2\x2\x2\x217\x1FE\x3\x2\x2\x2\x217\x1FF\x3\x2\x2\x2\x217\x200\x3"+
		"\x2\x2\x2\x217\x201\x3\x2\x2\x2\x217\x202\x3\x2\x2\x2\x217\x203\x3\x2"+
		"\x2\x2\x217\x204\x3\x2\x2\x2\x217\x205\x3\x2\x2\x2\x217\x206\x3\x2\x2"+
		"\x2\x217\x207\x3\x2\x2\x2\x217\x208\x3\x2\x2\x2\x217\x209\x3\x2\x2\x2"+
		"\x217\x20A\x3\x2\x2\x2\x217\x20B\x3\x2\x2\x2\x217\x20C\x3\x2\x2\x2\x217"+
		"\x20D\x3\x2\x2\x2\x217\x20E\x3\x2\x2\x2\x217\x20F\x3\x2\x2\x2\x217\x210"+
		"\x3\x2\x2\x2\x217\x211\x3\x2\x2\x2\x217\x212\x3\x2\x2\x2\x217\x213\x3"+
		"\x2\x2\x2\x217\x214\x3\x2\x2\x2\x217\x215\x3\x2\x2\x2\x217\x216\x3\x2"+
		"\x2\x2\x218!\x3\x2\x2\x2\x219\x229\a\x43\x2\x2\x21A\x21B\x5\x136\x9C\x2"+
		"\x21B\x226\x5\xCEh\x2\x21C\x21E\x5\x136\x9C\x2\x21D\x21C\x3\x2\x2\x2\x21D"+
		"\x21E\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x221\a)\x2\x2\x220\x222\x5"+
		"\x136\x9C\x2\x221\x220\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222\x223\x3"+
		"\x2\x2\x2\x223\x225\x5\xCEh\x2\x224\x21D\x3\x2\x2\x2\x225\x228\x3\x2\x2"+
		"\x2\x226\x224\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x22A\x3\x2\x2\x2"+
		"\x228\x226\x3\x2\x2\x2\x229\x21A\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A"+
		"#\x3\x2\x2\x2\x22B\x22C\x5\x118\x8D\x2\x22C\x22D\x5\x136\x9C\x2\x22D\x22F"+
		"\x3\x2\x2\x2\x22E\x22B\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x230\x3"+
		"\x2\x2\x2\x230\x231\a\x44\x2\x2\x231\x232\x5\x136\x9C\x2\x232\x23D\x5"+
		"&\x14\x2\x233\x235\x5\x136\x9C\x2\x234\x233\x3\x2\x2\x2\x234\x235\x3\x2"+
		"\x2\x2\x235\x236\x3\x2\x2\x2\x236\x238\a)\x2\x2\x237\x239\x5\x136\x9C"+
		"\x2\x238\x237\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2"+
		"\x23A\x23C\x5&\x14\x2\x23B\x234\x3\x2\x2\x2\x23C\x23F\x3\x2\x2\x2\x23D"+
		"\x23B\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E%\x3\x2\x2\x2\x23F\x23D\x3"+
		"\x2\x2\x2\x240\x242\x5\xFC\x7F\x2\x241\x243\x5\x116\x8C\x2\x242\x241\x3"+
		"\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x247\x3\x2\x2\x2\x244\x245\x5\x136"+
		"\x9C\x2\x245\x246\x5\xFE\x80\x2\x246\x248\x3\x2\x2\x2\x247\x244\x3\x2"+
		"\x2\x2\x247\x248\x3\x2\x2\x2\x248\x24A\x3\x2\x2\x2\x249\x24B\x5\x136\x9C"+
		"\x2\x24A\x249\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2"+
		"\x24C\x24E\a\xD0\x2\x2\x24D\x24F\x5\x136\x9C\x2\x24E\x24D\x3\x2\x2\x2"+
		"\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x251\x5\xBA^\x2\x251"+
		"\'\x3\x2\x2\x2\x252\x253\x5\x118\x8D\x2\x253\x254\x5\x136\x9C\x2\x254"+
		"\x256\x3\x2\x2\x2\x255\x252\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x257"+
		"\x3\x2\x2\x2\x257\x258\aG\x2\x2\x258\x25B\x5\x136\x9C\x2\x259\x25A\a\xA3"+
		"\x2\x2\x25A\x25C\x5\x136\x9C\x2\x25B\x259\x3\x2\x2\x2\x25B\x25C\x3\x2"+
		"\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25E\t\x3\x2\x2\x25E\x25F\x5\x136\x9C"+
		"\x2\x25F\x261\x5\xFC\x7F\x2\x260\x262\x5\x116\x8C\x2\x261\x260\x3\x2\x2"+
		"\x2\x261\x262\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\x5\x136\x9C"+
		"\x2\x264\x265\a\x82\x2\x2\x265\x266\x5\x136\x9C\x2\x266\x26C\a\xE3\x2"+
		"\x2\x267\x268\x5\x136\x9C\x2\x268\x269\a\x35\x2\x2\x269\x26A\x5\x136\x9C"+
		"\x2\x26A\x26B\a\xE3\x2\x2\x26B\x26D\x3\x2\x2\x2\x26C\x267\x3\x2\x2\x2"+
		"\x26C\x26D\x3\x2\x2\x2\x26D\x272\x3\x2\x2\x2\x26E\x270\x5\x136\x9C\x2"+
		"\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271"+
		"\x273\x5\xF0y\x2\x272\x26F\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x277"+
		"\x3\x2\x2\x2\x274\x275\x5\x136\x9C\x2\x275\x276\x5\xFE\x80\x2\x276\x278"+
		"\x3\x2\x2\x2\x277\x274\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278)\x3\x2\x2"+
		"\x2\x279\x27A\x5,\x17\x2\x27A\x27B\x5\x136\x9C\x2\x27B\x286\x5.\x18\x2"+
		"\x27C\x27E\x5\x136\x9C\x2\x27D\x27C\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2"+
		"\x27E\x27F\x3\x2\x2\x2\x27F\x281\a)\x2\x2\x280\x282\x5\x136\x9C\x2\x281"+
		"\x280\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x285"+
		"\x5.\x18\x2\x284\x27D\x3\x2\x2\x2\x285\x288\x3\x2\x2\x2\x286\x284\x3\x2"+
		"\x2\x2\x286\x287\x3\x2\x2\x2\x287+\x3\x2\x2\x2\x288\x286\x3\x2\x2\x2\x289"+
		"\x28A\t\x4\x2\x2\x28A-\x3\x2\x2\x2\x28B\x28F\x5\x30\x19\x2\x28C\x28F\x5"+
		"\x32\x1A\x2\x28D\x28F\x5\x38\x1D\x2\x28E\x28B\x3\x2\x2\x2\x28E\x28C\x3"+
		"\x2\x2\x2\x28E\x28D\x3\x2\x2\x2\x28F/\x3\x2\x2\x2\x290\x291\x5\xFA~\x2"+
		"\x291\x31\x3\x2\x2\x2\x292\x294\x5\x34\x1B\x2\x293\x295\x5\x136\x9C\x2"+
		"\x294\x293\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296"+
		"\x298\a\xD6\x2\x2\x297\x299\x5\x136\x9C\x2\x298\x297\x3\x2\x2\x2\x298"+
		"\x299\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29B\x5\x36\x1C\x2\x29B\x33"+
		"\x3\x2\x2\x2\x29C\x29D\x6\x1B\x2\x2\x29D\x29E\x5\xFA~\x2\x29E\x35\x3\x2"+
		"\x2\x2\x29F\x2A0\x6\x1C\x3\x2\x2A0\x2A1\x5\xFA~\x2\x2A1\x37\x3\x2\x2\x2"+
		"\x2A2\x2A4\x5:\x1E\x2\x2A3\x2A5\x5\x136\x9C\x2\x2A4\x2A3\x3\x2\x2\x2\x2A4"+
		"\x2A5\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A8\a\xD6\x2\x2\x2A7\x2A9"+
		"\x5\x136\x9C\x2\x2A8\x2A7\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AA"+
		"\x3\x2\x2\x2\x2AA\x2AB\x5<\x1F\x2\x2AB\x39\x3\x2\x2\x2\x2AC\x2AD\x5\xFA"+
		"~\x2\x2AD;\x3\x2\x2\x2\x2AE\x2AF\x5\xFA~\x2\x2AF=\x3\x2\x2\x2\x2B0\x2B1"+
		"\aV\x2\x2\x2B1\x2B3\x5\x122\x92\x2\x2B2\x2B4\x5\x1E\x10\x2\x2B3\x2B2\x3"+
		"\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6\a\x80"+
		"\x2\x2\x2B6\x2CE\x3\x2\x2\x2\x2B7\x2B8\aV\x2\x2\x2B8\x2B9\x5\x136\x9C"+
		"\x2\x2B9\x2BA\t\x5\x2\x2\x2BA\x2BB\x5\x136\x9C\x2\x2BB\x2BC\x5\xBA^\x2"+
		"\x2BC\x2BE\x5\x122\x92\x2\x2BD\x2BF\x5\x1E\x10\x2\x2BE\x2BD\x3\x2\x2\x2"+
		"\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\a\x80\x2\x2\x2C1"+
		"\x2CE\x3\x2\x2\x2\x2C2\x2C3\aV\x2\x2\x2C3\x2C5\x5\x122\x92\x2\x2C4\x2C6"+
		"\x5\x1E\x10\x2\x2C5\x2C4\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C7\x3"+
		"\x2\x2\x2\x2C7\x2C8\a\x80\x2\x2\x2C8\x2C9\x5\x136\x9C\x2\x2C9\x2CA\t\x5"+
		"\x2\x2\x2CA\x2CB\x5\x136\x9C\x2\x2CB\x2CC\x5\xBA^\x2\x2CC\x2CE\x3\x2\x2"+
		"\x2\x2CD\x2B0\x3\x2\x2\x2\x2CD\x2B7\x3\x2\x2\x2\x2CD\x2C2\x3\x2\x2\x2"+
		"\x2CE?\x3\x2\x2\x2\x2CF\x2D0\x5\x118\x8D\x2\x2D0\x2D1\x5\x136\x9C\x2\x2D1"+
		"\x2D3\x3\x2\x2\x2\x2D2\x2CF\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D4"+
		"\x3\x2\x2\x2\x2D4\x2D5\a\x65\x2\x2\x2D5\x2D6\x5\x136\x9C\x2\x2D6\x2D7"+
		"\x5\xFC\x7F\x2\x2D7\x2DB\x5\x122\x92\x2\x2D8\x2DA\x5\x42\"\x2\x2D9\x2D8"+
		"\x3\x2\x2\x2\x2DA\x2DD\x3\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DB\x2DC\x3"+
		"\x2\x2\x2\x2DC\x2DE\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DE\x2DF\a\\\x2"+
		"\x2\x2DF\x41\x3\x2\x2\x2\x2E0\x2E9\x5\xFC\x7F\x2\x2E1\x2E3\x5\x136\x9C"+
		"\x2\x2E2\x2E1\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2"+
		"\x2E4\x2E6\a\xD0\x2\x2\x2E5\x2E7\x5\x136\x9C\x2\x2E6\x2E5\x3\x2\x2\x2"+
		"\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2EA\x5\xBA^\x2\x2E9"+
		"\x2E2\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2EC"+
		"\x5\x122\x92\x2\x2EC\x43\x3\x2\x2\x2\x2ED\x2EE\a\x64\x2\x2\x2EE\x45\x3"+
		"\x2\x2\x2\x2EF\x2F0\ag\x2\x2\x2F0\x2F1\x5\x136\x9C\x2\x2F1\x2FC\x5\xBA"+
		"^\x2\x2F2\x2F4\x5\x136\x9C\x2\x2F3\x2F2\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2"+
		"\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2F7\a)\x2\x2\x2F6\x2F8\x5\x136\x9C\x2"+
		"\x2F7\x2F6\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9"+
		"\x2FB\x5\xBA^\x2\x2FA\x2F3\x3\x2\x2\x2\x2FB\x2FE\x3\x2\x2\x2\x2FC\x2FA"+
		"\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FDG\x3\x2\x2\x2\x2FE\x2FC\x3\x2\x2"+
		"\x2\x2FF\x300\ah\x2\x2\x300\x301\x5\x136\x9C\x2\x301\x302\x5\xBA^\x2\x302"+
		"I\x3\x2\x2\x2\x303\x304\x5\x118\x8D\x2\x304\x305\x5\x136\x9C\x2\x305\x307"+
		"\x3\x2\x2\x2\x306\x303\x3\x2\x2\x2\x306\x307\x3\x2\x2\x2\x307\x308\x3"+
		"\x2\x2\x2\x308\x309\ai\x2\x2\x309\x30A\x5\x136\x9C\x2\x30A\x30C\x5\xFC"+
		"\x7F\x2\x30B\x30D\x5\x136\x9C\x2\x30C\x30B\x3\x2\x2\x2\x30C\x30D\x3\x2"+
		"\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\x5\xF0y\x2\x30FK\x3\x2\x2\x2\x310"+
		"\x311\t\x6\x2\x2\x311M\x3\x2\x2\x2\x312\x313\aq\x2\x2\x313\x314\x5\x136"+
		"\x9C\x2\x314\x315\aX\x2\x2\x315\x316\x5\x136\x9C\x2\x316\x317\x5\xBA^"+
		"\x2\x317\x318\x5\x136\x9C\x2\x318\x319\az\x2\x2\x319\x31A\x5\x136\x9C"+
		"\x2\x31A\x31B\x5\xBA^\x2\x31B\x31D\x5\x122\x92\x2\x31C\x31E\x5\x1E\x10"+
		"\x2\x31D\x31C\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2"+
		"\x31F\x323\a\x8C\x2\x2\x320\x321\x5\x136\x9C\x2\x321\x322\x5\xBA^\x2\x322"+
		"\x324\x3\x2\x2\x2\x323\x320\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324O\x3"+
		"\x2\x2\x2\x325\x326\aq\x2\x2\x326\x327\x5\x136\x9C\x2\x327\x329\x5\xBA"+
		"^\x2\x328\x32A\x5\x136\x9C\x2\x329\x328\x3\x2\x2\x2\x329\x32A\x3\x2\x2"+
		"\x2\x32A\x32B\x3\x2\x2\x2\x32B\x32D\a\xD0\x2\x2\x32C\x32E\x5\x136\x9C"+
		"\x2\x32D\x32C\x3\x2\x2\x2\x32D\x32E\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2"+
		"\x32F\x330\x5\xBA^\x2\x330\x331\x5\x136\x9C\x2\x331\x332\a\xBE\x2\x2\x332"+
		"\x333\x5\x136\x9C\x2\x333\x339\x5\xBA^\x2\x334\x335\x5\x136\x9C\x2\x335"+
		"\x336\a\xB7\x2\x2\x336\x337\x5\x136\x9C\x2\x337\x338\x5\xBA^\x2\x338\x33A"+
		"\x3\x2\x2\x2\x339\x334\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A\x33B\x3"+
		"\x2\x2\x2\x33B\x33D\x5\x122\x92\x2\x33C\x33E\x5\x1E\x10\x2\x33D\x33C\x3"+
		"\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x343\a\x8C"+
		"\x2\x2\x340\x341\x5\x136\x9C\x2\x341\x342\x5\xBA^\x2\x342\x344\x3\x2\x2"+
		"\x2\x343\x340\x3\x2\x2\x2\x343\x344\x3\x2\x2\x2\x344Q\x3\x2\x2\x2\x345"+
		"\x346\x5\x118\x8D\x2\x346\x347\x5\x136\x9C\x2\x347\x349\x3\x2\x2\x2\x348"+
		"\x345\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34C\x3\x2\x2\x2\x34A\x34B"+
		"\a\xB6\x2\x2\x34B\x34D\x5\x136\x9C\x2\x34C\x34A\x3\x2\x2\x2\x34C\x34D"+
		"\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x350\ar\x2\x2\x34F\x351\x5\x136"+
		"\x9C\x2\x350\x34F\x3\x2\x2\x2\x350\x351\x3\x2\x2\x2\x351\x352\x3\x2\x2"+
		"\x2\x352\x354\x5T+\x2\x353\x355\x5\x116\x8C\x2\x354\x353\x3\x2\x2\x2\x354"+
		"\x355\x3\x2\x2\x2\x355\x35A\x3\x2\x2\x2\x356\x358\x5\x136\x9C\x2\x357"+
		"\x356\x3\x2\x2\x2\x357\x358\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x35B"+
		"\x5\xF0y\x2\x35A\x357\x3\x2\x2\x2\x35A\x35B\x3\x2\x2\x2\x35B\x360\x3\x2"+
		"\x2\x2\x35C\x35E\x5\x136\x9C\x2\x35D\x35C\x3\x2\x2\x2\x35D\x35E\x3\x2"+
		"\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x361\x5\xFE\x80\x2\x360\x35D\x3\x2\x2"+
		"\x2\x360\x361\x3\x2\x2\x2\x361\x362\x3\x2\x2\x2\x362\x364\x5\x122\x92"+
		"\x2\x363\x365\x5\x1E\x10\x2\x364\x363\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2"+
		"\x365\x366\x3\x2\x2\x2\x366\x367\a]\x2\x2\x367S\x3\x2\x2\x2\x368\x369"+
		"\x5\xFC\x7F\x2\x369U\x3\x2\x2\x2\x36A\x36B\as\x2\x2\x36B\x36C\x5\x136"+
		"\x9C\x2\x36C\x36E\x5\xCEh\x2\x36D\x36F\x5\x136\x9C\x2\x36E\x36D\x3\x2"+
		"\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x370\x3\x2\x2\x2\x370\x372\a)\x2\x2"+
		"\x371\x373\x5\x136\x9C\x2\x372\x371\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2"+
		"\x373\x375\x3\x2\x2\x2\x374\x376\x5\xBA^\x2\x375\x374\x3\x2\x2\x2\x375"+
		"\x376\x3\x2\x2\x2\x376\x378\x3\x2\x2\x2\x377\x379\x5\x136\x9C\x2\x378"+
		"\x377\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x37C"+
		"\a)\x2\x2\x37B\x37D\x5\x136\x9C\x2\x37C\x37B\x3\x2\x2\x2\x37C\x37D\x3"+
		"\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x37F\x5\xBA^\x2\x37FW\x3\x2\x2\x2"+
		"\x380\x381\au\x2\x2\x381\x382\x5\x136\x9C\x2\x382\x383\x5\xBA^\x2\x383"+
		"Y\x3\x2\x2\x2\x384\x385\av\x2\x2\x385\x386\x5\x136\x9C\x2\x386\x387\x5"+
		"\xBA^\x2\x387[\x3\x2\x2\x2\x388\x389\aw\x2\x2\x389\x38A\x5\x136\x9C\x2"+
		"\x38A\x38B\x5n\x38\x2\x38B\x38C\x5\x136\x9C\x2\x38C\x38D\a\xBD\x2\x2\x38D"+
		"\x38F\x5\x122\x92\x2\x38E\x390\x5\x1E\x10\x2\x38F\x38E\x3\x2\x2\x2\x38F"+
		"\x390\x3\x2\x2\x2\x390\x394\x3\x2\x2\x2\x391\x393\x5^\x30\x2\x392\x391"+
		"\x3\x2\x2\x2\x393\x396\x3\x2\x2\x2\x394\x392\x3\x2\x2\x2\x394\x395\x3"+
		"\x2\x2\x2\x395\x398\x3\x2\x2\x2\x396\x394\x3\x2\x2\x2\x397\x399\x5`\x31"+
		"\x2\x398\x397\x3\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399\x39A\x3\x2\x2\x2"+
		"\x39A\x39B\a^\x2\x2\x39B]\x3\x2\x2\x2\x39C\x39D\aZ\x2\x2\x39D\x39E\x5"+
		"\x136\x9C\x2\x39E\x39F\x5n\x38\x2\x39F\x3A0\x5\x136\x9C\x2\x3A0\x3A1\a"+
		"\xBD\x2\x2\x3A1\x3A3\x5\x122\x92\x2\x3A2\x3A4\x5\x1E\x10\x2\x3A3\x3A2"+
		"\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3B1\x3\x2\x2\x2\x3A5\x3A6\aZ"+
		"\x2\x2\x3A6\x3A7\x5\x136\x9C\x2\x3A7\x3A8\x5n\x38\x2\x3A8\x3A9\x5\x136"+
		"\x9C\x2\x3A9\x3AB\a\xBD\x2\x2\x3AA\x3AC\x5\x136\x9C\x2\x3AB\x3AA\x3\x2"+
		"\x2\x2\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AE\x3\x2\x2\x2\x3AD\x3AF\x5\x1E\x10"+
		"\x2\x3AE\x3AD\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B1\x3\x2\x2\x2"+
		"\x3B0\x39C\x3\x2\x2\x2\x3B0\x3A5\x3\x2\x2\x2\x3B1_\x3\x2\x2\x2\x3B2\x3B3"+
		"\aY\x2\x2\x3B3\x3B5\x5\x122\x92\x2\x3B4\x3B6\x5\x1E\x10\x2\x3B5\x3B4\x3"+
		"\x2\x2\x2\x3B5\x3B6\x3\x2\x2\x2\x3B6\x61\x3\x2\x2\x2\x3B7\x3BA\x5\x64"+
		"\x33\x2\x3B8\x3BA\x5\x66\x34\x2\x3B9\x3B7\x3\x2\x2\x2\x3B9\x3B8\x3\x2"+
		"\x2\x2\x3BA\x63\x3\x2\x2\x2\x3BB\x3BD\aw\x2\x2\x3BC\x3BE\x5\x136\x9C\x2"+
		"\x3BD\x3BC\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF"+
		"\x3C1\x5n\x38\x2\x3C0\x3C2\x5\x136\x9C\x2\x3C1\x3C0\x3\x2\x2\x2\x3C1\x3C2"+
		"\x3\x2\x2\x2\x3C2\x3C3\x3\x2\x2\x2\x3C3\x3C5\a\xBD\x2\x2\x3C4\x3C6\x5"+
		"\x136\x9C\x2\x3C5\x3C4\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6\x3C7\x3"+
		"\x2\x2\x2\x3C7\x3CB\x5j\x36\x2\x3C8\x3C9\x5\x136\x9C\x2\x3C9\x3CA\x5h"+
		"\x35\x2\x3CA\x3CC\x3\x2\x2\x2\x3CB\x3C8\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2"+
		"\x2\x3CC\x65\x3\x2\x2\x2\x3CD\x3CF\aw\x2\x2\x3CE\x3D0\x5\x136\x9C\x2\x3CF"+
		"\x3CE\x3\x2\x2\x2\x3CF\x3D0\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1\x3D3"+
		"\x5n\x38\x2\x3D2\x3D4\x5\x136\x9C\x2\x3D3\x3D2\x3\x2\x2\x2\x3D3\x3D4\x3"+
		"\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D6\a\xBD\x2\x2\x3D6\x3D8\x5\x122"+
		"\x92\x2\x3D7\x3D9\x5\x136\x9C\x2\x3D8\x3D7\x3\x2\x2\x2\x3D8\x3D9\x3\x2"+
		"\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DB\x5h\x35\x2\x3DBg\x3\x2\x2\x2\x3DC"+
		"\x3DE\aY\x2\x2\x3DD\x3DF\x5\x136\x9C\x2\x3DE\x3DD\x3\x2\x2\x2\x3DE\x3DF"+
		"\x3\x2\x2\x2\x3DF\x3E1\x3\x2\x2\x2\x3E0\x3E2\x5j\x36\x2\x3E1\x3E0\x3\x2"+
		"\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2i\x3\x2\x2\x2\x3E3\x3F0\x5\x10E\x88\x2"+
		"\x3E4\x3E6\x5\x136\x9C\x2\x3E5\x3E4\x3\x2\x2\x2\x3E5\x3E6\x3\x2\x2\x2"+
		"\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3E9\a*\x2\x2\x3E8\x3EA\x5\x136\x9C\x2\x3E9"+
		"\x3E8\x3\x2\x2\x2\x3E9\x3EA\x3\x2\x2\x2\x3EA\x3EC\x3\x2\x2\x2\x3EB\x3ED"+
		"\x5l\x37\x2\x3EC\x3EB\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EF\x3\x2"+
		"\x2\x2\x3EE\x3E5\x3\x2\x2\x2\x3EF\x3F2\x3\x2\x2\x2\x3F0\x3EE\x3\x2\x2"+
		"\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1\x40A\x3\x2\x2\x2\x3F2\x3F0\x3\x2\x2\x2"+
		"\x3F3\x3F5\a*\x2\x2\x3F4\x3F6\x5\x136\x9C\x2\x3F5\x3F4\x3\x2\x2\x2\x3F5"+
		"\x3F6\x3\x2\x2\x2\x3F6\x3F8\x3\x2\x2\x2\x3F7\x3F3\x3\x2\x2\x2\x3F7\x3F8"+
		"\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9\x406\x5l\x37\x2\x3FA\x3FC\x5\x136"+
		"\x9C\x2\x3FB\x3FA\x3\x2\x2\x2\x3FB\x3FC\x3\x2\x2\x2\x3FC\x3FD\x3\x2\x2"+
		"\x2\x3FD\x3FF\a*\x2\x2\x3FE\x400\x5\x136\x9C\x2\x3FF\x3FE\x3\x2\x2\x2"+
		"\x3FF\x400\x3\x2\x2\x2\x400\x402\x3\x2\x2\x2\x401\x403\x5l\x37\x2\x402"+
		"\x401\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x405\x3\x2\x2\x2\x404\x3FB"+
		"\x3\x2\x2\x2\x405\x408\x3\x2\x2\x2\x406\x404\x3\x2\x2\x2\x406\x407\x3"+
		"\x2\x2\x2\x407\x40A\x3\x2\x2\x2\x408\x406\x3\x2\x2\x2\x409\x3E3\x3\x2"+
		"\x2\x2\x409\x3F7\x3\x2\x2\x2\x40Ak\x3\x2\x2\x2\x40B\x40C\x5 \x11\x2\x40C"+
		"m\x3\x2\x2\x2\x40D\x40E\x5\xBA^\x2\x40Eo\x3\x2\x2\x2\x40F\x410\ay\x2\x2"+
		"\x410\x411\x5\x136\x9C\x2\x411\x412\x5\xBA^\x2\x412q\x3\x2\x2\x2\x413"+
		"\x414\a{\x2\x2\x414\x415\x5\x136\x9C\x2\x415\x41E\x5\xCEh\x2\x416\x418"+
		"\x5\x136\x9C\x2\x417\x416\x3\x2\x2\x2\x417\x418\x3\x2\x2\x2\x418\x419"+
		"\x3\x2\x2\x2\x419\x41B\a)\x2\x2\x41A\x41C\x5\x136\x9C\x2\x41B\x41A\x3"+
		"\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2\x41D\x41F\x5\xBA"+
		"^\x2\x41E\x417\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x41E\x3\x2\x2\x2"+
		"\x420\x421\x3\x2\x2\x2\x421s\x3\x2\x2\x2\x422\x423\a\x81\x2\x2\x423\x425"+
		"\x5\x136\x9C\x2\x424\x422\x3\x2\x2\x2\x424\x425\x3\x2\x2\x2\x425\x426"+
		"\x3\x2\x2\x2\x426\x428\x5\xBA^\x2\x427\x429\x5\x136\x9C\x2\x428\x427\x3"+
		"\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429\x42A\x3\x2\x2\x2\x42A\x42C\a\xD0"+
		"\x2\x2\x42B\x42D\x5\x136\x9C\x2\x42C\x42B\x3\x2\x2\x2\x42C\x42D\x3\x2"+
		"\x2\x2\x42D\x42E\x3\x2\x2\x2\x42E\x42F\x5\xBA^\x2\x42Fu\x3\x2\x2\x2\x430"+
		"\x431\a\x84\x2\x2\x431\x432\x5\x136\x9C\x2\x432\x434\x5\xCEh\x2\x433\x435"+
		"\x5\x136\x9C\x2\x434\x433\x3\x2\x2\x2\x434\x435\x3\x2\x2\x2\x435\x436"+
		"\x3\x2\x2\x2\x436\x438\a)\x2\x2\x437\x439\x5\x136\x9C\x2\x438\x437\x3"+
		"\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43B\x5\xBA"+
		"^\x2\x43Bw\x3\x2\x2\x2\x43C\x43D\a~\x2\x2\x43D\x43E\x5\x136\x9C\x2\x43E"+
		"\x44E\x5\xBA^\x2\x43F\x441\x5\x136\x9C\x2\x440\x43F\x3\x2\x2\x2\x440\x441"+
		"\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442\x444\a)\x2\x2\x443\x445\x5\x136"+
		"\x9C\x2\x444\x443\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2\x445\x446\x3\x2\x2"+
		"\x2\x446\x44C\x5\xBA^\x2\x447\x448\x5\x136\x9C\x2\x448\x449\a\xBE\x2\x2"+
		"\x449\x44A\x5\x136\x9C\x2\x44A\x44B\x5\xBA^\x2\x44B\x44D\x3\x2\x2\x2\x44C"+
		"\x447\x3\x2\x2\x2\x44C\x44D\x3\x2\x2\x2\x44D\x44F\x3\x2\x2\x2\x44E\x440"+
		"\x3\x2\x2\x2\x44E\x44F\x3\x2\x2\x2\x44Fy\x3\x2\x2\x2\x450\x451\a\x88\x2"+
		"\x2\x451\x452\x5\x136\x9C\x2\x452\x454\x5\xBA^\x2\x453\x455\x5\x136\x9C"+
		"\x2\x454\x453\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2"+
		"\x456\x458\a\xD0\x2\x2\x457\x459\x5\x136\x9C\x2\x458\x457\x3\x2\x2\x2"+
		"\x458\x459\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x45B\x5\xBA^\x2\x45B"+
		"{\x3\x2\x2\x2\x45C\x45E\a\x8A\x2\x2\x45D\x45F\x5\x136\x9C\x2\x45E\x45D"+
		"\x3\x2\x2\x2\x45E\x45F\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x462\a\xD4"+
		"\x2\x2\x461\x463\x5\x136\x9C\x2\x462\x461\x3\x2\x2\x2\x462\x463\x3\x2"+
		"\x2\x2\x463\x464\x3\x2\x2\x2\x464\x466\x5\xEAv\x2\x465\x467\x5\x136\x9C"+
		"\x2\x466\x465\x3\x2\x2\x2\x466\x467\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2"+
		"\x468\x469\a\xDB\x2\x2\x469}\x3\x2\x2\x2\x46A\x46B\t\a\x2\x2\x46B\x474"+
		"\x5\x136\x9C\x2\x46C\x46D\av\x2\x2\x46D\x46E\x5\x136\x9C\x2\x46E\x46F"+
		"\x5\xBA^\x2\x46F\x475\x3\x2\x2\x2\x470\x471\a\xAD\x2\x2\x471\x472\x5\x136"+
		"\x9C\x2\x472\x473\a\x8C\x2\x2\x473\x475\x3\x2\x2\x2\x474\x46C\x3\x2\x2"+
		"\x2\x474\x470\x3\x2\x2\x2\x475\x7F\x3\x2\x2\x2\x476\x477\a\x91\x2\x2\x477"+
		"\x478\x5\x136\x9C\x2\x478\x479\x5\xBA^\x2\x479\x47A\x5\x136\x9C\x2\x47A"+
		"\x47B\av\x2\x2\x47B\x47C\x5\x136\x9C\x2\x47C\x487\x5\xBA^\x2\x47D\x47F"+
		"\x5\x136\x9C\x2\x47E\x47D\x3\x2\x2\x2\x47E\x47F\x3\x2\x2\x2\x47F\x480"+
		"\x3\x2\x2\x2\x480\x482\a)\x2\x2\x481\x483\x5\x136\x9C\x2\x482\x481\x3"+
		"\x2\x2\x2\x482\x483\x3\x2\x2\x2\x483\x484\x3\x2\x2\x2\x484\x486\x5\xBA"+
		"^\x2\x485\x47E\x3\x2\x2\x2\x486\x489\x3\x2\x2\x2\x487\x485\x3\x2\x2\x2"+
		"\x487\x488\x3\x2\x2\x2\x488\x81\x3\x2\x2\x2\x489\x487\x3\x2\x2\x2\x48A"+
		"\x48B\a\x91\x2\x2\x48B\x48C\x5\x136\x9C\x2\x48C\x48D\x5\xBA^\x2\x48D\x48E"+
		"\x5\x136\x9C\x2\x48E\x48F\au\x2\x2\x48F\x490\x5\x136\x9C\x2\x490\x49B"+
		"\x5\xBA^\x2\x491\x493\x5\x136\x9C\x2\x492\x491\x3\x2\x2\x2\x492\x493\x3"+
		"\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x496\a)\x2\x2\x495\x497\x5\x136\x9C"+
		"\x2\x496\x495\x3\x2\x2\x2\x496\x497\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2"+
		"\x498\x49A\x5\xBA^\x2\x499\x492\x3\x2\x2\x2\x49A\x49D\x3\x2\x2\x2\x49B"+
		"\x499\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C\x83\x3\x2\x2\x2\x49D\x49B"+
		"\x3\x2\x2\x2\x49E\x49F\a\x94\x2\x2\x49F\x4A0\x5\x136\x9C\x2\x4A0\x4A1"+
		"\x5\xBA^\x2\x4A1\x4A2\x5\x136\x9C\x2\x4A2\x4A3\aq\x2\x2\x4A3\x4A4\x5\x136"+
		"\x9C\x2\x4A4\x4AA\t\b\x2\x2\x4A5\x4A6\x5\x136\x9C\x2\x4A6\x4A7\a\x33\x2"+
		"\x2\x4A7\x4A8\x5\x136\x9C\x2\x4A8\x4A9\t\t\x2\x2\x4A9\x4AB\x3\x2\x2\x2"+
		"\x4AA\x4A5\x3\x2\x2\x2\x4AA\x4AB\x3\x2\x2\x2\x4AB\x4AF\x3\x2\x2\x2\x4AC"+
		"\x4AD\x5\x136\x9C\x2\x4AD\x4AE\t\n\x2\x2\x4AE\x4B0\x3\x2\x2\x2\x4AF\x4AC"+
		"\x3\x2\x2\x2\x4AF\x4B0\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2\x2\x4B1\x4B2\x5"+
		"\x136\x9C\x2\x4B2\x4B3\a\x39\x2\x2\x4B3\x4B4\x5\x136\x9C\x2\x4B4\x4C0"+
		"\x5\xCEh\x2\x4B5\x4B6\x5\x136\x9C\x2\x4B6\x4B8\a\x1D\x2\x2\x4B7\x4B9\x5"+
		"\x136\x9C\x2\x4B8\x4B7\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2\x4B9\x4BA\x3"+
		"\x2\x2\x2\x4BA\x4BC\a\xD0\x2\x2\x4BB\x4BD\x5\x136\x9C\x2\x4BC\x4BB\x3"+
		"\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4BF\x5\xBA"+
		"^\x2\x4BF\x4C1\x3\x2\x2\x2\x4C0\x4B5\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2\x2"+
		"\x4C1\x85\x3\x2\x2\x2\x4C2\x4CF\x5\x88\x45\x2\x4C3\x4C5\x5\x136\x9C\x2"+
		"\x4C4\x4C3\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2\x4C6"+
		"\x4C8\t\v\x2\x2\x4C7\x4C9\x5\x136\x9C\x2\x4C8\x4C7\x3\x2\x2\x2\x4C8\x4C9"+
		"\x3\x2\x2\x2\x4C9\x4CB\x3\x2\x2\x2\x4CA\x4CC\x5\x88\x45\x2\x4CB\x4CA\x3"+
		"\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4CE\x3\x2\x2\x2\x4CD\x4C4\x3\x2"+
		"\x2\x2\x4CE\x4D1\x3\x2\x2\x2\x4CF\x4CD\x3\x2\x2\x2\x4CF\x4D0\x3\x2\x2"+
		"\x2\x4D0\x4E4\x3\x2\x2\x2\x4D1\x4CF\x3\x2\x2\x2\x4D2\x4D4\x5\x88\x45\x2"+
		"\x4D3\x4D2\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4DF\x3\x2\x2\x2\x4D5"+
		"\x4D7\x5\x136\x9C\x2\x4D6\x4D5\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7"+
		"\x4D8\x3\x2\x2\x2\x4D8\x4DA\t\v\x2\x2\x4D9\x4DB\x5\x136\x9C\x2\x4DA\x4D9"+
		"\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DD\x3\x2\x2\x2\x4DC\x4DE\x5"+
		"\x88\x45\x2\x4DD\x4DC\x3\x2\x2\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE\x4E0\x3\x2"+
		"\x2\x2\x4DF\x4D6\x3\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4DF\x3\x2\x2"+
		"\x2\x4E1\x4E2\x3\x2\x2\x2\x4E2\x4E4\x3\x2\x2\x2\x4E3\x4C2\x3\x2\x2\x2"+
		"\x4E3\x4D3\x3\x2\x2\x2\x4E4\x87\x3\x2\x2\x2\x4E5\x4F7\x5\xBA^\x2\x4E6"+
		"\x4F4\t\f\x2\x2\x4E7\x4E9\x5\x136\x9C\x2\x4E8\x4E7\x3\x2\x2\x2\x4E8\x4E9"+
		"\x3\x2\x2\x2\x4E9\x4EA\x3\x2\x2\x2\x4EA\x4EC\a\xD4\x2\x2\x4EB\x4ED\x5"+
		"\x136\x9C\x2\x4EC\x4EB\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EE\x3"+
		"\x2\x2\x2\x4EE\x4F0\x5\xEAv\x2\x4EF\x4F1\x5\x136\x9C\x2\x4F0\x4EF\x3\x2"+
		"\x2\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F3\a\xDB\x2"+
		"\x2\x4F3\x4F5\x3\x2\x2\x2\x4F4\x4E8\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2\x2"+
		"\x4F5\x4F7\x3\x2\x2\x2\x4F6\x4E5\x3\x2\x2\x2\x4F6\x4E6\x3\x2\x2\x2\x4F7"+
		"\x89\x3\x2\x2\x2\x4F8\x4F9\a\x9E\x2\x2\x4F9\x4FA\x5\x136\x9C\x2\x4FA\x4FC"+
		"\x5\xCEh\x2\x4FB\x4FD\x5\x136\x9C\x2\x4FC\x4FB\x3\x2\x2\x2\x4FC\x4FD\x3"+
		"\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE\x503\a)\x2\x2\x4FF\x501\x5\x136\x9C"+
		"\x2\x500\x4FF\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2"+
		"\x502\x504\x5\x86\x44\x2\x503\x500\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504"+
		"\x8B\x3\x2\x2\x2\x505\x506\x5\x118\x8D\x2\x506\x507\x5\x136\x9C\x2\x507"+
		"\x509\x3\x2\x2\x2\x508\x505\x3\x2\x2\x2\x508\x509\x3\x2\x2\x2\x509\x50C"+
		"\x3\x2\x2\x2\x50A\x50B\a\xB6\x2\x2\x50B\x50D\x5\x136\x9C\x2\x50C\x50A"+
		"\x3\x2\x2\x2\x50C\x50D\x3\x2\x2\x2\x50D\x50E\x3\x2\x2\x2\x50E\x50F\a\xA0"+
		"\x2\x2\x50F\x510\x5\x136\x9C\x2\x510\x512\x5T+\x2\x511\x513\x5\x116\x8C"+
		"\x2\x512\x511\x3\x2\x2\x2\x512\x513\x3\x2\x2\x2\x513\x518\x3\x2\x2\x2"+
		"\x514\x516\x5\x136\x9C\x2\x515\x514\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2"+
		"\x516\x517\x3\x2\x2\x2\x517\x519\x5\xF0y\x2\x518\x515\x3\x2\x2\x2\x518"+
		"\x519\x3\x2\x2\x2\x519\x51D\x3\x2\x2\x2\x51A\x51B\x5\x136\x9C\x2\x51B"+
		"\x51C\x5\xFE\x80\x2\x51C\x51E\x3\x2\x2\x2\x51D\x51A\x3\x2\x2\x2\x51D\x51E"+
		"\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x521\x5\x122\x92\x2\x520\x522"+
		"\x5\x1E\x10\x2\x521\x520\x3\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522\x523\x3"+
		"\x2\x2\x2\x523\x524\a_\x2\x2\x524\x8D\x3\x2\x2\x2\x525\x526\x5\x118\x8D"+
		"\x2\x526\x527\x5\x136\x9C\x2\x527\x529\x3\x2\x2\x2\x528\x525\x3\x2\x2"+
		"\x2\x528\x529\x3\x2\x2\x2\x529\x52C\x3\x2\x2\x2\x52A\x52B\a\xB6\x2\x2"+
		"\x52B\x52D\x5\x136\x9C\x2\x52C\x52A\x3\x2\x2\x2\x52C\x52D\x3\x2\x2\x2"+
		"\x52D\x52E\x3\x2\x2\x2\x52E\x52F\a\xA2\x2\x2\x52F\x530\x5\x136\x9C\x2"+
		"\x530\x535\x5\xB2Z\x2\x531\x533\x5\x136\x9C\x2\x532\x531\x3\x2\x2\x2\x532"+
		"\x533\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2\x534\x536\x5\xF0y\x2\x535\x532"+
		"\x3\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x539\x5"+
		"\x122\x92\x2\x538\x53A\x5\x1E\x10\x2\x539\x538\x3\x2\x2\x2\x539\x53A\x3"+
		"\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53C\a_\x2\x2\x53C\x8F\x3\x2\x2\x2"+
		"\x53D\x53E\x5\x118\x8D\x2\x53E\x53F\x5\x136\x9C\x2\x53F\x541\x3\x2\x2"+
		"\x2\x540\x53D\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x544\x3\x2\x2\x2"+
		"\x542\x543\a\xB6\x2\x2\x543\x545\x5\x136\x9C\x2\x544\x542\x3\x2\x2\x2"+
		"\x544\x545\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x547\a\xA1\x2\x2\x547"+
		"\x548\x5\x136\x9C\x2\x548\x54D\x5\xB2Z\x2\x549\x54B\x5\x136\x9C\x2\x54A"+
		"\x549\x3\x2\x2\x2\x54A\x54B\x3\x2\x2\x2\x54B\x54C\x3\x2\x2\x2\x54C\x54E"+
		"\x5\xF0y\x2\x54D\x54A\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x54F\x3\x2"+
		"\x2\x2\x54F\x551\x5\x122\x92\x2\x550\x552\x5\x1E\x10\x2\x551\x550\x3\x2"+
		"\x2\x2\x551\x552\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2\x553\x554\a_\x2\x2"+
		"\x554\x91\x3\x2\x2\x2\x555\x556\a\xA5\x2\x2\x556\x557\x5\x136\x9C\x2\x557"+
		"\x559\x5\xCEh\x2\x558\x55A\x5\x136\x9C\x2\x559\x558\x3\x2\x2\x2\x559\x55A"+
		"\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x55D\a)\x2\x2\x55C\x55E\x5\x136"+
		"\x9C\x2\x55D\x55C\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x560\x3\x2\x2"+
		"\x2\x55F\x561\x5\xBA^\x2\x560\x55F\x3\x2\x2\x2\x560\x561\x3\x2\x2\x2\x561"+
		"\x563\x3\x2\x2\x2\x562\x564\x5\x136\x9C\x2\x563\x562\x3\x2\x2\x2\x563"+
		"\x564\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x567\a)\x2\x2\x566\x568\x5"+
		"\x136\x9C\x2\x567\x566\x3\x2\x2\x2\x567\x568\x3\x2\x2\x2\x568\x569\x3"+
		"\x2\x2\x2\x569\x56A\x5\xBA^\x2\x56A\x93\x3\x2\x2\x2\x56B\x56C\a\xA7\x2"+
		"\x2\x56C\x56D\x5\x136\x9C\x2\x56D\x57C\x5\xFC\x7F\x2\x56E\x570\x5\x136"+
		"\x9C\x2\x56F\x56E\x3\x2\x2\x2\x56F\x570\x3\x2\x2\x2\x570\x571\x3\x2\x2"+
		"\x2\x571\x573\a\xD4\x2\x2\x572\x574\x5\x136\x9C\x2\x573\x572\x3\x2\x2"+
		"\x2\x573\x574\x3\x2\x2\x2\x574\x579\x3\x2\x2\x2\x575\x577\x5\xEAv\x2\x576"+
		"\x578\x5\x136\x9C\x2\x577\x576\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578"+
		"\x57A\x3\x2\x2\x2\x579\x575\x3\x2\x2\x2\x579\x57A\x3\x2\x2\x2\x57A\x57B"+
		"\x3\x2\x2\x2\x57B\x57D\a\xDB\x2\x2\x57C\x56F\x3\x2\x2\x2\x57C\x57D\x3"+
		"\x2\x2\x2\x57D\x95\x3\x2\x2\x2\x57E\x57F\a\xAA\x2\x2\x57F\x582\x5\x136"+
		"\x9C\x2\x580\x581\a\x9D\x2\x2\x581\x583\x5\x136\x9C\x2\x582\x580\x3\x2"+
		"\x2\x2\x582\x583\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x58F\x5\x98M\x2"+
		"\x585\x587\x5\x136\x9C\x2\x586\x585\x3\x2\x2\x2\x586\x587\x3\x2\x2\x2"+
		"\x587\x588\x3\x2\x2\x2\x588\x58A\a)\x2\x2\x589\x58B\x5\x136\x9C\x2\x58A"+
		"\x589\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58C\x3\x2\x2\x2\x58C\x58E"+
		"\x5\x98M\x2\x58D\x586\x3\x2\x2\x2\x58E\x591\x3\x2\x2\x2\x58F\x58D\x3\x2"+
		"\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x97\x3\x2\x2\x2\x591\x58F\x3\x2\x2\x2"+
		"\x592\x594\x5\xDAn\x2\x593\x595\x5\x136\x9C\x2\x594\x593\x3\x2\x2\x2\x594"+
		"\x595\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\x598\a\xD4\x2\x2\x597\x599"+
		"\x5\x136\x9C\x2\x598\x597\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x59A"+
		"\x3\x2\x2\x2\x59A\x59C\x5\xF6|\x2\x59B\x59D\x5\x136\x9C\x2\x59C\x59B\x3"+
		"\x2\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\x5A2\a\xDB"+
		"\x2\x2\x59F\x5A0\x5\x136\x9C\x2\x5A0\x5A1\x5\xFE\x80\x2\x5A1\x5A3\x3\x2"+
		"\x2\x2\x5A2\x59F\x3\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x99\x3\x2\x2\x2"+
		"\x5A4\x5A5\a\xAC\x2\x2\x5A5\x9B\x3\x2\x2\x2\x5A6\x5AC\a\xAD\x2\x2\x5A7"+
		"\x5AA\x5\x136\x9C\x2\x5A8\x5AB\a\x8C\x2\x2\x5A9\x5AB\x5\xBA^\x2\x5AA\x5A8"+
		"\x3\x2\x2\x2\x5AA\x5A9\x3\x2\x2\x2\x5AB\x5AD\x3\x2\x2\x2\x5AC\x5A7\x3"+
		"\x2\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x9D\x3\x2\x2\x2\x5AE\x5AF\a\xAE\x2"+
		"\x2\x5AF\x9F\x3\x2\x2\x2\x5B0\x5B1\a\xAF\x2\x2\x5B1\x5B2\x5\x136\x9C\x2"+
		"\x5B2\x5B4\x5\xBA^\x2\x5B3\x5B5\x5\x136\x9C\x2\x5B4\x5B3\x3\x2\x2\x2\x5B4"+
		"\x5B5\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B8\a\xD0\x2\x2\x5B7\x5B9"+
		"\x5\x136\x9C\x2\x5B8\x5B7\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9\x5BA"+
		"\x3\x2\x2\x2\x5BA\x5BB\x5\xBA^\x2\x5BB\xA1\x3\x2\x2\x2\x5BC\x5BD\a\xB8"+
		"\x2\x2\x5BD\xA3\x3\x2\x2\x2\x5BE\x5BF\a\xB0\x2\x2\x5BF\x5C0\x5\x136\x9C"+
		"\x2\x5C0\x5C2\x5\xCEh\x2\x5C1\x5C3\x5\x136\x9C\x2\x5C2\x5C1\x3\x2\x2\x2"+
		"\x5C2\x5C3\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C6\a)\x2\x2\x5C5\x5C7"+
		"\x5\x136\x9C\x2\x5C6\x5C5\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5C8"+
		"\x3\x2\x2\x2\x5C8\x5C9\x5\xBA^\x2\x5C9\xA5\x3\x2\x2\x2\x5CA\x5CB\a\xB1"+
		"\x2\x2\x5CB\x5CC\x5\x136\x9C\x2\x5CC\x5CD\a\x41\x2\x2\x5CD\x5CE\x5\x136"+
		"\x9C\x2\x5CE\x5CF\x5\xBA^\x2\x5CF\x5D3\x5\x122\x92\x2\x5D0\x5D2\x5\xAA"+
		"V\x2\x5D1\x5D0\x3\x2\x2\x2\x5D2\x5D5\x3\x2\x2\x2\x5D3\x5D1\x3\x2\x2\x2"+
		"\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D6\x3\x2\x2\x2\x5D5\x5D3\x3\x2\x2\x2\x5D6"+
		"\x5D7\a`\x2\x2\x5D7\xA7\x3\x2\x2\x2\x5D8\x5DA\a|\x2\x2\x5D9\x5DB\x5\x136"+
		"\x9C\x2\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2"+
		"\x2\x5DC\x5DE\x5\x102\x82\x2\x5DD\x5DF\x5\x136\x9C\x2\x5DE\x5DD\x3\x2"+
		"\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5E1\x5\xBA^\x2"+
		"\x5E1\x5EA\x3\x2\x2\x2\x5E2\x5E3\x5\xBA^\x2\x5E3\x5E4\x5\x136\x9C\x2\x5E4"+
		"\x5E5\a\xBE\x2\x2\x5E5\x5E6\x5\x136\x9C\x2\x5E6\x5E7\x5\xBA^\x2\x5E7\x5EA"+
		"\x3\x2\x2\x2\x5E8\x5EA\x5\xBA^\x2\x5E9\x5D8\x3\x2\x2\x2\x5E9\x5E2\x3\x2"+
		"\x2\x2\x5E9\x5E8\x3\x2\x2\x2\x5EA\xA9\x3\x2\x2\x2\x5EB\x5EC\a\x41\x2\x2"+
		"\x5EC\x5ED\x5\x136\x9C\x2\x5ED\x5EE\x5\xACW\x2\x5EE\x5F0\x5\x122\x92\x2"+
		"\x5EF\x5F1\x5\x1E\x10\x2\x5F0\x5EF\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1"+
		"\xAB\x3\x2\x2\x2\x5F2\x602\aY\x2\x2\x5F3\x5FE\x5\xA8U\x2\x5F4\x5F6\x5"+
		"\x136\x9C\x2\x5F5\x5F4\x3\x2\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6\x5F7\x3"+
		"\x2\x2\x2\x5F7\x5F9\a)\x2\x2\x5F8\x5FA\x5\x136\x9C\x2\x5F9\x5F8\x3\x2"+
		"\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FD\x5\xA8U\x2"+
		"\x5FC\x5F5\x3\x2\x2\x2\x5FD\x600\x3\x2\x2\x2\x5FE\x5FC\x3\x2\x2\x2\x5FE"+
		"\x5FF\x3\x2\x2\x2\x5FF\x602\x3\x2\x2\x2\x600\x5FE\x3\x2\x2\x2\x601\x5F2"+
		"\x3\x2\x2\x2\x601\x5F3\x3\x2\x2\x2\x602\xAD\x3\x2\x2\x2\x603\x604\a\xB2"+
		"\x2\x2\x604\x605\x5\x136\x9C\x2\x605\x607\x5\xBA^\x2\x606\x608\x5\x136"+
		"\x9C\x2\x607\x606\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x609\x3\x2\x2"+
		"\x2\x609\x60B\a\xD0\x2\x2\x60A\x60C\x5\x136\x9C\x2\x60B\x60A\x3\x2\x2"+
		"\x2\x60B\x60C\x3\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\x60E\x5\xBA^\x2\x60E"+
		"\xAF\x3\x2\x2\x2\x60F\x610\x5\x118\x8D\x2\x610\x611\x5\x136\x9C\x2\x611"+
		"\x613\x3\x2\x2\x2\x612\x60F\x3\x2\x2\x2\x612\x613\x3\x2\x2\x2\x613\x616"+
		"\x3\x2\x2\x2\x614\x615\a\xB6\x2\x2\x615\x617\x5\x136\x9C\x2\x616\x614"+
		"\x3\x2\x2\x2\x616\x617\x3\x2\x2\x2\x617\x618\x3\x2\x2\x2\x618\x61A\a\xBA"+
		"\x2\x2\x619\x61B\x5\x136\x9C\x2\x61A\x619\x3\x2\x2\x2\x61A\x61B\x3\x2"+
		"\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C\x621\x5\xB2Z\x2\x61D\x61F\x5\x136\x9C"+
		"\x2\x61E\x61D\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2\x61F\x620\x3\x2\x2\x2"+
		"\x620\x622\x5\xF0y\x2\x621\x61E\x3\x2\x2\x2\x621\x622\x3\x2\x2\x2\x622"+
		"\x623\x3\x2\x2\x2\x623\x625\x5\x122\x92\x2\x624\x626\x5\x1E\x10\x2\x625"+
		"\x624\x3\x2\x2\x2\x625\x626\x3\x2\x2\x2\x626\x627\x3\x2\x2\x2\x627\x628"+
		"\a\x61\x2\x2\x628\xB1\x3\x2\x2\x2\x629\x62A\x5\xFC\x7F\x2\x62A\xB3\x3"+
		"\x2\x2\x2\x62B\x62C\x5\x118\x8D\x2\x62C\x62D\x5\x136\x9C\x2\x62D\x62F"+
		"\x3\x2\x2\x2\x62E\x62B\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2\x62F\x630\x3"+
		"\x2\x2\x2\x630\x631\a\xC0\x2\x2\x631\x632\x5\x136\x9C\x2\x632\x633\x5"+
		"\xFC\x7F\x2\x633\x637\x5\x122\x92\x2\x634\x636\x5\xB6\\\x2\x635\x634\x3"+
		"\x2\x2\x2\x636\x639\x3\x2\x2\x2\x637\x635\x3\x2\x2\x2\x637\x638\x3\x2"+
		"\x2\x2\x638\x63A\x3\x2\x2\x2\x639\x637\x3\x2\x2\x2\x63A\x63B\a\x62\x2"+
		"\x2\x63B\xB5\x3\x2\x2\x2\x63C\x64B\x5\xFC\x7F\x2\x63D\x63F\x5\x136\x9C"+
		"\x2\x63E\x63D\x3\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2"+
		"\x640\x645\a\xD4\x2\x2\x641\x643\x5\x136\x9C\x2\x642\x641\x3\x2\x2\x2"+
		"\x642\x643\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x646\x5\xF6|\x2\x645"+
		"\x642\x3\x2\x2\x2\x645\x646\x3\x2\x2\x2\x646\x648\x3\x2\x2\x2\x647\x649"+
		"\x5\x136\x9C\x2\x648\x647\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A"+
		"\x3\x2\x2\x2\x64A\x64C\a\xDB\x2\x2\x64B\x63E\x3\x2\x2\x2\x64B\x64C\x3"+
		"\x2\x2\x2\x64C\x650\x3\x2\x2\x2\x64D\x64E\x5\x136\x9C\x2\x64E\x64F\x5"+
		"\xFE\x80\x2\x64F\x651\x3\x2\x2\x2\x650\x64D\x3\x2\x2\x2\x650\x651\x3\x2"+
		"\x2\x2\x651\x652\x3\x2\x2\x2\x652\x653\x5\x122\x92\x2\x653\xB7\x3\x2\x2"+
		"\x2\x654\x655\a\xC2\x2\x2\x655\x656\x5\x136\x9C\x2\x656\x666\x5\xCEh\x2"+
		"\x657\x659\x5\x136\x9C\x2\x658\x657\x3\x2\x2\x2\x658\x659\x3\x2\x2\x2"+
		"\x659\x65A\x3\x2\x2\x2\x65A\x65C\a)\x2\x2\x65B\x65D\x5\x136\x9C\x2\x65C"+
		"\x65B\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x65E\x3\x2\x2\x2\x65E\x664"+
		"\x5\xBA^\x2\x65F\x660\x5\x136\x9C\x2\x660\x661\a\xBE\x2\x2\x661\x662\x5"+
		"\x136\x9C\x2\x662\x663\x5\xBA^\x2\x663\x665\x3\x2\x2\x2\x664\x65F\x3\x2"+
		"\x2\x2\x664\x665\x3\x2\x2\x2\x665\x667\x3\x2\x2\x2\x666\x658\x3\x2\x2"+
		"\x2\x666\x667\x3\x2\x2\x2\x667\xB9\x3\x2\x2\x2\x668\x669\b^\x1\x2\x669"+
		"\x66B\a\x8D\x2\x2\x66A\x66C\x5\x136\x9C\x2\x66B\x66A\x3\x2\x2\x2\x66B"+
		"\x66C\x3\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x696\x5\xBA^\x15\x66E\x670"+
		"\a\x34\x2\x2\x66F\x671\x5\x136\x9C\x2\x670\x66F\x3\x2\x2\x2\x670\x671"+
		"\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x696\x5\xBA^\x12\x673\x675\x5"+
		"\xFA~\x2\x674\x676\x5\x136\x9C\x2\x675\x674\x3\x2\x2\x2\x675\x676\x3\x2"+
		"\x2\x2\x676\x677\x3\x2\x2\x2\x677\x679\a\xCD\x2\x2\x678\x67A\x5\x136\x9C"+
		"\x2\x679\x678\x3\x2\x2\x2\x679\x67A\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2"+
		"\x67B\x67C\x5\xBA^\x11\x67C\x696\x3\x2\x2\x2\x67D\x67F\a\xD6\x2\x2\x67E"+
		"\x680\x5\x136\x9C\x2\x67F\x67E\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680"+
		"\x681\x3\x2\x2\x2\x681\x696\x5\xBA^\xF\x682\x684\a\x8E\x2\x2\x683\x685"+
		"\x5\x136\x9C\x2\x684\x683\x3\x2\x2\x2\x684\x685\x3\x2\x2\x2\x685\x686"+
		"\x3\x2\x2\x2\x686\x696\x5\xBA^\b\x687\x696\x5\x110\x89\x2\x688\x696\x5"+
		"\xDAn\x2\x689\x68B\a\xD4\x2\x2\x68A\x68C\x5\x136\x9C\x2\x68B\x68A\x3\x2"+
		"\x2\x2\x68B\x68C\x3\x2\x2\x2\x68C\x68D\x3\x2\x2\x2\x68D\x68F\x5\xBA^\x2"+
		"\x68E\x690\x5\x136\x9C\x2\x68F\x68E\x3\x2\x2\x2\x68F\x690\x3\x2\x2\x2"+
		"\x690\x691\x3\x2\x2\x2\x691\x692\a\xDB\x2\x2\x692\x696\x3\x2\x2\x2\x693"+
		"\x696\x5\xBC_\x2\x694\x696\x5|?\x2\x695\x668\x3\x2\x2\x2\x695\x66E\x3"+
		"\x2\x2\x2\x695\x673\x3\x2\x2\x2\x695\x67D\x3\x2\x2\x2\x695\x682\x3\x2"+
		"\x2\x2\x695\x687\x3\x2\x2\x2\x695\x688\x3\x2\x2\x2\x695\x689\x3\x2\x2"+
		"\x2\x695\x693\x3\x2\x2\x2\x695\x694\x3\x2\x2\x2\x696\x705\x3\x2\x2\x2"+
		"\x697\x699\f\x10\x2\x2\x698\x69A\x5\x136\x9C\x2\x699\x698\x3\x2\x2\x2"+
		"\x699\x69A\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69D\a\xDA\x2\x2\x69C"+
		"\x69E\x5\x136\x9C\x2\x69D\x69C\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E"+
		"\x69F\x3\x2\x2\x2\x69F\x704\x5\xBA^\x11\x6A0\x6A2\f\xE\x2\x2\x6A1\x6A3"+
		"\x5\x136\x9C\x2\x6A2\x6A1\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3\x6A4"+
		"\x3\x2\x2\x2\x6A4\x6A6\t\r\x2\x2\x6A5\x6A7\x5\x136\x9C\x2\x6A6\x6A5\x3"+
		"\x2\x2\x2\x6A6\x6A7\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x704\x5\xBA"+
		"^\xF\x6A9\x6AB\f\r\x2\x2\x6AA\x6AC\x5\x136\x9C\x2\x6AB\x6AA\x3\x2\x2\x2"+
		"\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\x6AF\a\xCF\x2\x2\x6AE"+
		"\x6B0\x5\x136\x9C\x2\x6AF\x6AE\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0"+
		"\x6B1\x3\x2\x2\x2\x6B1\x704\x5\xBA^\xE\x6B2\x6B4\f\f\x2\x2\x6B3\x6B5\x5"+
		"\x136\x9C\x2\x6B4\x6B3\x3\x2\x2\x2\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B6\x3"+
		"\x2\x2\x2\x6B6\x6B8\a\x8B\x2\x2\x6B7\x6B9\x5\x136\x9C\x2\x6B8\x6B7\x3"+
		"\x2\x2\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x704\x5\xBA"+
		"^\r\x6BB\x6BD\f\v\x2\x2\x6BC\x6BE\x5\x136\x9C\x2\x6BD\x6BC\x3\x2\x2\x2"+
		"\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C1\t\xE\x2\x2\x6C0"+
		"\x6C2\x5\x136\x9C\x2\x6C1\x6C0\x3\x2\x2\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2"+
		"\x6C3\x3\x2\x2\x2\x6C3\x704\x5\xBA^\f\x6C4\x6C6\f\n\x2\x2\x6C5\x6C7\x5"+
		"\x136\x9C\x2\x6C6\x6C5\x3\x2\x2\x2\x6C6\x6C7\x3\x2\x2\x2\x6C7\x6C8\x3"+
		"\x2\x2\x2\x6C8\x6CA\a\x32\x2\x2\x6C9\x6CB\x5\x136\x9C\x2\x6CA\x6C9\x3"+
		"\x2\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC\x704\x5\xBA"+
		"^\v\x6CD\x6CF\f\t\x2\x2\x6CE\x6D0\x5\x136\x9C\x2\x6CF\x6CE\x3\x2\x2\x2"+
		"\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D3\t\xF\x2\x2\x6D2"+
		"\x6D4\x5\x136\x9C\x2\x6D3\x6D2\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4"+
		"\x6D5\x3\x2\x2\x2\x6D5\x704\x5\xBA^\n\x6D6\x6D8\f\a\x2\x2\x6D7\x6D9\x5"+
		"\x136\x9C\x2\x6D8\x6D7\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x6DA\x3"+
		"\x2\x2\x2\x6DA\x6DC\a\x36\x2\x2\x6DB\x6DD\x5\x136\x9C\x2\x6DC\x6DB\x3"+
		"\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x704\x5\xBA"+
		"^\b\x6DF\x6E1\f\x6\x2\x2\x6E0\x6E2\x5\x136\x9C\x2\x6E1\x6E0\x3\x2\x2\x2"+
		"\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E5\a\x9A\x2\x2\x6E4"+
		"\x6E6\x5\x136\x9C\x2\x6E5\x6E4\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6"+
		"\x6E7\x3\x2\x2\x2\x6E7\x704\x5\xBA^\a\x6E8\x6EA\f\x5\x2\x2\x6E9\x6EB\x5"+
		"\x136\x9C\x2\x6EA\x6E9\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6EC\x3"+
		"\x2\x2\x2\x6EC\x6EE\a\xCC\x2\x2\x6ED\x6EF\x5\x136\x9C\x2\x6EE\x6ED\x3"+
		"\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\x704\x5\xBA"+
		"^\x6\x6F1\x6F3\f\x4\x2\x2\x6F2\x6F4\x5\x136\x9C\x2\x6F3\x6F2\x3\x2\x2"+
		"\x2\x6F3\x6F4\x3\x2\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F7\a\x66\x2\x2"+
		"\x6F6\x6F8\x5\x136\x9C\x2\x6F7\x6F6\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2"+
		"\x6F8\x6F9\x3\x2\x2\x2\x6F9\x704\x5\xBA^\x5\x6FA\x6FC\f\x3\x2\x2\x6FB"+
		"\x6FD\x5\x136\x9C\x2\x6FC\x6FB\x3\x2\x2\x2\x6FC\x6FD\x3\x2\x2\x2\x6FD"+
		"\x6FE\x3\x2\x2\x2\x6FE\x700\ax\x2\x2\x6FF\x701\x5\x136\x9C\x2\x700\x6FF"+
		"\x3\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x704\x5"+
		"\xBA^\x4\x703\x697\x3\x2\x2\x2\x703\x6A0\x3\x2\x2\x2\x703\x6A9\x3\x2\x2"+
		"\x2\x703\x6B2\x3\x2\x2\x2\x703\x6BB\x3\x2\x2\x2\x703\x6C4\x3\x2\x2\x2"+
		"\x703\x6CD\x3\x2\x2\x2\x703\x6D6\x3\x2\x2\x2\x703\x6DF\x3\x2\x2\x2\x703"+
		"\x6E8\x3\x2\x2\x2\x703\x6F1\x3\x2\x2\x2\x703\x6FA\x3\x2\x2\x2\x704\x707"+
		"\x3\x2\x2\x2\x705\x703\x3\x2\x2\x2\x705\x706\x3\x2\x2\x2\x706\xBB\x3\x2"+
		"\x2\x2\x707\x705\x3\x2\x2\x2\x708\x709\a\xC1\x2\x2\x709\x70A\x5\x136\x9C"+
		"\x2\x70A\x710\x5\xBA^\x2\x70B\x70C\x5\x136\x9C\x2\x70C\x70D\a|\x2\x2\x70D"+
		"\x70E\x5\x136\x9C\x2\x70E\x70F\x5\x114\x8B\x2\x70F\x711\x3\x2\x2\x2\x710"+
		"\x70B\x3\x2\x2\x2\x710\x711\x3\x2\x2\x2\x711\xBD\x3\x2\x2\x2\x712\x716"+
		"\aU\x2\x2\x713\x716\a\xB6\x2\x2\x714\x716\x5\x118\x8D\x2\x715\x712\x3"+
		"\x2\x2\x2\x715\x713\x3\x2\x2\x2\x715\x714\x3\x2\x2\x2\x716\x717\x3\x2"+
		"\x2\x2\x717\x71A\x5\x136\x9C\x2\x718\x719\a\xCA\x2\x2\x719\x71B\x5\x136"+
		"\x9C\x2\x71A\x718\x3\x2\x2\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71C\x3\x2\x2"+
		"\x2\x71C\x71D\x5\xC0\x61\x2\x71D\xBF\x3\x2\x2\x2\x71E\x729\x5\xC2\x62"+
		"\x2\x71F\x721\x5\x136\x9C\x2\x720\x71F\x3\x2\x2\x2\x720\x721\x3\x2\x2"+
		"\x2\x721\x722\x3\x2\x2\x2\x722\x724\a)\x2\x2\x723\x725\x5\x136\x9C\x2"+
		"\x724\x723\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x726\x3\x2\x2\x2\x726"+
		"\x728\x5\xC2\x62\x2\x727\x720\x3\x2\x2\x2\x728\x72B\x3\x2\x2\x2\x729\x727"+
		"\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\xC1\x3\x2\x2\x2\x72B\x729\x3\x2"+
		"\x2\x2\x72C\x72E\x5\xFC\x7F\x2\x72D\x72F\x5\x116\x8C\x2\x72E\x72D\x3\x2"+
		"\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x741\x3\x2\x2\x2\x730\x732\x5\x136\x9C"+
		"\x2\x731\x730\x3\x2\x2\x2\x731\x732\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2"+
		"\x733\x735\a\xD4\x2\x2\x734\x736\x5\x136\x9C\x2\x735\x734\x3\x2\x2\x2"+
		"\x735\x736\x3\x2\x2\x2\x736\x73B\x3\x2\x2\x2\x737\x739\x5\xF6|\x2\x738"+
		"\x73A\x5\x136\x9C\x2\x739\x738\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2\x73A"+
		"\x73C\x3\x2\x2\x2\x73B\x737\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x73D"+
		"\x3\x2\x2\x2\x73D\x73F\a\xDB\x2\x2\x73E\x740\x5\x136\x9C\x2\x73F\x73E"+
		"\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x742\x3\x2\x2\x2\x741\x731\x3"+
		"\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x746\x3\x2\x2\x2\x743\x744\x5\x136"+
		"\x9C\x2\x744\x745\x5\xFE\x80\x2\x745\x747\x3\x2\x2\x2\x746\x743\x3\x2"+
		"\x2\x2\x746\x747\x3\x2\x2\x2\x747\xC3\x3\x2\x2\x2\x748\x749\a\xC7\x2\x2"+
		"\x749\x74A\x5\x136\x9C\x2\x74A\x74B\x5\xBA^\x2\x74B\x74D\x5\x122\x92\x2"+
		"\x74C\x74E\x5\x1E\x10\x2\x74D\x74C\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E"+
		"\x74F\x3\x2\x2\x2\x74F\x750\a\xC6\x2\x2\x750\xC5\x3\x2\x2\x2\x751\x752"+
		"\a\xC8\x2\x2\x752\x753\x5\x136\x9C\x2\x753\x755\x5\xCEh\x2\x754\x756\x5"+
		"\x136\x9C\x2\x755\x754\x3\x2\x2\x2\x755\x756\x3\x2\x2\x2\x756\x757\x3"+
		"\x2\x2\x2\x757\x759\a)\x2\x2\x758\x75A\x5\x136\x9C\x2\x759\x758\x3\x2"+
		"\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75C\x5\xBA^\x2"+
		"\x75C\xC7\x3\x2\x2\x2\x75D\x75E\a\xC9\x2\x2\x75E\x75F\x5\x136\x9C\x2\x75F"+
		"\x760\x5\xCA\x66\x2\x760\x762\x5\x122\x92\x2\x761\x763\x5\x1E\x10\x2\x762"+
		"\x761\x3\x2\x2\x2\x762\x763\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x765"+
		"\a\x63\x2\x2\x765\xC9\x3\x2\x2\x2\x766\x767\x5\xBA^\x2\x767\xCB\x3\x2"+
		"\x2\x2\x768\x769\a\xCB\x2\x2\x769\x76A\x5\x136\x9C\x2\x76A\x76C\x5\xCE"+
		"h\x2\x76B\x76D\x5\x136\x9C\x2\x76C\x76B\x3\x2\x2\x2\x76C\x76D\x3\x2\x2"+
		"\x2\x76D\x76E\x3\x2\x2\x2\x76E\x773\a)\x2\x2\x76F\x771\x5\x136\x9C\x2"+
		"\x770\x76F\x3\x2\x2\x2\x770\x771\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2\x772"+
		"\x774\x5\x86\x44\x2\x773\x770\x3\x2\x2\x2\x773\x774\x3\x2\x2\x2\x774\xCD"+
		"\x3\x2\x2\x2\x775\x777\a.\x2\x2\x776\x775\x3\x2\x2\x2\x776\x777\x3\x2"+
		"\x2\x2\x777\x778\x3\x2\x2\x2\x778\x779\x5\xBA^\x2\x779\xCF\x3\x2\x2\x2"+
		"\x77A\x77B\a@\x2\x2\x77B\x77C\x5\x136\x9C\x2\x77C\x77D\x5\xD2j\x2\x77D"+
		"\xD1\x3\x2\x2\x2\x77E\x780\x5\xDAn\x2\x77F\x77E\x3\x2\x2\x2\x77F\x780"+
		"\x3\x2\x2\x2\x780\x781\x3\x2\x2\x2\x781\x782\a-\x2\x2\x782\x784\x5\xFC"+
		"\x7F\x2\x783\x785\x5\x116\x8C\x2\x784\x783\x3\x2\x2\x2\x784\x785\x3\x2"+
		"\x2\x2\x785\x793\x3\x2\x2\x2\x786\x788\x5\x136\x9C\x2\x787\x786\x3\x2"+
		"\x2\x2\x787\x788\x3\x2\x2\x2\x788\x789\x3\x2\x2\x2\x789\x78B\a\xD4\x2"+
		"\x2\x78A\x78C\x5\x136\x9C\x2\x78B\x78A\x3\x2\x2\x2\x78B\x78C\x3\x2\x2"+
		"\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78F\x5\xEAv\x2\x78E\x790\x5\x136\x9C\x2"+
		"\x78F\x78E\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791"+
		"\x792\a\xDB\x2\x2\x792\x794\x3\x2\x2\x2\x793\x787\x3\x2\x2\x2\x793\x794"+
		"\x3\x2\x2\x2\x794\x79E\x3\x2\x2\x2\x795\x797\x5\x136\x9C\x2\x796\x795"+
		"\x3\x2\x2\x2\x796\x797\x3\x2\x2\x2\x797\x798\x3\x2\x2\x2\x798\x799\a\xD4"+
		"\x2\x2\x799\x79A\x5\xF6|\x2\x79A\x79B\a\xDB\x2\x2\x79B\x79D\x3\x2\x2\x2"+
		"\x79C\x796\x3\x2\x2\x2\x79D\x7A0\x3\x2\x2\x2\x79E\x79C\x3\x2\x2\x2\x79E"+
		"\x79F\x3\x2\x2\x2\x79F\x7C1\x3\x2\x2\x2\x7A0\x79E\x3\x2\x2\x2\x7A1\x7A3"+
		"\x5\xFC\x7F\x2\x7A2\x7A4\x5\x116\x8C\x2\x7A3\x7A2\x3\x2\x2\x2\x7A3\x7A4"+
		"\x3\x2\x2\x2\x7A4\x7B2\x3\x2\x2\x2\x7A5\x7A7\x5\x136\x9C\x2\x7A6\x7A5"+
		"\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8\x7AA\a\xD4"+
		"\x2\x2\x7A9\x7AB\x5\x136\x9C\x2\x7AA\x7A9\x3\x2\x2\x2\x7AA\x7AB\x3\x2"+
		"\x2\x2\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7AE\x5\xEAv\x2\x7AD\x7AF\x5\x136\x9C"+
		"\x2\x7AE\x7AD\x3\x2\x2\x2\x7AE\x7AF\x3\x2\x2\x2\x7AF\x7B0\x3\x2\x2\x2"+
		"\x7B0\x7B1\a\xDB\x2\x2\x7B1\x7B3\x3\x2\x2\x2\x7B2\x7A6\x3\x2\x2\x2\x7B2"+
		"\x7B3\x3\x2\x2\x2\x7B3\x7BD\x3\x2\x2\x2\x7B4\x7B6\x5\x136\x9C\x2\x7B5"+
		"\x7B4\x3\x2\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x7B7\x3\x2\x2\x2\x7B7\x7B8"+
		"\a\xD4\x2\x2\x7B8\x7B9\x5\xF6|\x2\x7B9\x7BA\a\xDB\x2\x2\x7BA\x7BC\x3\x2"+
		"\x2\x2\x7BB\x7B5\x3\x2\x2\x2\x7BC\x7BF\x3\x2\x2\x2\x7BD\x7BB\x3\x2\x2"+
		"\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x7C1\x3\x2\x2\x2\x7BF\x7BD\x3\x2\x2\x2"+
		"\x7C0\x77F\x3\x2\x2\x2\x7C0\x7A1\x3\x2\x2\x2\x7C1\xD3\x3\x2\x2\x2\x7C2"+
		"\x7C5\x5\xD6l\x2\x7C3\x7C5\x5\xD8m\x2\x7C4\x7C2\x3\x2\x2\x2\x7C4\x7C3"+
		"\x3\x2\x2\x2\x7C5\xD5\x3\x2\x2\x2\x7C6\x7C8\x5\xDAn\x2\x7C7\x7C6\x3\x2"+
		"\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7CA\x3\x2\x2\x2\x7C9\x7CB\x5\x136\x9C"+
		"\x2\x7CA\x7C9\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2\x2\x7CB\x7CC\x3\x2\x2\x2"+
		"\x7CC\x7CE\a-\x2\x2\x7CD\x7CF\x5\x136\x9C\x2\x7CE\x7CD\x3\x2\x2\x2\x7CE"+
		"\x7CF\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7D2\x5\xFA~\x2\x7D1\x7D3"+
		"\x5\x116\x8C\x2\x7D2\x7D1\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2\x2\x7D3\x7D7"+
		"\x3\x2\x2\x2\x7D4\x7D5\x5\x136\x9C\x2\x7D5\x7D6\x5\xEAv\x2\x7D6\x7D8\x3"+
		"\x2\x2\x2\x7D7\x7D4\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x7DD\x3\x2"+
		"\x2\x2\x7D9\x7DB\x5\x136\x9C\x2\x7DA\x7D9\x3\x2\x2\x2\x7DA\x7DB\x3\x2"+
		"\x2\x2\x7DB\x7DC\x3\x2\x2\x2\x7DC\x7DE\x5\xEEx\x2\x7DD\x7DA\x3\x2\x2\x2"+
		"\x7DD\x7DE\x3\x2\x2\x2\x7DE\x7E8\x3\x2\x2\x2\x7DF\x7E1\x5\x136\x9C\x2"+
		"\x7E0\x7DF\x3\x2\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2"+
		"\x7E3\a\xD4\x2\x2\x7E3\x7E4\x5\xF6|\x2\x7E4\x7E5\a\xDB\x2\x2\x7E5\x7E7"+
		"\x3\x2\x2\x2\x7E6\x7E0\x3\x2\x2\x2\x7E7\x7EA\x3\x2\x2\x2\x7E8\x7E6\x3"+
		"\x2\x2\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\xD7\x3\x2\x2\x2\x7EA\x7E8\x3\x2\x2"+
		"\x2\x7EB\x7EF\x5\xFC\x7F\x2\x7EC\x7ED\x5\x136\x9C\x2\x7ED\x7EE\x5\xEA"+
		"v\x2\x7EE\x7F0\x3\x2\x2\x2\x7EF\x7EC\x3\x2\x2\x2\x7EF\x7F0\x3\x2\x2\x2"+
		"\x7F0\x7FA\x3\x2\x2\x2\x7F1\x7F3\x5\x136\x9C\x2\x7F2\x7F1\x3\x2\x2\x2"+
		"\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2\x2\x7F4\x7F5\a\xD4\x2\x2\x7F5"+
		"\x7F6\x5\xF6|\x2\x7F6\x7F7\a\xDB\x2\x2\x7F7\x7F9\x3\x2\x2\x2\x7F8\x7F2"+
		"\x3\x2\x2\x2\x7F9\x7FC\x3\x2\x2\x2\x7FA\x7F8\x3\x2\x2\x2\x7FA\x7FB\x3"+
		"\x2\x2\x2\x7FB\xD9\x3\x2\x2\x2\x7FC\x7FA\x3\x2\x2\x2\x7FD\x802\x5\xE4"+
		"s\x2\x7FE\x802\x5\xDCo\x2\x7FF\x802\x5\xDEp\x2\x800\x802\x5\xE8u\x2\x801"+
		"\x7FD\x3\x2\x2\x2\x801\x7FE\x3\x2\x2\x2\x801\x7FF\x3\x2\x2\x2\x801\x800"+
		"\x3\x2\x2\x2\x802\xDB\x3\x2\x2\x2\x803\x805\x5\xFC\x7F\x2\x804\x806\x5"+
		"\x116\x8C\x2\x805\x804\x3\x2\x2\x2\x805\x806\x3\x2\x2\x2\x806\x80B\x3"+
		"\x2\x2\x2\x807\x809\x5\x136\x9C\x2\x808\x807\x3\x2\x2\x2\x808\x809\x3"+
		"\x2\x2\x2\x809\x80A\x3\x2\x2\x2\x80A\x80C\x5\xEEx\x2\x80B\x808\x3\x2\x2"+
		"\x2\x80B\x80C\x3\x2\x2\x2\x80C\x816\x3\x2\x2\x2\x80D\x80F\x5\x136\x9C"+
		"\x2\x80E\x80D\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2"+
		"\x810\x811\a\xD4\x2\x2\x811\x812\x5\xF6|\x2\x812\x813\a\xDB\x2\x2\x813"+
		"\x815\x3\x2\x2\x2\x814\x80E\x3\x2\x2\x2\x815\x818\x3\x2\x2\x2\x816\x814"+
		"\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2\x817\xDD\x3\x2\x2\x2\x818\x816\x3\x2"+
		"\x2\x2\x819\x81C\x5\xFC\x7F\x2\x81A\x81C\x5\x100\x81\x2\x81B\x819\x3\x2"+
		"\x2\x2\x81B\x81A\x3\x2\x2\x2\x81C\x81E\x3\x2\x2\x2\x81D\x81F\x5\x116\x8C"+
		"\x2\x81E\x81D\x3\x2\x2\x2\x81E\x81F\x3\x2\x2\x2\x81F\x821\x3\x2\x2\x2"+
		"\x820\x822\x5\x136\x9C\x2\x821\x820\x3\x2\x2\x2\x821\x822\x3\x2\x2\x2"+
		"\x822\x823\x3\x2\x2\x2\x823\x825\a\xD4\x2\x2\x824\x826\x5\x136\x9C\x2"+
		"\x825\x824\x3\x2\x2\x2\x825\x826\x3\x2\x2\x2\x826\x82B\x3\x2\x2\x2\x827"+
		"\x829\x5\xEAv\x2\x828\x82A\x5\x136\x9C\x2\x829\x828\x3\x2\x2\x2\x829\x82A"+
		"\x3\x2\x2\x2\x82A\x82C\x3\x2\x2\x2\x82B\x827\x3\x2\x2\x2\x82B\x82C\x3"+
		"\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x832\a\xDB\x2\x2\x82E\x830\x5\x136"+
		"\x9C\x2\x82F\x82E\x3\x2\x2\x2\x82F\x830\x3\x2\x2\x2\x830\x831\x3\x2\x2"+
		"\x2\x831\x833\x5\xEEx\x2\x832\x82F\x3\x2\x2\x2\x832\x833\x3\x2\x2\x2\x833"+
		"\x83D\x3\x2\x2\x2\x834\x836\x5\x136\x9C\x2\x835\x834\x3\x2\x2\x2\x835"+
		"\x836\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2\x837\x838\a\xD4\x2\x2\x838\x839"+
		"\x5\xF6|\x2\x839\x83A\a\xDB\x2\x2\x83A\x83C\x3\x2\x2\x2\x83B\x835\x3\x2"+
		"\x2\x2\x83C\x83F\x3\x2\x2\x2\x83D\x83B\x3\x2\x2\x2\x83D\x83E\x3\x2\x2"+
		"\x2\x83E\xDF\x3\x2\x2\x2\x83F\x83D\x3\x2\x2\x2\x840\x842\x5\xFA~\x2\x841"+
		"\x843\x5\x116\x8C\x2\x842\x841\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843"+
		"\x848\x3\x2\x2\x2\x844\x846\x5\x136\x9C\x2\x845\x844\x3\x2\x2\x2\x845"+
		"\x846\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x849\x5\xEEx\x2\x848\x845"+
		"\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2\x849\x853\x3\x2\x2\x2\x84A\x84C\x5"+
		"\x136\x9C\x2\x84B\x84A\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\x3"+
		"\x2\x2\x2\x84D\x84E\a\xD4\x2\x2\x84E\x84F\x5\xF6|\x2\x84F\x850\a\xDB\x2"+
		"\x2\x850\x852\x3\x2\x2\x2\x851\x84B\x3\x2\x2\x2\x852\x855\x3\x2\x2\x2"+
		"\x853\x851\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854\xE1\x3\x2\x2\x2\x855"+
		"\x853\x3\x2\x2\x2\x856\x859\x5\xFA~\x2\x857\x859\x5\x100\x81\x2\x858\x856"+
		"\x3\x2\x2\x2\x858\x857\x3\x2\x2\x2\x859\x85B\x3\x2\x2\x2\x85A\x85C\x5"+
		"\x116\x8C\x2\x85B\x85A\x3\x2\x2\x2\x85B\x85C\x3\x2\x2\x2\x85C\x85E\x3"+
		"\x2\x2\x2\x85D\x85F\x5\x136\x9C\x2\x85E\x85D\x3\x2\x2\x2\x85E\x85F\x3"+
		"\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860\x862\a\xD4\x2\x2\x861\x863\x5\x136"+
		"\x9C\x2\x862\x861\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x868\x3\x2\x2"+
		"\x2\x864\x866\x5\xEAv\x2\x865\x867\x5\x136\x9C\x2\x866\x865\x3\x2\x2\x2"+
		"\x866\x867\x3\x2\x2\x2\x867\x869\x3\x2\x2\x2\x868\x864\x3\x2\x2\x2\x868"+
		"\x869\x3\x2\x2\x2\x869\x86A\x3\x2\x2\x2\x86A\x86F\a\xDB\x2\x2\x86B\x86D"+
		"\x5\x136\x9C\x2\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x86E"+
		"\x3\x2\x2\x2\x86E\x870\x5\xEEx\x2\x86F\x86C\x3\x2\x2\x2\x86F\x870\x3\x2"+
		"\x2\x2\x870\x87A\x3\x2\x2\x2\x871\x873\x5\x136\x9C\x2\x872\x871\x3\x2"+
		"\x2\x2\x872\x873\x3\x2\x2\x2\x873\x874\x3\x2\x2\x2\x874\x875\a\xD4\x2"+
		"\x2\x875\x876\x5\xF6|\x2\x876\x877\a\xDB\x2\x2\x877\x879\x3\x2\x2\x2\x878"+
		"\x872\x3\x2\x2\x2\x879\x87C\x3\x2\x2\x2\x87A\x878\x3\x2\x2\x2\x87A\x87B"+
		"\x3\x2\x2\x2\x87B\xE3\x3\x2\x2\x2\x87C\x87A\x3\x2\x2\x2\x87D\x880\x5\xDC"+
		"o\x2\x87E\x880\x5\xDEp\x2\x87F\x87D\x3\x2\x2\x2\x87F\x87E\x3\x2\x2\x2"+
		"\x87F\x880\x3\x2\x2\x2\x880\x885\x3\x2\x2\x2\x881\x883\x5\xE6t\x2\x882"+
		"\x884\x5\x136\x9C\x2\x883\x882\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884"+
		"\x886\x3\x2\x2\x2\x885\x881\x3\x2\x2\x2\x886\x887\x3\x2\x2\x2\x887\x885"+
		"\x3\x2\x2\x2\x887\x888\x3\x2\x2\x2\x888\x88D\x3\x2\x2\x2\x889\x88B\x5"+
		"\x136\x9C\x2\x88A\x889\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88C\x3"+
		"\x2\x2\x2\x88C\x88E\x5\xEEx\x2\x88D\x88A\x3\x2\x2\x2\x88D\x88E\x3\x2\x2"+
		"\x2\x88E\x898\x3\x2\x2\x2\x88F\x891\x5\x136\x9C\x2\x890\x88F\x3\x2\x2"+
		"\x2\x890\x891\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x893\a\xD4\x2\x2"+
		"\x893\x894\x5\xF6|\x2\x894\x895\a\xDB\x2\x2\x895\x897\x3\x2\x2\x2\x896"+
		"\x890\x3\x2\x2\x2\x897\x89A\x3\x2\x2\x2\x898\x896\x3\x2\x2\x2\x898\x899"+
		"\x3\x2\x2\x2\x899\xE5\x3\x2\x2\x2\x89A\x898\x3\x2\x2\x2\x89B\x89D\t\x10"+
		"\x2\x2\x89C\x89E\x5\x136\x9C\x2\x89D\x89C\x3\x2\x2\x2\x89D\x89E\x3\x2"+
		"\x2\x2\x89E\x8A1\x3\x2\x2\x2\x89F\x8A2\x5\xE0q\x2\x8A0\x8A2\x5\xE2r\x2"+
		"\x8A1\x89F\x3\x2\x2\x2\x8A1\x8A0\x3\x2\x2\x2\x8A2\xE7\x3\x2\x2\x2\x8A3"+
		"\x8A5\x5\x136\x9C\x2\x8A4\x8A3\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5"+
		"\x8A6\x3\x2\x2\x2\x8A6\x8A7\x5\xEEx\x2\x8A7\xE9\x3\x2\x2\x2\x8A8\x8AA"+
		"\x5\xECw\x2\x8A9\x8A8\x3\x2\x2\x2\x8A9\x8AA\x3\x2\x2\x2\x8AA\x8AC\x3\x2"+
		"\x2\x2\x8AB\x8AD\x5\x136\x9C\x2\x8AC\x8AB\x3\x2\x2\x2\x8AC\x8AD\x3\x2"+
		"\x2\x2\x8AD\x8AE\x3\x2\x2\x2\x8AE\x8B0\t\v\x2\x2\x8AF\x8B1\x5\x136\x9C"+
		"\x2\x8B0\x8AF\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2\x8B1\x8B3\x3\x2\x2\x2"+
		"\x8B2\x8A9\x3\x2\x2\x2\x8B3\x8B6\x3\x2\x2\x2\x8B4\x8B2\x3\x2\x2\x2\x8B4"+
		"\x8B5\x3\x2\x2\x2\x8B5\x8B7\x3\x2\x2\x2\x8B6\x8B4\x3\x2\x2\x2\x8B7\x8C4"+
		"\x5\xECw\x2\x8B8\x8BA\x5\x136\x9C\x2\x8B9\x8B8\x3\x2\x2\x2\x8B9\x8BA\x3"+
		"\x2\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB\x8BD\t\v\x2\x2\x8BC\x8BE\x5\x136"+
		"\x9C\x2\x8BD\x8BC\x3\x2\x2\x2\x8BD\x8BE\x3\x2\x2\x2\x8BE\x8C0\x3\x2\x2"+
		"\x2\x8BF\x8C1\x5\xECw\x2\x8C0\x8BF\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1"+
		"\x8C3\x3\x2\x2\x2\x8C2\x8B9\x3\x2\x2\x2\x8C3\x8C6\x3\x2\x2\x2\x8C4\x8C2"+
		"\x3\x2\x2\x2\x8C4\x8C5\x3\x2\x2\x2\x8C5\xEB\x3\x2\x2\x2\x8C6\x8C4\x3\x2"+
		"\x2\x2\x8C7\x8C9\a\xD4\x2\x2\x8C8\x8C7\x3\x2\x2\x2\x8C8\x8C9\x3\x2\x2"+
		"\x2\x8C9\x8CC\x3\x2\x2\x2\x8CA\x8CB\t\x11\x2\x2\x8CB\x8CD\x5\x136\x9C"+
		"\x2\x8CC\x8CA\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CF\x3\x2\x2\x2"+
		"\x8CE\x8D0\a\xDB\x2\x2\x8CF\x8CE\x3\x2\x2\x2\x8CF\x8D0\x3\x2\x2\x2\x8D0"+
		"\x8D1\x3\x2\x2\x2\x8D1\x8D2\x5\xBA^\x2\x8D2\xED\x3\x2\x2\x2\x8D3\x8D5"+
		"\a,\x2\x2\x8D4\x8D6\x5\x136\x9C\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3"+
		"\x2\x2\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7\x8D9\x5\xFA~\x2\x8D8\x8DA\x5\x116"+
		"\x8C\x2\x8D9\x8D8\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\xEF\x3\x2\x2"+
		"\x2\x8DB\x8ED\a\xD4\x2\x2\x8DC\x8DE\x5\x136\x9C\x2\x8DD\x8DC\x3\x2\x2"+
		"\x2\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8EA\x5\xF2z\x2\x8E0"+
		"\x8E2\x5\x136\x9C\x2\x8E1\x8E0\x3\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2"+
		"\x8E3\x3\x2\x2\x2\x8E3\x8E5\a)\x2\x2\x8E4\x8E6\x5\x136\x9C\x2\x8E5\x8E4"+
		"\x3\x2\x2\x2\x8E5\x8E6\x3\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2\x8E7\x8E9\x5"+
		"\xF2z\x2\x8E8\x8E1\x3\x2\x2\x2\x8E9\x8EC\x3\x2\x2\x2\x8EA\x8E8\x3\x2\x2"+
		"\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\x8EE\x3\x2\x2\x2\x8EC\x8EA\x3\x2\x2\x2"+
		"\x8ED\x8DD\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8F0\x3\x2\x2\x2\x8EF"+
		"\x8F1\x5\x136\x9C\x2\x8F0\x8EF\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2\x2\x8F1"+
		"\x8F2\x3\x2\x2\x2\x8F2\x8F3\a\xDB\x2\x2\x8F3\xF1\x3\x2\x2\x2\x8F4\x8F5"+
		"\a\x95\x2\x2\x8F5\x8F7\x5\x136\x9C\x2\x8F6\x8F4\x3\x2\x2\x2\x8F6\x8F7"+
		"\x3\x2\x2\x2\x8F7\x8FA\x3\x2\x2\x2\x8F8\x8F9\t\x12\x2\x2\x8F9\x8FB\x5"+
		"\x136\x9C\x2\x8FA\x8F8\x3\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\x8FE\x3"+
		"\x2\x2\x2\x8FC\x8FD\a\x9C\x2\x2\x8FD\x8FF\x5\x136\x9C\x2\x8FE\x8FC\x3"+
		"\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\x3\x2\x2\x2\x900\x902\x5\xFA"+
		"~\x2\x901\x903\x5\x116\x8C\x2\x902\x901\x3\x2\x2\x2\x902\x903\x3\x2\x2"+
		"\x2\x903\x90C\x3\x2\x2\x2\x904\x906\x5\x136\x9C\x2\x905\x904\x3\x2\x2"+
		"\x2\x905\x906\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x909\a\xD4\x2\x2"+
		"\x908\x90A\x5\x136\x9C\x2\x909\x908\x3\x2\x2\x2\x909\x90A\x3\x2\x2\x2"+
		"\x90A\x90B\x3\x2\x2\x2\x90B\x90D\a\xDB\x2\x2\x90C\x905\x3\x2\x2\x2\x90C"+
		"\x90D\x3\x2\x2\x2\x90D\x912\x3\x2\x2\x2\x90E\x910\x5\x136\x9C\x2\x90F"+
		"\x90E\x3\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x913"+
		"\x5\xFE\x80\x2\x912\x90F\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x918\x3"+
		"\x2\x2\x2\x914\x916\x5\x136\x9C\x2\x915\x914\x3\x2\x2\x2\x915\x916\x3"+
		"\x2\x2\x2\x916\x917\x3\x2\x2\x2\x917\x919\x5\xF4{\x2\x918\x915\x3\x2\x2"+
		"\x2\x918\x919\x3\x2\x2\x2\x919\xF3\x3\x2\x2\x2\x91A\x91C\a\xD0\x2\x2\x91B"+
		"\x91D\x5\x136\x9C\x2\x91C\x91B\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D"+
		"\x91E\x3\x2\x2\x2\x91E\x91F\x5\xBA^\x2\x91F\xF5\x3\x2\x2\x2\x920\x92B"+
		"\x5\xF8}\x2\x921\x923\x5\x136\x9C\x2\x922\x921\x3\x2\x2\x2\x922\x923\x3"+
		"\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x926\a)\x2\x2\x925\x927\x5\x136\x9C"+
		"\x2\x926\x925\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927\x928\x3\x2\x2\x2"+
		"\x928\x92A\x5\xF8}\x2\x929\x922\x3\x2\x2\x2\x92A\x92D\x3\x2\x2\x2\x92B"+
		"\x929\x3\x2\x2\x2\x92B\x92C\x3\x2\x2\x2\x92C\xF7\x3\x2\x2\x2\x92D\x92B"+
		"\x3\x2\x2\x2\x92E\x92F\x5\xBA^\x2\x92F\x930\x5\x136\x9C\x2\x930\x931\a"+
		"\xBE\x2\x2\x931\x932\x5\x136\x9C\x2\x932\x934\x3\x2\x2\x2\x933\x92E\x3"+
		"\x2\x2\x2\x933\x934\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x936\x5\xBA"+
		"^\x2\x936\xF9\x3\x2\x2\x2\x937\x93B\x5\xFC\x7F\x2\x938\x93B\x5\x11E\x90"+
		"\x2\x939\x93B\x5\x11C\x8F\x2\x93A\x937\x3\x2\x2\x2\x93A\x938\x3\x2\x2"+
		"\x2\x93A\x939\x3\x2\x2\x2\x93B\xFB\x3\x2\x2\x2\x93C\x93F\a\xEE\x2\x2\x93D"+
		"\x93F\x5\x11A\x8E\x2\x93E\x93C\x3\x2\x2\x2\x93E\x93D\x3\x2\x2\x2\x93F"+
		"\xFD\x3\x2\x2\x2\x940\x942\a\x39\x2\x2\x941\x943\x5\x136\x9C\x2\x942\x941"+
		"\x3\x2\x2\x2\x942\x943\x3\x2\x2\x2\x943\x946\x3\x2\x2\x2\x944\x945\a\x8D"+
		"\x2\x2\x945\x947\x5\x136\x9C\x2\x946\x944\x3\x2\x2\x2\x946\x947\x3\x2"+
		"\x2\x2\x947\x948\x3\x2\x2\x2\x948\x94D\x5\x114\x8B\x2\x949\x94B\x5\x136"+
		"\x9C\x2\x94A\x949\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x94C\x3\x2\x2"+
		"\x2\x94C\x94E\x5\x106\x84\x2\x94D\x94A\x3\x2\x2\x2\x94D\x94E\x3\x2\x2"+
		"\x2\x94E\xFF\x3\x2\x2\x2\x94F\x950\t\x13\x2\x2\x950\x101\x3\x2\x2\x2\x951"+
		"\x952\t\xF\x2\x2\x952\x103\x3\x2\x2\x2\x953\x958\x5\xFC\x7F\x2\x954\x955"+
		"\t\x10\x2\x2\x955\x957\x5\xFC\x7F\x2\x956\x954\x3\x2\x2\x2\x957\x95A\x3"+
		"\x2\x2\x2\x958\x956\x3\x2\x2\x2\x958\x959\x3\x2\x2\x2\x959\x105\x3\x2"+
		"\x2\x2\x95A\x958\x3\x2\x2\x2\x95B\x95D\a\xD7\x2\x2\x95C\x95E\x5\x136\x9C"+
		"\x2\x95D\x95C\x3\x2\x2\x2\x95D\x95E\x3\x2\x2\x2\x95E\x961\x3\x2\x2\x2"+
		"\x95F\x962\x5\x112\x8A\x2\x960\x962\x5\xFC\x7F\x2\x961\x95F\x3\x2\x2\x2"+
		"\x961\x960\x3\x2\x2\x2\x962\x107\x3\x2\x2\x2\x963\x965\x5\x10A\x86\x2"+
		"\x964\x966\x5\x136\x9C\x2\x965\x964\x3\x2\x2\x2\x965\x966\x3\x2\x2\x2"+
		"\x966\x967\x3\x2\x2\x2\x967\x968\a*\x2\x2\x968\x109\x3\x2\x2\x2\x969\x96C"+
		"\x5\x10C\x87\x2\x96A\x96C\x5\x10E\x88\x2\x96B\x969\x3\x2\x2\x2\x96B\x96A"+
		"\x3\x2\x2\x2\x96C\x10B\x3\x2\x2\x2\x96D\x96E\x5\xFA~\x2\x96E\x10D\x3\x2"+
		"\x2\x2\x96F\x970\x5\x112\x8A\x2\x970\x10F\x3\x2\x2\x2\x971\x97A\x5\x112"+
		"\x8A\x2\x972\x97A\a\xE8\x2\x2\x973\x97A\a\xE3\x2\x2\x974\x97A\a\xBF\x2"+
		"\x2\x975\x97A\ao\x2\x2\x976\x97A\a\x8F\x2\x2\x977\x97A\a\x90\x2\x2\x978"+
		"\x97A\a[\x2\x2\x979\x971\x3\x2\x2\x2\x979\x972\x3\x2\x2\x2\x979\x973\x3"+
		"\x2\x2\x2\x979\x974\x3\x2\x2\x2\x979\x975\x3\x2\x2\x2\x979\x976\x3\x2"+
		"\x2\x2\x979\x977\x3\x2\x2\x2\x979\x978\x3\x2\x2\x2\x97A\x111\x3\x2\x2"+
		"\x2\x97B\x97C\t\x14\x2\x2\x97C\x113\x3\x2\x2\x2\x97D\x980\x5\x100\x81"+
		"\x2\x97E\x980\x5\x104\x83\x2\x97F\x97D\x3\x2\x2\x2\x97F\x97E\x3\x2\x2"+
		"\x2\x980\x989\x3\x2\x2\x2\x981\x983\x5\x136\x9C\x2\x982\x981\x3\x2\x2"+
		"\x2\x982\x983\x3\x2\x2\x2\x983\x984\x3\x2\x2\x2\x984\x986\a\xD4\x2\x2"+
		"\x985\x987\x5\x136\x9C\x2\x986\x985\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2"+
		"\x987\x988\x3\x2\x2\x2\x988\x98A\a\xDB\x2\x2\x989\x982\x3\x2\x2\x2\x989"+
		"\x98A\x3\x2\x2\x2\x98A\x115\x3\x2\x2\x2\x98B\x98C\t\x15\x2\x2\x98C\x117"+
		"\x3\x2\x2\x2\x98D\x98E\t\x16\x2\x2\x98E\x119\x3\x2\x2\x2\x98F\x990\t\x17"+
		"\x2\x2\x990\x11B\x3\x2\x2\x2\x991\x992\a\x39\x2\x2\x992\x11D\x3\x2\x2"+
		"\x2\x993\x994\t\x18\x2\x2\x994\x11F\x3\x2\x2\x2\x995\x997\x5\x136\x9C"+
		"\x2\x996\x995\x3\x2\x2\x2\x996\x997\x3\x2\x2\x2\x997\x999\x3\x2\x2\x2"+
		"\x998\x99A\x5\x124\x93\x2\x999\x998\x3\x2\x2\x2\x999\x99A\x3\x2\x2\x2"+
		"\x99A\x121\x3\x2\x2\x2\x99B\x99C\x5\x120\x91\x2\x99C\x99E\a\xE9\x2\x2"+
		"\x99D\x99F\x5\x136\x9C\x2\x99E\x99D\x3\x2\x2\x2\x99E\x99F\x3\x2\x2\x2"+
		"\x99F\x9A8\x3\x2\x2\x2\x9A0\x9A2\x5\x136\x9C\x2\x9A1\x9A0\x3\x2\x2\x2"+
		"\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9A5\a*\x2\x2\x9A4\x9A6"+
		"\x5\x136\x9C\x2\x9A5\x9A4\x3\x2\x2\x2\x9A5\x9A6\x3\x2\x2\x2\x9A6\x9A8"+
		"\x3\x2\x2\x2\x9A7\x99B\x3\x2\x2\x2\x9A7\x9A1\x3\x2\x2\x2\x9A8\x9AA\x3"+
		"\x2\x2\x2\x9A9\x9A7\x3\x2\x2\x2\x9AA\x9AD\x3\x2\x2\x2\x9AB\x9A9\x3\x2"+
		"\x2\x2\x9AB\x9AC\x3\x2\x2\x2\x9AC\x9B2\x3\x2\x2\x2\x9AD\x9AB\x3\x2\x2"+
		"\x2\x9AE\x9AF\x5\x120\x91\x2\x9AF\x9B0\a\x2\x2\x3\x9B0\x9B2\x3\x2\x2\x2"+
		"\x9B1\x9AB\x3\x2\x2\x2\x9B1\x9AE\x3\x2\x2\x2\x9B2\x123\x3\x2\x2\x2\x9B3"+
		"\x9B7\x5\x12C\x97\x2\x9B4\x9B7\x5\x128\x95\x2\x9B5\x9B7\x5\x126\x94\x2"+
		"\x9B6\x9B3\x3\x2\x2\x2\x9B6\x9B4\x3\x2\x2\x2\x9B6\x9B5\x3\x2\x2\x2\x9B7"+
		"\x125\x3\x2\x2\x2\x9B8\x9BA\a\xAB\x2\x2\x9B9\x9BB\x5\x136\x9C\x2\x9BA"+
		"\x9B9\x3\x2\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2\x2\x9BC\x9BD"+
		"\x5\x12A\x96\x2\x9BD\x127\x3\x2\x2\x2\x9BE\x9BF\a\xEA\x2\x2\x9BF\x9C0"+
		"\x5\x12A\x96\x2\x9C0\x129\x3\x2\x2\x2\x9C1\x9C4\a\xEF\x2\x2\x9C2\x9C4"+
		"\n\x19\x2\x2\x9C3\x9C1\x3\x2\x2\x2\x9C3\x9C2\x3\x2\x2\x2\x9C4\x9C7\x3"+
		"\x2\x2\x2\x9C5\x9C3\x3\x2\x2\x2\x9C5\x9C6\x3\x2\x2\x2\x9C6\x12B\x3\x2"+
		"\x2\x2\x9C7\x9C5\x3\x2\x2\x2\x9C8\x9CE\a\xEA\x2\x2\x9C9\x9CA\a/\x2\x2"+
		"\x9CA\x9CC\x5\x12E\x98\x2\x9CB\x9CD\x5\x136\x9C\x2\x9CC\x9CB\x3\x2\x2"+
		"\x2\x9CC\x9CD\x3\x2\x2\x2\x9CD\x9CF\x3\x2\x2\x2\x9CE\x9C9\x3\x2\x2\x2"+
		"\x9CF\x9D0\x3\x2\x2\x2\x9D0\x9CE\x3\x2\x2\x2\x9D0\x9D1\x3\x2\x2\x2\x9D1"+
		"\x12D\x3\x2\x2\x2\x9D2\x9D4\x5\x130\x99\x2\x9D3\x9D5\x5\x132\x9A\x2\x9D4"+
		"\x9D3\x3\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5\x12F\x3\x2\x2\x2\x9D6\x9D7"+
		"\x5\xFA~\x2\x9D7\x131\x3\x2\x2\x2\x9D8\x9D9\x5\x136\x9C\x2\x9D9\x9DA\x5"+
		"\x134\x9B\x2\x9DA\xA15\x3\x2\x2\x2\x9DB\x9DC\x5\x136\x9C\x2\x9DC\x9E5"+
		"\x5\x134\x9B\x2\x9DD\x9DF\x5\x136\x9C\x2\x9DE\x9DD\x3\x2\x2\x2\x9DE\x9DF"+
		"\x3\x2\x2\x2\x9DF\x9E0\x3\x2\x2\x2\x9E0\x9E2\a)\x2\x2\x9E1\x9E3\x5\x136"+
		"\x9C\x2\x9E2\x9E1\x3\x2\x2\x2\x9E2\x9E3\x3\x2\x2\x2\x9E3\x9E4\x3\x2\x2"+
		"\x2\x9E4\x9E6\x5\x134\x9B\x2\x9E5\x9DE\x3\x2\x2\x2\x9E6\x9E7\x3\x2\x2"+
		"\x2\x9E7\x9E5\x3\x2\x2\x2\x9E7\x9E8\x3\x2\x2\x2\x9E8\xA15\x3\x2\x2\x2"+
		"\x9E9\x9EB\x5\x136\x9C\x2\x9EA\x9E9\x3\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2"+
		"\x9EB\x9EC\x3\x2\x2\x2\x9EC\x9EE\a\xD4\x2\x2\x9ED\x9EF\x5\x136\x9C\x2"+
		"\x9EE\x9ED\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2\x9EF\x9F0\x3\x2\x2\x2\x9F0"+
		"\xA15\a\xDB\x2\x2\x9F1\x9F3\x5\x136\x9C\x2\x9F2\x9F1\x3\x2\x2\x2\x9F2"+
		"\x9F3\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F6\a\xD4\x2\x2\x9F5\x9F7"+
		"\x5\x136\x9C\x2\x9F6\x9F5\x3\x2\x2\x2\x9F6\x9F7\x3\x2\x2\x2\x9F7\x9F8"+
		"\x3\x2\x2\x2\x9F8\x9FA\x5\x134\x9B\x2\x9F9\x9FB\x5\x136\x9C\x2\x9FA\x9F9"+
		"\x3\x2\x2\x2\x9FA\x9FB\x3\x2\x2\x2\x9FB\x9FC\x3\x2\x2\x2\x9FC\x9FD\a\xDB"+
		"\x2\x2\x9FD\xA15\x3\x2\x2\x2\x9FE\xA00\x5\x136\x9C\x2\x9FF\x9FE\x3\x2"+
		"\x2\x2\x9FF\xA00\x3\x2\x2\x2\xA00\xA01\x3\x2\x2\x2\xA01\xA02\a\xD4\x2"+
		"\x2\xA02\xA0B\x5\x134\x9B\x2\xA03\xA05\x5\x136\x9C\x2\xA04\xA03\x3\x2"+
		"\x2\x2\xA04\xA05\x3\x2\x2\x2\xA05\xA06\x3\x2\x2\x2\xA06\xA08\a)\x2\x2"+
		"\xA07\xA09\x5\x136\x9C\x2\xA08\xA07\x3\x2\x2\x2\xA08\xA09\x3\x2\x2\x2"+
		"\xA09\xA0A\x3\x2\x2\x2\xA0A\xA0C\x5\x134\x9B\x2\xA0B\xA04\x3\x2\x2\x2"+
		"\xA0C\xA0D\x3\x2\x2\x2\xA0D\xA0B\x3\x2\x2\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E"+
		"\xA10\x3\x2\x2\x2\xA0F\xA11\x5\x136\x9C\x2\xA10\xA0F\x3\x2\x2\x2\xA10"+
		"\xA11\x3\x2\x2\x2\xA11\xA12\x3\x2\x2\x2\xA12\xA13\a\xDB\x2\x2\xA13\xA15"+
		"\x3\x2\x2\x2\xA14\x9D8\x3\x2\x2\x2\xA14\x9DB\x3\x2\x2\x2\xA14\x9EA\x3"+
		"\x2\x2\x2\xA14\x9F2\x3\x2\x2\x2\xA14\x9FF\x3\x2\x2\x2\xA15\x133\x3\x2"+
		"\x2\x2\xA16\xA17\x5\xBA^\x2\xA17\x135\x3\x2\x2\x2\xA18\xA1A\t\x1A\x2\x2"+
		"\xA19\xA18\x3\x2\x2\x2\xA1A\xA1B\x3\x2\x2\x2\xA1B\xA19\x3\x2\x2\x2\xA1B"+
		"\xA1C\x3\x2\x2\x2\xA1C\x137\x3\x2\x2\x2\x1BD\x13B\x141\x144\x148\x14C"+
		"\x150\x158\x15B\x165\x167\x16D\x175\x17C\x182\x18B\x193\x1A2\x1AD\x1B5"+
		"\x1BF\x1C5\x1C9\x1CD\x1D1\x1D6\x1E3\x217\x21D\x221\x226\x229\x22E\x234"+
		"\x238\x23D\x242\x247\x24A\x24E\x255\x25B\x261\x26C\x26F\x272\x277\x27D"+
		"\x281\x286\x28E\x294\x298\x2A4\x2A8\x2B3\x2BE\x2C5\x2CD\x2D2\x2DB\x2E2"+
		"\x2E6\x2E9\x2F3\x2F7\x2FC\x306\x30C\x31D\x323\x329\x32D\x339\x33D\x343"+
		"\x348\x34C\x350\x354\x357\x35A\x35D\x360\x364\x36E\x372\x375\x378\x37C"+
		"\x38F\x394\x398\x3A3\x3AB\x3AE\x3B0\x3B5\x3B9\x3BD\x3C1\x3C5\x3CB\x3CF"+
		"\x3D3\x3D8\x3DE\x3E1\x3E5\x3E9\x3EC\x3F0\x3F5\x3F7\x3FB\x3FF\x402\x406"+
		"\x409\x417\x41B\x420\x424\x428\x42C\x434\x438\x440\x444\x44C\x44E\x454"+
		"\x458\x45E\x462\x466\x474\x47E\x482\x487\x492\x496\x49B\x4AA\x4AF\x4B8"+
		"\x4BC\x4C0\x4C4\x4C8\x4CB\x4CF\x4D3\x4D6\x4DA\x4DD\x4E1\x4E3\x4E8\x4EC"+
		"\x4F0\x4F4\x4F6\x4FC\x500\x503\x508\x50C\x512\x515\x518\x51D\x521\x528"+
		"\x52C\x532\x535\x539\x540\x544\x54A\x54D\x551\x559\x55D\x560\x563\x567"+
		"\x56F\x573\x577\x579\x57C\x582\x586\x58A\x58F\x594\x598\x59C\x5A2\x5AA"+
		"\x5AC\x5B4\x5B8\x5C2\x5C6\x5D3\x5DA\x5DE\x5E9\x5F0\x5F5\x5F9\x5FE\x601"+
		"\x607\x60B\x612\x616\x61A\x61E\x621\x625\x62E\x637\x63E\x642\x645\x648"+
		"\x64B\x650\x658\x65C\x664\x666\x66B\x670\x675\x679\x67F\x684\x68B\x68F"+
		"\x695\x699\x69D\x6A2\x6A6\x6AB\x6AF\x6B4\x6B8\x6BD\x6C1\x6C6\x6CA\x6CF"+
		"\x6D3\x6D8\x6DC\x6E1\x6E5\x6EA\x6EE\x6F3\x6F7\x6FC\x700\x703\x705\x710"+
		"\x715\x71A\x720\x724\x729\x72E\x731\x735\x739\x73B\x73F\x741\x746\x74D"+
		"\x755\x759\x762\x76C\x770\x773\x776\x77F\x784\x787\x78B\x78F\x793\x796"+
		"\x79E\x7A3\x7A6\x7AA\x7AE\x7B2\x7B5\x7BD\x7C0\x7C4\x7C7\x7CA\x7CE\x7D2"+
		"\x7D7\x7DA\x7DD\x7E0\x7E8\x7EF\x7F2\x7FA\x801\x805\x808\x80B\x80E\x816"+
		"\x81B\x81E\x821\x825\x829\x82B\x82F\x832\x835\x83D\x842\x845\x848\x84B"+
		"\x853\x858\x85B\x85E\x862\x866\x868\x86C\x86F\x872\x87A\x87F\x883\x887"+
		"\x88A\x88D\x890\x898\x89D\x8A1\x8A4\x8A9\x8AC\x8B0\x8B4\x8B9\x8BD\x8C0"+
		"\x8C4\x8C8\x8CC\x8CF\x8D5\x8D9\x8DD\x8E1\x8E5\x8EA\x8ED\x8F0\x8F6\x8FA"+
		"\x8FE\x902\x905\x909\x90C\x90F\x912\x915\x918\x91C\x922\x926\x92B\x933"+
		"\x93A\x93E\x942\x946\x94A\x94D\x958\x95D\x961\x965\x96B\x979\x97F\x982"+
		"\x986\x989\x996\x999\x99E\x9A1\x9A5\x9A7\x9AB\x9B1\x9B6\x9BA\x9C3\x9C5"+
		"\x9CC\x9D0\x9D4\x9DE\x9E2\x9E7\x9EA\x9EE\x9F2\x9F6\x9FA\x9FF\xA04\xA08"+
		"\xA0D\xA10\xA14\xA1B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
