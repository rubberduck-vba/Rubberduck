//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="VBAParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IVBAParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.listOrLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListOrLabel([NotNull] VBAParser.ListOrLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.listOrLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListOrLabel([NotNull] VBAParser.ListOrLabelContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.seekStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSeekStmt([NotNull] VBAParser.SeekStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.seekStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSeekStmt([NotNull] VBAParser.SeekStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.fileNumber"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFileNumber([NotNull] VBAParser.FileNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.fileNumber"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFileNumber([NotNull] VBAParser.FileNumberContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.constStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstStmt([NotNull] VBAParser.ConstStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.constStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstStmt([NotNull] VBAParser.ConstStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.argDefaultValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgDefaultValue([NotNull] VBAParser.ArgDefaultValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.argDefaultValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgDefaultValue([NotNull] VBAParser.ArgDefaultValueContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.propertyLetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyLetStmt([NotNull] VBAParser.PropertyLetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.propertyLetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyLetStmt([NotNull] VBAParser.PropertyLetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleAttributes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleAttributes([NotNull] VBAParser.ModuleAttributesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleAttributes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleAttributes([NotNull] VBAParser.ModuleAttributesContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.typeStmt_Element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeStmt_Element([NotNull] VBAParser.TypeStmt_ElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.typeStmt_Element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeStmt_Element([NotNull] VBAParser.TypeStmt_ElementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ECS_ProcedureCall</c>
	/// labeled alternative in <see cref="VBAParser.explicitCallStmtExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterECS_ProcedureCall([NotNull] VBAParser.ECS_ProcedureCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ECS_ProcedureCall</c>
	/// labeled alternative in <see cref="VBAParser.explicitCallStmtExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitECS_ProcedureCall([NotNull] VBAParser.ECS_ProcedureCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] VBAParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] VBAParser.TypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.rsetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRsetStmt([NotNull] VBAParser.RsetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.rsetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRsetStmt([NotNull] VBAParser.RsetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.inputStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputStmt([NotNull] VBAParser.InputStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.inputStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputStmt([NotNull] VBAParser.InputStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsAdd</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsAdd([NotNull] VBAParser.VsAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsAdd</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsAdd([NotNull] VBAParser.VsAddContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.lsetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLsetStmt([NotNull] VBAParser.LsetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.lsetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLsetStmt([NotNull] VBAParser.LsetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.declareStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclareStmt([NotNull] VBAParser.DeclareStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.declareStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclareStmt([NotNull] VBAParser.DeclareStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.implicitCallStmt_InBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplicitCallStmt_InBlock([NotNull] VBAParser.ImplicitCallStmt_InBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.implicitCallStmt_InBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplicitCallStmt_InBlock([NotNull] VBAParser.ImplicitCallStmt_InBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.resetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResetStmt([NotNull] VBAParser.ResetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.resetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResetStmt([NotNull] VBAParser.ResetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsNew</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsNew([NotNull] VBAParser.VsNewContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsNew</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsNew([NotNull] VBAParser.VsNewContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.remComment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRemComment([NotNull] VBAParser.RemCommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.remComment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRemComment([NotNull] VBAParser.RemCommentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] VBAParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] VBAParser.BlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.setStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetStmt([NotNull] VBAParser.SetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.setStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetStmt([NotNull] VBAParser.SetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsNegation</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsNegation([NotNull] VBAParser.VsNegationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsNegation</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsNegation([NotNull] VBAParser.VsNegationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.letterSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLetterSpec([NotNull] VBAParser.LetterSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.letterSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLetterSpec([NotNull] VBAParser.LetterSpecContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.onErrorStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOnErrorStmt([NotNull] VBAParser.OnErrorStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.onErrorStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOnErrorStmt([NotNull] VBAParser.OnErrorStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.fieldLength"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldLength([NotNull] VBAParser.FieldLengthContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.fieldLength"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldLength([NotNull] VBAParser.FieldLengthContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ECS_MemberCall</c>
	/// labeled alternative in <see cref="VBAParser.explicitCallStmtExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterECS_MemberCall([NotNull] VBAParser.ECS_MemberCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ECS_MemberCall</c>
	/// labeled alternative in <see cref="VBAParser.explicitCallStmtExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitECS_MemberCall([NotNull] VBAParser.ECS_MemberCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] VBAParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] VBAParser.IdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.dictionaryCallStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictionaryCallStmt([NotNull] VBAParser.DictionaryCallStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.dictionaryCallStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictionaryCallStmt([NotNull] VBAParser.DictionaryCallStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.goSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoSubStmt([NotNull] VBAParser.GoSubStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.goSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoSubStmt([NotNull] VBAParser.GoSubStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.redimSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRedimSubStmt([NotNull] VBAParser.RedimSubStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.redimSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRedimSubStmt([NotNull] VBAParser.RedimSubStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.attributeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeStmt([NotNull] VBAParser.AttributeStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.attributeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeStmt([NotNull] VBAParser.AttributeStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.enumerationStmt_Constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumerationStmt_Constant([NotNull] VBAParser.EnumerationStmt_ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.enumerationStmt_Constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumerationStmt_Constant([NotNull] VBAParser.EnumerationStmt_ConstantContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule([NotNull] VBAParser.ModuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule([NotNull] VBAParser.ModuleContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.complexType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComplexType([NotNull] VBAParser.ComplexTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.complexType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComplexType([NotNull] VBAParser.ComplexTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleHeader([NotNull] VBAParser.ModuleHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleHeader([NotNull] VBAParser.ModuleHeaderContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsICS</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsICS([NotNull] VBAParser.VsICSContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsICS</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsICS([NotNull] VBAParser.VsICSContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.implicitCallStmt_InStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplicitCallStmt_InStmt([NotNull] VBAParser.ImplicitCallStmt_InStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.implicitCallStmt_InStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplicitCallStmt_InStmt([NotNull] VBAParser.ImplicitCallStmt_InStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.typeOfIsExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeOfIsExpression([NotNull] VBAParser.TypeOfIsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.typeOfIsExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeOfIsExpression([NotNull] VBAParser.TypeOfIsExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleDeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleDeclarations([NotNull] VBAParser.ModuleDeclarationsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleDeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleDeclarations([NotNull] VBAParser.ModuleDeclarationsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.explicitCallStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplicitCallStmt([NotNull] VBAParser.ExplicitCallStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.explicitCallStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplicitCallStmt([NotNull] VBAParser.ExplicitCallStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.onGoSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOnGoSubStmt([NotNull] VBAParser.OnGoSubStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.onGoSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOnGoSubStmt([NotNull] VBAParser.OnGoSubStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_B_MemberProcedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_B_MemberProcedureCall([NotNull] VBAParser.ICS_B_MemberProcedureCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_B_MemberProcedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_B_MemberProcedureCall([NotNull] VBAParser.ICS_B_MemberProcedureCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.outputList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOutputList([NotNull] VBAParser.OutputListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.outputList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOutputList([NotNull] VBAParser.OutputListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.selectCaseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectCaseStmt([NotNull] VBAParser.SelectCaseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.selectCaseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectCaseStmt([NotNull] VBAParser.SelectCaseStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsIntDiv</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsIntDiv([NotNull] VBAParser.VsIntDivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsIntDiv</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsIntDiv([NotNull] VBAParser.VsIntDivContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleBody([NotNull] VBAParser.ModuleBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleBody([NotNull] VBAParser.ModuleBodyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.letterRange"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLetterRange([NotNull] VBAParser.LetterRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.letterRange"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLetterRange([NotNull] VBAParser.LetterRangeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.defDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefDirective([NotNull] VBAParser.DefDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.defDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefDirective([NotNull] VBAParser.DefDirectiveContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>caseCondSelection</c>
	/// labeled alternative in <see cref="VBAParser.sC_Cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseCondSelection([NotNull] VBAParser.CaseCondSelectionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>caseCondSelection</c>
	/// labeled alternative in <see cref="VBAParser.sC_Cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseCondSelection([NotNull] VBAParser.CaseCondSelectionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.widthStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWidthStmt([NotNull] VBAParser.WidthStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.widthStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWidthStmt([NotNull] VBAParser.WidthStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.withStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStmt([NotNull] VBAParser.WithStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.withStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStmt([NotNull] VBAParser.WithStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.argCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgCall([NotNull] VBAParser.ArgCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.argCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgCall([NotNull] VBAParser.ArgCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.annotationName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationName([NotNull] VBAParser.AnnotationNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.annotationName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationName([NotNull] VBAParser.AnnotationNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.typeHint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeHint([NotNull] VBAParser.TypeHintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.typeHint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeHint([NotNull] VBAParser.TypeHintContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.constSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstSubStmt([NotNull] VBAParser.ConstSubStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.constSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstSubStmt([NotNull] VBAParser.ConstSubStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.endOfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEndOfStatement([NotNull] VBAParser.EndOfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.endOfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEndOfStatement([NotNull] VBAParser.EndOfStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.elseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseBlock([NotNull] VBAParser.ElseBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.elseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseBlock([NotNull] VBAParser.ElseBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>optionCompareStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionCompareStmt([NotNull] VBAParser.OptionCompareStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>optionCompareStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionCompareStmt([NotNull] VBAParser.OptionCompareStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.redimStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRedimStmt([NotNull] VBAParser.RedimStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.redimStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRedimStmt([NotNull] VBAParser.RedimStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] VBAParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] VBAParser.LiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_S_ProcedureOrArrayCallUnrestricted"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_S_ProcedureOrArrayCallUnrestricted([NotNull] VBAParser.ICS_S_ProcedureOrArrayCallUnrestrictedContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_S_ProcedureOrArrayCallUnrestricted"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_S_ProcedureOrArrayCallUnrestricted([NotNull] VBAParser.ICS_S_ProcedureOrArrayCallUnrestrictedContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.asTypeClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAsTypeClause([NotNull] VBAParser.AsTypeClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.asTypeClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAsTypeClause([NotNull] VBAParser.AsTypeClauseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.errorStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterErrorStmt([NotNull] VBAParser.ErrorStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.errorStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitErrorStmt([NotNull] VBAParser.ErrorStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsAddressOf</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsAddressOf([NotNull] VBAParser.VsAddressOfContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsAddressOf</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsAddressOf([NotNull] VBAParser.VsAddressOfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.arg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArg([NotNull] VBAParser.ArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.arg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArg([NotNull] VBAParser.ArgContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsMult</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsMult([NotNull] VBAParser.VsMultContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsMult</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsMult([NotNull] VBAParser.VsMultContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.eventStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEventStmt([NotNull] VBAParser.EventStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.eventStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEventStmt([NotNull] VBAParser.EventStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.firstLetter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFirstLetter([NotNull] VBAParser.FirstLetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.firstLetter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFirstLetter([NotNull] VBAParser.FirstLetterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.lockStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLockStmt([NotNull] VBAParser.LockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.lockStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLockStmt([NotNull] VBAParser.LockStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.resumeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResumeStmt([NotNull] VBAParser.ResumeStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.resumeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResumeStmt([NotNull] VBAParser.ResumeStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>optionExplicitStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionExplicitStmt([NotNull] VBAParser.OptionExplicitStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>optionExplicitStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionExplicitStmt([NotNull] VBAParser.OptionExplicitStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.annotation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation([NotNull] VBAParser.AnnotationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.annotation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation([NotNull] VBAParser.AnnotationContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsNot</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsNot([NotNull] VBAParser.VsNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsNot</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsNot([NotNull] VBAParser.VsNotContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.endOfLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEndOfLine([NotNull] VBAParser.EndOfLineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.endOfLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEndOfLine([NotNull] VBAParser.EndOfLineContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStartRule([NotNull] VBAParser.StartRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStartRule([NotNull] VBAParser.StartRuleContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.writeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStmt([NotNull] VBAParser.WriteStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.writeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStmt([NotNull] VBAParser.WriteStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsAnd</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsAnd([NotNull] VBAParser.VsAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsAnd</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsAnd([NotNull] VBAParser.VsAndContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.endStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEndStmt([NotNull] VBAParser.EndStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.endStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEndStmt([NotNull] VBAParser.EndStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.annotationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationList([NotNull] VBAParser.AnnotationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.annotationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationList([NotNull] VBAParser.AnnotationListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.singleLetter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleLetter([NotNull] VBAParser.SingleLetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.singleLetter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleLetter([NotNull] VBAParser.SingleLetterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.singleLineElseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleLineElseClause([NotNull] VBAParser.SingleLineElseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.singleLineElseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleLineElseClause([NotNull] VBAParser.SingleLineElseClauseContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsAmp</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsAmp([NotNull] VBAParser.VsAmpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsAmp</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsAmp([NotNull] VBAParser.VsAmpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] VBAParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] VBAParser.IfStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.subroutineName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubroutineName([NotNull] VBAParser.SubroutineNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.subroutineName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubroutineName([NotNull] VBAParser.SubroutineNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.forNextStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForNextStmt([NotNull] VBAParser.ForNextStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.forNextStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForNextStmt([NotNull] VBAParser.ForNextStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>caseCondTo</c>
	/// labeled alternative in <see cref="VBAParser.sC_Selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseCondTo([NotNull] VBAParser.CaseCondToContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>caseCondTo</c>
	/// labeled alternative in <see cref="VBAParser.sC_Selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseCondTo([NotNull] VBAParser.CaseCondToContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsImp</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsImp([NotNull] VBAParser.VsImpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsImp</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsImp([NotNull] VBAParser.VsImpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_S_MembersCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_S_MembersCall([NotNull] VBAParser.ICS_S_MembersCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_S_MembersCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_S_MembersCall([NotNull] VBAParser.ICS_S_MembersCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.forEachStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStmt([NotNull] VBAParser.ForEachStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.forEachStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStmt([NotNull] VBAParser.ForEachStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.exitStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExitStmt([NotNull] VBAParser.ExitStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.exitStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExitStmt([NotNull] VBAParser.ExitStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.numberLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberLiteral([NotNull] VBAParser.NumberLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.numberLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberLiteral([NotNull] VBAParser.NumberLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.argList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgList([NotNull] VBAParser.ArgListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.argList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgList([NotNull] VBAParser.ArgListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.singleLineIfStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleLineIfStmt([NotNull] VBAParser.SingleLineIfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.singleLineIfStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleLineIfStmt([NotNull] VBAParser.SingleLineIfStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsStruct</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsStruct([NotNull] VBAParser.VsStructContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsStruct</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsStruct([NotNull] VBAParser.VsStructContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.subscripts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubscripts([NotNull] VBAParser.SubscriptsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.subscripts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubscripts([NotNull] VBAParser.SubscriptsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.lastLetter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLastLetter([NotNull] VBAParser.LastLetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.lastLetter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLastLetter([NotNull] VBAParser.LastLetterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.letStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLetStmt([NotNull] VBAParser.LetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.letStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLetStmt([NotNull] VBAParser.LetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.propertySetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertySetStmt([NotNull] VBAParser.PropertySetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.propertySetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertySetStmt([NotNull] VBAParser.PropertySetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.subStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubStmt([NotNull] VBAParser.SubStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.subStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubStmt([NotNull] VBAParser.SubStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>optionBaseStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionBaseStmt([NotNull] VBAParser.OptionBaseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>optionBaseStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionBaseStmt([NotNull] VBAParser.OptionBaseStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsRelational</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsRelational([NotNull] VBAParser.VsRelationalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsRelational</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsRelational([NotNull] VBAParser.VsRelationalContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.statementLabelDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementLabelDefinition([NotNull] VBAParser.StatementLabelDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.statementLabelDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementLabelDefinition([NotNull] VBAParser.StatementLabelDefinitionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.lineInputStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLineInputStmt([NotNull] VBAParser.LineInputStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.lineInputStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLineInputStmt([NotNull] VBAParser.LineInputStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.typeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeStmt([NotNull] VBAParser.TypeStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.typeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeStmt([NotNull] VBAParser.TypeStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementKeyword([NotNull] VBAParser.StatementKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementKeyword([NotNull] VBAParser.StatementKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_S_MemberCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_S_MemberCall([NotNull] VBAParser.ICS_S_MemberCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_S_MemberCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_S_MemberCall([NotNull] VBAParser.ICS_S_MemberCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.outputList_Expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOutputList_Expression([NotNull] VBAParser.OutputList_ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.outputList_Expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOutputList_Expression([NotNull] VBAParser.OutputList_ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.ifWithNonEmptyThen"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfWithNonEmptyThen([NotNull] VBAParser.IfWithNonEmptyThenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.ifWithNonEmptyThen"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfWithNonEmptyThen([NotNull] VBAParser.IfWithNonEmptyThenContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>optionPrivateModuleStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionPrivateModuleStmt([NotNull] VBAParser.OptionPrivateModuleStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>optionPrivateModuleStmt</c>
	/// labeled alternative in <see cref="VBAParser.moduleOption"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionPrivateModuleStmt([NotNull] VBAParser.OptionPrivateModuleStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.putStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPutStmt([NotNull] VBAParser.PutStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.putStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPutStmt([NotNull] VBAParser.PutStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] VBAParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] VBAParser.KeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_S_DictionaryCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_S_DictionaryCall([NotNull] VBAParser.ICS_S_DictionaryCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_S_DictionaryCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_S_DictionaryCall([NotNull] VBAParser.ICS_S_DictionaryCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.annotationArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationArg([NotNull] VBAParser.AnnotationArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.annotationArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationArg([NotNull] VBAParser.AnnotationArgContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsAssign</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsAssign([NotNull] VBAParser.VsAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsAssign</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsAssign([NotNull] VBAParser.VsAssignContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.variableStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableStmt([NotNull] VBAParser.VariableStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.variableStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableStmt([NotNull] VBAParser.VariableStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.elseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfBlock([NotNull] VBAParser.ElseIfBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.elseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfBlock([NotNull] VBAParser.ElseIfBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.subscript"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubscript([NotNull] VBAParser.SubscriptContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.subscript"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubscript([NotNull] VBAParser.SubscriptContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.visibility"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVisibility([NotNull] VBAParser.VisibilityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.visibility"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVisibility([NotNull] VBAParser.VisibilityContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.attributeValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeValue([NotNull] VBAParser.AttributeValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.attributeValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeValue([NotNull] VBAParser.AttributeValueContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsTypeOf</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsTypeOf([NotNull] VBAParser.VsTypeOfContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsTypeOf</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsTypeOf([NotNull] VBAParser.VsTypeOfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonOperator([NotNull] VBAParser.ComparisonOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonOperator([NotNull] VBAParser.ComparisonOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>caseCondValue</c>
	/// labeled alternative in <see cref="VBAParser.sC_Selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseCondValue([NotNull] VBAParser.CaseCondValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>caseCondValue</c>
	/// labeled alternative in <see cref="VBAParser.sC_Selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseCondValue([NotNull] VBAParser.CaseCondValueContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.whileWendStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileWendStmt([NotNull] VBAParser.WhileWendStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.whileWendStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileWendStmt([NotNull] VBAParser.WhileWendStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.functionStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionStmt([NotNull] VBAParser.FunctionStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.functionStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionStmt([NotNull] VBAParser.FunctionStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] VBAParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] VBAParser.ReturnStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.lineNumberLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLineNumberLabel([NotNull] VBAParser.LineNumberLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.lineNumberLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLineNumberLabel([NotNull] VBAParser.LineNumberLabelContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.universalLetterRange"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUniversalLetterRange([NotNull] VBAParser.UniversalLetterRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.universalLetterRange"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUniversalLetterRange([NotNull] VBAParser.UniversalLetterRangeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsMod</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsMod([NotNull] VBAParser.VsModContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsMod</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsMod([NotNull] VBAParser.VsModContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsOr</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsOr([NotNull] VBAParser.VsOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsOr</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsOr([NotNull] VBAParser.VsOrContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.variableSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableSubStmt([NotNull] VBAParser.VariableSubStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.variableSubStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableSubStmt([NotNull] VBAParser.VariableSubStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>caseCondElse</c>
	/// labeled alternative in <see cref="VBAParser.sC_Cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseCondElse([NotNull] VBAParser.CaseCondElseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>caseCondElse</c>
	/// labeled alternative in <see cref="VBAParser.sC_Cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseCondElse([NotNull] VBAParser.CaseCondElseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.getStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetStmt([NotNull] VBAParser.GetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.getStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetStmt([NotNull] VBAParser.GetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.raiseEventStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaiseEventStmt([NotNull] VBAParser.RaiseEventStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.raiseEventStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaiseEventStmt([NotNull] VBAParser.RaiseEventStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.sameLineStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSameLineStatement([NotNull] VBAParser.SameLineStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.sameLineStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSameLineStatement([NotNull] VBAParser.SameLineStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.ifWithEmptyThen"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfWithEmptyThen([NotNull] VBAParser.IfWithEmptyThenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.ifWithEmptyThen"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfWithEmptyThen([NotNull] VBAParser.IfWithEmptyThenContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.annotationArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationArgList([NotNull] VBAParser.AnnotationArgListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.annotationArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationArgList([NotNull] VBAParser.AnnotationArgListContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>caseCondIs</c>
	/// labeled alternative in <see cref="VBAParser.sC_Selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseCondIs([NotNull] VBAParser.CaseCondIsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>caseCondIs</c>
	/// labeled alternative in <see cref="VBAParser.sC_Selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseCondIs([NotNull] VBAParser.CaseCondIsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.onGoToStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOnGoToStmt([NotNull] VBAParser.OnGoToStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.onGoToStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOnGoToStmt([NotNull] VBAParser.OnGoToStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.argsCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgsCall([NotNull] VBAParser.ArgsCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.argsCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgsCall([NotNull] VBAParser.ArgsCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleConfigElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleConfigElement([NotNull] VBAParser.ModuleConfigElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleConfigElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleConfigElement([NotNull] VBAParser.ModuleConfigElementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.propertyGetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyGetStmt([NotNull] VBAParser.PropertyGetStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.propertyGetStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyGetStmt([NotNull] VBAParser.PropertyGetStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.upperCaseA"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpperCaseA([NotNull] VBAParser.UpperCaseAContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.upperCaseA"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpperCaseA([NotNull] VBAParser.UpperCaseAContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBaseType([NotNull] VBAParser.BaseTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBaseType([NotNull] VBAParser.BaseTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.defType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefType([NotNull] VBAParser.DefTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.defType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefType([NotNull] VBAParser.DefTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_S_ProcedureOrArrayCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_S_ProcedureOrArrayCall([NotNull] VBAParser.ICS_S_ProcedureOrArrayCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_S_ProcedureOrArrayCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_S_ProcedureOrArrayCall([NotNull] VBAParser.ICS_S_ProcedureOrArrayCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.openStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpenStmt([NotNull] VBAParser.OpenStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.openStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpenStmt([NotNull] VBAParser.OpenStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.markerKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMarkerKeyword([NotNull] VBAParser.MarkerKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.markerKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMarkerKeyword([NotNull] VBAParser.MarkerKeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.attributeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeName([NotNull] VBAParser.AttributeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.attributeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeName([NotNull] VBAParser.AttributeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.implementsStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplementsStmt([NotNull] VBAParser.ImplementsStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.implementsStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplementsStmt([NotNull] VBAParser.ImplementsStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.closeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCloseStmt([NotNull] VBAParser.CloseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.closeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCloseStmt([NotNull] VBAParser.CloseStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.stopStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStopStmt([NotNull] VBAParser.StopStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.stopStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStopStmt([NotNull] VBAParser.StopStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.identifierStatementLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierStatementLabel([NotNull] VBAParser.IdentifierStatementLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.identifierStatementLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierStatementLabel([NotNull] VBAParser.IdentifierStatementLabelContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.whiteSpace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhiteSpace([NotNull] VBAParser.WhiteSpaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.whiteSpace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhiteSpace([NotNull] VBAParser.WhiteSpaceContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.sC_Case"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSC_Case([NotNull] VBAParser.SC_CaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.sC_Case"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSC_Case([NotNull] VBAParser.SC_CaseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.functionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionName([NotNull] VBAParser.FunctionNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.functionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionName([NotNull] VBAParser.FunctionNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.variableListStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableListStmt([NotNull] VBAParser.VariableListStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.variableListStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableListStmt([NotNull] VBAParser.VariableListStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.statementLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementLabel([NotNull] VBAParser.StatementLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.statementLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementLabel([NotNull] VBAParser.StatementLabelContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.upperCaseZ"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpperCaseZ([NotNull] VBAParser.UpperCaseZContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.upperCaseZ"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpperCaseZ([NotNull] VBAParser.UpperCaseZContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_S_VariableOrProcedureCallUnrestricted"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_S_VariableOrProcedureCallUnrestricted([NotNull] VBAParser.ICS_S_VariableOrProcedureCallUnrestrictedContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_S_VariableOrProcedureCallUnrestricted"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_S_VariableOrProcedureCallUnrestricted([NotNull] VBAParser.ICS_S_VariableOrProcedureCallUnrestrictedContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_B_ProcedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_B_ProcedureCall([NotNull] VBAParser.ICS_B_ProcedureCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_B_ProcedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_B_ProcedureCall([NotNull] VBAParser.ICS_B_ProcedureCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.unlockStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnlockStmt([NotNull] VBAParser.UnlockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.unlockStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnlockStmt([NotNull] VBAParser.UnlockStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsXor</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsXor([NotNull] VBAParser.VsXorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsXor</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsXor([NotNull] VBAParser.VsXorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.commentOrAnnotation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommentOrAnnotation([NotNull] VBAParser.CommentOrAnnotationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.commentOrAnnotation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommentOrAnnotation([NotNull] VBAParser.CommentOrAnnotationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.goToStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoToStmt([NotNull] VBAParser.GoToStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.goToStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoToStmt([NotNull] VBAParser.GoToStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.midStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMidStmt([NotNull] VBAParser.MidStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.midStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMidStmt([NotNull] VBAParser.MidStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanExpression([NotNull] VBAParser.BooleanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanExpression([NotNull] VBAParser.BooleanExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsPow</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsPow([NotNull] VBAParser.VsPowContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsPow</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsPow([NotNull] VBAParser.VsPowContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.printStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintStmt([NotNull] VBAParser.PrintStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.printStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintStmt([NotNull] VBAParser.PrintStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleConfig"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleConfig([NotNull] VBAParser.ModuleConfigContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleConfig"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleConfig([NotNull] VBAParser.ModuleConfigContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.doLoopStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoLoopStmt([NotNull] VBAParser.DoLoopStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.doLoopStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoLoopStmt([NotNull] VBAParser.DoLoopStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.iCS_S_VariableOrProcedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterICS_S_VariableOrProcedureCall([NotNull] VBAParser.ICS_S_VariableOrProcedureCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.iCS_S_VariableOrProcedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitICS_S_VariableOrProcedureCall([NotNull] VBAParser.ICS_S_VariableOrProcedureCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleDeclarationsElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleDeclarationsElement([NotNull] VBAParser.ModuleDeclarationsElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleDeclarationsElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleDeclarationsElement([NotNull] VBAParser.ModuleDeclarationsElementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.blockStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStmt([NotNull] VBAParser.BlockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.blockStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStmt([NotNull] VBAParser.BlockStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.withStmtExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStmtExpression([NotNull] VBAParser.WithStmtExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.withStmtExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStmtExpression([NotNull] VBAParser.WithStmtExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.eraseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEraseStmt([NotNull] VBAParser.EraseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.eraseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEraseStmt([NotNull] VBAParser.EraseStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.commentBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommentBody([NotNull] VBAParser.CommentBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.commentBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommentBody([NotNull] VBAParser.CommentBodyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.enumerationStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumerationStmt([NotNull] VBAParser.EnumerationStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.enumerationStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumerationStmt([NotNull] VBAParser.EnumerationStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsLiteral</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsLiteral([NotNull] VBAParser.VsLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsLiteral</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsLiteral([NotNull] VBAParser.VsLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsEqv</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsEqv([NotNull] VBAParser.VsEqvContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsEqv</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsEqv([NotNull] VBAParser.VsEqvContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] VBAParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] VBAParser.CommentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.moduleBodyElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleBodyElement([NotNull] VBAParser.ModuleBodyElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.moduleBodyElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleBodyElement([NotNull] VBAParser.ModuleBodyElementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="VBAParser.unrestrictedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnrestrictedIdentifier([NotNull] VBAParser.UnrestrictedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="VBAParser.unrestrictedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnrestrictedIdentifier([NotNull] VBAParser.UnrestrictedIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vsMid</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVsMid([NotNull] VBAParser.VsMidContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vsMid</c>
	/// labeled alternative in <see cref="VBAParser.valueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVsMid([NotNull] VBAParser.VsMidContext context);
}
} // namespace Rubberduck.Parsing.Grammar
