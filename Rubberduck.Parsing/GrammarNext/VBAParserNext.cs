//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParserNext.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParserNext : Parser {
	public const int
		PRINT=129, ELSEIF=56, CLOSE=31, STATIC=159, MINUS=193, OPTION_EXPLICIT=122, 
		L_SQUARE_BRACKET=204, SETATTR=155, HASHENDIF=203, DATELITERAL=212, ERROR=70, 
		NOTHING=114, EACH=54, SUB=163, FILECOPY=78, STOP=161, LPAREN=191, MID=107, 
		BEEP=20, AS=18, END_PROPERTY=61, AT=7, DATABASE=34, GOSUB=84, HASHCONST=199, 
		CHDIR=28, POW=197, DOLLAR=9, PROPERTY_LET=132, THEN=166, XOR=183, EXIT_FOR=73, 
		DEFINT=42, HASHIF=200, UNLOCK=173, CALL=26, LOCK_READ=102, SET=154, LOCK_READ_WRITE=104, 
		LSET=105, RAISEEVENT=139, SEEK=151, LONG=96, LIB=99, DIM=51, APPEND=17, 
		MKDIR=108, OPEN=119, DIV=185, PROPERTY_SET=133, PERCENT=8, SENDKEYS=153, 
		END_SELECT=62, STRING=162, HASHELSEIF=201, REM=143, TO=168, DEFDBL=40, 
		BYVAL=23, FRIEND=79, LOOP=97, DELETESETTING=50, CLASS=30, DO=52, VARIANT=175, 
		END_WITH=65, DEFBOOL=37, OPTIONAL=120, ADDRESSOF=12, CONST=33, RSET=148, 
		INTEGER=92, REMCOMMENT=214, ATTRIBUTE=15, OUTPUT=126, FOR=80, PTRSAFE=134, 
		EQ=187, BOOLEAN=22, NAME=110, END_FUNCTION=59, DEFSNG=47, DEFBYTE=38, 
		NOT=113, DOUBLELITERAL=211, SAVESETTING=150, END=66, PRESERVE=128, ON_LOCAL_ERROR=118, 
		HASHELSE=202, LOAD=94, BINARY=21, RETURN=146, EXCLAMATIONPOINT=4, NEXT=111, 
		GLOBAL=83, IDENTIFIER=219, WS=218, EMPTY=57, MOD=109, WITHEVENTS=181, 
		COLON=2, DEFLNGLNG=44, STEP=160, TIME=167, OPTION_BASE=121, GT=189, PUT=136, 
		WITH=180, LOCK_WRITE=103, LINE_CONTINUATION=220, TYPEOF=171, DEFVAR=49, 
		RMDIR=147, DEFLNG=43, FALSE=77, ERRORCHAR=222, UNDERSCORE=217, INTEGERLITERAL=210, 
		END_IF=60, LOCK=95, TEXT=165, SINGLEQUOTE=216, SAVEPICTURE=149, MULT=194, 
		SEMICOLON=3, BYTE=25, HEXLITERAL=208, ELSE=55, IF=86, TYPE=170, AMPERSAND=10, 
		DEFLNGPTR=45, ENUM=67, DEFOBJ=46, IN=89, CHDRIVE=29, DOT=5, EXIT_DO=72, 
		GUIDLITERAL=221, IS=91, EQV=68, WEND=177, FUNCTION=81, HASH=6, CASE=27, 
		GEQ=188, GET=82, PUBLIC=135, ON_ERROR=117, END_ENUM=58, GOTO=85, INTDIV=186, 
		WIDTH=179, BEGIN=19, EXIT_SUB=76, ASSIGN=184, COMMENT=215, WRITE=182, 
		RANDOMIZE=138, DOUBLE=53, EXIT_PROPERTY=75, COMMA=1, RANDOM=137, PROPERTY_GET=131, 
		SELECT=152, PRIVATE=130, ERASE=69, TAB=164, BYREF=24, VERSION=176, NEQ=195, 
		END_TYPE=64, KILL=93, COLLECTION=32, NEW=112, INPUT=90, SINGLE=157, UNLOAD=172, 
		ALIAS=13, SPC=158, LT=192, RESET=144, END_SUB=63, EVENT=71, READ_WRITE=141, 
		OPTION_COMPARE=123, ME=106, NULL=115, NEWLINE=213, TRUE=169, RPAREN=198, 
		APPACTIVATE=16, IMP=87, STRINGLITERAL=206, OCTLITERAL=207, READ=140, DATE=35, 
		LIKE=100, AND=14, OPTION_PRIVATE_MODULE=124, SHORTLITERAL=209, PLUS=196, 
		RESUME=145, SHARED=156, EXIT_FUNCTION=74, ACCESS=11, LINE_INPUT=101, ON=116, 
		OR=125, PARAMARRAY=127, R_SQUARE_BRACKET=205, IMPLEMENTS=88, UNTIL=174, 
		DEFCUR=41, DECLARE=36, DEFDATE=39, REDIM=142, LEQ=190, DEFSTR=48, LET=98, 
		WHILE=178, LEN=223;
	public static readonly string[] tokenNames = {
		"<INVALID>", "','", "':'", "';'", "'!'", "'.'", "'#'", "'@'", "'%'", "'$'", 
		"'&'", "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", 
		"APPEND", "AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", 
		"BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", 
		"CONST", "DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", 
		"DEFDBL", "DEFCUR", "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", 
		"DEFSNG", "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", 
		"EACH", "ELSE", "ELSEIF", "EMPTY", "END_ENUM", "END_FUNCTION", "END_IF", 
		"END_PROPERTY", "END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", 
		"ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", 
		"EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY", "FRIEND", "FOR", "FUNCTION", 
		"GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", 
		"IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", "LOOP", "LET", "LIB", 
		"LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", 
		"ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", "NOTHING", 
		"NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "'>='", 
		"'>'", "'<='", "'('", "'<'", "'-'", "'*'", "'<>'", "'+'", "'^'", "')'", 
		"HASHCONST", "HASHIF", "HASHELSEIF", "HASHELSE", "HASHENDIF", "'['", "']'", 
		"STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", 
		"DOUBLELITERAL", "DATELITERAL", "NEWLINE", "REMCOMMENT", "COMMENT", "'''", 
		"'_'", "WS", "IDENTIFIER", "LINE_CONTINUATION", "GUIDLITERAL", "ERRORCHAR", 
		"LEN"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_attributeStmt = 11, RULE_block = 12, 
		RULE_blockStmt = 13, RULE_appactivateStmt = 14, RULE_beepStmt = 15, RULE_chdirStmt = 16, 
		RULE_chdriveStmt = 17, RULE_closeStmt = 18, RULE_constStmt = 19, RULE_constSubStmt = 20, 
		RULE_dateStmt = 21, RULE_declareStmt = 22, RULE_deftypeStmt = 23, RULE_deleteSettingStmt = 24, 
		RULE_doLoopStmt = 25, RULE_endStmt = 26, RULE_enumerationStmt = 27, RULE_enumerationStmt_Constant = 28, 
		RULE_eraseStmt = 29, RULE_errorStmt = 30, RULE_eventStmt = 31, RULE_exitStmt = 32, 
		RULE_filecopyStmt = 33, RULE_forEachStmt = 34, RULE_forNextStmt = 35, 
		RULE_functionStmt = 36, RULE_getStmt = 37, RULE_goSubStmt = 38, RULE_goToStmt = 39, 
		RULE_ifThenElseStmt = 40, RULE_ifBlockStmt = 41, RULE_ifConditionStmt = 42, 
		RULE_ifElseIfBlockStmt = 43, RULE_ifElseBlockStmt = 44, RULE_implementsStmt = 45, 
		RULE_inputStmt = 46, RULE_killStmt = 47, RULE_letStmt = 48, RULE_lineInputStmt = 49, 
		RULE_loadStmt = 50, RULE_lockStmt = 51, RULE_lsetStmt = 52, RULE_midStmt = 53, 
		RULE_mkdirStmt = 54, RULE_nameStmt = 55, RULE_onErrorStmt = 56, RULE_onGoToStmt = 57, 
		RULE_onGoSubStmt = 58, RULE_openStmt = 59, RULE_outputList = 60, RULE_outputList_Expression = 61, 
		RULE_printStmt = 62, RULE_propertyGetStmt = 63, RULE_propertySetStmt = 64, 
		RULE_propertyLetStmt = 65, RULE_putStmt = 66, RULE_raiseEventStmt = 67, 
		RULE_randomizeStmt = 68, RULE_redimStmt = 69, RULE_redimSubStmt = 70, 
		RULE_resetStmt = 71, RULE_resumeStmt = 72, RULE_returnStmt = 73, RULE_rmdirStmt = 74, 
		RULE_rsetStmt = 75, RULE_savepictureStmt = 76, RULE_saveSettingStmt = 77, 
		RULE_seekStmt = 78, RULE_selectCaseStmt = 79, RULE_sC_Selection = 80, 
		RULE_sC_Case = 81, RULE_sC_Cond = 82, RULE_sendkeysStmt = 83, RULE_setattrStmt = 84, 
		RULE_setStmt = 85, RULE_stopStmt = 86, RULE_subStmt = 87, RULE_timeStmt = 88, 
		RULE_typeStmt = 89, RULE_typeStmt_Element = 90, RULE_typeOfStmt = 91, 
		RULE_unloadStmt = 92, RULE_unlockStmt = 93, RULE_valueStmt = 94, RULE_variableStmt = 95, 
		RULE_variableListStmt = 96, RULE_variableSubStmt = 97, RULE_whileWendStmt = 98, 
		RULE_widthStmt = 99, RULE_withStmt = 100, RULE_writeStmt = 101, RULE_fileNumber = 102, 
		RULE_explicitCallStmt = 103, RULE_eCS_ProcedureCall = 104, RULE_eCS_MemberProcedureCall = 105, 
		RULE_implicitCallStmt_InBlock = 106, RULE_iCS_B_MemberProcedureCall = 107, 
		RULE_iCS_B_ProcedureCall = 108, RULE_implicitCallStmt_InStmt = 109, RULE_iCS_S_VariableOrProcedureCall = 110, 
		RULE_iCS_S_ProcedureOrArrayCall = 111, RULE_iCS_S_MembersCall = 112, RULE_iCS_S_MemberCall = 113, 
		RULE_iCS_S_DictionaryCall = 114, RULE_argsCall = 115, RULE_argCall = 116, 
		RULE_dictionaryCallStmt = 117, RULE_argList = 118, RULE_arg = 119, RULE_argDefaultValue = 120, 
		RULE_subscripts = 121, RULE_subscript = 122, RULE_ambiguousIdentifier = 123, 
		RULE_asTypeClause = 124, RULE_baseType = 125, RULE_certainIdentifier = 126, 
		RULE_comparisonOperator = 127, RULE_complexType = 128, RULE_fieldLength = 129, 
		RULE_letterrange = 130, RULE_lineLabel = 131, RULE_literal = 132, RULE_numberLiteral = 133, 
		RULE_type = 134, RULE_typeHint = 135, RULE_visibility = 136, RULE_ambiguousKeyword = 137, 
		RULE_endOfLine = 138, RULE_endOfStatement = 139, RULE_remComment = 140, 
		RULE_comment = 141, RULE_annotationList = 142, RULE_annotation = 143, 
		RULE_annotationName = 144, RULE_annotationArgList = 145, RULE_annotationArg = 146, 
		RULE_whiteSpace = 147;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "attributeStmt", "block", "blockStmt", 
		"appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", "closeStmt", 
		"constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
		"deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "midStmt", "mkdirStmt", "nameStmt", 
		"onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", 
		"stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", 
		"unloadStmt", "unlockStmt", "valueStmt", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "writeStmt", 
		"fileNumber", "explicitCallStmt", "eCS_ProcedureCall", "eCS_MemberProcedureCall", 
		"implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", 
		"implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "ambiguousIdentifier", "asTypeClause", "baseType", 
		"certainIdentifier", "comparisonOperator", "complexType", "fieldLength", 
		"letterrange", "lineLabel", "literal", "numberLiteral", "type", "typeHint", 
		"visibility", "ambiguousKeyword", "endOfLine", "endOfStatement", "remComment", 
		"comment", "annotationList", "annotation", "annotationName", "annotationArgList", 
		"annotationArg", "whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParserNext.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParserNext(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParserNext.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; module();
			State = 297; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 299; whiteSpace();
				}
				break;
			}
			State = 302; endOfStatement();
			State = 306;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 303; moduleHeader();
				State = 304; endOfStatement();
				}
				break;
			}
			State = 309;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 308; moduleConfig();
				}
				break;
			}
			State = 311; endOfStatement();
			State = 313;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 312; moduleAttributes();
				}
				break;
			}
			State = 315; endOfStatement();
			State = 317;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 316; moduleDeclarations();
				}
				break;
			}
			State = 319; endOfStatement();
			State = 321;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 320; moduleBody();
				}
				break;
			}
			State = 323; endOfStatement();
			State = 325;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 324; whiteSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParserNext.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParserNext.DOUBLELITERAL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParserNext.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(VERSION);
			State = 328; whiteSpace();
			State = 329; Match(DOUBLELITERAL);
			State = 331;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 330; whiteSpace();
				}
				break;
			}
			State = 334;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 333; Match(CLASS);
				}
				break;
			}
			State = 336; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParserNext.GUIDLITERAL, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParserNext.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParserNext.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(BEGIN);
			State = 346;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 339; whiteSpace();
				State = 340; Match(GUIDLITERAL);
				State = 341; whiteSpace();
				State = 342; ambiguousIdentifier();
				State = 344;
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 343; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 348; endOfStatement();
			State = 350;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 349; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 352;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 354; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VBAParserNext.COLON, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode SHORTLITERAL() { return GetToken(VBAParserNext.SHORTLITERAL, 0); }
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; ambiguousIdentifier();
			State = 360;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 357; whiteSpace();
				}
				}
				State = 362;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 363; Match(EQ);
			State = 367;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 364; whiteSpace();
				}
				}
				State = 369;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 370; literal();
			State = 373;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 371; Match(COLON);
				State = 372; Match(SHORTLITERAL);
				}
				break;
			}
			State = 375; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 377; attributeStmt();
					State = 378; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 382;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; moduleDeclarationsElement();
			State = 390;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 385; endOfStatement();
					State = 386; moduleDeclarationsElement();
					}
					} 
				}
				State = 392;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			State = 393; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParserNext.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParserNext.OPTION_BASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode SHORTLITERAL() { return GetToken(VBAParserNext.SHORTLITERAL, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParserNext.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParserNext.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParserNext.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParserNext.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParserNext.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 405;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; Match(OPTION_BASE);
				State = 396; whiteSpace();
				State = 397; Match(SHORTLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 399; Match(OPTION_COMPARE);
				State = 400; whiteSpace();
				State = 401;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 403; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 404; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 415;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407; declareStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408; enumerationStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 409; eventStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 410; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 411; implementsStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 412; variableStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 413; moduleOption();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 414; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; moduleBodyElement();
			State = 423;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 418; endOfStatement();
					State = 419; moduleBodyElement();
					}
					} 
				}
				State = 425;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			State = 426; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 433;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 431; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 432; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParserNext.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(ATTRIBUTE);
			State = 436; whiteSpace();
			State = 437; implicitCallStmt_InStmt();
			State = 439;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 438; whiteSpace();
				}
			}

			State = 441; Match(EQ);
			State = 443;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 442; whiteSpace();
				}
			}

			State = 445; literal();
			State = 456;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 447;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 446; whiteSpace();
						}
					}

					State = 449; Match(COMMA);
					State = 451;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 450; whiteSpace();
						}
					}

					State = 453; literal();
					}
					} 
				}
				State = 458;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; blockStmt();
			State = 465;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 460; endOfStatement();
					State = 461; blockStmt();
					}
					} 
				}
				State = 467;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			State = 468; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_blockStmt);
		try {
			State = 536;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 470; lineLabel();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471; appactivateStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 472; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 473; beepStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 474; chdirStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 475; chdriveStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 476; closeStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 477; constStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 478; dateStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 479; deleteSettingStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 480; deftypeStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 481; doLoopStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 482; endStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 483; eraseStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 484; errorStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 485; exitStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 486; explicitCallStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 487; filecopyStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 488; forEachStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 489; forNextStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 490; getStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 491; goSubStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 492; goToStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 493; ifThenElseStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 494; implementsStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 495; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 496; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 497; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 498; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 499; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 500; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 501; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 502; midStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 503; mkdirStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 504; nameStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 505; onErrorStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 506; onGoToStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 507; onGoSubStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 508; openStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 509; printStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 510; putStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 511; raiseEventStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 512; randomizeStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 513; redimStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 514; resetStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 515; resumeStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 516; returnStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 517; rmdirStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 518; rsetStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 519; savepictureStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 520; saveSettingStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 521; seekStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 522; selectCaseStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 523; sendkeysStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 524; setattrStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 525; setStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 526; stopStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 527; timeStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 528; unloadStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 529; unlockStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 530; variableStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 531; whileWendStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 532; widthStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 533; withStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 534; writeStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 535; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParserNext.APPACTIVATE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(APPACTIVATE);
			State = 539; whiteSpace();
			State = 540; valueStmt(0);
			State = 549;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 542;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 541; whiteSpace();
					}
				}

				State = 544; Match(COMMA);
				State = 546;
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 545; whiteSpace();
					}
					break;
				}
				State = 548; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParserNext.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode CHDIR() { return GetToken(VBAParserNext.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; Match(CHDIR);
			State = 554; whiteSpace();
			State = 555; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode CHDRIVE() { return GetToken(VBAParserNext.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(CHDRIVE);
			State = 558; whiteSpace();
			State = 559; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public ITerminalNode CLOSE() { return GetToken(VBAParserNext.CLOSE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(CLOSE);
			State = 577;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 562; whiteSpace();
				State = 563; fileNumber();
				State = 574;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 565;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 564; whiteSpace();
							}
						}

						State = 567; Match(COMMA);
						State = 569;
						switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
						case 1:
							{
							State = 568; whiteSpace();
							}
							break;
						}
						State = 571; fileNumber();
						}
						} 
					}
					State = 576;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParserNext.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 579; visibility();
				State = 580; whiteSpace();
				}
			}

			State = 584; Match(CONST);
			State = 585; whiteSpace();
			State = 586; constSubStmt();
			State = 597;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 588;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 587; whiteSpace();
						}
					}

					State = 590; Match(COMMA);
					State = 592;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 591; whiteSpace();
						}
					}

					State = 594; constSubStmt();
					}
					} 
				}
				State = 599;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; ambiguousIdentifier();
			State = 602;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 601; typeHint();
				}
			}

			State = 607;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 604; whiteSpace();
				State = 605; asTypeClause();
				}
				break;
			}
			State = 610;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 609; whiteSpace();
				}
			}

			State = 612; Match(EQ);
			State = 614;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 613; whiteSpace();
				}
				break;
			}
			State = 616; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParserNext.DATE, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(DATE);
			State = 620;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 619; whiteSpace();
				}
			}

			State = 622; Match(EQ);
			State = 624;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 623; whiteSpace();
				}
				break;
			}
			State = 626; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParserNext.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParserNext.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParserNext.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParserNext.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParserNext.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParserNext.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParserNext.STRINGLITERAL); }
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParserNext.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 628; visibility();
				State = 629; whiteSpace();
				}
			}

			State = 633; Match(DECLARE);
			State = 634; whiteSpace();
			State = 637;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 635; Match(PTRSAFE);
				State = 636; whiteSpace();
				}
			}

			State = 644;
			switch (_input.La(1)) {
			case FUNCTION:
				{
				{
				State = 639; Match(FUNCTION);
				State = 641;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
					{
					State = 640; typeHint();
					}
				}

				}
				}
				break;
			case SUB:
				{
				State = 643; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 646; whiteSpace();
			State = 647; ambiguousIdentifier();
			State = 649;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 648; typeHint();
				}
			}

			State = 651; whiteSpace();
			State = 652; Match(LIB);
			State = 653; whiteSpace();
			State = 654; Match(STRINGLITERAL);
			State = 660;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 655; whiteSpace();
				State = 656; Match(ALIAS);
				State = 657; whiteSpace();
				State = 658; Match(STRINGLITERAL);
				}
				break;
			}
			State = 666;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 663;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 662; whiteSpace();
					}
				}

				State = 665; argList();
				}
				break;
			}
			State = 671;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 668; whiteSpace();
				State = 669; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParserNext.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParserNext.DEFINT, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParserNext.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParserNext.DEFBOOL, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBAParserNext.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParserNext.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParserNext.DEFSNG, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DEFCUR() { return GetToken(VBAParserNext.DEFCUR, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFDATE() { return GetToken(VBAParserNext.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParserNext.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParserNext.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParserNext.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParserNext.DEFVAR, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 674; whiteSpace();
			State = 675; letterrange();
			State = 686;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 677;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 676; whiteSpace();
						}
					}

					State = 679; Match(COMMA);
					State = 681;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 680; whiteSpace();
						}
					}

					State = 683; letterrange();
					}
					} 
				}
				State = 688;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParserNext.DELETESETTING, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deleteSettingStmt);
		int _la;
		try {
			State = 727;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689; Match(DELETESETTING);
				State = 690; whiteSpace();
				State = 691; valueStmt(0);
				State = 693;
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 692; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695; Match(DELETESETTING);
				State = 696; whiteSpace();
				State = 697; valueStmt(0);
				State = 699;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 698; whiteSpace();
					}
				}

				State = 701; Match(COMMA);
				State = 703;
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 702; whiteSpace();
					}
					break;
				}
				State = 705; valueStmt(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707; Match(DELETESETTING);
				State = 708; whiteSpace();
				State = 709; valueStmt(0);
				State = 711;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 710; whiteSpace();
					}
				}

				State = 713; Match(COMMA);
				State = 715;
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 714; whiteSpace();
					}
					break;
				}
				State = 717; valueStmt(0);
				State = 719;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 718; whiteSpace();
					}
				}

				State = 721; Match(COMMA);
				State = 723;
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 722; whiteSpace();
					}
					break;
				}
				State = 725; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParserNext.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParserNext.LOOP, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParserNext.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParserNext.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_doLoopStmt);
		int _la;
		try {
			State = 758;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 729; Match(DO);
				State = 730; endOfStatement();
				State = 732;
				switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					State = 731; block();
					}
					break;
				}
				State = 734; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 736; Match(DO);
				State = 737; whiteSpace();
				State = 738;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 739; whiteSpace();
				State = 740; valueStmt(0);
				State = 741; endOfStatement();
				State = 743;
				switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					State = 742; block();
					}
					break;
				}
				State = 745; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 747; Match(DO);
				State = 748; endOfStatement();
				State = 750;
				switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					State = 749; block();
					}
					break;
				}
				State = 752; Match(LOOP);
				State = 753; whiteSpace();
				State = 754;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 755; whiteSpace();
				State = 756; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParserNext.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParserNext.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParserNext.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 762; visibility();
				State = 763; whiteSpace();
				}
			}

			State = 767; Match(ENUM);
			State = 768; whiteSpace();
			State = 769; ambiguousIdentifier();
			State = 770; endOfStatement();
			State = 774;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==IDENTIFIER || _la==LEN) {
				{
				{
				State = 771; enumerationStmt_Constant();
				}
				}
				State = 776;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 777; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; ambiguousIdentifier();
			State = 788;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 781;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 780; whiteSpace();
					}
				}

				State = 783; Match(EQ);
				State = 785;
				switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					State = 784; whiteSpace();
					}
					break;
				}
				State = 787; valueStmt(0);
				}
				break;
			}
			State = 790; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParserNext.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 792; Match(ERASE);
			State = 793; whiteSpace();
			State = 794; valueStmt(0);
			State = 805;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 796;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 795; whiteSpace();
						}
					}

					State = 798; Match(COMMA);
					State = 800;
					switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
					case 1:
						{
						State = 799; whiteSpace();
						}
						break;
					}
					State = 802; valueStmt(0);
					}
					} 
				}
				State = 807;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParserNext.ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; Match(ERROR);
			State = 809; whiteSpace();
			State = 810; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParserNext.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 812; visibility();
				State = 813; whiteSpace();
				}
			}

			State = 817; Match(EVENT);
			State = 818; whiteSpace();
			State = 819; ambiguousIdentifier();
			State = 821;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 820; whiteSpace();
				}
			}

			State = 823; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParserNext.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParserNext.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParserNext.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParserNext.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParserNext.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			_la = _input.La(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (EXIT_DO - 72)) | (1L << (EXIT_FOR - 72)) | (1L << (EXIT_FUNCTION - 72)) | (1L << (EXIT_PROPERTY - 72)) | (1L << (EXIT_SUB - 72)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VBAParserNext.FILECOPY, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827; Match(FILECOPY);
			State = 828; whiteSpace();
			State = 829; valueStmt(0);
			State = 831;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 830; whiteSpace();
				}
			}

			State = 833; Match(COMMA);
			State = 835;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 834; whiteSpace();
				}
				break;
			}
			State = 837; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode NEXT() { return GetToken(VBAParserNext.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParserNext.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EACH() { return GetToken(VBAParserNext.EACH, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParserNext.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839; Match(FOR);
			State = 840; whiteSpace();
			State = 841; Match(EACH);
			State = 842; whiteSpace();
			State = 843; ambiguousIdentifier();
			State = 845;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 844; typeHint();
				}
			}

			State = 847; whiteSpace();
			State = 848; Match(IN);
			State = 849; whiteSpace();
			State = 850; valueStmt(0);
			State = 851; endOfStatement();
			State = 853;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 852; block();
				}
				break;
			}
			State = 855; Match(NEXT);
			State = 859;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 856; whiteSpace();
				State = 857; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParserNext.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParserNext.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParserNext.STEP, 0); }
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ITerminalNode NEXT() { return GetToken(VBAParserNext.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861; Match(FOR);
			State = 862; whiteSpace();
			State = 863; ambiguousIdentifier();
			State = 865;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 864; typeHint();
				}
			}

			State = 870;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 867; whiteSpace();
				State = 868; asTypeClause();
				}
				break;
			}
			State = 873;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 872; whiteSpace();
				}
			}

			State = 875; Match(EQ);
			State = 877;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 876; whiteSpace();
				}
				break;
			}
			State = 879; valueStmt(0);
			State = 880; whiteSpace();
			State = 881; Match(TO);
			State = 882; whiteSpace();
			State = 883; valueStmt(0);
			State = 889;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 884; whiteSpace();
				State = 885; Match(STEP);
				State = 886; whiteSpace();
				State = 887; valueStmt(0);
				}
				break;
			}
			State = 891; endOfStatement();
			State = 893;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 892; block();
				}
				break;
			}
			State = 895; Match(NEXT);
			State = 901;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 896; whiteSpace();
				State = 897; ambiguousIdentifier();
				State = 899;
				switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					State = 898; typeHint();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParserNext.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParserNext.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParserNext.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 903; visibility();
				State = 904; whiteSpace();
				}
			}

			State = 910;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 908; Match(STATIC);
				State = 909; whiteSpace();
				}
			}

			State = 912; Match(FUNCTION);
			State = 914;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 913; whiteSpace();
				}
			}

			State = 916; ambiguousIdentifier();
			State = 918;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 917; typeHint();
				}
				break;
			}
			State = 924;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 921;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 920; whiteSpace();
					}
				}

				State = 923; argList();
				}
				break;
			}
			State = 930;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 927;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 926; whiteSpace();
					}
				}

				State = 929; asTypeClause();
				}
				break;
			}
			State = 932; endOfStatement();
			State = 934;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (EXIT_DO - 66)) | (1L << (EXIT_FOR - 66)) | (1L << (EXIT_FUNCTION - 66)) | (1L << (EXIT_PROPERTY - 66)) | (1L << (EXIT_SUB - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LINE_INPUT - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (ON_ERROR - 66)) | (1L << (ON_LOCAL_ERROR - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)) | (1L << (WS - 207)) | (1L << (IDENTIFIER - 207)) | (1L << (LINE_CONTINUATION - 207)) | (1L << (LEN - 207)))) != 0)) {
				{
				State = 933; block();
				}
			}

			State = 936; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParserNext.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; Match(GET);
			State = 939; whiteSpace();
			State = 940; fileNumber();
			State = 942;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 941; whiteSpace();
				}
			}

			State = 944; Match(COMMA);
			State = 946;
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 945; whiteSpace();
				}
				break;
			}
			State = 949;
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 948; valueStmt(0);
				}
				break;
			}
			State = 952;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 951; whiteSpace();
				}
			}

			State = 954; Match(COMMA);
			State = 956;
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 955; whiteSpace();
				}
				break;
			}
			State = 958; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParserNext.GOSUB, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960; Match(GOSUB);
			State = 961; whiteSpace();
			State = 962; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParserNext.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964; Match(GOTO);
			State = 965; whiteSpace();
			State = 966; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParserNext.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode ELSE() { return GetToken(VBAParserNext.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParserNext.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public ITerminalNode THEN() { return GetToken(VBAParserNext.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 994;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 968; Match(IF);
				State = 969; whiteSpace();
				State = 970; ifConditionStmt();
				State = 971; whiteSpace();
				State = 972; Match(THEN);
				State = 973; whiteSpace();
				State = 974; blockStmt();
				State = 980;
				switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					State = 975; whiteSpace();
					State = 976; Match(ELSE);
					State = 977; whiteSpace();
					State = 978; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 982; ifBlockStmt();
				State = 986;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 983; ifElseIfBlockStmt();
					}
					}
					State = 988;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 990;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 989; ifElseBlockStmt();
					}
				}

				State = 992; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParserNext.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParserNext.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996; Match(IF);
			State = 997; whiteSpace();
			State = 998; ifConditionStmt();
			State = 999; whiteSpace();
			State = 1000; Match(THEN);
			State = 1001; endOfStatement();
			State = 1003;
			switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				State = 1002; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParserNext.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParserNext.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifElseIfBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007; Match(ELSEIF);
			State = 1008; whiteSpace();
			State = 1009; ifConditionStmt();
			State = 1010; whiteSpace();
			State = 1011; Match(THEN);
			State = 1012; endOfStatement();
			State = 1014;
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 1013; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParserNext.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016; Match(ELSE);
			State = 1017; endOfStatement();
			State = 1019;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (EXIT_DO - 66)) | (1L << (EXIT_FOR - 66)) | (1L << (EXIT_FUNCTION - 66)) | (1L << (EXIT_PROPERTY - 66)) | (1L << (EXIT_SUB - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LINE_INPUT - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (ON_ERROR - 66)) | (1L << (ON_LOCAL_ERROR - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)) | (1L << (WS - 207)) | (1L << (IDENTIFIER - 207)) | (1L << (LINE_CONTINUATION - 207)) | (1L << (LEN - 207)))) != 0)) {
				{
				State = 1018; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParserNext.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021; Match(IMPLEMENTS);
			State = 1022; whiteSpace();
			State = 1023; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParserNext.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025; Match(INPUT);
			State = 1026; whiteSpace();
			State = 1027; fileNumber();
			State = 1036;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1029;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1028; whiteSpace();
						}
					}

					State = 1031; Match(COMMA);
					State = 1033;
					switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
					case 1:
						{
						State = 1032; whiteSpace();
						}
						break;
					}
					State = 1035; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1038;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,115,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode KILL() { return GetToken(VBAParserNext.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040; Match(KILL);
			State = 1041; whiteSpace();
			State = 1042; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParserNext.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				State = 1044; Match(LET);
				State = 1045; whiteSpace();
				}
				break;
			}
			State = 1048; implicitCallStmt_InStmt();
			State = 1050;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1049; whiteSpace();
				}
			}

			State = 1052; Match(EQ);
			State = 1054;
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				State = 1053; whiteSpace();
				}
				break;
			}
			State = 1056; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParserNext.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058; Match(LINE_INPUT);
			State = 1059; whiteSpace();
			State = 1060; fileNumber();
			State = 1062;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1061; whiteSpace();
				}
			}

			State = 1064; Match(COMMA);
			State = 1066;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				State = 1065; whiteSpace();
				}
				break;
			}
			State = 1068; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LOAD() { return GetToken(VBAParserNext.LOAD, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070; Match(LOAD);
			State = 1071; whiteSpace();
			State = 1072; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParserNext.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParserNext.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1074; Match(LOCK);
			State = 1075; whiteSpace();
			State = 1076; valueStmt(0);
			State = 1092;
			switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				State = 1078;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1077; whiteSpace();
					}
				}

				State = 1080; Match(COMMA);
				State = 1082;
				switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					State = 1081; whiteSpace();
					}
					break;
				}
				State = 1084; valueStmt(0);
				State = 1090;
				switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					State = 1085; whiteSpace();
					State = 1086; Match(TO);
					State = 1087; whiteSpace();
					State = 1088; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LSET() { return GetToken(VBAParserNext.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094; Match(LSET);
			State = 1095; whiteSpace();
			State = 1096; implicitCallStmt_InStmt();
			State = 1098;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1097; whiteSpace();
				}
			}

			State = 1100; Match(EQ);
			State = 1102;
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				State = 1101; whiteSpace();
				}
				break;
			}
			State = 1104; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParserNext.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106; Match(MID);
			State = 1108;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1107; whiteSpace();
				}
			}

			State = 1110; Match(LPAREN);
			State = 1112;
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				State = 1111; whiteSpace();
				}
				break;
			}
			State = 1114; argsCall();
			State = 1116;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1115; whiteSpace();
				}
			}

			State = 1118; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MKDIR() { return GetToken(VBAParserNext.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120; Match(MKDIR);
			State = 1121; whiteSpace();
			State = 1122; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParserNext.NAME, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VBAParserNext.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124; Match(NAME);
			State = 1125; whiteSpace();
			State = 1126; valueStmt(0);
			State = 1127; whiteSpace();
			State = 1128; Match(AS);
			State = 1129; whiteSpace();
			State = 1130; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParserNext.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParserNext.ON_ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParserNext.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParserNext.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParserNext.ON_LOCAL_ERROR, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1133; whiteSpace();
			State = 1142;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1134; Match(GOTO);
				State = 1135; whiteSpace();
				State = 1136; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1138; Match(RESUME);
				State = 1139; whiteSpace();
				State = 1140; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParserNext.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParserNext.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144; Match(ON);
			State = 1145; whiteSpace();
			State = 1146; valueStmt(0);
			State = 1147; whiteSpace();
			State = 1148; Match(GOTO);
			State = 1149; whiteSpace();
			State = 1150; valueStmt(0);
			State = 1161;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,133,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1152;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1151; whiteSpace();
						}
					}

					State = 1154; Match(COMMA);
					State = 1156;
					switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
					case 1:
						{
						State = 1155; whiteSpace();
						}
						break;
					}
					State = 1158; valueStmt(0);
					}
					} 
				}
				State = 1163;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,133,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParserNext.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParserNext.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164; Match(ON);
			State = 1165; whiteSpace();
			State = 1166; valueStmt(0);
			State = 1167; whiteSpace();
			State = 1168; Match(GOSUB);
			State = 1169; whiteSpace();
			State = 1170; valueStmt(0);
			State = 1181;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1172;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1171; whiteSpace();
						}
					}

					State = 1174; Match(COMMA);
					State = 1176;
					switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
					case 1:
						{
						State = 1175; whiteSpace();
						}
						break;
					}
					State = 1178; valueStmt(0);
					}
					} 
				}
				State = 1183;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParserNext.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParserNext.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParserNext.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParserNext.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParserNext.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LEN() { return GetToken(VBAParserNext.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParserNext.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParserNext.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParserNext.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParserNext.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParserNext.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParserNext.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParserNext.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParserNext.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParserNext.LOCK_READ, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParserNext.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParserNext.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184; Match(OPEN);
			State = 1185; whiteSpace();
			State = 1186; valueStmt(0);
			State = 1187; whiteSpace();
			State = 1188; Match(FOR);
			State = 1189; whiteSpace();
			State = 1190;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (INPUT - 90)) | (1L << (OUTPUT - 90)) | (1L << (RANDOM - 90)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1196;
			switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				State = 1191; whiteSpace();
				State = 1192; Match(ACCESS);
				State = 1193; whiteSpace();
				State = 1194;
				_la = _input.La(1);
				if ( !(((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (READ - 140)) | (1L << (READ_WRITE - 140)) | (1L << (WRITE - 140)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1201;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				State = 1198; whiteSpace();
				State = 1199;
				_la = _input.La(1);
				if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (LOCK_READ - 102)) | (1L << (LOCK_WRITE - 102)) | (1L << (LOCK_READ_WRITE - 102)) | (1L << (SHARED - 102)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1203; whiteSpace();
			State = 1204; Match(AS);
			State = 1205; whiteSpace();
			State = 1206; fileNumber();
			State = 1218;
			switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				State = 1207; whiteSpace();
				State = 1208; Match(LEN);
				State = 1210;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1209; whiteSpace();
					}
				}

				State = 1212; Match(EQ);
				State = 1214;
				switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					State = 1213; whiteSpace();
					}
					break;
				}
				State = 1216; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParserNext.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParserNext.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1253;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1220; outputList_Expression();
				State = 1233;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,145,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1222;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1221; whiteSpace();
							}
						}

						State = 1224;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1226;
						switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
						case 1:
							{
							State = 1225; whiteSpace();
							}
							break;
						}
						State = 1229;
						switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
						case 1:
							{
							State = 1228; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1235;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,145,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1237;
				switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					State = 1236; outputList_Expression();
					}
					break;
				}
				State = 1249;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1240;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1239; whiteSpace();
							}
						}

						State = 1242;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1244;
						switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
						case 1:
							{
							State = 1243; whiteSpace();
							}
							break;
						}
						State = 1247;
						switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
						case 1:
							{
							State = 1246; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1251;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,150,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParserNext.TAB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParserNext.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_outputList_Expression);
		int _la;
		try {
			State = 1272;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1255; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1256;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1270;
				switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					State = 1258;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1257; whiteSpace();
						}
					}

					State = 1260; Match(LPAREN);
					State = 1262;
					switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
					case 1:
						{
						State = 1261; whiteSpace();
						}
						break;
					}
					State = 1264; argsCall();
					State = 1266;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1265; whiteSpace();
						}
					}

					State = 1268; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParserNext.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274; Match(PRINT);
			State = 1275; whiteSpace();
			State = 1276; fileNumber();
			State = 1278;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1277; whiteSpace();
				}
			}

			State = 1280; Match(COMMA);
			State = 1285;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1282;
				switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					State = 1281; whiteSpace();
					}
					break;
				}
				State = 1284; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParserNext.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParserNext.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParserNext.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 1287; visibility();
				State = 1288; whiteSpace();
				}
			}

			State = 1294;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1292; Match(STATIC);
				State = 1293; whiteSpace();
				}
			}

			State = 1296; Match(PROPERTY_GET);
			State = 1297; whiteSpace();
			State = 1298; ambiguousIdentifier();
			State = 1300;
			switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				State = 1299; typeHint();
				}
				break;
			}
			State = 1306;
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				State = 1303;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1302; whiteSpace();
					}
				}

				State = 1305; argList();
				}
				break;
			}
			State = 1311;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 1308; whiteSpace();
				State = 1309; asTypeClause();
				}
				break;
			}
			State = 1313; endOfStatement();
			State = 1315;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (EXIT_DO - 66)) | (1L << (EXIT_FOR - 66)) | (1L << (EXIT_FUNCTION - 66)) | (1L << (EXIT_PROPERTY - 66)) | (1L << (EXIT_SUB - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LINE_INPUT - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (ON_ERROR - 66)) | (1L << (ON_LOCAL_ERROR - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)) | (1L << (WS - 207)) | (1L << (IDENTIFIER - 207)) | (1L << (LINE_CONTINUATION - 207)) | (1L << (LEN - 207)))) != 0)) {
				{
				State = 1314; block();
				}
			}

			State = 1317; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParserNext.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParserNext.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParserNext.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 1319; visibility();
				State = 1320; whiteSpace();
				}
			}

			State = 1326;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1324; Match(STATIC);
				State = 1325; whiteSpace();
				}
			}

			State = 1328; Match(PROPERTY_SET);
			State = 1329; whiteSpace();
			State = 1330; ambiguousIdentifier();
			State = 1335;
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1332;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1331; whiteSpace();
					}
				}

				State = 1334; argList();
				}
				break;
			}
			State = 1337; endOfStatement();
			State = 1339;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (EXIT_DO - 66)) | (1L << (EXIT_FOR - 66)) | (1L << (EXIT_FUNCTION - 66)) | (1L << (EXIT_PROPERTY - 66)) | (1L << (EXIT_SUB - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LINE_INPUT - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (ON_ERROR - 66)) | (1L << (ON_LOCAL_ERROR - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)) | (1L << (WS - 207)) | (1L << (IDENTIFIER - 207)) | (1L << (LINE_CONTINUATION - 207)) | (1L << (LEN - 207)))) != 0)) {
				{
				State = 1338; block();
				}
			}

			State = 1341; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParserNext.PROPERTY_LET, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParserNext.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParserNext.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1346;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 1343; visibility();
				State = 1344; whiteSpace();
				}
			}

			State = 1350;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1348; Match(STATIC);
				State = 1349; whiteSpace();
				}
			}

			State = 1352; Match(PROPERTY_LET);
			State = 1353; whiteSpace();
			State = 1354; ambiguousIdentifier();
			State = 1359;
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 1356;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1355; whiteSpace();
					}
				}

				State = 1358; argList();
				}
				break;
			}
			State = 1361; endOfStatement();
			State = 1363;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (EXIT_DO - 66)) | (1L << (EXIT_FOR - 66)) | (1L << (EXIT_FUNCTION - 66)) | (1L << (EXIT_PROPERTY - 66)) | (1L << (EXIT_SUB - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LINE_INPUT - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (ON_ERROR - 66)) | (1L << (ON_LOCAL_ERROR - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)) | (1L << (WS - 207)) | (1L << (IDENTIFIER - 207)) | (1L << (LINE_CONTINUATION - 207)) | (1L << (LEN - 207)))) != 0)) {
				{
				State = 1362; block();
				}
			}

			State = 1365; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParserNext.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367; Match(PUT);
			State = 1368; whiteSpace();
			State = 1369; fileNumber();
			State = 1371;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1370; whiteSpace();
				}
			}

			State = 1373; Match(COMMA);
			State = 1375;
			switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				State = 1374; whiteSpace();
				}
				break;
			}
			State = 1378;
			switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				State = 1377; valueStmt(0);
				}
				break;
			}
			State = 1381;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1380; whiteSpace();
				}
			}

			State = 1383; Match(COMMA);
			State = 1385;
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 1384; whiteSpace();
				}
				break;
			}
			State = 1387; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParserNext.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389; Match(RAISEEVENT);
			State = 1390; whiteSpace();
			State = 1391; ambiguousIdentifier();
			State = 1406;
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 1393;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1392; whiteSpace();
					}
				}

				State = 1395; Match(LPAREN);
				State = 1397;
				switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					State = 1396; whiteSpace();
					}
					break;
				}
				State = 1403;
				switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					State = 1399; argsCall();
					State = 1401;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1400; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1405; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParserNext.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1408; Match(RANDOMIZE);
			State = 1412;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 1409; whiteSpace();
				State = 1410; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public ITerminalNode REDIM() { return GetToken(VBAParserNext.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParserNext.PRESERVE, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1414; Match(REDIM);
			State = 1415; whiteSpace();
			State = 1418;
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1416; Match(PRESERVE);
				State = 1417; whiteSpace();
				}
				break;
			}
			State = 1420; redimSubStmt();
			State = 1431;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1422;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1421; whiteSpace();
						}
					}

					State = 1424; Match(COMMA);
					State = 1426;
					switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
					case 1:
						{
						State = 1425; whiteSpace();
						}
						break;
					}
					State = 1428; redimSubStmt();
					}
					} 
				}
				State = 1433;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1434; implicitCallStmt_InStmt();
			State = 1436;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1435; whiteSpace();
				}
			}

			State = 1438; Match(LPAREN);
			State = 1440;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 1439; whiteSpace();
				}
				break;
			}
			State = 1442; subscripts();
			State = 1444;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1443; whiteSpace();
				}
			}

			State = 1446; Match(RPAREN);
			State = 1450;
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 1447; whiteSpace();
				State = 1448; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParserNext.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(VBAParserNext.NEXT, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParserNext.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454; Match(RESUME);
			State = 1460;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1455; whiteSpace();
				State = 1458;
				switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					State = 1456; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1457; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParserNext.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RMDIR() { return GetToken(VBAParserNext.RMDIR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; Match(RMDIR);
			State = 1465; whiteSpace();
			State = 1466; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RSET() { return GetToken(VBAParserNext.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468; Match(RSET);
			State = 1469; whiteSpace();
			State = 1470; implicitCallStmt_InStmt();
			State = 1472;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1471; whiteSpace();
				}
			}

			State = 1474; Match(EQ);
			State = 1476;
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 1475; whiteSpace();
				}
				break;
			}
			State = 1478; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParserNext.SAVEPICTURE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480; Match(SAVEPICTURE);
			State = 1481; whiteSpace();
			State = 1482; valueStmt(0);
			State = 1484;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1483; whiteSpace();
				}
			}

			State = 1486; Match(COMMA);
			State = 1488;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1487; whiteSpace();
				}
				break;
			}
			State = 1490; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VBAParserNext.SAVESETTING, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492; Match(SAVESETTING);
			State = 1493; whiteSpace();
			State = 1494; valueStmt(0);
			State = 1496;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1495; whiteSpace();
				}
			}

			State = 1498; Match(COMMA);
			State = 1500;
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 1499; whiteSpace();
				}
				break;
			}
			State = 1502; valueStmt(0);
			State = 1504;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1503; whiteSpace();
				}
			}

			State = 1506; Match(COMMA);
			State = 1508;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1507; whiteSpace();
				}
				break;
			}
			State = 1510; valueStmt(0);
			State = 1512;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1511; whiteSpace();
				}
			}

			State = 1514; Match(COMMA);
			State = 1516;
			switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				State = 1515; whiteSpace();
				}
				break;
			}
			State = 1518; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParserNext.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1520; Match(SEEK);
			State = 1521; whiteSpace();
			State = 1522; fileNumber();
			State = 1524;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1523; whiteSpace();
				}
			}

			State = 1526; Match(COMMA);
			State = 1528;
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 1527; whiteSpace();
				}
				break;
			}
			State = 1530; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParserNext.CASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParserNext.END_SELECT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParserNext.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532; Match(SELECT);
			State = 1533; whiteSpace();
			State = 1534; Match(CASE);
			State = 1535; whiteSpace();
			State = 1536; valueStmt(0);
			State = 1537; endOfStatement();
			State = 1541;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1538; sC_Case();
				}
				}
				State = 1543;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1544; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_SelectionContext : ParserRuleContext {
		public SC_SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Selection; } }
	 
		public SC_SelectionContext() { }
		public virtual void CopyFrom(SC_SelectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_SelectionContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_SelectionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParserNext.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_SelectionContext {
		public ITerminalNode IS() { return GetToken(VBAParserNext.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_SelectionContext sC_Selection() {
		SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_sC_Selection);
		int _la;
		try {
			State = 1563;
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1546; Match(IS);
				State = 1548;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1547; whiteSpace();
					}
				}

				State = 1550; comparisonOperator();
				State = 1552;
				switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					State = 1551; whiteSpace();
					}
					break;
				}
				State = 1554; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1556; valueStmt(0);
				State = 1557; whiteSpace();
				State = 1558; Match(TO);
				State = 1559; whiteSpace();
				State = 1560; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1562; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParserNext.CASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_sC_Case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; Match(CASE);
			State = 1566; whiteSpace();
			State = 1567; sC_Cond();
			State = 1568; endOfStatement();
			State = 1570;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 1569; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondSelectionContext : SC_CondContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<SC_SelectionContext> sC_Selection() {
			return GetRuleContexts<SC_SelectionContext>();
		}
		public SC_SelectionContext sC_Selection(int i) {
			return GetRuleContext<SC_SelectionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterCaseCondSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitCaseCondSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParserNext.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1587;
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1572; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondSelectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1573; sC_Selection();
				State = 1584;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,217,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1575;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1574; whiteSpace();
							}
						}

						State = 1577; Match(COMMA);
						State = 1579;
						switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
						case 1:
							{
							State = 1578; whiteSpace();
							}
							break;
						}
						State = 1581; sC_Selection();
						}
						} 
					}
					State = 1586;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,217,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode SENDKEYS() { return GetToken(VBAParserNext.SENDKEYS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; Match(SENDKEYS);
			State = 1590; whiteSpace();
			State = 1591; valueStmt(0);
			State = 1600;
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1593;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1592; whiteSpace();
					}
				}

				State = 1595; Match(COMMA);
				State = 1597;
				switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					State = 1596; whiteSpace();
					}
					break;
				}
				State = 1599; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParserNext.SETATTR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; Match(SETATTR);
			State = 1603; whiteSpace();
			State = 1604; valueStmt(0);
			State = 1606;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1605; whiteSpace();
				}
			}

			State = 1608; Match(COMMA);
			State = 1610;
			switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				State = 1609; whiteSpace();
				}
				break;
			}
			State = 1612; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParserNext.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614; Match(SET);
			State = 1615; whiteSpace();
			State = 1616; implicitCallStmt_InStmt();
			State = 1618;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1617; whiteSpace();
				}
			}

			State = 1620; Match(EQ);
			State = 1622;
			switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				State = 1621; whiteSpace();
				}
				break;
			}
			State = 1624; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParserNext.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParserNext.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParserNext.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParserNext.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 1628; visibility();
				State = 1629; whiteSpace();
				}
			}

			State = 1635;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1633; Match(STATIC);
				State = 1634; whiteSpace();
				}
			}

			State = 1637; Match(SUB);
			State = 1639;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1638; whiteSpace();
				}
			}

			State = 1641; ambiguousIdentifier();
			State = 1646;
			switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				State = 1643;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1642; whiteSpace();
					}
				}

				State = 1645; argList();
				}
				break;
			}
			State = 1648; endOfStatement();
			State = 1650;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (EXIT_DO - 66)) | (1L << (EXIT_FOR - 66)) | (1L << (EXIT_FUNCTION - 66)) | (1L << (EXIT_PROPERTY - 66)) | (1L << (EXIT_SUB - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LINE_INPUT - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (ON_ERROR - 66)) | (1L << (ON_LOCAL_ERROR - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)) | (1L << (WS - 207)) | (1L << (IDENTIFIER - 207)) | (1L << (LINE_CONTINUATION - 207)) | (1L << (LEN - 207)))) != 0)) {
				{
				State = 1649; block();
				}
			}

			State = 1652; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TIME() { return GetToken(VBAParserNext.TIME, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; Match(TIME);
			State = 1656;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1655; whiteSpace();
				}
			}

			State = 1658; Match(EQ);
			State = 1660;
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 1659; whiteSpace();
				}
				break;
			}
			State = 1662; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParserNext.TYPE, 0); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParserNext.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667;
			_la = _input.La(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) {
				{
				State = 1664; visibility();
				State = 1665; whiteSpace();
				}
			}

			State = 1669; Match(TYPE);
			State = 1670; whiteSpace();
			State = 1671; ambiguousIdentifier();
			State = 1672; endOfStatement();
			State = 1676;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==IDENTIFIER || _la==LEN) {
				{
				{
				State = 1673; typeStmt_Element();
				}
				}
				State = 1678;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1679; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681; ambiguousIdentifier();
			State = 1696;
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 1683;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1682; whiteSpace();
					}
				}

				State = 1685; Match(LPAREN);
				State = 1690;
				switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
				case 1:
					{
					State = 1687;
					switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
					case 1:
						{
						State = 1686; whiteSpace();
						}
						break;
					}
					State = 1689; subscripts();
					}
					break;
				}
				State = 1693;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1692; whiteSpace();
					}
				}

				State = 1695; Match(RPAREN);
				}
				break;
			}
			State = 1701;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 1698; whiteSpace();
				State = 1699; asTypeClause();
				}
				break;
			}
			State = 1703; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode IS() { return GetToken(VBAParserNext.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParserNext.TYPEOF, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705; Match(TYPEOF);
			State = 1706; whiteSpace();
			State = 1707; valueStmt(0);
			State = 1713;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 1708; whiteSpace();
				State = 1709; Match(IS);
				State = 1710; whiteSpace();
				State = 1711; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode UNLOAD() { return GetToken(VBAParserNext.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715; Match(UNLOAD);
			State = 1716; whiteSpace();
			State = 1717; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParserNext.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParserNext.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719; Match(UNLOCK);
			State = 1720; whiteSpace();
			State = 1721; fileNumber();
			State = 1737;
			switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				State = 1723;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1722; whiteSpace();
					}
				}

				State = 1725; Match(COMMA);
				State = 1727;
				switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					State = 1726; whiteSpace();
					}
					break;
				}
				State = 1729; valueStmt(0);
				State = 1735;
				switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					State = 1730; whiteSpace();
					State = 1731; Match(TO);
					State = 1732; whiteSpace();
					State = 1733; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParserNext.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParserNext.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParserNext.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParserNext.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParserNext.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParserNext.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParserNext.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParserNext.GT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParserNext.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParserNext.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParserNext.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParserNext.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParserNext.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParserNext.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParserNext.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParserNext.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParserNext.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParserNext.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParserNext.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParserNext.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParserNext.MULT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParserNext.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode EQV() { return GetToken(VBAParserNext.EQV, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParserNext.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParserNext.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 188;
		EnterRecursionRule(_localctx, 188, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784;
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1740; Match(NEW);
				State = 1742;
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 1741; whiteSpace();
					}
					break;
				}
				State = 1744; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1745; Match(ADDRESSOF);
				State = 1747;
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1746; whiteSpace();
					}
					break;
				}
				State = 1749; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1750; implicitCallStmt_InStmt();
				State = 1752;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1751; whiteSpace();
					}
				}

				State = 1754; Match(ASSIGN);
				State = 1756;
				switch ( Interpreter.AdaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					State = 1755; whiteSpace();
					}
					break;
				}
				State = 1758; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1760; Match(MINUS);
				State = 1762;
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 1761; whiteSpace();
					}
					break;
				}
				State = 1764; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1765; Match(NOT);
				State = 1767;
				switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					State = 1766; whiteSpace();
					}
					break;
				}
				State = 1769; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1770; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1771; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1772; Match(LPAREN);
				State = 1774;
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 1773; whiteSpace();
					}
					break;
				}
				State = 1776; valueStmt(0);
				State = 1778;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1777; whiteSpace();
					}
				}

				State = 1780; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1782; typeOfStmt();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1783; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1896;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,281,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1894;
					switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1786;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1788;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1787; whiteSpace();
							}
						}

						State = 1790; Match(POW);
						State = 1792;
						switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
						case 1:
							{
							State = 1791; whiteSpace();
							}
							break;
						}
						State = 1794; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1795;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1797;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1796; whiteSpace();
							}
						}

						State = 1799;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1801;
						switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
						case 1:
							{
							State = 1800; whiteSpace();
							}
							break;
						}
						State = 1803; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1804;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1806;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1805; whiteSpace();
							}
						}

						State = 1808; Match(INTDIV);
						State = 1810;
						switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
						case 1:
							{
							State = 1809; whiteSpace();
							}
							break;
						}
						State = 1812; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1813;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1815;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1814; whiteSpace();
							}
						}

						State = 1817; Match(MOD);
						State = 1819;
						switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
						case 1:
							{
							State = 1818; whiteSpace();
							}
							break;
						}
						State = 1821; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1822;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1824;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1823; whiteSpace();
							}
						}

						State = 1826;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1828;
						switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
						case 1:
							{
							State = 1827; whiteSpace();
							}
							break;
						}
						State = 1830; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1831;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1833;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1832; whiteSpace();
							}
						}

						State = 1835; Match(AMPERSAND);
						State = 1837;
						switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
						case 1:
							{
							State = 1836; whiteSpace();
							}
							break;
						}
						State = 1839; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1840;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1842;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1841; whiteSpace();
							}
						}

						State = 1844;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (EQ - 187)) | (1L << (GEQ - 187)) | (1L << (GT - 187)) | (1L << (LEQ - 187)) | (1L << (LT - 187)) | (1L << (NEQ - 187)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1846;
						switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
						case 1:
							{
							State = 1845; whiteSpace();
							}
							break;
						}
						State = 1848; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1849;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1851;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1850; whiteSpace();
							}
						}

						State = 1853; Match(AND);
						State = 1855;
						switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
						case 1:
							{
							State = 1854; whiteSpace();
							}
							break;
						}
						State = 1857; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1858;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1860;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1859; whiteSpace();
							}
						}

						State = 1862; Match(OR);
						State = 1864;
						switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
						case 1:
							{
							State = 1863; whiteSpace();
							}
							break;
						}
						State = 1866; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1867;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1869;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1868; whiteSpace();
							}
						}

						State = 1871; Match(XOR);
						State = 1873;
						switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
						case 1:
							{
							State = 1872; whiteSpace();
							}
							break;
						}
						State = 1875; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1876;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1878;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1877; whiteSpace();
							}
						}

						State = 1880; Match(EQV);
						State = 1882;
						switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
						case 1:
							{
							State = 1881; whiteSpace();
							}
							break;
						}
						State = 1884; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1885;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1887;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1886; whiteSpace();
							}
						}

						State = 1889; Match(IMP);
						State = 1891;
						switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
						case 1:
							{
							State = 1890; whiteSpace();
							}
							break;
						}
						State = 1893; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 1898;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,281,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParserNext.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParserNext.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParserNext.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1899; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1900; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1901; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1904; whiteSpace();
			State = 1907;
			switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				State = 1905; Match(WITHEVENTS);
				State = 1906; whiteSpace();
				}
				break;
			}
			State = 1909; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911; variableSubStmt();
			State = 1922;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1913;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1912; whiteSpace();
						}
					}

					State = 1915; Match(COMMA);
					State = 1917;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1916; whiteSpace();
						}
					}

					State = 1919; variableSubStmt();
					}
					} 
				}
				State = 1924;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1925; ambiguousIdentifier();
			State = 1943;
			switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				State = 1927;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1926; whiteSpace();
					}
				}

				State = 1929; Match(LPAREN);
				State = 1931;
				switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					State = 1930; whiteSpace();
					}
					break;
				}
				State = 1937;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << EMPTY))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (LPAREN - 130)) | (1L << (MINUS - 130)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (STRINGLITERAL - 206)) | (1L << (OCTLITERAL - 206)) | (1L << (HEXLITERAL - 206)) | (1L << (SHORTLITERAL - 206)) | (1L << (INTEGERLITERAL - 206)) | (1L << (DOUBLELITERAL - 206)) | (1L << (DATELITERAL - 206)) | (1L << (WS - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (LINE_CONTINUATION - 206)) | (1L << (LEN - 206)))) != 0)) {
					{
					State = 1933; subscripts();
					State = 1935;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1934; whiteSpace();
						}
					}

					}
				}

				State = 1939; Match(RPAREN);
				State = 1941;
				switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					State = 1940; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 1946;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				State = 1945; typeHint();
				}
				break;
			}
			State = 1951;
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				State = 1948; whiteSpace();
				State = 1949; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParserNext.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParserNext.WHILE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1953; Match(WHILE);
			State = 1954; whiteSpace();
			State = 1955; valueStmt(0);
			State = 1956; endOfStatement();
			State = 1958;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				State = 1957; block();
				}
				break;
			}
			State = 1960; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParserNext.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1962; Match(WIDTH);
			State = 1963; whiteSpace();
			State = 1964; fileNumber();
			State = 1966;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1965; whiteSpace();
				}
			}

			State = 1968; Match(COMMA);
			State = 1970;
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1969; whiteSpace();
				}
				break;
			}
			State = 1972; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParserNext.WITH, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_WITH() { return GetToken(VBAParserNext.END_WITH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParserNext.NEW, 0); }
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974; Match(WITH);
			State = 1975; whiteSpace();
			State = 1981;
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				State = 1976; implicitCallStmt_InStmt();
				}
				break;

			case 2:
				{
				{
				State = 1977; Match(NEW);
				State = 1978; whiteSpace();
				State = 1979; type();
				}
				}
				break;
			}
			State = 1983; endOfStatement();
			State = 1985;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (EXIT_DO - 66)) | (1L << (EXIT_FOR - 66)) | (1L << (EXIT_FUNCTION - 66)) | (1L << (EXIT_PROPERTY - 66)) | (1L << (EXIT_SUB - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LINE_INPUT - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (ON_ERROR - 66)) | (1L << (ON_LOCAL_ERROR - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)) | (1L << (WS - 207)) | (1L << (IDENTIFIER - 207)) | (1L << (LINE_CONTINUATION - 207)) | (1L << (LEN - 207)))) != 0)) {
				{
				State = 1984; block();
				}
			}

			State = 1987; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParserNext.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParserNext.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989; Match(WRITE);
			State = 1990; whiteSpace();
			State = 1991; fileNumber();
			State = 1993;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1992; whiteSpace();
				}
			}

			State = 1995; Match(COMMA);
			State = 2000;
			switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				State = 1997;
				switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					State = 1996; whiteSpace();
					}
					break;
				}
				State = 1999; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParserNext.HASH, 0); }
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003;
			_la = _input.La(1);
			if (_la==HASH) {
				{
				State = 2002; Match(HASH);
				}
			}

			State = 2005; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_explicitCallStmt);
		try {
			State = 2009;
			switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2007; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2008; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParserNext.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParserNext.LPAREN); }
		public ITerminalNode CALL() { return GetToken(VBAParserNext.CALL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParserNext.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParserNext.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_eCS_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2011; Match(CALL);
			State = 2012; whiteSpace();
			State = 2013; ambiguousIdentifier();
			State = 2015;
			switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				State = 2014; typeHint();
				}
				break;
			}
			State = 2030;
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				State = 2018;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2017; whiteSpace();
					}
				}

				State = 2020; Match(LPAREN);
				State = 2022;
				switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					State = 2021; whiteSpace();
					}
					break;
				}
				State = 2024; argsCall();
				State = 2026;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2025; whiteSpace();
					}
				}

				State = 2028; Match(RPAREN);
				}
				break;
			}
			State = 2041;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2033;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2032; whiteSpace();
						}
					}

					State = 2035; Match(LPAREN);
					State = 2036; subscripts();
					State = 2037; Match(RPAREN);
					}
					} 
				}
				State = 2043;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode CALL() { return GetToken(VBAParserNext.CALL, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParserNext.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(VBAParserNext.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParserNext.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParserNext.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParserNext.LPAREN, i);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044; Match(CALL);
			State = 2045; whiteSpace();
			State = 2047;
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 2046; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2049; Match(DOT);
			State = 2050; ambiguousIdentifier();
			State = 2052;
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 2051; typeHint();
				}
				break;
			}
			State = 2067;
			switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				State = 2055;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2054; whiteSpace();
					}
				}

				State = 2057; Match(LPAREN);
				State = 2059;
				switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					State = 2058; whiteSpace();
					}
					break;
				}
				State = 2061; argsCall();
				State = 2063;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2062; whiteSpace();
					}
				}

				State = 2065; Match(RPAREN);
				}
				break;
			}
			State = 2078;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,319,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2070;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2069; whiteSpace();
						}
					}

					State = 2072; Match(LPAREN);
					State = 2073; subscripts();
					State = 2074; Match(RPAREN);
					}
					} 
				}
				State = 2080;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,319,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_implicitCallStmt_InBlock);
		try {
			State = 2083;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2081; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2082; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParserNext.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VBAParserNext.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParserNext.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParserNext.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParserNext.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086;
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 2085; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2089;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2088; whiteSpace();
				}
			}

			State = 2091; Match(DOT);
			State = 2093;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2092; whiteSpace();
				}
			}

			State = 2095; ambiguousIdentifier();
			State = 2097;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				State = 2096; typeHint();
				}
				break;
			}
			State = 2102;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2099; whiteSpace();
				State = 2100; argsCall();
				}
				break;
			}
			State = 2108;
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				State = 2105;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2104; whiteSpace();
					}
				}

				State = 2107; dictionaryCallStmt();
				}
				break;
			}
			State = 2119;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,329,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2111;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2110; whiteSpace();
						}
					}

					State = 2113; Match(LPAREN);
					State = 2114; subscripts();
					State = 2115; Match(RPAREN);
					}
					} 
				}
				State = 2121;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,329,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParserNext.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParserNext.LPAREN); }
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParserNext.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParserNext.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2122; certainIdentifier();
			State = 2126;
			switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				State = 2123; whiteSpace();
				State = 2124; argsCall();
				}
				break;
			}
			State = 2137;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2129;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2128; whiteSpace();
						}
					}

					State = 2131; Match(LPAREN);
					State = 2132; subscripts();
					State = 2133; Match(RPAREN);
					}
					} 
				}
				State = 2139;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,332,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_implicitCallStmt_InStmt);
		try {
			State = 2144;
			switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2140; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2141; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2142; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2143; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParserNext.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParserNext.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParserNext.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParserNext.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2146; ambiguousIdentifier();
			State = 2148;
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				State = 2147; typeHint();
				}
				break;
			}
			State = 2154;
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 2151;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2150; whiteSpace();
					}
				}

				State = 2153; dictionaryCallStmt();
				}
				break;
			}
			State = 2165;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,338,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2157;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2156; whiteSpace();
						}
					}

					State = 2159; Match(LPAREN);
					State = 2160; subscripts();
					State = 2161; Match(RPAREN);
					}
					} 
				}
				State = 2167;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParserNext.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParserNext.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParserNext.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParserNext.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170;
			switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				State = 2168; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2169; baseType();
				}
				break;
			}
			State = 2173;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2172; typeHint();
				}
			}

			State = 2176;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2175; whiteSpace();
				}
			}

			State = 2178; Match(LPAREN);
			State = 2180;
			switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				State = 2179; whiteSpace();
				}
				break;
			}
			State = 2186;
			switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				State = 2182; argsCall();
				State = 2184;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2183; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2188; Match(RPAREN);
			State = 2193;
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 2190;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2189; whiteSpace();
					}
				}

				State = 2192; dictionaryCallStmt();
				}
				break;
			}
			State = 2204;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,348,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2196;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2195; whiteSpace();
						}
					}

					State = 2198; Match(LPAREN);
					State = 2199; subscripts();
					State = 2200; Match(RPAREN);
					}
					} 
				}
				State = 2206;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,348,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParserNext.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParserNext.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParserNext.LPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParserNext.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2209;
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				State = 2207; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2208; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2215;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2211; iCS_S_MemberCall();
					State = 2213;
					switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
					case 1:
						{
						State = 2212; whiteSpace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2217;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,351,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2223;
			switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				State = 2220;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2219; whiteSpace();
					}
				}

				State = 2222; dictionaryCallStmt();
				}
				break;
			}
			State = 2234;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,355,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2226;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2225; whiteSpace();
						}
					}

					State = 2228; Match(LPAREN);
					State = 2229; subscripts();
					State = 2230; Match(RPAREN);
					}
					} 
				}
				State = 2236;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,355,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParserNext.DOT, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParserNext.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2237;
			_la = _input.La(1);
			if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2239;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2238; whiteSpace();
				}
			}

			State = 2243;
			switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				State = 2241; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2242; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2245; whiteSpace();
				}
			}

			State = 2248; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParserNext.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParserNext.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2262;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,362,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2251;
					switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
					case 1:
						{
						State = 2250; argCall();
						}
						break;
					}
					State = 2254;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2253; whiteSpace();
						}
					}

					State = 2256;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2258;
					switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
					case 1:
						{
						State = 2257; whiteSpace();
						}
						break;
					}
					}
					} 
				}
				State = 2264;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,362,_ctx);
			}
			State = 2265; argCall();
			State = 2278;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,366,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2267;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2266; whiteSpace();
						}
					}

					State = 2269;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2271;
					switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						State = 2270; whiteSpace();
						}
						break;
					}
					State = 2274;
					switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
					case 1:
						{
						State = 2273; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2280;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,366,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParserNext.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParserNext.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParserNext.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2281; Match(LPAREN);
				}
				break;
			}
			State = 2286;
			switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				State = 2284;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2285; whiteSpace();
				}
				break;
			}
			State = 2289;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 2288; Match(RPAREN);
				}
			}

			State = 2291; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParserNext.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293; Match(EXCLAMATIONPOINT);
			State = 2295;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2294; whiteSpace();
				}
			}

			State = 2297; ambiguousIdentifier();
			State = 2299;
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				State = 2298; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301; Match(LPAREN);
			State = 2319;
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				State = 2303;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2302; whiteSpace();
					}
				}

				State = 2305; arg();
				State = 2316;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,375,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2307;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2306; whiteSpace();
							}
						}

						State = 2309; Match(COMMA);
						State = 2311;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2310; whiteSpace();
							}
						}

						State = 2313; arg();
						}
						} 
					}
					State = 2318;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,375,_ctx);
				}
				}
				break;
			}
			State = 2322;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2321; whiteSpace();
				}
			}

			State = 2324; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParserNext.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VBAParserNext.OPTIONAL, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParserNext.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParserNext.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328;
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				State = 2326; Match(OPTIONAL);
				State = 2327; whiteSpace();
				}
				break;
			}
			State = 2332;
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 2330;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2331; whiteSpace();
				}
				break;
			}
			State = 2336;
			switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				State = 2334; Match(PARAMARRAY);
				State = 2335; whiteSpace();
				}
				break;
			}
			State = 2338; ambiguousIdentifier();
			State = 2340;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2339; typeHint();
				}
			}

			State = 2350;
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 2343;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2342; whiteSpace();
					}
				}

				State = 2345; Match(LPAREN);
				State = 2347;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2346; whiteSpace();
					}
				}

				State = 2349; Match(RPAREN);
				}
				break;
			}
			State = 2356;
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 2353;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2352; whiteSpace();
					}
				}

				State = 2355; asTypeClause();
				}
				break;
			}
			State = 2362;
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				State = 2359;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2358; whiteSpace();
					}
				}

				State = 2361; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2364; Match(EQ);
			State = 2366;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2365; whiteSpace();
				}
				break;
			}
			State = 2368; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2370; subscript();
			State = 2381;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,392,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2372;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2371; whiteSpace();
						}
					}

					State = 2374; Match(COMMA);
					State = 2376;
					switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
					case 1:
						{
						State = 2375; whiteSpace();
						}
						break;
					}
					State = 2378; subscript();
					}
					} 
				}
				State = 2383;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,392,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParserNext.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389;
			switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				State = 2384; valueStmt(0);
				State = 2385; whiteSpace();
				State = 2386; Match(TO);
				State = 2387; whiteSpace();
				}
				break;
			}
			State = 2391; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParserNext.IDENTIFIER, i);
		}
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParserNext.IDENTIFIER); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_ambiguousIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2395;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2395;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2393; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFLNGLNG:
					case DEFLNGPTR:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
					case LEN:
						{
						State = 2394; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2397;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParserNext.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParserNext.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2399; Match(AS);
			State = 2401;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2400; whiteSpace();
				}
			}

			State = 2405;
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				State = 2403; Match(NEW);
				State = 2404; whiteSpace();
				}
				break;
			}
			State = 2407; type();
			State = 2412;
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				State = 2409;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2408; whiteSpace();
					}
				}

				State = 2411; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(VBAParserNext.COLLECTION, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParserNext.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParserNext.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParserNext.VARIANT, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParserNext.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParserNext.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParserNext.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParserNext.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParserNext.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParserNext.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2414;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (SINGLE - 157)) | (1L << (STRING - 157)) | (1L << (VARIANT - 157)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParserNext.IDENTIFIER, i);
		}
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParserNext.IDENTIFIER); }
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_certainIdentifier);
		try {
			int _alt;
			State = 2431;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2416; Match(IDENTIFIER);
				State = 2421;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,401,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 2419;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFLNGLNG:
						case DEFLNGPTR:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
						case LEN:
							{
							State = 2417; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2418; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 2423;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,401,_ctx);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case LEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2424; ambiguousKeyword();
				State = 2427;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2427;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFLNGLNG:
						case DEFLNGPTR:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
						case LEN:
							{
							State = 2425; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2426; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2429;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,403,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParserNext.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParserNext.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParserNext.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParserNext.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParserNext.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParserNext.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParserNext.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParserNext.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (EQ - 187)) | (1L << (GEQ - 187)) | (1L << (GT - 187)) | (1L << (LEQ - 187)) | (1L << (LT - 187)) | (1L << (NEQ - 187)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public IReadOnlyList<ITerminalNode> DOT() { return GetTokens(VBAParserNext.DOT); }
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> EXCLAMATIONPOINT() { return GetTokens(VBAParserNext.EXCLAMATIONPOINT); }
		public ITerminalNode EXCLAMATIONPOINT(int i) {
			return GetToken(VBAParserNext.EXCLAMATIONPOINT, i);
		}
		public ITerminalNode DOT(int i) {
			return GetToken(VBAParserNext.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435; ambiguousIdentifier();
			State = 2440;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2436;
					_la = _input.La(1);
					if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2437; ambiguousIdentifier();
					}
					} 
				}
				State = 2442;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(VBAParserNext.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2443; Match(MULT);
			State = 2445;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2444; whiteSpace();
				}
			}

			State = 2449;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case SHORTLITERAL:
			case INTEGERLITERAL:
			case DOUBLELITERAL:
				{
				State = 2447; numberLiteral();
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case LEN:
				{
				State = 2448; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<CertainIdentifierContext> certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParserNext.MINUS, 0); }
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451; certainIdentifier();
			State = 2460;
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 2453;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2452; whiteSpace();
					}
				}

				State = 2455; Match(MINUS);
				State = 2457;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2456; whiteSpace();
					}
				}

				State = 2459; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VBAParserNext.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2464;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case LEN:
				{
				State = 2462; ambiguousIdentifier();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case SHORTLITERAL:
			case INTEGERLITERAL:
			case DOUBLELITERAL:
				{
				State = 2463; numberLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2466; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParserNext.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParserNext.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParserNext.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParserNext.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParserNext.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParserNext.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode EMPTY() { return GetToken(VBAParserNext.EMPTY, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_literal);
		try {
			State = 2476;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case SHORTLITERAL:
			case INTEGERLITERAL:
			case DOUBLELITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2468; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2469; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2470; Match(STRINGLITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2471; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2472; Match(FALSE);
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2473; Match(NOTHING);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2474; Match(NULL);
				}
				break;
			case EMPTY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2475; Match(EMPTY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParserNext.INTEGERLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParserNext.HEXLITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParserNext.DOUBLELITERAL, 0); }
		public ITerminalNode SHORTLITERAL() { return GetToken(VBAParserNext.SHORTLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParserNext.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2478;
			_la = _input.La(1);
			if ( !(((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (OCTLITERAL - 207)) | (1L << (HEXLITERAL - 207)) | (1L << (SHORTLITERAL - 207)) | (1L << (INTEGERLITERAL - 207)) | (1L << (DOUBLELITERAL - 207)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2482;
			switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				State = 2480; baseType();
				}
				break;

			case 2:
				{
				State = 2481; complexType();
				}
				break;
			}
			State = 2492;
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 2485;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2484; whiteSpace();
					}
				}

				State = 2487; Match(LPAREN);
				State = 2489;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2488; whiteSpace();
					}
				}

				State = 2491; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParserNext.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParserNext.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParserNext.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParserNext.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParserNext.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParserNext.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParserNext.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParserNext.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParserNext.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParserNext.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParserNext.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			_la = _input.La(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (FRIEND - 79)) | (1L << (GLOBAL - 79)) | (1L << (PRIVATE - 79)) | (1L << (PUBLIC - 79)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParserNext.CASE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParserNext.APPACTIVATE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParserNext.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParserNext.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParserNext.IF, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParserNext.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParserNext.XOR, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParserNext.TIME, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParserNext.RAISEEVENT, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParserNext.LOAD, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParserNext.BYREF, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParserNext.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParserNext.GOSUB, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParserNext.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParserNext.GLOBAL, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParserNext.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParserNext.ME, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParserNext.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParserNext.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParserNext.LSET, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParserNext.WIDTH, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParserNext.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParserNext.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParserNext.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParserNext.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParserNext.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParserNext.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParserNext.BINARY, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParserNext.SAVESETTING, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParserNext.TEXT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParserNext.SENDKEYS, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParserNext.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParserNext.PUT, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParserNext.MKDIR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParserNext.SINGLE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParserNext.ERROR, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParserNext.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParserNext.CALL, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParserNext.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParserNext.SPC, 0); }
		public ITerminalNode AS() { return GetToken(VBAParserNext.AS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParserNext.NOT, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParserNext.BEEP, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParserNext.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParserNext.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParserNext.DIM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParserNext.OUTPUT, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParserNext.KILL, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParserNext.IMPLEMENTS, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParserNext.VERSION, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParserNext.ACCESS, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParserNext.COLLECTION, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParserNext.DECLARE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParserNext.TRUE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParserNext.RESUME, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParserNext.VARIANT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParserNext.BOOLEAN, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParserNext.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParserNext.WHILE, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParserNext.DEFDBL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParserNext.FUNCTION, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParserNext.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParserNext.REM, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParserNext.RSET, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParserNext.ADDRESSOF, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParserNext.GOTO, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParserNext.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParserNext.TYPEOF, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParserNext.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParserNext.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParserNext.SET, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParserNext.ERASE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParserNext.INTEGER, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParserNext.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParserNext.PRESERVE, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParserNext.STOP, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParserNext.SHARED, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParserNext.APPEND, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParserNext.CHDIR, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParserNext.PRIVATE, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParserNext.UNLOAD, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParserNext.DEFBYTE, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParserNext.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParserNext.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParserNext.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParserNext.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParserNext.LOCK, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParserNext.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParserNext.DEFSTR, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParserNext.IMP, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParserNext.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParserNext.DEFVAR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParserNext.CHDRIVE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParserNext.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParserNext.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParserNext.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParserNext.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParserNext.DEFINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParserNext.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParserNext.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParserNext.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParserNext.BYTE, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParserNext.INPUT, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParserNext.STEP, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParserNext.SAVEPICTURE, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParserNext.SEEK, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParserNext.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParserNext.RANDOM, 0); }
		public ITerminalNode IS() { return GetToken(VBAParserNext.IS, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParserNext.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParserNext.DEFCUR, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParserNext.ALIAS, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParserNext.DATE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParserNext.DEFDATE, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParserNext.CLASS, 0); }
		public ITerminalNode LET() { return GetToken(VBAParserNext.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParserNext.FRIEND, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParserNext.EQV, 0); }
		public ITerminalNode READ() { return GetToken(VBAParserNext.READ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParserNext.TO, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParserNext.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParserNext.OPEN, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParserNext.DELETESETTING, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParserNext.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(VBAParserNext.AND, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParserNext.DEFLNG, 0); }
		public ITerminalNode MID() { return GetToken(VBAParserNext.MID, 0); }
		public ITerminalNode ON() { return GetToken(VBAParserNext.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParserNext.WITH, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParserNext.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParserNext.WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParserNext.LEN, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParserNext.EACH, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParserNext.NEW, 0); }
		public ITerminalNode GET() { return GetToken(VBAParserNext.GET, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParserNext.FILECOPY, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParserNext.LIB, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParserNext.NEXT, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParserNext.OPTIONAL, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParserNext.REDIM, 0); }
		public ITerminalNode END() { return GetToken(VBAParserNext.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParserNext.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParserNext.LIKE, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParserNext.RANDOMIZE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParserNext.WITHEVENTS, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2498;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFLNGLNG) | (1L << DEFLNGPTR) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END - 66)) | (1L << (ENUM - 66)) | (1L << (EQV - 66)) | (1L << (ERASE - 66)) | (1L << (ERROR - 66)) | (1L << (EVENT - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PRIVATE - 130)) | (1L << (PUBLIC - 130)) | (1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==LEN) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParserNext.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParserNext.NEWLINE, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_endOfLine);
		int _la;
		try {
			int _alt;
			State = 2519;
			switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2501;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2500; whiteSpace();
					}
				}

				State = 2510;
				switch (_input.La(1)) {
				case NEWLINE:
					{
					State = 2504;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2503; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2506;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,418,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				case COMMENT:
					{
					State = 2508; comment();
					}
					break;
				case REMCOMMENT:
					{
					State = 2509; remComment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2513;
				switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					State = 2512; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2516;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2515; whiteSpace();
					}
				}

				State = 2518; annotationList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParserNext.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParserNext.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2531;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,426,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2529;
					switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
					case 1:
						{
						State = 2521; endOfLine();
						}
						break;

					case 2:
						{
						State = 2523;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2522; whiteSpace();
							}
						}

						State = 2525; Match(COLON);
						State = 2527;
						switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
						case 1:
							{
							State = 2526; whiteSpace();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2533;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public ITerminalNode REMCOMMENT() { return GetToken(VBAParserNext.REMCOMMENT, 0); }
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2534; Match(REMCOMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(VBAParserNext.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2536; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParserNext.SINGLEQUOTE, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538; Match(SINGLEQUOTE);
			State = 2540;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2539; annotation();
				}
				}
				State = 2542;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParserNext.AT, 0); }
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2544; Match(AT);
			State = 2545; annotationName();
			State = 2547;
			switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				State = 2546; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParserNext.IDENTIFIER, 0); }
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2549; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParserNext.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParserNext.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParserNext.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParserNext.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2612;
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2551; whiteSpace();
				State = 2552; annotationArg();
				State = 2554;
				switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					State = 2553; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2556; whiteSpace();
				State = 2557; annotationArg();
				State = 2566;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2559;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2558; whiteSpace();
							}
						}

						State = 2561; Match(COMMA);
						State = 2563;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2562; whiteSpace();
							}
						}

						State = 2565; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2568;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,432,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2571;
				switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
				case 1:
					{
					State = 2570; whiteSpace();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2574;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2573; whiteSpace();
					}
				}

				State = 2576; Match(LPAREN);
				State = 2578;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2577; whiteSpace();
					}
				}

				State = 2580; annotationArg();
				State = 2582;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2581; whiteSpace();
					}
				}

				State = 2584; Match(RPAREN);
				State = 2586;
				switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					State = 2585; whiteSpace();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2589;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2588; whiteSpace();
					}
				}

				State = 2591; Match(LPAREN);
				State = 2592; annotationArg();
				State = 2601;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2594;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2593; whiteSpace();
							}
						}

						State = 2596; Match(COMMA);
						State = 2598;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2597; whiteSpace();
							}
						}

						State = 2600; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2603;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,441,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2606;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2605; whiteSpace();
					}
				}

				State = 2608; Match(RPAREN);
				State = 2610;
				switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					State = 2609; whiteSpace();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParserNext.IDENTIFIER, 0); }
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_annotationArg);
		try {
			State = 2616;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2614; Match(IDENTIFIER);
				}
				break;
			case EMPTY:
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case SHORTLITERAL:
			case INTEGERLITERAL:
			case DOUBLELITERAL:
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2615; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParserNext.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParserNext.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParserNext.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParserNext.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserNextListener typedListener = listener as IVBAParserNextListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserNextVisitor<TResult> typedVisitor = visitor as IVBAParserNextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2619;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2618;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2621;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,446,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 94: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 9);

		case 5: return Precpred(_ctx, 8);

		case 6: return Precpred(_ctx, 7);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xE1\xA42\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3"+
		"\x12F\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x135\n\x3\x3\x3\x5\x3\x138\n"+
		"\x3\x3\x3\x3\x3\x5\x3\x13C\n\x3\x3\x3\x3\x3\x5\x3\x140\n\x3\x3\x3\x3\x3"+
		"\x5\x3\x144\n\x3\x3\x3\x3\x3\x5\x3\x148\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5"+
		"\x4\x14E\n\x4\x3\x4\x5\x4\x151\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x5\x5\x15B\n\x5\x5\x5\x15D\n\x5\x3\x5\x3\x5\x6\x5\x161\n"+
		"\x5\r\x5\xE\x5\x162\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x169\n\x6\f\x6\xE\x6"+
		"\x16C\v\x6\x3\x6\x3\x6\a\x6\x170\n\x6\f\x6\xE\x6\x173\v\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\x178\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x6\a\x17F\n\a\r\a\xE"+
		"\a\x180\x3\b\x3\b\x3\b\x3\b\a\b\x187\n\b\f\b\xE\b\x18A\v\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x198\n\t\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1A2\n\n\x3\v\x3\v\x3\v\x3\v\a\v"+
		"\x1A8\n\v\f\v\xE\v\x1AB\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1B4"+
		"\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\x1BA\n\r\x3\r\x3\r\x5\r\x1BE\n\r\x3\r\x3"+
		"\r\x5\r\x1C2\n\r\x3\r\x3\r\x5\r\x1C6\n\r\x3\r\a\r\x1C9\n\r\f\r\xE\r\x1CC"+
		"\v\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x1D2\n\xE\f\xE\xE\xE\x1D5\v\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x21B\n"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x221\n\x10\x3\x10\x3\x10\x5\x10"+
		"\x225\n\x10\x3\x10\x5\x10\x228\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x238\n\x14\x3\x14\x3\x14\x5\x14\x23C\n\x14\x3\x14\a\x14\x23F\n\x14\f"+
		"\x14\xE\x14\x242\v\x14\x5\x14\x244\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\x249"+
		"\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x24F\n\x15\x3\x15\x3\x15\x5"+
		"\x15\x253\n\x15\x3\x15\a\x15\x256\n\x15\f\x15\xE\x15\x259\v\x15\x3\x16"+
		"\x3\x16\x5\x16\x25D\n\x16\x3\x16\x3\x16\x3\x16\x5\x16\x262\n\x16\x3\x16"+
		"\x5\x16\x265\n\x16\x3\x16\x3\x16\x5\x16\x269\n\x16\x3\x16\x3\x16\x3\x17"+
		"\x3\x17\x5\x17\x26F\n\x17\x3\x17\x3\x17\x5\x17\x273\n\x17\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x27A\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x280\n\x18\x3\x18\x3\x18\x5\x18\x284\n\x18\x3\x18\x5\x18\x287\n\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x28C\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x297\n\x18\x3\x18\x5\x18\x29A"+
		"\n\x18\x3\x18\x5\x18\x29D\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2A2\n\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2A8\n\x19\x3\x19\x3\x19\x5\x19\x2AC"+
		"\n\x19\x3\x19\a\x19\x2AF\n\x19\f\x19\xE\x19\x2B2\v\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x2B8\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2BE"+
		"\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2C2\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x2CA\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2CE\n\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x2D2\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2D6\n\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x2DA\n\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2DF\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2EA\n\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2F1\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\x2F9\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x5\x1D\x300\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x307\n\x1D"+
		"\f\x1D\xE\x1D\x30A\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5\x1E\x310\n\x1E"+
		"\x3\x1E\x3\x1E\x5\x1E\x314\n\x1E\x3\x1E\x5\x1E\x317\n\x1E\x3\x1E\x3\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x31F\n\x1F\x3\x1F\x3\x1F\x5\x1F\x323"+
		"\n\x1F\x3\x1F\a\x1F\x326\n\x1F\f\x1F\xE\x1F\x329\v\x1F\x3 \x3 \x3 \x3"+
		" \x3!\x3!\x3!\x5!\x332\n!\x3!\x3!\x3!\x3!\x5!\x338\n!\x3!\x3!\x3\"\x3"+
		"\"\x3#\x3#\x3#\x3#\x5#\x342\n#\x3#\x3#\x5#\x346\n#\x3#\x3#\x3$\x3$\x3"+
		"$\x3$\x3$\x3$\x5$\x350\n$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x358\n$\x3$\x3$"+
		"\x3$\x3$\x5$\x35E\n$\x3%\x3%\x3%\x3%\x5%\x364\n%\x3%\x3%\x3%\x5%\x369"+
		"\n%\x3%\x5%\x36C\n%\x3%\x3%\x5%\x370\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x5%\x37C\n%\x3%\x3%\x5%\x380\n%\x3%\x3%\x3%\x3%\x5%\x386\n%"+
		"\x5%\x388\n%\x3&\x3&\x3&\x5&\x38D\n&\x3&\x3&\x5&\x391\n&\x3&\x3&\x5&\x395"+
		"\n&\x3&\x3&\x5&\x399\n&\x3&\x5&\x39C\n&\x3&\x5&\x39F\n&\x3&\x5&\x3A2\n"+
		"&\x3&\x5&\x3A5\n&\x3&\x3&\x5&\x3A9\n&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5\'"+
		"\x3B1\n\'\x3\'\x3\'\x5\'\x3B5\n\'\x3\'\x5\'\x3B8\n\'\x3\'\x5\'\x3BB\n"+
		"\'\x3\'\x3\'\x5\'\x3BF\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3D7\n*\x3*\x3*\a*\x3DB"+
		"\n*\f*\xE*\x3DE\v*\x3*\x5*\x3E1\n*\x3*\x3*\x5*\x3E5\n*\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x5+\x3EE\n+\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x3F9"+
		"\n-\x3.\x3.\x3.\x5.\x3FE\n.\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x5\x30\x408\n\x30\x3\x30\x3\x30\x5\x30\x40C\n\x30\x3\x30\x6\x30\x40F"+
		"\n\x30\r\x30\xE\x30\x410\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x5"+
		"\x32\x419\n\x32\x3\x32\x3\x32\x5\x32\x41D\n\x32\x3\x32\x3\x32\x5\x32\x421"+
		"\n\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x429\n\x33\x3"+
		"\x33\x3\x33\x5\x33\x42D\n\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x439\n\x35\x3\x35\x3\x35\x5\x35\x43D"+
		"\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x445\n\x35\x5"+
		"\x35\x447\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x44D\n\x36\x3\x36\x3"+
		"\x36\x5\x36\x451\n\x36\x3\x36\x3\x36\x3\x37\x3\x37\x5\x37\x457\n\x37\x3"+
		"\x37\x3\x37\x5\x37\x45B\n\x37\x3\x37\x3\x37\x5\x37\x45F\n\x37\x3\x37\x3"+
		"\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x479\n"+
		":\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x483\n;\x3;\x3;\x5;\x487\n;\x3;"+
		"\a;\x48A\n;\f;\xE;\x48D\v;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x497\n"+
		"<\x3<\x3<\x5<\x49B\n<\x3<\a<\x49E\n<\f<\xE<\x4A1\v<\x3=\x3=\x3=\x3=\x3"+
		"=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x4AF\n=\x3=\x3=\x3=\x5=\x4B4\n=\x3="+
		"\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x4BD\n=\x3=\x3=\x5=\x4C1\n=\x3=\x3=\x5=\x4C5"+
		"\n=\x3>\x3>\x5>\x4C9\n>\x3>\x3>\x5>\x4CD\n>\x3>\x5>\x4D0\n>\a>\x4D2\n"+
		">\f>\xE>\x4D5\v>\x3>\x5>\x4D8\n>\x3>\x5>\x4DB\n>\x3>\x3>\x5>\x4DF\n>\x3"+
		">\x5>\x4E2\n>\x6>\x4E4\n>\r>\xE>\x4E5\x5>\x4E8\n>\x3?\x3?\x3?\x5?\x4ED"+
		"\n?\x3?\x3?\x5?\x4F1\n?\x3?\x3?\x5?\x4F5\n?\x3?\x3?\x5?\x4F9\n?\x5?\x4FB"+
		"\n?\x3@\x3@\x3@\x3@\x5@\x501\n@\x3@\x3@\x5@\x505\n@\x3@\x5@\x508\n@\x3"+
		"\x41\x3\x41\x3\x41\x5\x41\x50D\n\x41\x3\x41\x3\x41\x5\x41\x511\n\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x5\x41\x517\n\x41\x3\x41\x5\x41\x51A\n\x41\x3"+
		"\x41\x5\x41\x51D\n\x41\x3\x41\x3\x41\x3\x41\x5\x41\x522\n\x41\x3\x41\x3"+
		"\x41\x5\x41\x526\n\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x5\x42\x52D"+
		"\n\x42\x3\x42\x3\x42\x5\x42\x531\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5"+
		"\x42\x537\n\x42\x3\x42\x5\x42\x53A\n\x42\x3\x42\x3\x42\x5\x42\x53E\n\x42"+
		"\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x5\x43\x545\n\x43\x3\x43\x3\x43\x5"+
		"\x43\x549\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x54F\n\x43\x3\x43\x5"+
		"\x43\x552\n\x43\x3\x43\x3\x43\x5\x43\x556\n\x43\x3\x43\x3\x43\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x5\x44\x55E\n\x44\x3\x44\x3\x44\x5\x44\x562\n\x44\x3"+
		"\x44\x5\x44\x565\n\x44\x3\x44\x5\x44\x568\n\x44\x3\x44\x3\x44\x5\x44\x56C"+
		"\n\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x574\n\x45\x3"+
		"\x45\x3\x45\x5\x45\x578\n\x45\x3\x45\x3\x45\x5\x45\x57C\n\x45\x5\x45\x57E"+
		"\n\x45\x3\x45\x5\x45\x581\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x587"+
		"\n\x46\x3G\x3G\x3G\x3G\x5G\x58D\nG\x3G\x3G\x5G\x591\nG\x3G\x3G\x5G\x595"+
		"\nG\x3G\aG\x598\nG\fG\xEG\x59B\vG\x3H\x3H\x5H\x59F\nH\x3H\x3H\x5H\x5A3"+
		"\nH\x3H\x3H\x5H\x5A7\nH\x3H\x3H\x3H\x3H\x5H\x5AD\nH\x3I\x3I\x3J\x3J\x3"+
		"J\x3J\x5J\x5B5\nJ\x5J\x5B7\nJ\x3K\x3K\x3L\x3L\x3L\x3L\x3M\x3M\x3M\x3M"+
		"\x5M\x5C3\nM\x3M\x3M\x5M\x5C7\nM\x3M\x3M\x3N\x3N\x3N\x3N\x5N\x5CF\nN\x3"+
		"N\x3N\x5N\x5D3\nN\x3N\x3N\x3O\x3O\x3O\x3O\x5O\x5DB\nO\x3O\x3O\x5O\x5DF"+
		"\nO\x3O\x3O\x5O\x5E3\nO\x3O\x3O\x5O\x5E7\nO\x3O\x3O\x5O\x5EB\nO\x3O\x3"+
		"O\x5O\x5EF\nO\x3O\x3O\x3P\x3P\x3P\x3P\x5P\x5F7\nP\x3P\x3P\x5P\x5FB\nP"+
		"\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\aQ\x606\nQ\fQ\xEQ\x609\vQ\x3Q\x3"+
		"Q\x3R\x3R\x5R\x60F\nR\x3R\x3R\x5R\x613\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R"+
		"\x3R\x3R\x5R\x61E\nR\x3S\x3S\x3S\x3S\x3S\x5S\x625\nS\x3T\x3T\x3T\x5T\x62A"+
		"\nT\x3T\x3T\x5T\x62E\nT\x3T\aT\x631\nT\fT\xET\x634\vT\x5T\x636\nT\x3U"+
		"\x3U\x3U\x3U\x5U\x63C\nU\x3U\x3U\x5U\x640\nU\x3U\x5U\x643\nU\x3V\x3V\x3"+
		"V\x3V\x5V\x649\nV\x3V\x3V\x5V\x64D\nV\x3V\x3V\x3W\x3W\x3W\x3W\x5W\x655"+
		"\nW\x3W\x3W\x5W\x659\nW\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x5Y\x662\nY\x3Y\x3"+
		"Y\x5Y\x666\nY\x3Y\x3Y\x5Y\x66A\nY\x3Y\x3Y\x5Y\x66E\nY\x3Y\x5Y\x671\nY"+
		"\x3Y\x3Y\x5Y\x675\nY\x3Y\x3Y\x3Z\x3Z\x5Z\x67B\nZ\x3Z\x3Z\x5Z\x67F\nZ\x3"+
		"Z\x3Z\x3[\x3[\x3[\x5[\x686\n[\x3[\x3[\x3[\x3[\x3[\a[\x68D\n[\f[\xE[\x690"+
		"\v[\x3[\x3[\x3\\\x3\\\x5\\\x696\n\\\x3\\\x3\\\x5\\\x69A\n\\\x3\\\x5\\"+
		"\x69D\n\\\x3\\\x5\\\x6A0\n\\\x3\\\x5\\\x6A3\n\\\x3\\\x3\\\x3\\\x5\\\x6A8"+
		"\n\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x5]\x6B4\n]\x3^\x3^\x3"+
		"^\x3^\x3_\x3_\x3_\x3_\x5_\x6BE\n_\x3_\x3_\x5_\x6C2\n_\x3_\x3_\x3_\x3_"+
		"\x3_\x3_\x5_\x6CA\n_\x5_\x6CC\n_\x3`\x3`\x3`\x5`\x6D1\n`\x3`\x3`\x3`\x5"+
		"`\x6D6\n`\x3`\x3`\x3`\x5`\x6DB\n`\x3`\x3`\x5`\x6DF\n`\x3`\x3`\x3`\x3`"+
		"\x5`\x6E5\n`\x3`\x3`\x3`\x5`\x6EA\n`\x3`\x3`\x3`\x3`\x3`\x5`\x6F1\n`\x3"+
		"`\x3`\x5`\x6F5\n`\x3`\x3`\x3`\x3`\x5`\x6FB\n`\x3`\x3`\x5`\x6FF\n`\x3`"+
		"\x3`\x5`\x703\n`\x3`\x3`\x3`\x5`\x708\n`\x3`\x3`\x5`\x70C\n`\x3`\x3`\x3"+
		"`\x5`\x711\n`\x3`\x3`\x5`\x715\n`\x3`\x3`\x3`\x5`\x71A\n`\x3`\x3`\x5`"+
		"\x71E\n`\x3`\x3`\x3`\x5`\x723\n`\x3`\x3`\x5`\x727\n`\x3`\x3`\x3`\x5`\x72C"+
		"\n`\x3`\x3`\x5`\x730\n`\x3`\x3`\x3`\x5`\x735\n`\x3`\x3`\x5`\x739\n`\x3"+
		"`\x3`\x3`\x5`\x73E\n`\x3`\x3`\x5`\x742\n`\x3`\x3`\x3`\x5`\x747\n`\x3`"+
		"\x3`\x5`\x74B\n`\x3`\x3`\x3`\x5`\x750\n`\x3`\x3`\x5`\x754\n`\x3`\x3`\x3"+
		"`\x5`\x759\n`\x3`\x3`\x5`\x75D\n`\x3`\x3`\x3`\x5`\x762\n`\x3`\x3`\x5`"+
		"\x766\n`\x3`\a`\x769\n`\f`\xE`\x76C\v`\x3\x61\x3\x61\x3\x61\x5\x61\x771"+
		"\n\x61\x3\x61\x3\x61\x3\x61\x5\x61\x776\n\x61\x3\x61\x3\x61\x3\x62\x3"+
		"\x62\x5\x62\x77C\n\x62\x3\x62\x3\x62\x5\x62\x780\n\x62\x3\x62\a\x62\x783"+
		"\n\x62\f\x62\xE\x62\x786\v\x62\x3\x63\x3\x63\x5\x63\x78A\n\x63\x3\x63"+
		"\x3\x63\x5\x63\x78E\n\x63\x3\x63\x3\x63\x5\x63\x792\n\x63\x5\x63\x794"+
		"\n\x63\x3\x63\x3\x63\x5\x63\x798\n\x63\x5\x63\x79A\n\x63\x3\x63\x5\x63"+
		"\x79D\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7A2\n\x63\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x5\x64\x7A9\n\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x5\x65\x7B1\n\x65\x3\x65\x3\x65\x5\x65\x7B5\n\x65\x3\x65\x3\x65\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x7C0\n\x66\x3\x66"+
		"\x3\x66\x5\x66\x7C4\n\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x5g\x7CC\ng\x3"+
		"g\x3g\x5g\x7D0\ng\x3g\x5g\x7D3\ng\x3h\x5h\x7D6\nh\x3h\x3h\x3i\x3i\x5i"+
		"\x7DC\ni\x3j\x3j\x3j\x3j\x5j\x7E2\nj\x3j\x5j\x7E5\nj\x3j\x3j\x5j\x7E9"+
		"\nj\x3j\x3j\x5j\x7ED\nj\x3j\x3j\x5j\x7F1\nj\x3j\x5j\x7F4\nj\x3j\x3j\x3"+
		"j\x3j\aj\x7FA\nj\fj\xEj\x7FD\vj\x3k\x3k\x3k\x5k\x802\nk\x3k\x3k\x3k\x5"+
		"k\x807\nk\x3k\x5k\x80A\nk\x3k\x3k\x5k\x80E\nk\x3k\x3k\x5k\x812\nk\x3k"+
		"\x3k\x5k\x816\nk\x3k\x5k\x819\nk\x3k\x3k\x3k\x3k\ak\x81F\nk\fk\xEk\x822"+
		"\vk\x3l\x3l\x5l\x826\nl\x3m\x5m\x829\nm\x3m\x5m\x82C\nm\x3m\x3m\x5m\x830"+
		"\nm\x3m\x3m\x5m\x834\nm\x3m\x3m\x3m\x5m\x839\nm\x3m\x5m\x83C\nm\x3m\x5"+
		"m\x83F\nm\x3m\x5m\x842\nm\x3m\x3m\x3m\x3m\am\x848\nm\fm\xEm\x84B\vm\x3"+
		"n\x3n\x3n\x3n\x5n\x851\nn\x3n\x5n\x854\nn\x3n\x3n\x3n\x3n\an\x85A\nn\f"+
		"n\xEn\x85D\vn\x3o\x3o\x3o\x3o\x5o\x863\no\x3p\x3p\x5p\x867\np\x3p\x5p"+
		"\x86A\np\x3p\x5p\x86D\np\x3p\x5p\x870\np\x3p\x3p\x3p\x3p\ap\x876\np\f"+
		"p\xEp\x879\vp\x3q\x3q\x5q\x87D\nq\x3q\x5q\x880\nq\x3q\x5q\x883\nq\x3q"+
		"\x3q\x5q\x887\nq\x3q\x3q\x5q\x88B\nq\x5q\x88D\nq\x3q\x3q\x5q\x891\nq\x3"+
		"q\x5q\x894\nq\x3q\x5q\x897\nq\x3q\x3q\x3q\x3q\aq\x89D\nq\fq\xEq\x8A0\v"+
		"q\x3r\x3r\x5r\x8A4\nr\x3r\x3r\x5r\x8A8\nr\x6r\x8AA\nr\rr\xEr\x8AB\x3r"+
		"\x5r\x8AF\nr\x3r\x5r\x8B2\nr\x3r\x5r\x8B5\nr\x3r\x3r\x3r\x3r\ar\x8BB\n"+
		"r\fr\xEr\x8BE\vr\x3s\x3s\x5s\x8C2\ns\x3s\x3s\x5s\x8C6\ns\x3t\x5t\x8C9"+
		"\nt\x3t\x3t\x3u\x5u\x8CE\nu\x3u\x5u\x8D1\nu\x3u\x3u\x5u\x8D5\nu\au\x8D7"+
		"\nu\fu\xEu\x8DA\vu\x3u\x3u\x5u\x8DE\nu\x3u\x3u\x5u\x8E2\nu\x3u\x5u\x8E5"+
		"\nu\au\x8E7\nu\fu\xEu\x8EA\vu\x3v\x5v\x8ED\nv\x3v\x3v\x5v\x8F1\nv\x3v"+
		"\x5v\x8F4\nv\x3v\x3v\x3w\x3w\x5w\x8FA\nw\x3w\x3w\x5w\x8FE\nw\x3x\x3x\x5"+
		"x\x902\nx\x3x\x3x\x5x\x906\nx\x3x\x3x\x5x\x90A\nx\x3x\ax\x90D\nx\fx\xE"+
		"x\x910\vx\x5x\x912\nx\x3x\x5x\x915\nx\x3x\x3x\x3y\x3y\x5y\x91B\ny\x3y"+
		"\x3y\x5y\x91F\ny\x3y\x3y\x5y\x923\ny\x3y\x3y\x5y\x927\ny\x3y\x5y\x92A"+
		"\ny\x3y\x3y\x5y\x92E\ny\x3y\x5y\x931\ny\x3y\x5y\x934\ny\x3y\x5y\x937\n"+
		"y\x3y\x5y\x93A\ny\x3y\x5y\x93D\ny\x3z\x3z\x5z\x941\nz\x3z\x3z\x3{\x3{"+
		"\x5{\x947\n{\x3{\x3{\x5{\x94B\n{\x3{\a{\x94E\n{\f{\xE{\x951\v{\x3|\x3"+
		"|\x3|\x3|\x3|\x5|\x958\n|\x3|\x3|\x3}\x3}\x6}\x95E\n}\r}\xE}\x95F\x3~"+
		"\x3~\x5~\x964\n~\x3~\x3~\x5~\x968\n~\x3~\x3~\x5~\x96C\n~\x3~\x5~\x96F"+
		"\n~\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\a\x80\x976\n\x80\f\x80\xE\x80\x979"+
		"\v\x80\x3\x80\x3\x80\x3\x80\x6\x80\x97E\n\x80\r\x80\xE\x80\x97F\x5\x80"+
		"\x982\n\x80\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\a\x82\x989\n\x82\f\x82"+
		"\xE\x82\x98C\v\x82\x3\x83\x3\x83\x5\x83\x990\n\x83\x3\x83\x3\x83\x5\x83"+
		"\x994\n\x83\x3\x84\x3\x84\x5\x84\x998\n\x84\x3\x84\x3\x84\x5\x84\x99C"+
		"\n\x84\x3\x84\x5\x84\x99F\n\x84\x3\x85\x3\x85\x5\x85\x9A3\n\x85\x3\x85"+
		"\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5\x86"+
		"\x9AF\n\x86\x3\x87\x3\x87\x3\x88\x3\x88\x5\x88\x9B5\n\x88\x3\x88\x5\x88"+
		"\x9B8\n\x88\x3\x88\x3\x88\x5\x88\x9BC\n\x88\x3\x88\x5\x88\x9BF\n\x88\x3"+
		"\x89\x3\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x5\x8C\x9C8\n\x8C\x3\x8C"+
		"\x6\x8C\x9CB\n\x8C\r\x8C\xE\x8C\x9CC\x3\x8C\x3\x8C\x5\x8C\x9D1\n\x8C\x3"+
		"\x8C\x5\x8C\x9D4\n\x8C\x3\x8C\x5\x8C\x9D7\n\x8C\x3\x8C\x5\x8C\x9DA\n\x8C"+
		"\x3\x8D\x3\x8D\x5\x8D\x9DE\n\x8D\x3\x8D\x3\x8D\x5\x8D\x9E2\n\x8D\a\x8D"+
		"\x9E4\n\x8D\f\x8D\xE\x8D\x9E7\v\x8D\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x90"+
		"\x3\x90\x6\x90\x9EF\n\x90\r\x90\xE\x90\x9F0\x3\x91\x3\x91\x3\x91\x5\x91"+
		"\x9F6\n\x91\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x5\x93\x9FD\n\x93\x3\x93"+
		"\x3\x93\x3\x93\x5\x93\xA02\n\x93\x3\x93\x3\x93\x5\x93\xA06\n\x93\x3\x93"+
		"\x6\x93\xA09\n\x93\r\x93\xE\x93\xA0A\x3\x93\x5\x93\xA0E\n\x93\x3\x93\x5"+
		"\x93\xA11\n\x93\x3\x93\x3\x93\x5\x93\xA15\n\x93\x3\x93\x3\x93\x5\x93\xA19"+
		"\n\x93\x3\x93\x3\x93\x5\x93\xA1D\n\x93\x3\x93\x5\x93\xA20\n\x93\x3\x93"+
		"\x3\x93\x3\x93\x5\x93\xA25\n\x93\x3\x93\x3\x93\x5\x93\xA29\n\x93\x3\x93"+
		"\x6\x93\xA2C\n\x93\r\x93\xE\x93\xA2D\x3\x93\x5\x93\xA31\n\x93\x3\x93\x3"+
		"\x93\x5\x93\xA35\n\x93\x5\x93\xA37\n\x93\x3\x94\x3\x94\x5\x94\xA3B\n\x94"+
		"\x3\x95\x6\x95\xA3E\n\x95\r\x95\xE\x95\xA3F\x3\x95\x2\x2\x3\xBE\x96\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34"+
		"\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2"+
		"P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2"+
		"n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2"+
		"\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2"+
		"\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2"+
		"\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2"+
		"\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2"+
		"\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2"+
		"\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2"+
		"\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112"+
		"\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124"+
		"\x2\x126\x2\x128\x2\x2\x18\x5\x2\x17\x17$$\xA7\xA7\x3\x2\'\x33\x4\x2\xB0"+
		"\xB0\xB4\xB4\x3\x2JN\x3\x2wx\a\x2\x13\x13\x17\x17\\\\\x80\x80\x8B\x8B"+
		"\x4\x2\x8E\x8F\xB8\xB8\x4\x2hj\x9E\x9E\x4\x2\x3\x3\x5\x5\x4\x2\xA0\xA0"+
		"\xA6\xA6\x4\x2\xBB\xBB\xC4\xC4\x4\x2\xC3\xC3\xC6\xC6\a\x2]]\x66\x66\xBD"+
		"\xC0\xC2\xC2\xC5\xC5\x3\x2\x6\a\x4\x2\x19\x1A\x81\x81\x3\x2\x19\x1A\f"+
		"\x2\x18\x18\x1B\x1B\"\"%%\x37\x37^^\x62\x62\x9F\x9F\xA4\xA4\xB1\xB1\x3"+
		"\x2\xD1\xD5\x5\x2\x6\x6\b\f\xC7\xC7\x6\x2QQUU\x84\x84\x89\x89\v\x2\r:"+
		"\x44IO\x66kvyz\x7F\x84\x89\x8E\x90\xB9\xE1\xE1\x4\x2\xDC\xDC\xDE\xDE\xBD9"+
		"\x2\x12A\x3\x2\x2\x2\x4\x12E\x3\x2\x2\x2\x6\x149\x3\x2\x2\x2\b\x154\x3"+
		"\x2\x2\x2\n\x166\x3\x2\x2\x2\f\x17E\x3\x2\x2\x2\xE\x182\x3\x2\x2\x2\x10"+
		"\x197\x3\x2\x2\x2\x12\x1A1\x3\x2\x2\x2\x14\x1A3\x3\x2\x2\x2\x16\x1B3\x3"+
		"\x2\x2\x2\x18\x1B5\x3\x2\x2\x2\x1A\x1CD\x3\x2\x2\x2\x1C\x21A\x3\x2\x2"+
		"\x2\x1E\x21C\x3\x2\x2\x2 \x229\x3\x2\x2\x2\"\x22B\x3\x2\x2\x2$\x22F\x3"+
		"\x2\x2\x2&\x233\x3\x2\x2\x2(\x248\x3\x2\x2\x2*\x25A\x3\x2\x2\x2,\x26C"+
		"\x3\x2\x2\x2.\x279\x3\x2\x2\x2\x30\x2A3\x3\x2\x2\x2\x32\x2D9\x3\x2\x2"+
		"\x2\x34\x2F8\x3\x2\x2\x2\x36\x2FA\x3\x2\x2\x2\x38\x2FF\x3\x2\x2\x2:\x30D"+
		"\x3\x2\x2\x2<\x31A\x3\x2\x2\x2>\x32A\x3\x2\x2\x2@\x331\x3\x2\x2\x2\x42"+
		"\x33B\x3\x2\x2\x2\x44\x33D\x3\x2\x2\x2\x46\x349\x3\x2\x2\x2H\x35F\x3\x2"+
		"\x2\x2J\x38C\x3\x2\x2\x2L\x3AC\x3\x2\x2\x2N\x3C2\x3\x2\x2\x2P\x3C6\x3"+
		"\x2\x2\x2R\x3E4\x3\x2\x2\x2T\x3E6\x3\x2\x2\x2V\x3EF\x3\x2\x2\x2X\x3F1"+
		"\x3\x2\x2\x2Z\x3FA\x3\x2\x2\x2\\\x3FF\x3\x2\x2\x2^\x403\x3\x2\x2\x2`\x412"+
		"\x3\x2\x2\x2\x62\x418\x3\x2\x2\x2\x64\x424\x3\x2\x2\x2\x66\x430\x3\x2"+
		"\x2\x2h\x434\x3\x2\x2\x2j\x448\x3\x2\x2\x2l\x454\x3\x2\x2\x2n\x462\x3"+
		"\x2\x2\x2p\x466\x3\x2\x2\x2r\x46E\x3\x2\x2\x2t\x47A\x3\x2\x2\x2v\x48E"+
		"\x3\x2\x2\x2x\x4A2\x3\x2\x2\x2z\x4E7\x3\x2\x2\x2|\x4FA\x3\x2\x2\x2~\x4FC"+
		"\x3\x2\x2\x2\x80\x50C\x3\x2\x2\x2\x82\x52C\x3\x2\x2\x2\x84\x544\x3\x2"+
		"\x2\x2\x86\x559\x3\x2\x2\x2\x88\x56F\x3\x2\x2\x2\x8A\x582\x3\x2\x2\x2"+
		"\x8C\x588\x3\x2\x2\x2\x8E\x59C\x3\x2\x2\x2\x90\x5AE\x3\x2\x2\x2\x92\x5B0"+
		"\x3\x2\x2\x2\x94\x5B8\x3\x2\x2\x2\x96\x5BA\x3\x2\x2\x2\x98\x5BE\x3\x2"+
		"\x2\x2\x9A\x5CA\x3\x2\x2\x2\x9C\x5D6\x3\x2\x2\x2\x9E\x5F2\x3\x2\x2\x2"+
		"\xA0\x5FE\x3\x2\x2\x2\xA2\x61D\x3\x2\x2\x2\xA4\x61F\x3\x2\x2\x2\xA6\x635"+
		"\x3\x2\x2\x2\xA8\x637\x3\x2\x2\x2\xAA\x644\x3\x2\x2\x2\xAC\x650\x3\x2"+
		"\x2\x2\xAE\x65C\x3\x2\x2\x2\xB0\x661\x3\x2\x2\x2\xB2\x678\x3\x2\x2\x2"+
		"\xB4\x685\x3\x2\x2\x2\xB6\x693\x3\x2\x2\x2\xB8\x6AB\x3\x2\x2\x2\xBA\x6B5"+
		"\x3\x2\x2\x2\xBC\x6B9\x3\x2\x2\x2\xBE\x6FA\x3\x2\x2\x2\xC0\x770\x3\x2"+
		"\x2\x2\xC2\x779\x3\x2\x2\x2\xC4\x787\x3\x2\x2\x2\xC6\x7A3\x3\x2\x2\x2"+
		"\xC8\x7AC\x3\x2\x2\x2\xCA\x7B8\x3\x2\x2\x2\xCC\x7C7\x3\x2\x2\x2\xCE\x7D5"+
		"\x3\x2\x2\x2\xD0\x7DB\x3\x2\x2\x2\xD2\x7DD\x3\x2\x2\x2\xD4\x7FE\x3\x2"+
		"\x2\x2\xD6\x825\x3\x2\x2\x2\xD8\x828\x3\x2\x2\x2\xDA\x84C\x3\x2\x2\x2"+
		"\xDC\x862\x3\x2\x2\x2\xDE\x864\x3\x2\x2\x2\xE0\x87C\x3\x2\x2\x2\xE2\x8A3"+
		"\x3\x2\x2\x2\xE4\x8BF\x3\x2\x2\x2\xE6\x8C8\x3\x2\x2\x2\xE8\x8D8\x3\x2"+
		"\x2\x2\xEA\x8EC\x3\x2\x2\x2\xEC\x8F7\x3\x2\x2\x2\xEE\x8FF\x3\x2\x2\x2"+
		"\xF0\x91A\x3\x2\x2\x2\xF2\x93E\x3\x2\x2\x2\xF4\x944\x3\x2\x2\x2\xF6\x957"+
		"\x3\x2\x2\x2\xF8\x95D\x3\x2\x2\x2\xFA\x961\x3\x2\x2\x2\xFC\x970\x3\x2"+
		"\x2\x2\xFE\x981\x3\x2\x2\x2\x100\x983\x3\x2\x2\x2\x102\x985\x3\x2\x2\x2"+
		"\x104\x98D\x3\x2\x2\x2\x106\x995\x3\x2\x2\x2\x108\x9A2\x3\x2\x2\x2\x10A"+
		"\x9AE\x3\x2\x2\x2\x10C\x9B0\x3\x2\x2\x2\x10E\x9B4\x3\x2\x2\x2\x110\x9C0"+
		"\x3\x2\x2\x2\x112\x9C2\x3\x2\x2\x2\x114\x9C4\x3\x2\x2\x2\x116\x9D9\x3"+
		"\x2\x2\x2\x118\x9E5\x3\x2\x2\x2\x11A\x9E8\x3\x2\x2\x2\x11C\x9EA\x3\x2"+
		"\x2\x2\x11E\x9EC\x3\x2\x2\x2\x120\x9F2\x3\x2\x2\x2\x122\x9F7\x3\x2\x2"+
		"\x2\x124\xA36\x3\x2\x2\x2\x126\xA3A\x3\x2\x2\x2\x128\xA3D\x3\x2\x2\x2"+
		"\x12A\x12B\x5\x4\x3\x2\x12B\x12C\a\x2\x2\x3\x12C\x3\x3\x2\x2\x2\x12D\x12F"+
		"\x5\x128\x95\x2\x12E\x12D\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x130"+
		"\x3\x2\x2\x2\x130\x134\x5\x118\x8D\x2\x131\x132\x5\x6\x4\x2\x132\x133"+
		"\x5\x118\x8D\x2\x133\x135\x3\x2\x2\x2\x134\x131\x3\x2\x2\x2\x134\x135"+
		"\x3\x2\x2\x2\x135\x137\x3\x2\x2\x2\x136\x138\x5\b\x5\x2\x137\x136\x3\x2"+
		"\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13B\x5\x118\x8D"+
		"\x2\x13A\x13C\x5\f\a\x2\x13B\x13A\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C"+
		"\x13D\x3\x2\x2\x2\x13D\x13F\x5\x118\x8D\x2\x13E\x140\x5\xE\b\x2\x13F\x13E"+
		"\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x143\x5"+
		"\x118\x8D\x2\x142\x144\x5\x14\v\x2\x143\x142\x3\x2\x2\x2\x143\x144\x3"+
		"\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x147\x5\x118\x8D\x2\x146\x148\x5"+
		"\x128\x95\x2\x147\x146\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148\x5\x3\x2"+
		"\x2\x2\x149\x14A\a\xB2\x2\x2\x14A\x14B\x5\x128\x95\x2\x14B\x14D\a\xD5"+
		"\x2\x2\x14C\x14E\x5\x128\x95\x2\x14D\x14C\x3\x2\x2\x2\x14D\x14E\x3\x2"+
		"\x2\x2\x14E\x150\x3\x2\x2\x2\x14F\x151\a \x2\x2\x150\x14F\x3\x2\x2\x2"+
		"\x150\x151\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x153\x5\x118\x8D\x2"+
		"\x153\a\x3\x2\x2\x2\x154\x15C\a\x15\x2\x2\x155\x156\x5\x128\x95\x2\x156"+
		"\x157\a\xDF\x2\x2\x157\x158\x5\x128\x95\x2\x158\x15A\x5\xF8}\x2\x159\x15B"+
		"\x5\x128\x95\x2\x15A\x159\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15D"+
		"\x3\x2\x2\x2\x15C\x155\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x3"+
		"\x2\x2\x2\x15E\x160\x5\x118\x8D\x2\x15F\x161\x5\n\x6\x2\x160\x15F\x3\x2"+
		"\x2\x2\x161\x162\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2"+
		"\x2\x163\x164\x3\x2\x2\x2\x164\x165\a\x44\x2\x2\x165\t\x3\x2\x2\x2\x166"+
		"\x16A\x5\xF8}\x2\x167\x169\x5\x128\x95\x2\x168\x167\x3\x2\x2\x2\x169\x16C"+
		"\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16D\x3"+
		"\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16D\x171\a\xBD\x2\x2\x16E\x170\x5\x128"+
		"\x95\x2\x16F\x16E\x3\x2\x2\x2\x170\x173\x3\x2\x2\x2\x171\x16F\x3\x2\x2"+
		"\x2\x171\x172\x3\x2\x2\x2\x172\x174\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2"+
		"\x174\x177\x5\x10A\x86\x2\x175\x176\a\x4\x2\x2\x176\x178\a\xD3\x2\x2\x177"+
		"\x175\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A"+
		"\x5\x118\x8D\x2\x17A\v\x3\x2\x2\x2\x17B\x17C\x5\x18\r\x2\x17C\x17D\x5"+
		"\x118\x8D\x2\x17D\x17F\x3\x2\x2\x2\x17E\x17B\x3\x2\x2\x2\x17F\x180\x3"+
		"\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\r\x3\x2\x2"+
		"\x2\x182\x188\x5\x12\n\x2\x183\x184\x5\x118\x8D\x2\x184\x185\x5\x12\n"+
		"\x2\x185\x187\x3\x2\x2\x2\x186\x183\x3\x2\x2\x2\x187\x18A\x3\x2\x2\x2"+
		"\x188\x186\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x18B\x3\x2\x2\x2\x18A"+
		"\x188\x3\x2\x2\x2\x18B\x18C\x5\x118\x8D\x2\x18C\xF\x3\x2\x2\x2\x18D\x18E"+
		"\a{\x2\x2\x18E\x18F\x5\x128\x95\x2\x18F\x190\a\xD3\x2\x2\x190\x198\x3"+
		"\x2\x2\x2\x191\x192\a}\x2\x2\x192\x193\x5\x128\x95\x2\x193\x194\t\x2\x2"+
		"\x2\x194\x198\x3\x2\x2\x2\x195\x198\a|\x2\x2\x196\x198\a~\x2\x2\x197\x18D"+
		"\x3\x2\x2\x2\x197\x191\x3\x2\x2\x2\x197\x195\x3\x2\x2\x2\x197\x196\x3"+
		"\x2\x2\x2\x198\x11\x3\x2\x2\x2\x199\x1A2\x5.\x18\x2\x19A\x1A2\x5\x38\x1D"+
		"\x2\x19B\x1A2\x5@!\x2\x19C\x1A2\x5(\x15\x2\x19D\x1A2\x5\\/\x2\x19E\x1A2"+
		"\x5\xC0\x61\x2\x19F\x1A2\x5\x10\t\x2\x1A0\x1A2\x5\xB4[\x2\x1A1\x199\x3"+
		"\x2\x2\x2\x1A1\x19A\x3\x2\x2\x2\x1A1\x19B\x3\x2\x2\x2\x1A1\x19C\x3\x2"+
		"\x2\x2\x1A1\x19D\x3\x2\x2\x2\x1A1\x19E\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2"+
		"\x2\x1A1\x1A0\x3\x2\x2\x2\x1A2\x13\x3\x2\x2\x2\x1A3\x1A9\x5\x16\f\x2\x1A4"+
		"\x1A5\x5\x118\x8D\x2\x1A5\x1A6\x5\x16\f\x2\x1A6\x1A8\x3\x2\x2\x2\x1A7"+
		"\x1A4\x3\x2\x2\x2\x1A8\x1AB\x3\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1A9\x1AA"+
		"\x3\x2\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2\x2\x1AC\x1AD\x5"+
		"\x118\x8D\x2\x1AD\x15\x3\x2\x2\x2\x1AE\x1B4\x5J&\x2\x1AF\x1B4\x5\x80\x41"+
		"\x2\x1B0\x1B4\x5\x82\x42\x2\x1B1\x1B4\x5\x84\x43\x2\x1B2\x1B4\x5\xB0Y"+
		"\x2\x1B3\x1AE\x3\x2\x2\x2\x1B3\x1AF\x3\x2\x2\x2\x1B3\x1B0\x3\x2\x2\x2"+
		"\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B2\x3\x2\x2\x2\x1B4\x17\x3\x2\x2\x2\x1B5"+
		"\x1B6\a\x11\x2\x2\x1B6\x1B7\x5\x128\x95\x2\x1B7\x1B9\x5\xDCo\x2\x1B8\x1BA"+
		"\x5\x128\x95\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BB"+
		"\x3\x2\x2\x2\x1BB\x1BD\a\xBD\x2\x2\x1BC\x1BE\x5\x128\x95\x2\x1BD\x1BC"+
		"\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1CA\x5"+
		"\x10A\x86\x2\x1C0\x1C2\x5\x128\x95\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1\x1C2"+
		"\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C5\a\x3\x2\x2\x1C4\x1C6\x5\x128"+
		"\x95\x2\x1C5\x1C4\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2"+
		"\x2\x1C7\x1C9\x5\x10A\x86\x2\x1C8\x1C1\x3\x2\x2\x2\x1C9\x1CC\x3\x2\x2"+
		"\x2\x1CA\x1C8\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x19\x3\x2\x2\x2\x1CC"+
		"\x1CA\x3\x2\x2\x2\x1CD\x1D3\x5\x1C\xF\x2\x1CE\x1CF\x5\x118\x8D\x2\x1CF"+
		"\x1D0\x5\x1C\xF\x2\x1D0\x1D2\x3\x2\x2\x2\x1D1\x1CE\x3\x2\x2\x2\x1D2\x1D5"+
		"\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D6\x3"+
		"\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1D7\x5\x118\x8D\x2\x1D7\x1B\x3\x2"+
		"\x2\x2\x1D8\x21B\x5\x108\x85\x2\x1D9\x21B\x5\x1E\x10\x2\x1DA\x21B\x5\x18"+
		"\r\x2\x1DB\x21B\x5 \x11\x2\x1DC\x21B\x5\"\x12\x2\x1DD\x21B\x5$\x13\x2"+
		"\x1DE\x21B\x5&\x14\x2\x1DF\x21B\x5(\x15\x2\x1E0\x21B\x5,\x17\x2\x1E1\x21B"+
		"\x5\x32\x1A\x2\x1E2\x21B\x5\x30\x19\x2\x1E3\x21B\x5\x34\x1B\x2\x1E4\x21B"+
		"\x5\x36\x1C\x2\x1E5\x21B\x5<\x1F\x2\x1E6\x21B\x5> \x2\x1E7\x21B\x5\x42"+
		"\"\x2\x1E8\x21B\x5\xD0i\x2\x1E9\x21B\x5\x44#\x2\x1EA\x21B\x5\x46$\x2\x1EB"+
		"\x21B\x5H%\x2\x1EC\x21B\x5L\'\x2\x1ED\x21B\x5N(\x2\x1EE\x21B\x5P)\x2\x1EF"+
		"\x21B\x5R*\x2\x1F0\x21B\x5\\/\x2\x1F1\x21B\x5^\x30\x2\x1F2\x21B\x5`\x31"+
		"\x2\x1F3\x21B\x5\x62\x32\x2\x1F4\x21B\x5\x64\x33\x2\x1F5\x21B\x5\x66\x34"+
		"\x2\x1F6\x21B\x5h\x35\x2\x1F7\x21B\x5j\x36\x2\x1F8\x21B\x5l\x37\x2\x1F9"+
		"\x21B\x5n\x38\x2\x1FA\x21B\x5p\x39\x2\x1FB\x21B\x5r:\x2\x1FC\x21B\x5t"+
		";\x2\x1FD\x21B\x5v<\x2\x1FE\x21B\x5x=\x2\x1FF\x21B\x5~@\x2\x200\x21B\x5"+
		"\x86\x44\x2\x201\x21B\x5\x88\x45\x2\x202\x21B\x5\x8A\x46\x2\x203\x21B"+
		"\x5\x8CG\x2\x204\x21B\x5\x90I\x2\x205\x21B\x5\x92J\x2\x206\x21B\x5\x94"+
		"K\x2\x207\x21B\x5\x96L\x2\x208\x21B\x5\x98M\x2\x209\x21B\x5\x9AN\x2\x20A"+
		"\x21B\x5\x9CO\x2\x20B\x21B\x5\x9EP\x2\x20C\x21B\x5\xA0Q\x2\x20D\x21B\x5"+
		"\xA8U\x2\x20E\x21B\x5\xAAV\x2\x20F\x21B\x5\xACW\x2\x210\x21B\x5\xAEX\x2"+
		"\x211\x21B\x5\xB2Z\x2\x212\x21B\x5\xBA^\x2\x213\x21B\x5\xBC_\x2\x214\x21B"+
		"\x5\xC0\x61\x2\x215\x21B\x5\xC6\x64\x2\x216\x21B\x5\xC8\x65\x2\x217\x21B"+
		"\x5\xCA\x66\x2\x218\x21B\x5\xCCg\x2\x219\x21B\x5\xD6l\x2\x21A\x1D8\x3"+
		"\x2\x2\x2\x21A\x1D9\x3\x2\x2\x2\x21A\x1DA\x3\x2\x2\x2\x21A\x1DB\x3\x2"+
		"\x2\x2\x21A\x1DC\x3\x2\x2\x2\x21A\x1DD\x3\x2\x2\x2\x21A\x1DE\x3\x2\x2"+
		"\x2\x21A\x1DF\x3\x2\x2\x2\x21A\x1E0\x3\x2\x2\x2\x21A\x1E1\x3\x2\x2\x2"+
		"\x21A\x1E2\x3\x2\x2\x2\x21A\x1E3\x3\x2\x2\x2\x21A\x1E4\x3\x2\x2\x2\x21A"+
		"\x1E5\x3\x2\x2\x2\x21A\x1E6\x3\x2\x2\x2\x21A\x1E7\x3\x2\x2\x2\x21A\x1E8"+
		"\x3\x2\x2\x2\x21A\x1E9\x3\x2\x2\x2\x21A\x1EA\x3\x2\x2\x2\x21A\x1EB\x3"+
		"\x2\x2\x2\x21A\x1EC\x3\x2\x2\x2\x21A\x1ED\x3\x2\x2\x2\x21A\x1EE\x3\x2"+
		"\x2\x2\x21A\x1EF\x3\x2\x2\x2\x21A\x1F0\x3\x2\x2\x2\x21A\x1F1\x3\x2\x2"+
		"\x2\x21A\x1F2\x3\x2\x2\x2\x21A\x1F3\x3\x2\x2\x2\x21A\x1F4\x3\x2\x2\x2"+
		"\x21A\x1F5\x3\x2\x2\x2\x21A\x1F6\x3\x2\x2\x2\x21A\x1F7\x3\x2\x2\x2\x21A"+
		"\x1F8\x3\x2\x2\x2\x21A\x1F9\x3\x2\x2\x2\x21A\x1FA\x3\x2\x2\x2\x21A\x1FB"+
		"\x3\x2\x2\x2\x21A\x1FC\x3\x2\x2\x2\x21A\x1FD\x3\x2\x2\x2\x21A\x1FE\x3"+
		"\x2\x2\x2\x21A\x1FF\x3\x2\x2\x2\x21A\x200\x3\x2\x2\x2\x21A\x201\x3\x2"+
		"\x2\x2\x21A\x202\x3\x2\x2\x2\x21A\x203\x3\x2\x2\x2\x21A\x204\x3\x2\x2"+
		"\x2\x21A\x205\x3\x2\x2\x2\x21A\x206\x3\x2\x2\x2\x21A\x207\x3\x2\x2\x2"+
		"\x21A\x208\x3\x2\x2\x2\x21A\x209\x3\x2\x2\x2\x21A\x20A\x3\x2\x2\x2\x21A"+
		"\x20B\x3\x2\x2\x2\x21A\x20C\x3\x2\x2\x2\x21A\x20D\x3\x2\x2\x2\x21A\x20E"+
		"\x3\x2\x2\x2\x21A\x20F\x3\x2\x2\x2\x21A\x210\x3\x2\x2\x2\x21A\x211\x3"+
		"\x2\x2\x2\x21A\x212\x3\x2\x2\x2\x21A\x213\x3\x2\x2\x2\x21A\x214\x3\x2"+
		"\x2\x2\x21A\x215\x3\x2\x2\x2\x21A\x216\x3\x2\x2\x2\x21A\x217\x3\x2\x2"+
		"\x2\x21A\x218\x3\x2\x2\x2\x21A\x219\x3\x2\x2\x2\x21B\x1D\x3\x2\x2\x2\x21C"+
		"\x21D\a\x12\x2\x2\x21D\x21E\x5\x128\x95\x2\x21E\x227\x5\xBE`\x2\x21F\x221"+
		"\x5\x128\x95\x2\x220\x21F\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x222"+
		"\x3\x2\x2\x2\x222\x224\a\x3\x2\x2\x223\x225\x5\x128\x95\x2\x224\x223\x3"+
		"\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x228\x5\xBE"+
		"`\x2\x227\x220\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x1F\x3\x2\x2\x2"+
		"\x229\x22A\a\x16\x2\x2\x22A!\x3\x2\x2\x2\x22B\x22C\a\x1E\x2\x2\x22C\x22D"+
		"\x5\x128\x95\x2\x22D\x22E\x5\xBE`\x2\x22E#\x3\x2\x2\x2\x22F\x230\a\x1F"+
		"\x2\x2\x230\x231\x5\x128\x95\x2\x231\x232\x5\xBE`\x2\x232%\x3\x2\x2\x2"+
		"\x233\x243\a!\x2\x2\x234\x235\x5\x128\x95\x2\x235\x240\x5\xCEh\x2\x236"+
		"\x238\x5\x128\x95\x2\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238"+
		"\x239\x3\x2\x2\x2\x239\x23B\a\x3\x2\x2\x23A\x23C\x5\x128\x95\x2\x23B\x23A"+
		"\x3\x2\x2\x2\x23B\x23C\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23F\x5"+
		"\xCEh\x2\x23E\x237\x3\x2\x2\x2\x23F\x242\x3\x2\x2\x2\x240\x23E\x3\x2\x2"+
		"\x2\x240\x241\x3\x2\x2\x2\x241\x244\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2"+
		"\x243\x234\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244\'\x3\x2\x2\x2\x245\x246"+
		"\x5\x112\x8A\x2\x246\x247\x5\x128\x95\x2\x247\x249\x3\x2\x2\x2\x248\x245"+
		"\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24B\a#"+
		"\x2\x2\x24B\x24C\x5\x128\x95\x2\x24C\x257\x5*\x16\x2\x24D\x24F\x5\x128"+
		"\x95\x2\x24E\x24D\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2"+
		"\x2\x250\x252\a\x3\x2\x2\x251\x253\x5\x128\x95\x2\x252\x251\x3\x2\x2\x2"+
		"\x252\x253\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x256\x5*\x16\x2\x255"+
		"\x24E\x3\x2\x2\x2\x256\x259\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x257\x258"+
		"\x3\x2\x2\x2\x258)\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x25A\x25C\x5\xF8"+
		"}\x2\x25B\x25D\x5\x110\x89\x2\x25C\x25B\x3\x2\x2\x2\x25C\x25D\x3\x2\x2"+
		"\x2\x25D\x261\x3\x2\x2\x2\x25E\x25F\x5\x128\x95\x2\x25F\x260\x5\xFA~\x2"+
		"\x260\x262\x3\x2\x2\x2\x261\x25E\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262"+
		"\x264\x3\x2\x2\x2\x263\x265\x5\x128\x95\x2\x264\x263\x3\x2\x2\x2\x264"+
		"\x265\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x268\a\xBD\x2\x2\x267\x269"+
		"\x5\x128\x95\x2\x268\x267\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269\x26A"+
		"\x3\x2\x2\x2\x26A\x26B\x5\xBE`\x2\x26B+\x3\x2\x2\x2\x26C\x26E\a%\x2\x2"+
		"\x26D\x26F\x5\x128\x95\x2\x26E\x26D\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2"+
		"\x26F\x270\x3\x2\x2\x2\x270\x272\a\xBD\x2\x2\x271\x273\x5\x128\x95\x2"+
		"\x272\x271\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274"+
		"\x275\x5\xBE`\x2\x275-\x3\x2\x2\x2\x276\x277\x5\x112\x8A\x2\x277\x278"+
		"\x5\x128\x95\x2\x278\x27A\x3\x2\x2\x2\x279\x276\x3\x2\x2\x2\x279\x27A"+
		"\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27C\a&\x2\x2\x27C\x27F\x5\x128"+
		"\x95\x2\x27D\x27E\a\x88\x2\x2\x27E\x280\x5\x128\x95\x2\x27F\x27D\x3\x2"+
		"\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x286\x3\x2\x2\x2\x281\x283\aS\x2\x2"+
		"\x282\x284\x5\x110\x89\x2\x283\x282\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2"+
		"\x284\x287\x3\x2\x2\x2\x285\x287\a\xA5\x2\x2\x286\x281\x3\x2\x2\x2\x286"+
		"\x285\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288\x289\x5\x128\x95\x2\x289"+
		"\x28B\x5\xF8}\x2\x28A\x28C\x5\x110\x89\x2\x28B\x28A\x3\x2\x2\x2\x28B\x28C"+
		"\x3\x2\x2\x2\x28C\x28D\x3\x2\x2\x2\x28D\x28E\x5\x128\x95\x2\x28E\x28F"+
		"\a\x65\x2\x2\x28F\x290\x5\x128\x95\x2\x290\x296\a\xD0\x2\x2\x291\x292"+
		"\x5\x128\x95\x2\x292\x293\a\xF\x2\x2\x293\x294\x5\x128\x95\x2\x294\x295"+
		"\a\xD0\x2\x2\x295\x297\x3\x2\x2\x2\x296\x291\x3\x2\x2\x2\x296\x297\x3"+
		"\x2\x2\x2\x297\x29C\x3\x2\x2\x2\x298\x29A\x5\x128\x95\x2\x299\x298\x3"+
		"\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29B\x3\x2\x2\x2\x29B\x29D\x5\xEE"+
		"x\x2\x29C\x299\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D\x2A1\x3\x2\x2\x2"+
		"\x29E\x29F\x5\x128\x95\x2\x29F\x2A0\x5\xFA~\x2\x2A0\x2A2\x3\x2\x2\x2\x2A1"+
		"\x29E\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2/\x3\x2\x2\x2\x2A3\x2A4\t"+
		"\x3\x2\x2\x2A4\x2A5\x5\x128\x95\x2\x2A5\x2B0\x5\x106\x84\x2\x2A6\x2A8"+
		"\x5\x128\x95\x2\x2A7\x2A6\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2A9"+
		"\x3\x2\x2\x2\x2A9\x2AB\a\x3\x2\x2\x2AA\x2AC\x5\x128\x95\x2\x2AB\x2AA\x3"+
		"\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AF\x5\x106"+
		"\x84\x2\x2AE\x2A7\x3\x2\x2\x2\x2AF\x2B2\x3\x2\x2\x2\x2B0\x2AE\x3\x2\x2"+
		"\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x31\x3\x2\x2\x2\x2B2\x2B0\x3\x2\x2\x2\x2B3"+
		"\x2B4\a\x34\x2\x2\x2B4\x2B5\x5\x128\x95\x2\x2B5\x2B7\x5\xBE`\x2\x2B6\x2B8"+
		"\x5\x128\x95\x2\x2B7\x2B6\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2DA"+
		"\x3\x2\x2\x2\x2B9\x2BA\a\x34\x2\x2\x2BA\x2BB\x5\x128\x95\x2\x2BB\x2BD"+
		"\x5\xBE`\x2\x2BC\x2BE\x5\x128\x95\x2\x2BD\x2BC\x3\x2\x2\x2\x2BD\x2BE\x3"+
		"\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C1\a\x3\x2\x2\x2C0\x2C2\x5\x128"+
		"\x95\x2\x2C1\x2C0\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2"+
		"\x2\x2C3\x2C4\x5\xBE`\x2\x2C4\x2DA\x3\x2\x2\x2\x2C5\x2C6\a\x34\x2\x2\x2C6"+
		"\x2C7\x5\x128\x95\x2\x2C7\x2C9\x5\xBE`\x2\x2C8\x2CA\x5\x128\x95\x2\x2C9"+
		"\x2C8\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CD"+
		"\a\x3\x2\x2\x2CC\x2CE\x5\x128\x95\x2\x2CD\x2CC\x3\x2\x2\x2\x2CD\x2CE\x3"+
		"\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D1\x5\xBE`\x2\x2D0\x2D2\x5\x128"+
		"\x95\x2\x2D1\x2D0\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2"+
		"\x2\x2D3\x2D5\a\x3\x2\x2\x2D4\x2D6\x5\x128\x95\x2\x2D5\x2D4\x3\x2\x2\x2"+
		"\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\x5\xBE`\x2\x2D8"+
		"\x2DA\x3\x2\x2\x2\x2D9\x2B3\x3\x2\x2\x2\x2D9\x2B9\x3\x2\x2\x2\x2D9\x2C5"+
		"\x3\x2\x2\x2\x2DA\x33\x3\x2\x2\x2\x2DB\x2DC\a\x36\x2\x2\x2DC\x2DE\x5\x118"+
		"\x8D\x2\x2DD\x2DF\x5\x1A\xE\x2\x2DE\x2DD\x3\x2\x2\x2\x2DE\x2DF\x3\x2\x2"+
		"\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E1\a\x63\x2\x2\x2E1\x2F9\x3\x2\x2\x2"+
		"\x2E2\x2E3\a\x36\x2\x2\x2E3\x2E4\x5\x128\x95\x2\x2E4\x2E5\t\x4\x2\x2\x2E5"+
		"\x2E6\x5\x128\x95\x2\x2E6\x2E7\x5\xBE`\x2\x2E7\x2E9\x5\x118\x8D\x2\x2E8"+
		"\x2EA\x5\x1A\xE\x2\x2E9\x2E8\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2EB"+
		"\x3\x2\x2\x2\x2EB\x2EC\a\x63\x2\x2\x2EC\x2F9\x3\x2\x2\x2\x2ED\x2EE\a\x36"+
		"\x2\x2\x2EE\x2F0\x5\x118\x8D\x2\x2EF\x2F1\x5\x1A\xE\x2\x2F0\x2EF\x3\x2"+
		"\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F3\a\x63\x2"+
		"\x2\x2F3\x2F4\x5\x128\x95\x2\x2F4\x2F5\t\x4\x2\x2\x2F5\x2F6\x5\x128\x95"+
		"\x2\x2F6\x2F7\x5\xBE`\x2\x2F7\x2F9\x3\x2\x2\x2\x2F8\x2DB\x3\x2\x2\x2\x2F8"+
		"\x2E2\x3\x2\x2\x2\x2F8\x2ED\x3\x2\x2\x2\x2F9\x35\x3\x2\x2\x2\x2FA\x2FB"+
		"\a\x44\x2\x2\x2FB\x37\x3\x2\x2\x2\x2FC\x2FD\x5\x112\x8A\x2\x2FD\x2FE\x5"+
		"\x128\x95\x2\x2FE\x300\x3\x2\x2\x2\x2FF\x2FC\x3\x2\x2\x2\x2FF\x300\x3"+
		"\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x302\a\x45\x2\x2\x302\x303\x5\x128"+
		"\x95\x2\x303\x304\x5\xF8}\x2\x304\x308\x5\x118\x8D\x2\x305\x307\x5:\x1E"+
		"\x2\x306\x305\x3\x2\x2\x2\x307\x30A\x3\x2\x2\x2\x308\x306\x3\x2\x2\x2"+
		"\x308\x309\x3\x2\x2\x2\x309\x30B\x3\x2\x2\x2\x30A\x308\x3\x2\x2\x2\x30B"+
		"\x30C\a<\x2\x2\x30C\x39\x3\x2\x2\x2\x30D\x316\x5\xF8}\x2\x30E\x310\x5"+
		"\x128\x95\x2\x30F\x30E\x3\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310\x311\x3"+
		"\x2\x2\x2\x311\x313\a\xBD\x2\x2\x312\x314\x5\x128\x95\x2\x313\x312\x3"+
		"\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315\x317\x5\xBE"+
		"`\x2\x316\x30F\x3\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2"+
		"\x318\x319\x5\x118\x8D\x2\x319;\x3\x2\x2\x2\x31A\x31B\aG\x2\x2\x31B\x31C"+
		"\x5\x128\x95\x2\x31C\x327\x5\xBE`\x2\x31D\x31F\x5\x128\x95\x2\x31E\x31D"+
		"\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x322\a\x3"+
		"\x2\x2\x321\x323\x5\x128\x95\x2\x322\x321\x3\x2\x2\x2\x322\x323\x3\x2"+
		"\x2\x2\x323\x324\x3\x2\x2\x2\x324\x326\x5\xBE`\x2\x325\x31E\x3\x2\x2\x2"+
		"\x326\x329\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328"+
		"=\x3\x2\x2\x2\x329\x327\x3\x2\x2\x2\x32A\x32B\aH\x2\x2\x32B\x32C\x5\x128"+
		"\x95\x2\x32C\x32D\x5\xBE`\x2\x32D?\x3\x2\x2\x2\x32E\x32F\x5\x112\x8A\x2"+
		"\x32F\x330\x5\x128\x95\x2\x330\x332\x3\x2\x2\x2\x331\x32E\x3\x2\x2\x2"+
		"\x331\x332\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x334\aI\x2\x2\x334\x335"+
		"\x5\x128\x95\x2\x335\x337\x5\xF8}\x2\x336\x338\x5\x128\x95\x2\x337\x336"+
		"\x3\x2\x2\x2\x337\x338\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2\x339\x33A\x5"+
		"\xEEx\x2\x33A\x41\x3\x2\x2\x2\x33B\x33C\t\x5\x2\x2\x33C\x43\x3\x2\x2\x2"+
		"\x33D\x33E\aP\x2\x2\x33E\x33F\x5\x128\x95\x2\x33F\x341\x5\xBE`\x2\x340"+
		"\x342\x5\x128\x95\x2\x341\x340\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342"+
		"\x343\x3\x2\x2\x2\x343\x345\a\x3\x2\x2\x344\x346\x5\x128\x95\x2\x345\x344"+
		"\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x347\x3\x2\x2\x2\x347\x348\x5"+
		"\xBE`\x2\x348\x45\x3\x2\x2\x2\x349\x34A\aR\x2\x2\x34A\x34B\x5\x128\x95"+
		"\x2\x34B\x34C\a\x38\x2\x2\x34C\x34D\x5\x128\x95\x2\x34D\x34F\x5\xF8}\x2"+
		"\x34E\x350\x5\x110\x89\x2\x34F\x34E\x3\x2\x2\x2\x34F\x350\x3\x2\x2\x2"+
		"\x350\x351\x3\x2\x2\x2\x351\x352\x5\x128\x95\x2\x352\x353\a[\x2\x2\x353"+
		"\x354\x5\x128\x95\x2\x354\x355\x5\xBE`\x2\x355\x357\x5\x118\x8D\x2\x356"+
		"\x358\x5\x1A\xE\x2\x357\x356\x3\x2\x2\x2\x357\x358\x3\x2\x2\x2\x358\x359"+
		"\x3\x2\x2\x2\x359\x35D\aq\x2\x2\x35A\x35B\x5\x128\x95\x2\x35B\x35C\x5"+
		"\xF8}\x2\x35C\x35E\x3\x2\x2\x2\x35D\x35A\x3\x2\x2\x2\x35D\x35E\x3\x2\x2"+
		"\x2\x35EG\x3\x2\x2\x2\x35F\x360\aR\x2\x2\x360\x361\x5\x128\x95\x2\x361"+
		"\x363\x5\xF8}\x2\x362\x364\x5\x110\x89\x2\x363\x362\x3\x2\x2\x2\x363\x364"+
		"\x3\x2\x2\x2\x364\x368\x3\x2\x2\x2\x365\x366\x5\x128\x95\x2\x366\x367"+
		"\x5\xFA~\x2\x367\x369\x3\x2\x2\x2\x368\x365\x3\x2\x2\x2\x368\x369\x3\x2"+
		"\x2\x2\x369\x36B\x3\x2\x2\x2\x36A\x36C\x5\x128\x95\x2\x36B\x36A\x3\x2"+
		"\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36D\x3\x2\x2\x2\x36D\x36F\a\xBD\x2"+
		"\x2\x36E\x370\x5\x128\x95\x2\x36F\x36E\x3\x2\x2\x2\x36F\x370\x3\x2\x2"+
		"\x2\x370\x371\x3\x2\x2\x2\x371\x372\x5\xBE`\x2\x372\x373\x5\x128\x95\x2"+
		"\x373\x374\a\xAA\x2\x2\x374\x375\x5\x128\x95\x2\x375\x37B\x5\xBE`\x2\x376"+
		"\x377\x5\x128\x95\x2\x377\x378\a\xA2\x2\x2\x378\x379\x5\x128\x95\x2\x379"+
		"\x37A\x5\xBE`\x2\x37A\x37C\x3\x2\x2\x2\x37B\x376\x3\x2\x2\x2\x37B\x37C"+
		"\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37F\x5\x118\x8D\x2\x37E\x380"+
		"\x5\x1A\xE\x2\x37F\x37E\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x381\x3"+
		"\x2\x2\x2\x381\x387\aq\x2\x2\x382\x383\x5\x128\x95\x2\x383\x385\x5\xF8"+
		"}\x2\x384\x386\x5\x110\x89\x2\x385\x384\x3\x2\x2\x2\x385\x386\x3\x2\x2"+
		"\x2\x386\x388\x3\x2\x2\x2\x387\x382\x3\x2\x2\x2\x387\x388\x3\x2\x2\x2"+
		"\x388I\x3\x2\x2\x2\x389\x38A\x5\x112\x8A\x2\x38A\x38B\x5\x128\x95\x2\x38B"+
		"\x38D\x3\x2\x2\x2\x38C\x389\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x390"+
		"\x3\x2\x2\x2\x38E\x38F\a\xA1\x2\x2\x38F\x391\x5\x128\x95\x2\x390\x38E"+
		"\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\x394\aS"+
		"\x2\x2\x393\x395\x5\x128\x95\x2\x394\x393\x3\x2\x2\x2\x394\x395\x3\x2"+
		"\x2\x2\x395\x396\x3\x2\x2\x2\x396\x398\x5\xF8}\x2\x397\x399\x5\x110\x89"+
		"\x2\x398\x397\x3\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399\x39E\x3\x2\x2\x2"+
		"\x39A\x39C\x5\x128\x95\x2\x39B\x39A\x3\x2\x2\x2\x39B\x39C\x3\x2\x2\x2"+
		"\x39C\x39D\x3\x2\x2\x2\x39D\x39F\x5\xEEx\x2\x39E\x39B\x3\x2\x2\x2\x39E"+
		"\x39F\x3\x2\x2\x2\x39F\x3A4\x3\x2\x2\x2\x3A0\x3A2\x5\x128\x95\x2\x3A1"+
		"\x3A0\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A5"+
		"\x5\xFA~\x2\x3A4\x3A1\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A6\x3\x2"+
		"\x2\x2\x3A6\x3A8\x5\x118\x8D\x2\x3A7\x3A9\x5\x1A\xE\x2\x3A8\x3A7\x3\x2"+
		"\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA\x3AB\a=\x2\x2"+
		"\x3ABK\x3\x2\x2\x2\x3AC\x3AD\aT\x2\x2\x3AD\x3AE\x5\x128\x95\x2\x3AE\x3B0"+
		"\x5\xCEh\x2\x3AF\x3B1\x5\x128\x95\x2\x3B0\x3AF\x3\x2\x2\x2\x3B0\x3B1\x3"+
		"\x2\x2\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2\x3B4\a\x3\x2\x2\x3B3\x3B5\x5\x128"+
		"\x95\x2\x3B4\x3B3\x3\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B7\x3\x2\x2"+
		"\x2\x3B6\x3B8\x5\xBE`\x2\x3B7\x3B6\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8"+
		"\x3BA\x3\x2\x2\x2\x3B9\x3BB\x5\x128\x95\x2\x3BA\x3B9\x3\x2\x2\x2\x3BA"+
		"\x3BB\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BE\a\x3\x2\x2\x3BD\x3BF"+
		"\x5\x128\x95\x2\x3BE\x3BD\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0"+
		"\x3\x2\x2\x2\x3C0\x3C1\x5\xBE`\x2\x3C1M\x3\x2\x2\x2\x3C2\x3C3\aV\x2\x2"+
		"\x3C3\x3C4\x5\x128\x95\x2\x3C4\x3C5\x5\xBE`\x2\x3C5O\x3\x2\x2\x2\x3C6"+
		"\x3C7\aW\x2\x2\x3C7\x3C8\x5\x128\x95\x2\x3C8\x3C9\x5\xBE`\x2\x3C9Q\x3"+
		"\x2\x2\x2\x3CA\x3CB\aX\x2\x2\x3CB\x3CC\x5\x128\x95\x2\x3CC\x3CD\x5V,\x2"+
		"\x3CD\x3CE\x5\x128\x95\x2\x3CE\x3CF\a\xA8\x2\x2\x3CF\x3D0\x5\x128\x95"+
		"\x2\x3D0\x3D6\x5\x1C\xF\x2\x3D1\x3D2\x5\x128\x95\x2\x3D2\x3D3\a\x39\x2"+
		"\x2\x3D3\x3D4\x5\x128\x95\x2\x3D4\x3D5\x5\x1C\xF\x2\x3D5\x3D7\x3\x2\x2"+
		"\x2\x3D6\x3D1\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2\x2\x3D7\x3E5\x3\x2\x2\x2"+
		"\x3D8\x3DC\x5T+\x2\x3D9\x3DB\x5X-\x2\x3DA\x3D9\x3\x2\x2\x2\x3DB\x3DE\x3"+
		"\x2\x2\x2\x3DC\x3DA\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2\x3DD\x3E0\x3\x2"+
		"\x2\x2\x3DE\x3DC\x3\x2\x2\x2\x3DF\x3E1\x5Z.\x2\x3E0\x3DF\x3\x2\x2\x2\x3E0"+
		"\x3E1\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E3\a>\x2\x2\x3E3\x3E5\x3"+
		"\x2\x2\x2\x3E4\x3CA\x3\x2\x2\x2\x3E4\x3D8\x3\x2\x2\x2\x3E5S\x3\x2\x2\x2"+
		"\x3E6\x3E7\aX\x2\x2\x3E7\x3E8\x5\x128\x95\x2\x3E8\x3E9\x5V,\x2\x3E9\x3EA"+
		"\x5\x128\x95\x2\x3EA\x3EB\a\xA8\x2\x2\x3EB\x3ED\x5\x118\x8D\x2\x3EC\x3EE"+
		"\x5\x1A\xE\x2\x3ED\x3EC\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EEU\x3\x2"+
		"\x2\x2\x3EF\x3F0\x5\xBE`\x2\x3F0W\x3\x2\x2\x2\x3F1\x3F2\a:\x2\x2\x3F2"+
		"\x3F3\x5\x128\x95\x2\x3F3\x3F4\x5V,\x2\x3F4\x3F5\x5\x128\x95\x2\x3F5\x3F6"+
		"\a\xA8\x2\x2\x3F6\x3F8\x5\x118\x8D\x2\x3F7\x3F9\x5\x1A\xE\x2\x3F8\x3F7"+
		"\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9Y\x3\x2\x2\x2\x3FA\x3FB\a\x39\x2"+
		"\x2\x3FB\x3FD\x5\x118\x8D\x2\x3FC\x3FE\x5\x1A\xE\x2\x3FD\x3FC\x3\x2\x2"+
		"\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE[\x3\x2\x2\x2\x3FF\x400\aZ\x2\x2\x400\x401"+
		"\x5\x128\x95\x2\x401\x402\x5\xF8}\x2\x402]\x3\x2\x2\x2\x403\x404\a\\\x2"+
		"\x2\x404\x405\x5\x128\x95\x2\x405\x40E\x5\xCEh\x2\x406\x408\x5\x128\x95"+
		"\x2\x407\x406\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2"+
		"\x409\x40B\a\x3\x2\x2\x40A\x40C\x5\x128\x95\x2\x40B\x40A\x3\x2\x2\x2\x40B"+
		"\x40C\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40F\x5\xBE`\x2\x40E\x407"+
		"\x3\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\x40E\x3\x2\x2\x2\x410\x411\x3"+
		"\x2\x2\x2\x411_\x3\x2\x2\x2\x412\x413\a_\x2\x2\x413\x414\x5\x128\x95\x2"+
		"\x414\x415\x5\xBE`\x2\x415\x61\x3\x2\x2\x2\x416\x417\a\x64\x2\x2\x417"+
		"\x419\x5\x128\x95\x2\x418\x416\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419"+
		"\x41A\x3\x2\x2\x2\x41A\x41C\x5\xDCo\x2\x41B\x41D\x5\x128\x95\x2\x41C\x41B"+
		"\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2\x41D\x41E\x3\x2\x2\x2\x41E\x420\a\xBD"+
		"\x2\x2\x41F\x421\x5\x128\x95\x2\x420\x41F\x3\x2\x2\x2\x420\x421\x3\x2"+
		"\x2\x2\x421\x422\x3\x2\x2\x2\x422\x423\x5\xBE`\x2\x423\x63\x3\x2\x2\x2"+
		"\x424\x425\ag\x2\x2\x425\x426\x5\x128\x95\x2\x426\x428\x5\xCEh\x2\x427"+
		"\x429\x5\x128\x95\x2\x428\x427\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429"+
		"\x42A\x3\x2\x2\x2\x42A\x42C\a\x3\x2\x2\x42B\x42D\x5\x128\x95\x2\x42C\x42B"+
		"\x3\x2\x2\x2\x42C\x42D\x3\x2\x2\x2\x42D\x42E\x3\x2\x2\x2\x42E\x42F\x5"+
		"\xBE`\x2\x42F\x65\x3\x2\x2\x2\x430\x431\a`\x2\x2\x431\x432\x5\x128\x95"+
		"\x2\x432\x433\x5\xBE`\x2\x433g\x3\x2\x2\x2\x434\x435\a\x61\x2\x2\x435"+
		"\x436\x5\x128\x95\x2\x436\x446\x5\xBE`\x2\x437\x439\x5\x128\x95\x2\x438"+
		"\x437\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43C"+
		"\a\x3\x2\x2\x43B\x43D\x5\x128\x95\x2\x43C\x43B\x3\x2\x2\x2\x43C\x43D\x3"+
		"\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x444\x5\xBE`\x2\x43F\x440\x5\x128"+
		"\x95\x2\x440\x441\a\xAA\x2\x2\x441\x442\x5\x128\x95\x2\x442\x443\x5\xBE"+
		"`\x2\x443\x445\x3\x2\x2\x2\x444\x43F\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2"+
		"\x445\x447\x3\x2\x2\x2\x446\x438\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447"+
		"i\x3\x2\x2\x2\x448\x449\ak\x2\x2\x449\x44A\x5\x128\x95\x2\x44A\x44C\x5"+
		"\xDCo\x2\x44B\x44D\x5\x128\x95\x2\x44C\x44B\x3\x2\x2\x2\x44C\x44D\x3\x2"+
		"\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x450\a\xBD\x2\x2\x44F\x451\x5\x128\x95"+
		"\x2\x450\x44F\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x452\x3\x2\x2\x2"+
		"\x452\x453\x5\xBE`\x2\x453k\x3\x2\x2\x2\x454\x456\am\x2\x2\x455\x457\x5"+
		"\x128\x95\x2\x456\x455\x3\x2\x2\x2\x456\x457\x3\x2\x2\x2\x457\x458\x3"+
		"\x2\x2\x2\x458\x45A\a\xC1\x2\x2\x459\x45B\x5\x128\x95\x2\x45A\x459\x3"+
		"\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45E\x5\xE8"+
		"u\x2\x45D\x45F\x5\x128\x95\x2\x45E\x45D\x3\x2\x2\x2\x45E\x45F\x3\x2\x2"+
		"\x2\x45F\x460\x3\x2\x2\x2\x460\x461\a\xC8\x2\x2\x461m\x3\x2\x2\x2\x462"+
		"\x463\an\x2\x2\x463\x464\x5\x128\x95\x2\x464\x465\x5\xBE`\x2\x465o\x3"+
		"\x2\x2\x2\x466\x467\ap\x2\x2\x467\x468\x5\x128\x95\x2\x468\x469\x5\xBE"+
		"`\x2\x469\x46A\x5\x128\x95\x2\x46A\x46B\a\x14\x2\x2\x46B\x46C\x5\x128"+
		"\x95\x2\x46C\x46D\x5\xBE`\x2\x46Dq\x3\x2\x2\x2\x46E\x46F\t\x6\x2\x2\x46F"+
		"\x478\x5\x128\x95\x2\x470\x471\aW\x2\x2\x471\x472\x5\x128\x95\x2\x472"+
		"\x473\x5\xBE`\x2\x473\x479\x3\x2\x2\x2\x474\x475\a\x93\x2\x2\x475\x476"+
		"\x5\x128\x95\x2\x476\x477\aq\x2\x2\x477\x479\x3\x2\x2\x2\x478\x470\x3"+
		"\x2\x2\x2\x478\x474\x3\x2\x2\x2\x479s\x3\x2\x2\x2\x47A\x47B\av\x2\x2\x47B"+
		"\x47C\x5\x128\x95\x2\x47C\x47D\x5\xBE`\x2\x47D\x47E\x5\x128\x95\x2\x47E"+
		"\x47F\aW\x2\x2\x47F\x480\x5\x128\x95\x2\x480\x48B\x5\xBE`\x2\x481\x483"+
		"\x5\x128\x95\x2\x482\x481\x3\x2\x2\x2\x482\x483\x3\x2\x2\x2\x483\x484"+
		"\x3\x2\x2\x2\x484\x486\a\x3\x2\x2\x485\x487\x5\x128\x95\x2\x486\x485\x3"+
		"\x2\x2\x2\x486\x487\x3\x2\x2\x2\x487\x488\x3\x2\x2\x2\x488\x48A\x5\xBE"+
		"`\x2\x489\x482\x3\x2\x2\x2\x48A\x48D\x3\x2\x2\x2\x48B\x489\x3\x2\x2\x2"+
		"\x48B\x48C\x3\x2\x2\x2\x48Cu\x3\x2\x2\x2\x48D\x48B\x3\x2\x2\x2\x48E\x48F"+
		"\av\x2\x2\x48F\x490\x5\x128\x95\x2\x490\x491\x5\xBE`\x2\x491\x492\x5\x128"+
		"\x95\x2\x492\x493\aV\x2\x2\x493\x494\x5\x128\x95\x2\x494\x49F\x5\xBE`"+
		"\x2\x495\x497\x5\x128\x95\x2\x496\x495\x3\x2\x2\x2\x496\x497\x3\x2\x2"+
		"\x2\x497\x498\x3\x2\x2\x2\x498\x49A\a\x3\x2\x2\x499\x49B\x5\x128\x95\x2"+
		"\x49A\x499\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C"+
		"\x49E\x5\xBE`\x2\x49D\x496\x3\x2\x2\x2\x49E\x4A1\x3\x2\x2\x2\x49F\x49D"+
		"\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0w\x3\x2\x2\x2\x4A1\x49F\x3\x2\x2"+
		"\x2\x4A2\x4A3\ay\x2\x2\x4A3\x4A4\x5\x128\x95\x2\x4A4\x4A5\x5\xBE`\x2\x4A5"+
		"\x4A6\x5\x128\x95\x2\x4A6\x4A7\aR\x2\x2\x4A7\x4A8\x5\x128\x95\x2\x4A8"+
		"\x4AE\t\a\x2\x2\x4A9\x4AA\x5\x128\x95\x2\x4AA\x4AB\a\r\x2\x2\x4AB\x4AC"+
		"\x5\x128\x95\x2\x4AC\x4AD\t\b\x2\x2\x4AD\x4AF\x3\x2\x2\x2\x4AE\x4A9\x3"+
		"\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2\x4AF\x4B3\x3\x2\x2\x2\x4B0\x4B1\x5\x128"+
		"\x95\x2\x4B1\x4B2\t\t\x2\x2\x4B2\x4B4\x3\x2\x2\x2\x4B3\x4B0\x3\x2\x2\x2"+
		"\x4B3\x4B4\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B6\x5\x128\x95\x2"+
		"\x4B6\x4B7\a\x14\x2\x2\x4B7\x4B8\x5\x128\x95\x2\x4B8\x4C4\x5\xCEh\x2\x4B9"+
		"\x4BA\x5\x128\x95\x2\x4BA\x4BC\a\xE1\x2\x2\x4BB\x4BD\x5\x128\x95\x2\x4BC"+
		"\x4BB\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4C0"+
		"\a\xBD\x2\x2\x4BF\x4C1\x5\x128\x95\x2\x4C0\x4BF\x3\x2\x2\x2\x4C0\x4C1"+
		"\x3\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C3\x5\xBE`\x2\x4C3\x4C5\x3\x2"+
		"\x2\x2\x4C4\x4B9\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5y\x3\x2\x2\x2\x4C6"+
		"\x4D3\x5|?\x2\x4C7\x4C9\x5\x128\x95\x2\x4C8\x4C7\x3\x2\x2\x2\x4C8\x4C9"+
		"\x3\x2\x2\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x4CC\t\n\x2\x2\x4CB\x4CD\x5\x128"+
		"\x95\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2\x2\x4CD\x4CF\x3\x2\x2"+
		"\x2\x4CE\x4D0\x5|?\x2\x4CF\x4CE\x3\x2\x2\x2\x4CF\x4D0\x3\x2\x2\x2\x4D0"+
		"\x4D2\x3\x2\x2\x2\x4D1\x4C8\x3\x2\x2\x2\x4D2\x4D5\x3\x2\x2\x2\x4D3\x4D1"+
		"\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4E8\x3\x2\x2\x2\x4D5\x4D3\x3"+
		"\x2\x2\x2\x4D6\x4D8\x5|?\x2\x4D7\x4D6\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2"+
		"\x4D8\x4E3\x3\x2\x2\x2\x4D9\x4DB\x5\x128\x95\x2\x4DA\x4D9\x3\x2\x2\x2"+
		"\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2\x4DC\x4DE\t\n\x2\x2\x4DD"+
		"\x4DF\x5\x128\x95\x2\x4DE\x4DD\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF"+
		"\x4E1\x3\x2\x2\x2\x4E0\x4E2\x5|?\x2\x4E1\x4E0\x3\x2\x2\x2\x4E1\x4E2\x3"+
		"\x2\x2\x2\x4E2\x4E4\x3\x2\x2\x2\x4E3\x4DA\x3\x2\x2\x2\x4E4\x4E5\x3\x2"+
		"\x2\x2\x4E5\x4E3\x3\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E8\x3\x2\x2"+
		"\x2\x4E7\x4C6\x3\x2\x2\x2\x4E7\x4D7\x3\x2\x2\x2\x4E8{\x3\x2\x2\x2\x4E9"+
		"\x4FB\x5\xBE`\x2\x4EA\x4F8\t\v\x2\x2\x4EB\x4ED\x5\x128\x95\x2\x4EC\x4EB"+
		"\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4F0\a\xC1"+
		"\x2\x2\x4EF\x4F1\x5\x128\x95\x2\x4F0\x4EF\x3\x2\x2\x2\x4F0\x4F1\x3\x2"+
		"\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F4\x5\xE8u\x2\x4F3\x4F5\x5\x128\x95"+
		"\x2\x4F4\x4F3\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2\x2"+
		"\x4F6\x4F7\a\xC8\x2\x2\x4F7\x4F9\x3\x2\x2\x2\x4F8\x4EC\x3\x2\x2\x2\x4F8"+
		"\x4F9\x3\x2\x2\x2\x4F9\x4FB\x3\x2\x2\x2\x4FA\x4E9\x3\x2\x2\x2\x4FA\x4EA"+
		"\x3\x2\x2\x2\x4FB}\x3\x2\x2\x2\x4FC\x4FD\a\x83\x2\x2\x4FD\x4FE\x5\x128"+
		"\x95\x2\x4FE\x500\x5\xCEh\x2\x4FF\x501\x5\x128\x95\x2\x500\x4FF\x3\x2"+
		"\x2\x2\x500\x501\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2\x502\x507\a\x3\x2\x2"+
		"\x503\x505\x5\x128\x95\x2\x504\x503\x3\x2\x2\x2\x504\x505\x3\x2\x2\x2"+
		"\x505\x506\x3\x2\x2\x2\x506\x508\x5z>\x2\x507\x504\x3\x2\x2\x2\x507\x508"+
		"\x3\x2\x2\x2\x508\x7F\x3\x2\x2\x2\x509\x50A\x5\x112\x8A\x2\x50A\x50B\x5"+
		"\x128\x95\x2\x50B\x50D\x3\x2\x2\x2\x50C\x509\x3\x2\x2\x2\x50C\x50D\x3"+
		"\x2\x2\x2\x50D\x510\x3\x2\x2\x2\x50E\x50F\a\xA1\x2\x2\x50F\x511\x5\x128"+
		"\x95\x2\x510\x50E\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511\x512\x3\x2\x2"+
		"\x2\x512\x513\a\x85\x2\x2\x513\x514\x5\x128\x95\x2\x514\x516\x5\xF8}\x2"+
		"\x515\x517\x5\x110\x89\x2\x516\x515\x3\x2\x2\x2\x516\x517\x3\x2\x2\x2"+
		"\x517\x51C\x3\x2\x2\x2\x518\x51A\x5\x128\x95\x2\x519\x518\x3\x2\x2\x2"+
		"\x519\x51A\x3\x2\x2\x2\x51A\x51B\x3\x2\x2\x2\x51B\x51D\x5\xEEx\x2\x51C"+
		"\x519\x3\x2\x2\x2\x51C\x51D\x3\x2\x2\x2\x51D\x521\x3\x2\x2\x2\x51E\x51F"+
		"\x5\x128\x95\x2\x51F\x520\x5\xFA~\x2\x520\x522\x3\x2\x2\x2\x521\x51E\x3"+
		"\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522\x523\x3\x2\x2\x2\x523\x525\x5\x118"+
		"\x8D\x2\x524\x526\x5\x1A\xE\x2\x525\x524\x3\x2\x2\x2\x525\x526\x3\x2\x2"+
		"\x2\x526\x527\x3\x2\x2\x2\x527\x528\a?\x2\x2\x528\x81\x3\x2\x2\x2\x529"+
		"\x52A\x5\x112\x8A\x2\x52A\x52B\x5\x128\x95\x2\x52B\x52D\x3\x2\x2\x2\x52C"+
		"\x529\x3\x2\x2\x2\x52C\x52D\x3\x2\x2\x2\x52D\x530\x3\x2\x2\x2\x52E\x52F"+
		"\a\xA1\x2\x2\x52F\x531\x5\x128\x95\x2\x530\x52E\x3\x2\x2\x2\x530\x531"+
		"\x3\x2\x2\x2\x531\x532\x3\x2\x2\x2\x532\x533\a\x87\x2\x2\x533\x534\x5"+
		"\x128\x95\x2\x534\x539\x5\xF8}\x2\x535\x537\x5\x128\x95\x2\x536\x535\x3"+
		"\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53A\x5\xEE"+
		"x\x2\x539\x536\x3\x2\x2\x2\x539\x53A\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2"+
		"\x53B\x53D\x5\x118\x8D\x2\x53C\x53E\x5\x1A\xE\x2\x53D\x53C\x3\x2\x2\x2"+
		"\x53D\x53E\x3\x2\x2\x2\x53E\x53F\x3\x2\x2\x2\x53F\x540\a?\x2\x2\x540\x83"+
		"\x3\x2\x2\x2\x541\x542\x5\x112\x8A\x2\x542\x543\x5\x128\x95\x2\x543\x545"+
		"\x3\x2\x2\x2\x544\x541\x3\x2\x2\x2\x544\x545\x3\x2\x2\x2\x545\x548\x3"+
		"\x2\x2\x2\x546\x547\a\xA1\x2\x2\x547\x549\x5\x128\x95\x2\x548\x546\x3"+
		"\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A\x54B\a\x86"+
		"\x2\x2\x54B\x54C\x5\x128\x95\x2\x54C\x551\x5\xF8}\x2\x54D\x54F\x5\x128"+
		"\x95\x2\x54E\x54D\x3\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x550\x3\x2\x2"+
		"\x2\x550\x552\x5\xEEx\x2\x551\x54E\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552"+
		"\x553\x3\x2\x2\x2\x553\x555\x5\x118\x8D\x2\x554\x556\x5\x1A\xE\x2\x555"+
		"\x554\x3\x2\x2\x2\x555\x556\x3\x2\x2\x2\x556\x557\x3\x2\x2\x2\x557\x558"+
		"\a?\x2\x2\x558\x85\x3\x2\x2\x2\x559\x55A\a\x8A\x2\x2\x55A\x55B\x5\x128"+
		"\x95\x2\x55B\x55D\x5\xCEh\x2\x55C\x55E\x5\x128\x95\x2\x55D\x55C\x3\x2"+
		"\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x55F\x3\x2\x2\x2\x55F\x561\a\x3\x2\x2"+
		"\x560\x562\x5\x128\x95\x2\x561\x560\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2"+
		"\x562\x564\x3\x2\x2\x2\x563\x565\x5\xBE`\x2\x564\x563\x3\x2\x2\x2\x564"+
		"\x565\x3\x2\x2\x2\x565\x567\x3\x2\x2\x2\x566\x568\x5\x128\x95\x2\x567"+
		"\x566\x3\x2\x2\x2\x567\x568\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56B"+
		"\a\x3\x2\x2\x56A\x56C\x5\x128\x95\x2\x56B\x56A\x3\x2\x2\x2\x56B\x56C\x3"+
		"\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x56E\x5\xBE`\x2\x56E\x87\x3\x2\x2"+
		"\x2\x56F\x570\a\x8D\x2\x2\x570\x571\x5\x128\x95\x2\x571\x580\x5\xF8}\x2"+
		"\x572\x574\x5\x128\x95\x2\x573\x572\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2"+
		"\x574\x575\x3\x2\x2\x2\x575\x577\a\xC1\x2\x2\x576\x578\x5\x128\x95\x2"+
		"\x577\x576\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x57D\x3\x2\x2\x2\x579"+
		"\x57B\x5\xE8u\x2\x57A\x57C\x5\x128\x95\x2\x57B\x57A\x3\x2\x2\x2\x57B\x57C"+
		"\x3\x2\x2\x2\x57C\x57E\x3\x2\x2\x2\x57D\x579\x3\x2\x2\x2\x57D\x57E\x3"+
		"\x2\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x581\a\xC8\x2\x2\x580\x573\x3\x2"+
		"\x2\x2\x580\x581\x3\x2\x2\x2\x581\x89\x3\x2\x2\x2\x582\x586\a\x8C\x2\x2"+
		"\x583\x584\x5\x128\x95\x2\x584\x585\x5\xBE`\x2\x585\x587\x3\x2\x2\x2\x586"+
		"\x583\x3\x2\x2\x2\x586\x587\x3\x2\x2\x2\x587\x8B\x3\x2\x2\x2\x588\x589"+
		"\a\x90\x2\x2\x589\x58C\x5\x128\x95\x2\x58A\x58B\a\x82\x2\x2\x58B\x58D"+
		"\x5\x128\x95\x2\x58C\x58A\x3\x2\x2\x2\x58C\x58D\x3\x2\x2\x2\x58D\x58E"+
		"\x3\x2\x2\x2\x58E\x599\x5\x8EH\x2\x58F\x591\x5\x128\x95\x2\x590\x58F\x3"+
		"\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x592\x3\x2\x2\x2\x592\x594\a\x3\x2"+
		"\x2\x593\x595\x5\x128\x95\x2\x594\x593\x3\x2\x2\x2\x594\x595\x3\x2\x2"+
		"\x2\x595\x596\x3\x2\x2\x2\x596\x598\x5\x8EH\x2\x597\x590\x3\x2\x2\x2\x598"+
		"\x59B\x3\x2\x2\x2\x599\x597\x3\x2\x2\x2\x599\x59A\x3\x2\x2\x2\x59A\x8D"+
		"\x3\x2\x2\x2\x59B\x599\x3\x2\x2\x2\x59C\x59E\x5\xDCo\x2\x59D\x59F\x5\x128"+
		"\x95\x2\x59E\x59D\x3\x2\x2\x2\x59E\x59F\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2"+
		"\x2\x5A0\x5A2\a\xC1\x2\x2\x5A1\x5A3\x5\x128\x95\x2\x5A2\x5A1\x3\x2\x2"+
		"\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5A6\x5\xF4{\x2\x5A5"+
		"\x5A7\x5\x128\x95\x2\x5A6\x5A5\x3\x2\x2\x2\x5A6\x5A7\x3\x2\x2\x2\x5A7"+
		"\x5A8\x3\x2\x2\x2\x5A8\x5AC\a\xC8\x2\x2\x5A9\x5AA\x5\x128\x95\x2\x5AA"+
		"\x5AB\x5\xFA~\x2\x5AB\x5AD\x3\x2\x2\x2\x5AC\x5A9\x3\x2\x2\x2\x5AC\x5AD"+
		"\x3\x2\x2\x2\x5AD\x8F\x3\x2\x2\x2\x5AE\x5AF\a\x92\x2\x2\x5AF\x91\x3\x2"+
		"\x2\x2\x5B0\x5B6\a\x93\x2\x2\x5B1\x5B4\x5\x128\x95\x2\x5B2\x5B5\aq\x2"+
		"\x2\x5B3\x5B5\x5\xF8}\x2\x5B4\x5B2\x3\x2\x2\x2\x5B4\x5B3\x3\x2\x2\x2\x5B5"+
		"\x5B7\x3\x2\x2\x2\x5B6\x5B1\x3\x2\x2\x2\x5B6\x5B7\x3\x2\x2\x2\x5B7\x93"+
		"\x3\x2\x2\x2\x5B8\x5B9\a\x94\x2\x2\x5B9\x95\x3\x2\x2\x2\x5BA\x5BB\a\x95"+
		"\x2\x2\x5BB\x5BC\x5\x128\x95\x2\x5BC\x5BD\x5\xBE`\x2\x5BD\x97\x3\x2\x2"+
		"\x2\x5BE\x5BF\a\x96\x2\x2\x5BF\x5C0\x5\x128\x95\x2\x5C0\x5C2\x5\xDCo\x2"+
		"\x5C1\x5C3\x5\x128\x95\x2\x5C2\x5C1\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2"+
		"\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C6\a\xBD\x2\x2\x5C5\x5C7\x5\x128\x95\x2"+
		"\x5C6\x5C5\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5C8\x3\x2\x2\x2\x5C8"+
		"\x5C9\x5\xBE`\x2\x5C9\x99\x3\x2\x2\x2\x5CA\x5CB\a\x97\x2\x2\x5CB\x5CC"+
		"\x5\x128\x95\x2\x5CC\x5CE\x5\xBE`\x2\x5CD\x5CF\x5\x128\x95\x2\x5CE\x5CD"+
		"\x3\x2\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5D2\a\x3"+
		"\x2\x2\x5D1\x5D3\x5\x128\x95\x2\x5D2\x5D1\x3\x2\x2\x2\x5D2\x5D3\x3\x2"+
		"\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D5\x5\xBE`\x2\x5D5\x9B\x3\x2\x2\x2"+
		"\x5D6\x5D7\a\x98\x2\x2\x5D7\x5D8\x5\x128\x95\x2\x5D8\x5DA\x5\xBE`\x2\x5D9"+
		"\x5DB\x5\x128\x95\x2\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB"+
		"\x5DC\x3\x2\x2\x2\x5DC\x5DE\a\x3\x2\x2\x5DD\x5DF\x5\x128\x95\x2\x5DE\x5DD"+
		"\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5E2\x5"+
		"\xBE`\x2\x5E1\x5E3\x5\x128\x95\x2\x5E2\x5E1\x3\x2\x2\x2\x5E2\x5E3\x3\x2"+
		"\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4\x5E6\a\x3\x2\x2\x5E5\x5E7\x5\x128\x95"+
		"\x2\x5E6\x5E5\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2"+
		"\x5E8\x5EA\x5\xBE`\x2\x5E9\x5EB\x5\x128\x95\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA"+
		"\x5EB\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2\x2\x5EC\x5EE\a\x3\x2\x2\x5ED\x5EF"+
		"\x5\x128\x95\x2\x5EE\x5ED\x3\x2\x2\x2\x5EE\x5EF\x3\x2\x2\x2\x5EF\x5F0"+
		"\x3\x2\x2\x2\x5F0\x5F1\x5\xBE`\x2\x5F1\x9D\x3\x2\x2\x2\x5F2\x5F3\a\x99"+
		"\x2\x2\x5F3\x5F4\x5\x128\x95\x2\x5F4\x5F6\x5\xCEh\x2\x5F5\x5F7\x5\x128"+
		"\x95\x2\x5F6\x5F5\x3\x2\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2"+
		"\x2\x5F8\x5FA\a\x3\x2\x2\x5F9\x5FB\x5\x128\x95\x2\x5FA\x5F9\x3\x2\x2\x2"+
		"\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FD\x5\xBE`\x2\x5FD"+
		"\x9F\x3\x2\x2\x2\x5FE\x5FF\a\x9A\x2\x2\x5FF\x600\x5\x128\x95\x2\x600\x601"+
		"\a\x1D\x2\x2\x601\x602\x5\x128\x95\x2\x602\x603\x5\xBE`\x2\x603\x607\x5"+
		"\x118\x8D\x2\x604\x606\x5\xA4S\x2\x605\x604\x3\x2\x2\x2\x606\x609\x3\x2"+
		"\x2\x2\x607\x605\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x60A\x3\x2\x2"+
		"\x2\x609\x607\x3\x2\x2\x2\x60A\x60B\a@\x2\x2\x60B\xA1\x3\x2\x2\x2\x60C"+
		"\x60E\a]\x2\x2\x60D\x60F\x5\x128\x95\x2\x60E\x60D\x3\x2\x2\x2\x60E\x60F"+
		"\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610\x612\x5\x100\x81\x2\x611\x613"+
		"\x5\x128\x95\x2\x612\x611\x3\x2\x2\x2\x612\x613\x3\x2\x2\x2\x613\x614"+
		"\x3\x2\x2\x2\x614\x615\x5\xBE`\x2\x615\x61E\x3\x2\x2\x2\x616\x617\x5\xBE"+
		"`\x2\x617\x618\x5\x128\x95\x2\x618\x619\a\xAA\x2\x2\x619\x61A\x5\x128"+
		"\x95\x2\x61A\x61B\x5\xBE`\x2\x61B\x61E\x3\x2\x2\x2\x61C\x61E\x5\xBE`\x2"+
		"\x61D\x60C\x3\x2\x2\x2\x61D\x616\x3\x2\x2\x2\x61D\x61C\x3\x2\x2\x2\x61E"+
		"\xA3\x3\x2\x2\x2\x61F\x620\a\x1D\x2\x2\x620\x621\x5\x128\x95\x2\x621\x622"+
		"\x5\xA6T\x2\x622\x624\x5\x118\x8D\x2\x623\x625\x5\x1A\xE\x2\x624\x623"+
		"\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625\xA5\x3\x2\x2\x2\x626\x636\a\x39"+
		"\x2\x2\x627\x632\x5\xA2R\x2\x628\x62A\x5\x128\x95\x2\x629\x628\x3\x2\x2"+
		"\x2\x629\x62A\x3\x2\x2\x2\x62A\x62B\x3\x2\x2\x2\x62B\x62D\a\x3\x2\x2\x62C"+
		"\x62E\x5\x128\x95\x2\x62D\x62C\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E"+
		"\x62F\x3\x2\x2\x2\x62F\x631\x5\xA2R\x2\x630\x629\x3\x2\x2\x2\x631\x634"+
		"\x3\x2\x2\x2\x632\x630\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633\x636\x3"+
		"\x2\x2\x2\x634\x632\x3\x2\x2\x2\x635\x626\x3\x2\x2\x2\x635\x627\x3\x2"+
		"\x2\x2\x636\xA7\x3\x2\x2\x2\x637\x638\a\x9B\x2\x2\x638\x639\x5\x128\x95"+
		"\x2\x639\x642\x5\xBE`\x2\x63A\x63C\x5\x128\x95\x2\x63B\x63A\x3\x2\x2\x2"+
		"\x63B\x63C\x3\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\x63F\a\x3\x2\x2\x63E"+
		"\x640\x5\x128\x95\x2\x63F\x63E\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2\x640"+
		"\x641\x3\x2\x2\x2\x641\x643\x5\xBE`\x2\x642\x63B\x3\x2\x2\x2\x642\x643"+
		"\x3\x2\x2\x2\x643\xA9\x3\x2\x2\x2\x644\x645\a\x9D\x2\x2\x645\x646\x5\x128"+
		"\x95\x2\x646\x648\x5\xBE`\x2\x647\x649\x5\x128\x95\x2\x648\x647\x3\x2"+
		"\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64C\a\x3\x2\x2"+
		"\x64B\x64D\x5\x128\x95\x2\x64C\x64B\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2"+
		"\x64D\x64E\x3\x2\x2\x2\x64E\x64F\x5\xBE`\x2\x64F\xAB\x3\x2\x2\x2\x650"+
		"\x651\a\x9C\x2\x2\x651\x652\x5\x128\x95\x2\x652\x654\x5\xDCo\x2\x653\x655"+
		"\x5\x128\x95\x2\x654\x653\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2\x655\x656"+
		"\x3\x2\x2\x2\x656\x658\a\xBD\x2\x2\x657\x659\x5\x128\x95\x2\x658\x657"+
		"\x3\x2\x2\x2\x658\x659\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2\x65A\x65B\x5"+
		"\xBE`\x2\x65B\xAD\x3\x2\x2\x2\x65C\x65D\a\xA3\x2\x2\x65D\xAF\x3\x2\x2"+
		"\x2\x65E\x65F\x5\x112\x8A\x2\x65F\x660\x5\x128\x95\x2\x660\x662\x3\x2"+
		"\x2\x2\x661\x65E\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662\x665\x3\x2\x2"+
		"\x2\x663\x664\a\xA1\x2\x2\x664\x666\x5\x128\x95\x2\x665\x663\x3\x2\x2"+
		"\x2\x665\x666\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x669\a\xA5\x2\x2"+
		"\x668\x66A\x5\x128\x95\x2\x669\x668\x3\x2\x2\x2\x669\x66A\x3\x2\x2\x2"+
		"\x66A\x66B\x3\x2\x2\x2\x66B\x670\x5\xF8}\x2\x66C\x66E\x5\x128\x95\x2\x66D"+
		"\x66C\x3\x2\x2\x2\x66D\x66E\x3\x2\x2\x2\x66E\x66F\x3\x2\x2\x2\x66F\x671"+
		"\x5\xEEx\x2\x670\x66D\x3\x2\x2\x2\x670\x671\x3\x2\x2\x2\x671\x672\x3\x2"+
		"\x2\x2\x672\x674\x5\x118\x8D\x2\x673\x675\x5\x1A\xE\x2\x674\x673\x3\x2"+
		"\x2\x2\x674\x675\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676\x677\a\x41\x2"+
		"\x2\x677\xB1\x3\x2\x2\x2\x678\x67A\a\xA9\x2\x2\x679\x67B\x5\x128\x95\x2"+
		"\x67A\x679\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C"+
		"\x67E\a\xBD\x2\x2\x67D\x67F\x5\x128\x95\x2\x67E\x67D\x3\x2\x2\x2\x67E"+
		"\x67F\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x681\x5\xBE`\x2\x681\xB3"+
		"\x3\x2\x2\x2\x682\x683\x5\x112\x8A\x2\x683\x684\x5\x128\x95\x2\x684\x686"+
		"\x3\x2\x2\x2\x685\x682\x3\x2\x2\x2\x685\x686\x3\x2\x2\x2\x686\x687\x3"+
		"\x2\x2\x2\x687\x688\a\xAC\x2\x2\x688\x689\x5\x128\x95\x2\x689\x68A\x5"+
		"\xF8}\x2\x68A\x68E\x5\x118\x8D\x2\x68B\x68D\x5\xB6\\\x2\x68C\x68B\x3\x2"+
		"\x2\x2\x68D\x690\x3\x2\x2\x2\x68E\x68C\x3\x2\x2\x2\x68E\x68F\x3\x2\x2"+
		"\x2\x68F\x691\x3\x2\x2\x2\x690\x68E\x3\x2\x2\x2\x691\x692\a\x42\x2\x2"+
		"\x692\xB5\x3\x2\x2\x2\x693\x6A2\x5\xF8}\x2\x694\x696\x5\x128\x95\x2\x695"+
		"\x694\x3\x2\x2\x2\x695\x696\x3\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x69C"+
		"\a\xC1\x2\x2\x698\x69A\x5\x128\x95\x2\x699\x698\x3\x2\x2\x2\x699\x69A"+
		"\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69D\x5\xF4{\x2\x69C\x699\x3\x2"+
		"\x2\x2\x69C\x69D\x3\x2\x2\x2\x69D\x69F\x3\x2\x2\x2\x69E\x6A0\x5\x128\x95"+
		"\x2\x69F\x69E\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2"+
		"\x6A1\x6A3\a\xC8\x2\x2\x6A2\x695\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3"+
		"\x6A7\x3\x2\x2\x2\x6A4\x6A5\x5\x128\x95\x2\x6A5\x6A6\x5\xFA~\x2\x6A6\x6A8"+
		"\x3\x2\x2\x2\x6A7\x6A4\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6A9\x3"+
		"\x2\x2\x2\x6A9\x6AA\x5\x118\x8D\x2\x6AA\xB7\x3\x2\x2\x2\x6AB\x6AC\a\xAD"+
		"\x2\x2\x6AC\x6AD\x5\x128\x95\x2\x6AD\x6B3\x5\xBE`\x2\x6AE\x6AF\x5\x128"+
		"\x95\x2\x6AF\x6B0\a]\x2\x2\x6B0\x6B1\x5\x128\x95\x2\x6B1\x6B2\x5\x10E"+
		"\x88\x2\x6B2\x6B4\x3\x2\x2\x2\x6B3\x6AE\x3\x2\x2\x2\x6B3\x6B4\x3\x2\x2"+
		"\x2\x6B4\xB9\x3\x2\x2\x2\x6B5\x6B6\a\xAE\x2\x2\x6B6\x6B7\x5\x128\x95\x2"+
		"\x6B7\x6B8\x5\xBE`\x2\x6B8\xBB\x3\x2\x2\x2\x6B9\x6BA\a\xAF\x2\x2\x6BA"+
		"\x6BB\x5\x128\x95\x2\x6BB\x6CB\x5\xCEh\x2\x6BC\x6BE\x5\x128\x95\x2\x6BD"+
		"\x6BC\x3\x2\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C1"+
		"\a\x3\x2\x2\x6C0\x6C2\x5\x128\x95\x2\x6C1\x6C0\x3\x2\x2\x2\x6C1\x6C2\x3"+
		"\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C9\x5\xBE`\x2\x6C4\x6C5\x5\x128"+
		"\x95\x2\x6C5\x6C6\a\xAA\x2\x2\x6C6\x6C7\x5\x128\x95\x2\x6C7\x6C8\x5\xBE"+
		"`\x2\x6C8\x6CA\x3\x2\x2\x2\x6C9\x6C4\x3\x2\x2\x2\x6C9\x6CA\x3\x2\x2\x2"+
		"\x6CA\x6CC\x3\x2\x2\x2\x6CB\x6BD\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC"+
		"\xBD\x3\x2\x2\x2\x6CD\x6CE\b`\x1\x2\x6CE\x6D0\ar\x2\x2\x6CF\x6D1\x5\x128"+
		"\x95\x2\x6D0\x6CF\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2"+
		"\x2\x6D2\x6FB\x5\xBE`\x15\x6D3\x6D5\a\xE\x2\x2\x6D4\x6D6\x5\x128\x95\x2"+
		"\x6D5\x6D4\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6\x6D7\x3\x2\x2\x2\x6D7"+
		"\x6FB\x5\xBE`\x12\x6D8\x6DA\x5\xDCo\x2\x6D9\x6DB\x5\x128\x95\x2\x6DA\x6D9"+
		"\x3\x2\x2\x2\x6DA\x6DB\x3\x2\x2\x2\x6DB\x6DC\x3\x2\x2\x2\x6DC\x6DE\a\xBA"+
		"\x2\x2\x6DD\x6DF\x5\x128\x95\x2\x6DE\x6DD\x3\x2\x2\x2\x6DE\x6DF\x3\x2"+
		"\x2\x2\x6DF\x6E0\x3\x2\x2\x2\x6E0\x6E1\x5\xBE`\x11\x6E1\x6FB\x3\x2\x2"+
		"\x2\x6E2\x6E4\a\xC3\x2\x2\x6E3\x6E5\x5\x128\x95\x2\x6E4\x6E3\x3\x2\x2"+
		"\x2\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6\x6FB\x5\xBE`\xF\x6E7"+
		"\x6E9\as\x2\x2\x6E8\x6EA\x5\x128\x95\x2\x6E9\x6E8\x3\x2\x2\x2\x6E9\x6EA"+
		"\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6FB\x5\xBE`\b\x6EC\x6FB\x5\x10A"+
		"\x86\x2\x6ED\x6FB\x5\xDCo\x2\x6EE\x6F0\a\xC1\x2\x2\x6EF\x6F1\x5\x128\x95"+
		"\x2\x6F0\x6EF\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2"+
		"\x6F2\x6F4\x5\xBE`\x2\x6F3\x6F5\x5\x128\x95\x2\x6F4\x6F3\x3\x2\x2\x2\x6F4"+
		"\x6F5\x3\x2\x2\x2\x6F5\x6F6\x3\x2\x2\x2\x6F6\x6F7\a\xC8\x2\x2\x6F7\x6FB"+
		"\x3\x2\x2\x2\x6F8\x6FB\x5\xB8]\x2\x6F9\x6FB\x5l\x37\x2\x6FA\x6CD\x3\x2"+
		"\x2\x2\x6FA\x6D3\x3\x2\x2\x2\x6FA\x6D8\x3\x2\x2\x2\x6FA\x6E2\x3\x2\x2"+
		"\x2\x6FA\x6E7\x3\x2\x2\x2\x6FA\x6EC\x3\x2\x2\x2\x6FA\x6ED\x3\x2\x2\x2"+
		"\x6FA\x6EE\x3\x2\x2\x2\x6FA\x6F8\x3\x2\x2\x2\x6FA\x6F9\x3\x2\x2\x2\x6FB"+
		"\x76A\x3\x2\x2\x2\x6FC\x6FE\f\x10\x2\x2\x6FD\x6FF\x5\x128\x95\x2\x6FE"+
		"\x6FD\x3\x2\x2\x2\x6FE\x6FF\x3\x2\x2\x2\x6FF\x700\x3\x2\x2\x2\x700\x702"+
		"\a\xC7\x2\x2\x701\x703\x5\x128\x95\x2\x702\x701\x3\x2\x2\x2\x702\x703"+
		"\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x769\x5\xBE`\x11\x705\x707\f\xE"+
		"\x2\x2\x706\x708\x5\x128\x95\x2\x707\x706\x3\x2\x2\x2\x707\x708\x3\x2"+
		"\x2\x2\x708\x709\x3\x2\x2\x2\x709\x70B\t\f\x2\x2\x70A\x70C\x5\x128\x95"+
		"\x2\x70B\x70A\x3\x2\x2\x2\x70B\x70C\x3\x2\x2\x2\x70C\x70D\x3\x2\x2\x2"+
		"\x70D\x769\x5\xBE`\xF\x70E\x710\f\r\x2\x2\x70F\x711\x5\x128\x95\x2\x710"+
		"\x70F\x3\x2\x2\x2\x710\x711\x3\x2\x2\x2\x711\x712\x3\x2\x2\x2\x712\x714"+
		"\a\xBC\x2\x2\x713\x715\x5\x128\x95\x2\x714\x713\x3\x2\x2\x2\x714\x715"+
		"\x3\x2\x2\x2\x715\x716\x3\x2\x2\x2\x716\x769\x5\xBE`\xE\x717\x719\f\f"+
		"\x2\x2\x718\x71A\x5\x128\x95\x2\x719\x718\x3\x2\x2\x2\x719\x71A\x3\x2"+
		"\x2\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71D\ao\x2\x2\x71C\x71E\x5\x128\x95"+
		"\x2\x71D\x71C\x3\x2\x2\x2\x71D\x71E\x3\x2\x2\x2\x71E\x71F\x3\x2\x2\x2"+
		"\x71F\x769\x5\xBE`\r\x720\x722\f\v\x2\x2\x721\x723\x5\x128\x95\x2\x722"+
		"\x721\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x726"+
		"\t\r\x2\x2\x725\x727\x5\x128\x95\x2\x726\x725\x3\x2\x2\x2\x726\x727\x3"+
		"\x2\x2\x2\x727\x728\x3\x2\x2\x2\x728\x769\x5\xBE`\f\x729\x72B\f\n\x2\x2"+
		"\x72A\x72C\x5\x128\x95\x2\x72B\x72A\x3\x2\x2\x2\x72B\x72C\x3\x2\x2\x2"+
		"\x72C\x72D\x3\x2\x2\x2\x72D\x72F\a\f\x2\x2\x72E\x730\x5\x128\x95\x2\x72F"+
		"\x72E\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731\x769"+
		"\x5\xBE`\v\x732\x734\f\t\x2\x2\x733\x735\x5\x128\x95\x2\x734\x733\x3\x2"+
		"\x2\x2\x734\x735\x3\x2\x2\x2\x735\x736\x3\x2\x2\x2\x736\x738\t\xE\x2\x2"+
		"\x737\x739\x5\x128\x95\x2\x738\x737\x3\x2\x2\x2\x738\x739\x3\x2\x2\x2"+
		"\x739\x73A\x3\x2\x2\x2\x73A\x769\x5\xBE`\n\x73B\x73D\f\a\x2\x2\x73C\x73E"+
		"\x5\x128\x95\x2\x73D\x73C\x3\x2\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E\x73F"+
		"\x3\x2\x2\x2\x73F\x741\a\x10\x2\x2\x740\x742\x5\x128\x95\x2\x741\x740"+
		"\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743\x769\x5"+
		"\xBE`\b\x744\x746\f\x6\x2\x2\x745\x747\x5\x128\x95\x2\x746\x745\x3\x2"+
		"\x2\x2\x746\x747\x3\x2\x2\x2\x747\x748\x3\x2\x2\x2\x748\x74A\a\x7F\x2"+
		"\x2\x749\x74B\x5\x128\x95\x2\x74A\x749\x3\x2\x2\x2\x74A\x74B\x3\x2\x2"+
		"\x2\x74B\x74C\x3\x2\x2\x2\x74C\x769\x5\xBE`\a\x74D\x74F\f\x5\x2\x2\x74E"+
		"\x750\x5\x128\x95\x2\x74F\x74E\x3\x2\x2\x2\x74F\x750\x3\x2\x2\x2\x750"+
		"\x751\x3\x2\x2\x2\x751\x753\a\xB9\x2\x2\x752\x754\x5\x128\x95\x2\x753"+
		"\x752\x3\x2\x2\x2\x753\x754\x3\x2\x2\x2\x754\x755\x3\x2\x2\x2\x755\x769"+
		"\x5\xBE`\x6\x756\x758\f\x4\x2\x2\x757\x759\x5\x128\x95\x2\x758\x757\x3"+
		"\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75C\a\x46"+
		"\x2\x2\x75B\x75D\x5\x128\x95\x2\x75C\x75B\x3\x2\x2\x2\x75C\x75D\x3\x2"+
		"\x2\x2\x75D\x75E\x3\x2\x2\x2\x75E\x769\x5\xBE`\x5\x75F\x761\f\x3\x2\x2"+
		"\x760\x762\x5\x128\x95\x2\x761\x760\x3\x2\x2\x2\x761\x762\x3\x2\x2\x2"+
		"\x762\x763\x3\x2\x2\x2\x763\x765\aY\x2\x2\x764\x766\x5\x128\x95\x2\x765"+
		"\x764\x3\x2\x2\x2\x765\x766\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x769"+
		"\x5\xBE`\x4\x768\x6FC\x3\x2\x2\x2\x768\x705\x3\x2\x2\x2\x768\x70E\x3\x2"+
		"\x2\x2\x768\x717\x3\x2\x2\x2\x768\x720\x3\x2\x2\x2\x768\x729\x3\x2\x2"+
		"\x2\x768\x732\x3\x2\x2\x2\x768\x73B\x3\x2\x2\x2\x768\x744\x3\x2\x2\x2"+
		"\x768\x74D\x3\x2\x2\x2\x768\x756\x3\x2\x2\x2\x768\x75F\x3\x2\x2\x2\x769"+
		"\x76C\x3\x2\x2\x2\x76A\x768\x3\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\xBF"+
		"\x3\x2\x2\x2\x76C\x76A\x3\x2\x2\x2\x76D\x771\a\x35\x2\x2\x76E\x771\a\xA1"+
		"\x2\x2\x76F\x771\x5\x112\x8A\x2\x770\x76D\x3\x2\x2\x2\x770\x76E\x3\x2"+
		"\x2\x2\x770\x76F\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2\x772\x775\x5\x128\x95"+
		"\x2\x773\x774\a\xB7\x2\x2\x774\x776\x5\x128\x95\x2\x775\x773\x3\x2\x2"+
		"\x2\x775\x776\x3\x2\x2\x2\x776\x777\x3\x2\x2\x2\x777\x778\x5\xC2\x62\x2"+
		"\x778\xC1\x3\x2\x2\x2\x779\x784\x5\xC4\x63\x2\x77A\x77C\x5\x128\x95\x2"+
		"\x77B\x77A\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D"+
		"\x77F\a\x3\x2\x2\x77E\x780\x5\x128\x95\x2\x77F\x77E\x3\x2\x2\x2\x77F\x780"+
		"\x3\x2\x2\x2\x780\x781\x3\x2\x2\x2\x781\x783\x5\xC4\x63\x2\x782\x77B\x3"+
		"\x2\x2\x2\x783\x786\x3\x2\x2\x2\x784\x782\x3\x2\x2\x2\x784\x785\x3\x2"+
		"\x2\x2\x785\xC3\x3\x2\x2\x2\x786\x784\x3\x2\x2\x2\x787\x799\x5\xF8}\x2"+
		"\x788\x78A\x5\x128\x95\x2\x789\x788\x3\x2\x2\x2\x789\x78A\x3\x2\x2\x2"+
		"\x78A\x78B\x3\x2\x2\x2\x78B\x78D\a\xC1\x2\x2\x78C\x78E\x5\x128\x95\x2"+
		"\x78D\x78C\x3\x2\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x793\x3\x2\x2\x2\x78F"+
		"\x791\x5\xF4{\x2\x790\x792\x5\x128\x95\x2\x791\x790\x3\x2\x2\x2\x791\x792"+
		"\x3\x2\x2\x2\x792\x794\x3\x2\x2\x2\x793\x78F\x3\x2\x2\x2\x793\x794\x3"+
		"\x2\x2\x2\x794\x795\x3\x2\x2\x2\x795\x797\a\xC8\x2\x2\x796\x798\x5\x128"+
		"\x95\x2\x797\x796\x3\x2\x2\x2\x797\x798\x3\x2\x2\x2\x798\x79A\x3\x2\x2"+
		"\x2\x799\x789\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x79C\x3\x2\x2\x2"+
		"\x79B\x79D\x5\x110\x89\x2\x79C\x79B\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2"+
		"\x79D\x7A1\x3\x2\x2\x2\x79E\x79F\x5\x128\x95\x2\x79F\x7A0\x5\xFA~\x2\x7A0"+
		"\x7A2\x3\x2\x2\x2\x7A1\x79E\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\xC5"+
		"\x3\x2\x2\x2\x7A3\x7A4\a\xB4\x2\x2\x7A4\x7A5\x5\x128\x95\x2\x7A5\x7A6"+
		"\x5\xBE`\x2\x7A6\x7A8\x5\x118\x8D\x2\x7A7\x7A9\x5\x1A\xE\x2\x7A8\x7A7"+
		"\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\a\xB3"+
		"\x2\x2\x7AB\xC7\x3\x2\x2\x2\x7AC\x7AD\a\xB5\x2\x2\x7AD\x7AE\x5\x128\x95"+
		"\x2\x7AE\x7B0\x5\xCEh\x2\x7AF\x7B1\x5\x128\x95\x2\x7B0\x7AF\x3\x2\x2\x2"+
		"\x7B0\x7B1\x3\x2\x2\x2\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B4\a\x3\x2\x2\x7B3"+
		"\x7B5\x5\x128\x95\x2\x7B4\x7B3\x3\x2\x2\x2\x7B4\x7B5\x3\x2\x2\x2\x7B5"+
		"\x7B6\x3\x2\x2\x2\x7B6\x7B7\x5\xBE`\x2\x7B7\xC9\x3\x2\x2\x2\x7B8\x7B9"+
		"\a\xB6\x2\x2\x7B9\x7BF\x5\x128\x95\x2\x7BA\x7C0\x5\xDCo\x2\x7BB\x7BC\a"+
		"r\x2\x2\x7BC\x7BD\x5\x128\x95\x2\x7BD\x7BE\x5\x10E\x88\x2\x7BE\x7C0\x3"+
		"\x2\x2\x2\x7BF\x7BA\x3\x2\x2\x2\x7BF\x7BB\x3\x2\x2\x2\x7C0\x7C1\x3\x2"+
		"\x2\x2\x7C1\x7C3\x5\x118\x8D\x2\x7C2\x7C4\x5\x1A\xE\x2\x7C3\x7C2\x3\x2"+
		"\x2\x2\x7C3\x7C4\x3\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x7C6\a\x43\x2"+
		"\x2\x7C6\xCB\x3\x2\x2\x2\x7C7\x7C8\a\xB8\x2\x2\x7C8\x7C9\x5\x128\x95\x2"+
		"\x7C9\x7CB\x5\xCEh\x2\x7CA\x7CC\x5\x128\x95\x2\x7CB\x7CA\x3\x2\x2\x2\x7CB"+
		"\x7CC\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7D2\a\x3\x2\x2\x7CE\x7D0"+
		"\x5\x128\x95\x2\x7CF\x7CE\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7D1"+
		"\x3\x2\x2\x2\x7D1\x7D3\x5z>\x2\x7D2\x7CF\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2"+
		"\x2\x7D3\xCD\x3\x2\x2\x2\x7D4\x7D6\a\b\x2\x2\x7D5\x7D4\x3\x2\x2\x2\x7D5"+
		"\x7D6\x3\x2\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x7D8\x5\xBE`\x2\x7D8\xCF"+
		"\x3\x2\x2\x2\x7D9\x7DC\x5\xD2j\x2\x7DA\x7DC\x5\xD4k\x2\x7DB\x7D9\x3\x2"+
		"\x2\x2\x7DB\x7DA\x3\x2\x2\x2\x7DC\xD1\x3\x2\x2\x2\x7DD\x7DE\a\x1C\x2\x2"+
		"\x7DE\x7DF\x5\x128\x95\x2\x7DF\x7E1\x5\xF8}\x2\x7E0\x7E2\x5\x110\x89\x2"+
		"\x7E1\x7E0\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7F0\x3\x2\x2\x2\x7E3"+
		"\x7E5\x5\x128\x95\x2\x7E4\x7E3\x3\x2\x2\x2\x7E4\x7E5\x3\x2\x2\x2\x7E5"+
		"\x7E6\x3\x2\x2\x2\x7E6\x7E8\a\xC1\x2\x2\x7E7\x7E9\x5\x128\x95\x2\x7E8"+
		"\x7E7\x3\x2\x2\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\x7EC"+
		"\x5\xE8u\x2\x7EB\x7ED\x5\x128\x95\x2\x7EC\x7EB\x3\x2\x2\x2\x7EC\x7ED\x3"+
		"\x2\x2\x2\x7ED\x7EE\x3\x2\x2\x2\x7EE\x7EF\a\xC8\x2\x2\x7EF\x7F1\x3\x2"+
		"\x2\x2\x7F0\x7E4\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7FB\x3\x2\x2"+
		"\x2\x7F2\x7F4\x5\x128\x95\x2\x7F3\x7F2\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2"+
		"\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5\x7F6\a\xC1\x2\x2\x7F6\x7F7\x5\xF4{\x2\x7F7"+
		"\x7F8\a\xC8\x2\x2\x7F8\x7FA\x3\x2\x2\x2\x7F9\x7F3\x3\x2\x2\x2\x7FA\x7FD"+
		"\x3\x2\x2\x2\x7FB\x7F9\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\xD3\x3\x2"+
		"\x2\x2\x7FD\x7FB\x3\x2\x2\x2\x7FE\x7FF\a\x1C\x2\x2\x7FF\x801\x5\x128\x95"+
		"\x2\x800\x802\x5\xDCo\x2\x801\x800\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802"+
		"\x803\x3\x2\x2\x2\x803\x804\a\a\x2\x2\x804\x806\x5\xF8}\x2\x805\x807\x5"+
		"\x110\x89\x2\x806\x805\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x815\x3"+
		"\x2\x2\x2\x808\x80A\x5\x128\x95\x2\x809\x808\x3\x2\x2\x2\x809\x80A\x3"+
		"\x2\x2\x2\x80A\x80B\x3\x2\x2\x2\x80B\x80D\a\xC1\x2\x2\x80C\x80E\x5\x128"+
		"\x95\x2\x80D\x80C\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E\x80F\x3\x2\x2"+
		"\x2\x80F\x811\x5\xE8u\x2\x810\x812\x5\x128\x95\x2\x811\x810\x3\x2\x2\x2"+
		"\x811\x812\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\a\xC8\x2\x2\x814"+
		"\x816\x3\x2\x2\x2\x815\x809\x3\x2\x2\x2\x815\x816\x3\x2\x2\x2\x816\x820"+
		"\x3\x2\x2\x2\x817\x819\x5\x128\x95\x2\x818\x817\x3\x2\x2\x2\x818\x819"+
		"\x3\x2\x2\x2\x819\x81A\x3\x2\x2\x2\x81A\x81B\a\xC1\x2\x2\x81B\x81C\x5"+
		"\xF4{\x2\x81C\x81D\a\xC8\x2\x2\x81D\x81F\x3\x2\x2\x2\x81E\x818\x3\x2\x2"+
		"\x2\x81F\x822\x3\x2\x2\x2\x820\x81E\x3\x2\x2\x2\x820\x821\x3\x2\x2\x2"+
		"\x821\xD5\x3\x2\x2\x2\x822\x820\x3\x2\x2\x2\x823\x826\x5\xD8m\x2\x824"+
		"\x826\x5\xDAn\x2\x825\x823\x3\x2\x2\x2\x825\x824\x3\x2\x2\x2\x826\xD7"+
		"\x3\x2\x2\x2\x827\x829\x5\xDCo\x2\x828\x827\x3\x2\x2\x2\x828\x829\x3\x2"+
		"\x2\x2\x829\x82B\x3\x2\x2\x2\x82A\x82C\x5\x128\x95\x2\x82B\x82A\x3\x2"+
		"\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x82F\a\a\x2\x2"+
		"\x82E\x830\x5\x128\x95\x2\x82F\x82E\x3\x2\x2\x2\x82F\x830\x3\x2\x2\x2"+
		"\x830\x831\x3\x2\x2\x2\x831\x833\x5\xF8}\x2\x832\x834\x5\x110\x89\x2\x833"+
		"\x832\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2\x834\x838\x3\x2\x2\x2\x835\x836"+
		"\x5\x128\x95\x2\x836\x837\x5\xE8u\x2\x837\x839\x3\x2\x2\x2\x838\x835\x3"+
		"\x2\x2\x2\x838\x839\x3\x2\x2\x2\x839\x83E\x3\x2\x2\x2\x83A\x83C\x5\x128"+
		"\x95\x2\x83B\x83A\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x83D\x3\x2\x2"+
		"\x2\x83D\x83F\x5\xECw\x2\x83E\x83B\x3\x2\x2\x2\x83E\x83F\x3\x2\x2\x2\x83F"+
		"\x849\x3\x2\x2\x2\x840\x842\x5\x128\x95\x2\x841\x840\x3\x2\x2\x2\x841"+
		"\x842\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x844\a\xC1\x2\x2\x844\x845"+
		"\x5\xF4{\x2\x845\x846\a\xC8\x2\x2\x846\x848\x3\x2\x2\x2\x847\x841\x3\x2"+
		"\x2\x2\x848\x84B\x3\x2\x2\x2\x849\x847\x3\x2\x2\x2\x849\x84A\x3\x2\x2"+
		"\x2\x84A\xD9\x3\x2\x2\x2\x84B\x849\x3\x2\x2\x2\x84C\x850\x5\xFE\x80\x2"+
		"\x84D\x84E\x5\x128\x95\x2\x84E\x84F\x5\xE8u\x2\x84F\x851\x3\x2\x2\x2\x850"+
		"\x84D\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\x85B\x3\x2\x2\x2\x852\x854"+
		"\x5\x128\x95\x2\x853\x852\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854\x855"+
		"\x3\x2\x2\x2\x855\x856\a\xC1\x2\x2\x856\x857\x5\xF4{\x2\x857\x858\a\xC8"+
		"\x2\x2\x858\x85A\x3\x2\x2\x2\x859\x853\x3\x2\x2\x2\x85A\x85D\x3\x2\x2"+
		"\x2\x85B\x859\x3\x2\x2\x2\x85B\x85C\x3\x2\x2\x2\x85C\xDB\x3\x2\x2\x2\x85D"+
		"\x85B\x3\x2\x2\x2\x85E\x863\x5\xE2r\x2\x85F\x863\x5\xDEp\x2\x860\x863"+
		"\x5\xE0q\x2\x861\x863\x5\xE6t\x2\x862\x85E\x3\x2\x2\x2\x862\x85F\x3\x2"+
		"\x2\x2\x862\x860\x3\x2\x2\x2\x862\x861\x3\x2\x2\x2\x863\xDD\x3\x2\x2\x2"+
		"\x864\x866\x5\xF8}\x2\x865\x867\x5\x110\x89\x2\x866\x865\x3\x2\x2\x2\x866"+
		"\x867\x3\x2\x2\x2\x867\x86C\x3\x2\x2\x2\x868\x86A\x5\x128\x95\x2\x869"+
		"\x868\x3\x2\x2\x2\x869\x86A\x3\x2\x2\x2\x86A\x86B\x3\x2\x2\x2\x86B\x86D"+
		"\x5\xECw\x2\x86C\x869\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x877\x3\x2"+
		"\x2\x2\x86E\x870\x5\x128\x95\x2\x86F\x86E\x3\x2\x2\x2\x86F\x870\x3\x2"+
		"\x2\x2\x870\x871\x3\x2\x2\x2\x871\x872\a\xC1\x2\x2\x872\x873\x5\xF4{\x2"+
		"\x873\x874\a\xC8\x2\x2\x874\x876\x3\x2\x2\x2\x875\x86F\x3\x2\x2\x2\x876"+
		"\x879\x3\x2\x2\x2\x877\x875\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\xDF"+
		"\x3\x2\x2\x2\x879\x877\x3\x2\x2\x2\x87A\x87D\x5\xF8}\x2\x87B\x87D\x5\xFC"+
		"\x7F\x2\x87C\x87A\x3\x2\x2\x2\x87C\x87B\x3\x2\x2\x2\x87D\x87F\x3\x2\x2"+
		"\x2\x87E\x880\x5\x110\x89\x2\x87F\x87E\x3\x2\x2\x2\x87F\x880\x3\x2\x2"+
		"\x2\x880\x882\x3\x2\x2\x2\x881\x883\x5\x128\x95\x2\x882\x881\x3\x2\x2"+
		"\x2\x882\x883\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884\x886\a\xC1\x2\x2"+
		"\x885\x887\x5\x128\x95\x2\x886\x885\x3\x2\x2\x2\x886\x887\x3\x2\x2\x2"+
		"\x887\x88C\x3\x2\x2\x2\x888\x88A\x5\xE8u\x2\x889\x88B\x5\x128\x95\x2\x88A"+
		"\x889\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88D\x3\x2\x2\x2\x88C\x888"+
		"\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x893\a\xC8"+
		"\x2\x2\x88F\x891\x5\x128\x95\x2\x890\x88F\x3\x2\x2\x2\x890\x891\x3\x2"+
		"\x2\x2\x891\x892\x3\x2\x2\x2\x892\x894\x5\xECw\x2\x893\x890\x3\x2\x2\x2"+
		"\x893\x894\x3\x2\x2\x2\x894\x89E\x3\x2\x2\x2\x895\x897\x5\x128\x95\x2"+
		"\x896\x895\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2\x898"+
		"\x899\a\xC1\x2\x2\x899\x89A\x5\xF4{\x2\x89A\x89B\a\xC8\x2\x2\x89B\x89D"+
		"\x3\x2\x2\x2\x89C\x896\x3\x2\x2\x2\x89D\x8A0\x3\x2\x2\x2\x89E\x89C\x3"+
		"\x2\x2\x2\x89E\x89F\x3\x2\x2\x2\x89F\xE1\x3\x2\x2\x2\x8A0\x89E\x3\x2\x2"+
		"\x2\x8A1\x8A4\x5\xDEp\x2\x8A2\x8A4\x5\xE0q\x2\x8A3\x8A1\x3\x2\x2\x2\x8A3"+
		"\x8A2\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A9\x3\x2\x2\x2\x8A5\x8A7"+
		"\x5\xE4s\x2\x8A6\x8A8\x5\x128\x95\x2\x8A7\x8A6\x3\x2\x2\x2\x8A7\x8A8\x3"+
		"\x2\x2\x2\x8A8\x8AA\x3\x2\x2\x2\x8A9\x8A5\x3\x2\x2\x2\x8AA\x8AB\x3\x2"+
		"\x2\x2\x8AB\x8A9\x3\x2\x2\x2\x8AB\x8AC\x3\x2\x2\x2\x8AC\x8B1\x3\x2\x2"+
		"\x2\x8AD\x8AF\x5\x128\x95\x2\x8AE\x8AD\x3\x2\x2\x2\x8AE\x8AF\x3\x2\x2"+
		"\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B2\x5\xECw\x2\x8B1\x8AE\x3\x2\x2\x2\x8B1"+
		"\x8B2\x3\x2\x2\x2\x8B2\x8BC\x3\x2\x2\x2\x8B3\x8B5\x5\x128\x95\x2\x8B4"+
		"\x8B3\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2\x8B6\x8B7"+
		"\a\xC1\x2\x2\x8B7\x8B8\x5\xF4{\x2\x8B8\x8B9\a\xC8\x2\x2\x8B9\x8BB\x3\x2"+
		"\x2\x2\x8BA\x8B4\x3\x2\x2\x2\x8BB\x8BE\x3\x2\x2\x2\x8BC\x8BA\x3\x2\x2"+
		"\x2\x8BC\x8BD\x3\x2\x2\x2\x8BD\xE3\x3\x2\x2\x2\x8BE\x8BC\x3\x2\x2\x2\x8BF"+
		"\x8C1\t\xF\x2\x2\x8C0\x8C2\x5\x128\x95\x2\x8C1\x8C0\x3\x2\x2\x2\x8C1\x8C2"+
		"\x3\x2\x2\x2\x8C2\x8C5\x3\x2\x2\x2\x8C3\x8C6\x5\xDEp\x2\x8C4\x8C6\x5\xE0"+
		"q\x2\x8C5\x8C3\x3\x2\x2\x2\x8C5\x8C4\x3\x2\x2\x2\x8C6\xE5\x3\x2\x2\x2"+
		"\x8C7\x8C9\x5\x128\x95\x2\x8C8\x8C7\x3\x2\x2\x2\x8C8\x8C9\x3\x2\x2\x2"+
		"\x8C9\x8CA\x3\x2\x2\x2\x8CA\x8CB\x5\xECw\x2\x8CB\xE7\x3\x2\x2\x2\x8CC"+
		"\x8CE\x5\xEAv\x2\x8CD\x8CC\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8D0"+
		"\x3\x2\x2\x2\x8CF\x8D1\x5\x128\x95\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0\x8D1"+
		"\x3\x2\x2\x2\x8D1\x8D2\x3\x2\x2\x2\x8D2\x8D4\t\n\x2\x2\x8D3\x8D5\x5\x128"+
		"\x95\x2\x8D4\x8D3\x3\x2\x2\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8D7\x3\x2\x2"+
		"\x2\x8D6\x8CD\x3\x2\x2\x2\x8D7\x8DA\x3\x2\x2\x2\x8D8\x8D6\x3\x2\x2\x2"+
		"\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DB\x3\x2\x2\x2\x8DA\x8D8\x3\x2\x2\x2\x8DB"+
		"\x8E8\x5\xEAv\x2\x8DC\x8DE\x5\x128\x95\x2\x8DD\x8DC\x3\x2\x2\x2\x8DD\x8DE"+
		"\x3\x2\x2\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8E1\t\n\x2\x2\x8E0\x8E2\x5\x128"+
		"\x95\x2\x8E1\x8E0\x3\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8E4\x3\x2\x2"+
		"\x2\x8E3\x8E5\x5\xEAv\x2\x8E4\x8E3\x3\x2\x2\x2\x8E4\x8E5\x3\x2\x2\x2\x8E5"+
		"\x8E7\x3\x2\x2\x2\x8E6\x8DD\x3\x2\x2\x2\x8E7\x8EA\x3\x2\x2\x2\x8E8\x8E6"+
		"\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\xE9\x3\x2\x2\x2\x8EA\x8E8\x3\x2"+
		"\x2\x2\x8EB\x8ED\a\xC1\x2\x2\x8EC\x8EB\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2"+
		"\x2\x8ED\x8F0\x3\x2\x2\x2\x8EE\x8EF\t\x10\x2\x2\x8EF\x8F1\x5\x128\x95"+
		"\x2\x8F0\x8EE\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2\x2\x8F1\x8F3\x3\x2\x2\x2"+
		"\x8F2\x8F4\a\xC8\x2\x2\x8F3\x8F2\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2\x2\x8F4"+
		"\x8F5\x3\x2\x2\x2\x8F5\x8F6\x5\xBE`\x2\x8F6\xEB\x3\x2\x2\x2\x8F7\x8F9"+
		"\a\x6\x2\x2\x8F8\x8FA\x5\x128\x95\x2\x8F9\x8F8\x3\x2\x2\x2\x8F9\x8FA\x3"+
		"\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\x8FD\x5\xF8}\x2\x8FC\x8FE\x5\x110"+
		"\x89\x2\x8FD\x8FC\x3\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE\xED\x3\x2\x2"+
		"\x2\x8FF\x911\a\xC1\x2\x2\x900\x902\x5\x128\x95\x2\x901\x900\x3\x2\x2"+
		"\x2\x901\x902\x3\x2\x2\x2\x902\x903\x3\x2\x2\x2\x903\x90E\x5\xF0y\x2\x904"+
		"\x906\x5\x128\x95\x2\x905\x904\x3\x2\x2\x2\x905\x906\x3\x2\x2\x2\x906"+
		"\x907\x3\x2\x2\x2\x907\x909\a\x3\x2\x2\x908\x90A\x5\x128\x95\x2\x909\x908"+
		"\x3\x2\x2\x2\x909\x90A\x3\x2\x2\x2\x90A\x90B\x3\x2\x2\x2\x90B\x90D\x5"+
		"\xF0y\x2\x90C\x905\x3\x2\x2\x2\x90D\x910\x3\x2\x2\x2\x90E\x90C\x3\x2\x2"+
		"\x2\x90E\x90F\x3\x2\x2\x2\x90F\x912\x3\x2\x2\x2\x910\x90E\x3\x2\x2\x2"+
		"\x911\x901\x3\x2\x2\x2\x911\x912\x3\x2\x2\x2\x912\x914\x3\x2\x2\x2\x913"+
		"\x915\x5\x128\x95\x2\x914\x913\x3\x2\x2\x2\x914\x915\x3\x2\x2\x2\x915"+
		"\x916\x3\x2\x2\x2\x916\x917\a\xC8\x2\x2\x917\xEF\x3\x2\x2\x2\x918\x919"+
		"\az\x2\x2\x919\x91B\x5\x128\x95\x2\x91A\x918\x3\x2\x2\x2\x91A\x91B\x3"+
		"\x2\x2\x2\x91B\x91E\x3\x2\x2\x2\x91C\x91D\t\x11\x2\x2\x91D\x91F\x5\x128"+
		"\x95\x2\x91E\x91C\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x922\x3\x2\x2"+
		"\x2\x920\x921\a\x81\x2\x2\x921\x923\x5\x128\x95\x2\x922\x920\x3\x2\x2"+
		"\x2\x922\x923\x3\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x926\x5\xF8}\x2\x925"+
		"\x927\x5\x110\x89\x2\x926\x925\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927"+
		"\x930\x3\x2\x2\x2\x928\x92A\x5\x128\x95\x2\x929\x928\x3\x2\x2\x2\x929"+
		"\x92A\x3\x2\x2\x2\x92A\x92B\x3\x2\x2\x2\x92B\x92D\a\xC1\x2\x2\x92C\x92E"+
		"\x5\x128\x95\x2\x92D\x92C\x3\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E\x92F"+
		"\x3\x2\x2\x2\x92F\x931\a\xC8\x2\x2\x930\x929\x3\x2\x2\x2\x930\x931\x3"+
		"\x2\x2\x2\x931\x936\x3\x2\x2\x2\x932\x934\x5\x128\x95\x2\x933\x932\x3"+
		"\x2\x2\x2\x933\x934\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x937\x5\xFA"+
		"~\x2\x936\x933\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937\x93C\x3\x2\x2\x2"+
		"\x938\x93A\x5\x128\x95\x2\x939\x938\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2"+
		"\x93A\x93B\x3\x2\x2\x2\x93B\x93D\x5\xF2z\x2\x93C\x939\x3\x2\x2\x2\x93C"+
		"\x93D\x3\x2\x2\x2\x93D\xF1\x3\x2\x2\x2\x93E\x940\a\xBD\x2\x2\x93F\x941"+
		"\x5\x128\x95\x2\x940\x93F\x3\x2\x2\x2\x940\x941\x3\x2\x2\x2\x941\x942"+
		"\x3\x2\x2\x2\x942\x943\x5\xBE`\x2\x943\xF3\x3\x2\x2\x2\x944\x94F\x5\xF6"+
		"|\x2\x945\x947\x5\x128\x95\x2\x946\x945\x3\x2\x2\x2\x946\x947\x3\x2\x2"+
		"\x2\x947\x948\x3\x2\x2\x2\x948\x94A\a\x3\x2\x2\x949\x94B\x5\x128\x95\x2"+
		"\x94A\x949\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x94C\x3\x2\x2\x2\x94C"+
		"\x94E\x5\xF6|\x2\x94D\x946\x3\x2\x2\x2\x94E\x951\x3\x2\x2\x2\x94F\x94D"+
		"\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2\x950\xF5\x3\x2\x2\x2\x951\x94F\x3\x2"+
		"\x2\x2\x952\x953\x5\xBE`\x2\x953\x954\x5\x128\x95\x2\x954\x955\a\xAA\x2"+
		"\x2\x955\x956\x5\x128\x95\x2\x956\x958\x3\x2\x2\x2\x957\x952\x3\x2\x2"+
		"\x2\x957\x958\x3\x2\x2\x2\x958\x959\x3\x2\x2\x2\x959\x95A\x5\xBE`\x2\x95A"+
		"\xF7\x3\x2\x2\x2\x95B\x95E\a\xDD\x2\x2\x95C\x95E\x5\x114\x8B\x2\x95D\x95B"+
		"\x3\x2\x2\x2\x95D\x95C\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x95D\x3"+
		"\x2\x2\x2\x95F\x960\x3\x2\x2\x2\x960\xF9\x3\x2\x2\x2\x961\x963\a\x14\x2"+
		"\x2\x962\x964\x5\x128\x95\x2\x963\x962\x3\x2\x2\x2\x963\x964\x3\x2\x2"+
		"\x2\x964\x967\x3\x2\x2\x2\x965\x966\ar\x2\x2\x966\x968\x5\x128\x95\x2"+
		"\x967\x965\x3\x2\x2\x2\x967\x968\x3\x2\x2\x2\x968\x969\x3\x2\x2\x2\x969"+
		"\x96E\x5\x10E\x88\x2\x96A\x96C\x5\x128\x95\x2\x96B\x96A\x3\x2\x2\x2\x96B"+
		"\x96C\x3\x2\x2\x2\x96C\x96D\x3\x2\x2\x2\x96D\x96F\x5\x104\x83\x2\x96E"+
		"\x96B\x3\x2\x2\x2\x96E\x96F\x3\x2\x2\x2\x96F\xFB\x3\x2\x2\x2\x970\x971"+
		"\t\x12\x2\x2\x971\xFD\x3\x2\x2\x2\x972\x977\a\xDD\x2\x2\x973\x976\x5\x114"+
		"\x8B\x2\x974\x976\a\xDD\x2\x2\x975\x973\x3\x2\x2\x2\x975\x974\x3\x2\x2"+
		"\x2\x976\x979\x3\x2\x2\x2\x977\x975\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2"+
		"\x978\x982\x3\x2\x2\x2\x979\x977\x3\x2\x2\x2\x97A\x97D\x5\x114\x8B\x2"+
		"\x97B\x97E\x5\x114\x8B\x2\x97C\x97E\a\xDD\x2\x2\x97D\x97B\x3\x2\x2\x2"+
		"\x97D\x97C\x3\x2\x2\x2\x97E\x97F\x3\x2\x2\x2\x97F\x97D\x3\x2\x2\x2\x97F"+
		"\x980\x3\x2\x2\x2\x980\x982\x3\x2\x2\x2\x981\x972\x3\x2\x2\x2\x981\x97A"+
		"\x3\x2\x2\x2\x982\xFF\x3\x2\x2\x2\x983\x984\t\xE\x2\x2\x984\x101\x3\x2"+
		"\x2\x2\x985\x98A\x5\xF8}\x2\x986\x987\t\xF\x2\x2\x987\x989\x5\xF8}\x2"+
		"\x988\x986\x3\x2\x2\x2\x989\x98C\x3\x2\x2\x2\x98A\x988\x3\x2\x2\x2\x98A"+
		"\x98B\x3\x2\x2\x2\x98B\x103\x3\x2\x2\x2\x98C\x98A\x3\x2\x2\x2\x98D\x98F"+
		"\a\xC4\x2\x2\x98E\x990\x5\x128\x95\x2\x98F\x98E\x3\x2\x2\x2\x98F\x990"+
		"\x3\x2\x2\x2\x990\x993\x3\x2\x2\x2\x991\x994\x5\x10C\x87\x2\x992\x994"+
		"\x5\xF8}\x2\x993\x991\x3\x2\x2\x2\x993\x992\x3\x2\x2\x2\x994\x105\x3\x2"+
		"\x2\x2\x995\x99E\x5\xFE\x80\x2\x996\x998\x5\x128\x95\x2\x997\x996\x3\x2"+
		"\x2\x2\x997\x998\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x99B\a\xC3\x2"+
		"\x2\x99A\x99C\x5\x128\x95\x2\x99B\x99A\x3\x2\x2\x2\x99B\x99C\x3\x2\x2"+
		"\x2\x99C\x99D\x3\x2\x2\x2\x99D\x99F\x5\xFE\x80\x2\x99E\x997\x3\x2\x2\x2"+
		"\x99E\x99F\x3\x2\x2\x2\x99F\x107\x3\x2\x2\x2\x9A0\x9A3\x5\xF8}\x2\x9A1"+
		"\x9A3\x5\x10C\x87\x2\x9A2\x9A0\x3\x2\x2\x2\x9A2\x9A1\x3\x2\x2\x2\x9A3"+
		"\x9A4\x3\x2\x2\x2\x9A4\x9A5\a\x4\x2\x2\x9A5\x109\x3\x2\x2\x2\x9A6\x9AF"+
		"\x5\x10C\x87\x2\x9A7\x9AF\a\xD6\x2\x2\x9A8\x9AF\a\xD0\x2\x2\x9A9\x9AF"+
		"\a\xAB\x2\x2\x9AA\x9AF\aO\x2\x2\x9AB\x9AF\at\x2\x2\x9AC\x9AF\au\x2\x2"+
		"\x9AD\x9AF\a;\x2\x2\x9AE\x9A6\x3\x2\x2\x2\x9AE\x9A7\x3\x2\x2\x2\x9AE\x9A8"+
		"\x3\x2\x2\x2\x9AE\x9A9\x3\x2\x2\x2\x9AE\x9AA\x3\x2\x2\x2\x9AE\x9AB\x3"+
		"\x2\x2\x2\x9AE\x9AC\x3\x2\x2\x2\x9AE\x9AD\x3\x2\x2\x2\x9AF\x10B\x3\x2"+
		"\x2\x2\x9B0\x9B1\t\x13\x2\x2\x9B1\x10D\x3\x2\x2\x2\x9B2\x9B5\x5\xFC\x7F"+
		"\x2\x9B3\x9B5\x5\x102\x82\x2\x9B4\x9B2\x3\x2\x2\x2\x9B4\x9B3\x3\x2\x2"+
		"\x2\x9B5\x9BE\x3\x2\x2\x2\x9B6\x9B8\x5\x128\x95\x2\x9B7\x9B6\x3\x2\x2"+
		"\x2\x9B7\x9B8\x3\x2\x2\x2\x9B8\x9B9\x3\x2\x2\x2\x9B9\x9BB\a\xC1\x2\x2"+
		"\x9BA\x9BC\x5\x128\x95\x2\x9BB\x9BA\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2\x2"+
		"\x9BC\x9BD\x3\x2\x2\x2\x9BD\x9BF\a\xC8\x2\x2\x9BE\x9B7\x3\x2\x2\x2\x9BE"+
		"\x9BF\x3\x2\x2\x2\x9BF\x10F\x3\x2\x2\x2\x9C0\x9C1\t\x14\x2\x2\x9C1\x111"+
		"\x3\x2\x2\x2\x9C2\x9C3\t\x15\x2\x2\x9C3\x113\x3\x2\x2\x2\x9C4\x9C5\t\x16"+
		"\x2\x2\x9C5\x115\x3\x2\x2\x2\x9C6\x9C8\x5\x128\x95\x2\x9C7\x9C6\x3\x2"+
		"\x2\x2\x9C7\x9C8\x3\x2\x2\x2\x9C8\x9D0\x3\x2\x2\x2\x9C9\x9CB\a\xD7\x2"+
		"\x2\x9CA\x9C9\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CA\x3\x2\x2\x2"+
		"\x9CC\x9CD\x3\x2\x2\x2\x9CD\x9D1\x3\x2\x2\x2\x9CE\x9D1\x5\x11C\x8F\x2"+
		"\x9CF\x9D1\x5\x11A\x8E\x2\x9D0\x9CA\x3\x2\x2\x2\x9D0\x9CE\x3\x2\x2\x2"+
		"\x9D0\x9CF\x3\x2\x2\x2\x9D1\x9D3\x3\x2\x2\x2\x9D2\x9D4\x5\x128\x95\x2"+
		"\x9D3\x9D2\x3\x2\x2\x2\x9D3\x9D4\x3\x2\x2\x2\x9D4\x9DA\x3\x2\x2\x2\x9D5"+
		"\x9D7\x5\x128\x95\x2\x9D6\x9D5\x3\x2\x2\x2\x9D6\x9D7\x3\x2\x2\x2\x9D7"+
		"\x9D8\x3\x2\x2\x2\x9D8\x9DA\x5\x11E\x90\x2\x9D9\x9C7\x3\x2\x2\x2\x9D9"+
		"\x9D6\x3\x2\x2\x2\x9DA\x117\x3\x2\x2\x2\x9DB\x9E4\x5\x116\x8C\x2\x9DC"+
		"\x9DE\x5\x128\x95\x2\x9DD\x9DC\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE"+
		"\x9DF\x3\x2\x2\x2\x9DF\x9E1\a\x4\x2\x2\x9E0\x9E2\x5\x128\x95\x2\x9E1\x9E0"+
		"\x3\x2\x2\x2\x9E1\x9E2\x3\x2\x2\x2\x9E2\x9E4\x3\x2\x2\x2\x9E3\x9DB\x3"+
		"\x2\x2\x2\x9E3\x9DD\x3\x2\x2\x2\x9E4\x9E7\x3\x2\x2\x2\x9E5\x9E3\x3\x2"+
		"\x2\x2\x9E5\x9E6\x3\x2\x2\x2\x9E6\x119\x3\x2\x2\x2\x9E7\x9E5\x3\x2\x2"+
		"\x2\x9E8\x9E9\a\xD8\x2\x2\x9E9\x11B\x3\x2\x2\x2\x9EA\x9EB\a\xD9\x2\x2"+
		"\x9EB\x11D\x3\x2\x2\x2\x9EC\x9EE\a\xDA\x2\x2\x9ED\x9EF\x5\x120\x91\x2"+
		"\x9EE\x9ED\x3\x2\x2\x2\x9EF\x9F0\x3\x2\x2\x2\x9F0\x9EE\x3\x2\x2\x2\x9F0"+
		"\x9F1\x3\x2\x2\x2\x9F1\x11F\x3\x2\x2\x2\x9F2\x9F3\a\t\x2\x2\x9F3\x9F5"+
		"\x5\x122\x92\x2\x9F4\x9F6\x5\x124\x93\x2\x9F5\x9F4\x3\x2\x2\x2\x9F5\x9F6"+
		"\x3\x2\x2\x2\x9F6\x121\x3\x2\x2\x2\x9F7\x9F8\a\xDD\x2\x2\x9F8\x123\x3"+
		"\x2\x2\x2\x9F9\x9FA\x5\x128\x95\x2\x9FA\x9FC\x5\x126\x94\x2\x9FB\x9FD"+
		"\x5\x128\x95\x2\x9FC\x9FB\x3\x2\x2\x2\x9FC\x9FD\x3\x2\x2\x2\x9FD\xA37"+
		"\x3\x2\x2\x2\x9FE\x9FF\x5\x128\x95\x2\x9FF\xA08\x5\x126\x94\x2\xA00\xA02"+
		"\x5\x128\x95\x2\xA01\xA00\x3\x2\x2\x2\xA01\xA02\x3\x2\x2\x2\xA02\xA03"+
		"\x3\x2\x2\x2\xA03\xA05\a\x3\x2\x2\xA04\xA06\x5\x128\x95\x2\xA05\xA04\x3"+
		"\x2\x2\x2\xA05\xA06\x3\x2\x2\x2\xA06\xA07\x3\x2\x2\x2\xA07\xA09\x5\x126"+
		"\x94\x2\xA08\xA01\x3\x2\x2\x2\xA09\xA0A\x3\x2\x2\x2\xA0A\xA08\x3\x2\x2"+
		"\x2\xA0A\xA0B\x3\x2\x2\x2\xA0B\xA0D\x3\x2\x2\x2\xA0C\xA0E\x5\x128\x95"+
		"\x2\xA0D\xA0C\x3\x2\x2\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E\xA37\x3\x2\x2\x2"+
		"\xA0F\xA11\x5\x128\x95\x2\xA10\xA0F\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2"+
		"\xA11\xA12\x3\x2\x2\x2\xA12\xA14\a\xC1\x2\x2\xA13\xA15\x5\x128\x95\x2"+
		"\xA14\xA13\x3\x2\x2\x2\xA14\xA15\x3\x2\x2\x2\xA15\xA16\x3\x2\x2\x2\xA16"+
		"\xA18\x5\x126\x94\x2\xA17\xA19\x5\x128\x95\x2\xA18\xA17\x3\x2\x2\x2\xA18"+
		"\xA19\x3\x2\x2\x2\xA19\xA1A\x3\x2\x2\x2\xA1A\xA1C\a\xC8\x2\x2\xA1B\xA1D"+
		"\x5\x128\x95\x2\xA1C\xA1B\x3\x2\x2\x2\xA1C\xA1D\x3\x2\x2\x2\xA1D\xA37"+
		"\x3\x2\x2\x2\xA1E\xA20\x5\x128\x95\x2\xA1F\xA1E\x3\x2\x2\x2\xA1F\xA20"+
		"\x3\x2\x2\x2\xA20\xA21\x3\x2\x2\x2\xA21\xA22\a\xC1\x2\x2\xA22\xA2B\x5"+
		"\x126\x94\x2\xA23\xA25\x5\x128\x95\x2\xA24\xA23\x3\x2\x2\x2\xA24\xA25"+
		"\x3\x2\x2\x2\xA25\xA26\x3\x2\x2\x2\xA26\xA28\a\x3\x2\x2\xA27\xA29\x5\x128"+
		"\x95\x2\xA28\xA27\x3\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2A\x3\x2\x2"+
		"\x2\xA2A\xA2C\x5\x126\x94\x2\xA2B\xA24\x3\x2\x2\x2\xA2C\xA2D\x3\x2\x2"+
		"\x2\xA2D\xA2B\x3\x2\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA30\x3\x2\x2\x2"+
		"\xA2F\xA31\x5\x128\x95\x2\xA30\xA2F\x3\x2\x2\x2\xA30\xA31\x3\x2\x2\x2"+
		"\xA31\xA32\x3\x2\x2\x2\xA32\xA34\a\xC8\x2\x2\xA33\xA35\x5\x128\x95\x2"+
		"\xA34\xA33\x3\x2\x2\x2\xA34\xA35\x3\x2\x2\x2\xA35\xA37\x3\x2\x2\x2\xA36"+
		"\x9F9\x3\x2\x2\x2\xA36\x9FE\x3\x2\x2\x2\xA36\xA10\x3\x2\x2\x2\xA36\xA1F"+
		"\x3\x2\x2\x2\xA37\x125\x3\x2\x2\x2\xA38\xA3B\a\xDD\x2\x2\xA39\xA3B\x5"+
		"\x10A\x86\x2\xA3A\xA38\x3\x2\x2\x2\xA3A\xA39\x3\x2\x2\x2\xA3B\x127\x3"+
		"\x2\x2\x2\xA3C\xA3E\t\x17\x2\x2\xA3D\xA3C\x3\x2\x2\x2\xA3E\xA3F\x3\x2"+
		"\x2\x2\xA3F\xA3D\x3\x2\x2\x2\xA3F\xA40\x3\x2\x2\x2\xA40\x129\x3\x2\x2"+
		"\x2\x1C1\x12E\x134\x137\x13B\x13F\x143\x147\x14D\x150\x15A\x15C\x162\x16A"+
		"\x171\x177\x180\x188\x197\x1A1\x1A9\x1B3\x1B9\x1BD\x1C1\x1C5\x1CA\x1D3"+
		"\x21A\x220\x224\x227\x237\x23B\x240\x243\x248\x24E\x252\x257\x25C\x261"+
		"\x264\x268\x26E\x272\x279\x27F\x283\x286\x28B\x296\x299\x29C\x2A1\x2A7"+
		"\x2AB\x2B0\x2B7\x2BD\x2C1\x2C9\x2CD\x2D1\x2D5\x2D9\x2DE\x2E9\x2F0\x2F8"+
		"\x2FF\x308\x30F\x313\x316\x31E\x322\x327\x331\x337\x341\x345\x34F\x357"+
		"\x35D\x363\x368\x36B\x36F\x37B\x37F\x385\x387\x38C\x390\x394\x398\x39B"+
		"\x39E\x3A1\x3A4\x3A8\x3B0\x3B4\x3B7\x3BA\x3BE\x3D6\x3DC\x3E0\x3E4\x3ED"+
		"\x3F8\x3FD\x407\x40B\x410\x418\x41C\x420\x428\x42C\x438\x43C\x444\x446"+
		"\x44C\x450\x456\x45A\x45E\x478\x482\x486\x48B\x496\x49A\x49F\x4AE\x4B3"+
		"\x4BC\x4C0\x4C4\x4C8\x4CC\x4CF\x4D3\x4D7\x4DA\x4DE\x4E1\x4E5\x4E7\x4EC"+
		"\x4F0\x4F4\x4F8\x4FA\x500\x504\x507\x50C\x510\x516\x519\x51C\x521\x525"+
		"\x52C\x530\x536\x539\x53D\x544\x548\x54E\x551\x555\x55D\x561\x564\x567"+
		"\x56B\x573\x577\x57B\x57D\x580\x586\x58C\x590\x594\x599\x59E\x5A2\x5A6"+
		"\x5AC\x5B4\x5B6\x5C2\x5C6\x5CE\x5D2\x5DA\x5DE\x5E2\x5E6\x5EA\x5EE\x5F6"+
		"\x5FA\x607\x60E\x612\x61D\x624\x629\x62D\x632\x635\x63B\x63F\x642\x648"+
		"\x64C\x654\x658\x661\x665\x669\x66D\x670\x674\x67A\x67E\x685\x68E\x695"+
		"\x699\x69C\x69F\x6A2\x6A7\x6B3\x6BD\x6C1\x6C9\x6CB\x6D0\x6D5\x6DA\x6DE"+
		"\x6E4\x6E9\x6F0\x6F4\x6FA\x6FE\x702\x707\x70B\x710\x714\x719\x71D\x722"+
		"\x726\x72B\x72F\x734\x738\x73D\x741\x746\x74A\x74F\x753\x758\x75C\x761"+
		"\x765\x768\x76A\x770\x775\x77B\x77F\x784\x789\x78D\x791\x793\x797\x799"+
		"\x79C\x7A1\x7A8\x7B0\x7B4\x7BF\x7C3\x7CB\x7CF\x7D2\x7D5\x7DB\x7E1\x7E4"+
		"\x7E8\x7EC\x7F0\x7F3\x7FB\x801\x806\x809\x80D\x811\x815\x818\x820\x825"+
		"\x828\x82B\x82F\x833\x838\x83B\x83E\x841\x849\x850\x853\x85B\x862\x866"+
		"\x869\x86C\x86F\x877\x87C\x87F\x882\x886\x88A\x88C\x890\x893\x896\x89E"+
		"\x8A3\x8A7\x8AB\x8AE\x8B1\x8B4\x8BC\x8C1\x8C5\x8C8\x8CD\x8D0\x8D4\x8D8"+
		"\x8DD\x8E1\x8E4\x8E8\x8EC\x8F0\x8F3\x8F9\x8FD\x901\x905\x909\x90E\x911"+
		"\x914\x91A\x91E\x922\x926\x929\x92D\x930\x933\x936\x939\x93C\x940\x946"+
		"\x94A\x94F\x957\x95D\x95F\x963\x967\x96B\x96E\x975\x977\x97D\x97F\x981"+
		"\x98A\x98F\x993\x997\x99B\x99E\x9A2\x9AE\x9B4\x9B7\x9BB\x9BE\x9C7\x9CC"+
		"\x9D0\x9D3\x9D6\x9D9\x9DD\x9E1\x9E3\x9E5\x9F0\x9F5\x9FC\xA01\xA05\xA0A"+
		"\xA0D\xA10\xA14\xA18\xA1C\xA1F\xA24\xA28\xA2D\xA30\xA34\xA36\xA3A\xA3F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
