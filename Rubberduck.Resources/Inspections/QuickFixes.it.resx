<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessSheetUsingCodeNameQuickFix" xml:space="preserve">
    <value>Fare riferimento al foglio accessibile staticamente tramite il nome in codice</value>
  </data>
  <data name="EmptyStringLiteralInspectionQuickFix" xml:space="preserve">
    <value>Sostituire le stringhe vuote literal con la costante 'vbNullString'</value>
  </data>
  <data name="DeclareAsExplicitTypeQuickFix" xml:space="preserve">
    <value>Dichiara come Tipo Esplicito</value>
  </data>
  <data name="QualifyWithMeQuickFix" xml:space="preserve">
    <value>Qualificare il riferimento con 'Me'.</value>
  </data>
  <data name="IgnoreInModuleQuickFix" xml:space="preserve">
    <value>Ignora il modulo</value>
  </data>
  <data name="IgnoreOnce" xml:space="preserve">
    <value>Ignora una volta</value>
  </data>
  <data name="AddAttributeAnnotationQuickFix" xml:space="preserve">
    <value>Aggiungi attributo annotazione</value>
  </data>
  <data name="AddMissingAttributeQuickFix" xml:space="preserve">
    <value>Aggiungi attributo mancante</value>
  </data>
  <data name="AddStepOneQuickFix" xml:space="preserve">
    <value>Aggiungi una clausola 'Step' esplicita</value>
  </data>
  <data name="AdjustAttributeAnnotationQuickFix" xml:space="preserve">
    <value>Modifica l'annotazione dell'attributo</value>
  </data>
  <data name="AdjustAttributeValuesQuickFix" xml:space="preserve">
    <value>Modifica i valori degli attributi</value>
  </data>
  <data name="ApplicationWorksheetFunctionQuickFix" xml:space="preserve">
    <value>Usare il metodo Application.WorksheetFunction in associazione anticipata.</value>
  </data>
  <data name="ApplyQuickFixesFailedMessage" xml:space="preserve">
    <value>Impossibile applicare la correzione rapida.</value>
  </data>
  <data name="ApplyQuickFixFailedCaption" xml:space="preserve">
    <value>Errore dell'applicazione di correzione rapida</value>
  </data>
  <data name="AssignedByValParameterMakeLocalCopyQuickFix" xml:space="preserve">
    <value>Crea e utilizza una copia locale del parametro</value>
  </data>
  <data name="ChangeDimToPrivateQuickFix" xml:space="preserve">
    <value>Sostituisci 'Dim' con 'Private'</value>
  </data>
  <data name="ConvertFunctionToProcedureQuickFix" xml:space="preserve">
    <value>Converti la funzione in procedura</value>
  </data>
  <data name="DeclareAsExplicitVariantQuickFix" xml:space="preserve">
    <value>Dichiara come Variant esplicito</value>
  </data>
  <data name="EncapsulatePublicFieldInspectionQuickFix" xml:space="preserve">
    <value>Incapsula il campo '{0}' con una proprietà</value>
  </data>
  <data name="ExpandBangNotationQuickFix" xml:space="preserve">
    <value>Sostituisci la notazione il punto esclamativo con l'accesso esplicito</value>
  </data>
  <data name="ExpandDefaultMemberQuickFix" xml:space="preserve">
    <value>Rendi esplicito l'accesso al membro predefinito</value>
  </data>
  <data name="ImplicitByRefModifierQuickFix" xml:space="preserve">
    <value>Passa il parametro per riferimento in modo esplicito</value>
  </data>
  <data name="IntegerDataTypeQuickFix" xml:space="preserve">
    <value>Cambia il tipo in 'Long'</value>
  </data>
  <data name="IntroduceGetAccessorQuickFix" xml:space="preserve">
    <value>Aggiungi l'accessor 'Property Get'</value>
  </data>
  <data name="IntroduceLocalVariableQuickFix" xml:space="preserve">
    <value>Introduci una variabile locale</value>
  </data>
  <data name="InvalidContextTypeInspectionFix" xml:space="preserve">
    <value>Il tipo di contesto '{0}' non è valido per {1}.</value>
  </data>
  <data name="IsMissingOnInappropriateArgumentQuickFix" xml:space="preserve">
    <value>Modificare la chiamata 'IsMissing' per verificare il valore predefinito.</value>
  </data>
  <data name="MakeSingleLineParameterQuickFix" xml:space="preserve">
    <value>Scrivi la variabile su una riga</value>
  </data>
  <data name="ObsoleteGlobalInspectionQuickFix" xml:space="preserve">
    <value>Sostituisci il modificatore di accesso 'Global' con 'Public'</value>
  </data>
  <data name="OptionExplicitQuickFix" xml:space="preserve">
    <value>Specificare 'Option Explicit'</value>
  </data>
  <data name="PassParameterByReferenceQuickFix" xml:space="preserve">
    <value>Passa parametro per riferimento</value>
  </data>
  <data name="PassParameterByValueQuickFix" xml:space="preserve">
    <value>Passa parametro per valore</value>
  </data>
  <data name="ProcedureShouldBeFunctionInspectionQuickFix" xml:space="preserve">
    <value>Implementa come funzione e aggiorna gli usi.</value>
  </data>
  <data name="RedundantByRefModifierQuickFix" xml:space="preserve">
    <value>Rimuovi il modificatore 'ByRef'</value>
  </data>
  <data name="RemoveAnnotationQuickFix" xml:space="preserve">
    <value>Rimuovi annotazione</value>
  </data>
  <data name="RemoveAttributeQuickFix" xml:space="preserve">
    <value>Rimuovi attributo</value>
  </data>
  <data name="RemoveCommentQuickFix" xml:space="preserve">
    <value>Rimuovi commento</value>
  </data>
  <data name="RemoveDuplicatedAnnotationQuickFix" xml:space="preserve">
    <value>Rimuovi annotazione duplicata</value>
  </data>
  <data name="RemoveEmptyElseBlockQuickFix" xml:space="preserve">
    <value>Rimuovi blocco 'Else' vuoto</value>
  </data>
  <data name="RemoveEmptyIfBlockQuickFix" xml:space="preserve">
    <value>Rimuovi blocco If vuoto</value>
  </data>
  <data name="RemoveLocalErrorQuickFix" xml:space="preserve">
    <value>Sostituisci 'On Local Error' con 'On Error'</value>
  </data>
  <data name="RemoveObsoleteStatementQuickFix" xml:space="preserve">
    <value>Rimuovi istruzione obsoleta</value>
  </data>
  <data name="RemoveOptionBaseStatementQuickFix" xml:space="preserve">
    <value>Rimuovi istruzione 'Option Base'</value>
  </data>
  <data name="RemoveStepOneQuickFix" xml:space="preserve">
    <value>Rimuovere la clausola 'Step' ridondante</value>
  </data>
  <data name="RemoveStopKeywordQuickFix" xml:space="preserve">
    <value>Rimuovi l'utilizzo della parola chiave 'Stop'</value>
  </data>
  <data name="RemoveTypeHintsQuickFix" xml:space="preserve">
    <value>Rimuovi i suggerimenti sul tipo</value>
  </data>
  <data name="RemoveUnassignedIdentifierQuickFix" xml:space="preserve">
    <value>Rimuovi la variabile non assegnata</value>
  </data>
  <data name="RemoveUnassignedVariableUsageQuickFix" xml:space="preserve">
    <value>Rimuovi utilizzo (interrompe il codice)</value>
  </data>
  <data name="RemoveUnusedDeclarationQuickFix" xml:space="preserve">
    <value>Rimuovi la dichiarazione inutilizzata</value>
  </data>
  <data name="RemoveUnusedParameterQuickFix" xml:space="preserve">
    <value>Rimuovi il parametro inutilizzato</value>
  </data>
  <data name="ReplaceCommentMarkerQuickFix" xml:space="preserve">
    <value>Sostituisci l'utilizzo di 'Rem' con un indicatore di commento a virgolette singole</value>
  </data>
  <data name="ReplaceIfElseWithConditionalStatementQuickFix" xml:space="preserve">
    <value>Sostituisci If/Else con una singola assegnazione</value>
  </data>
  <data name="ReplaceObsoleteErrorStatementQuickFix" xml:space="preserve">
    <value>Sostituisci 'Error' con 'Err.Raise'</value>
  </data>
  <data name="ReplaceWhileWendWithDoWhileLoopQuickFix" xml:space="preserve">
    <value>Sostituisci 'While...Wend' con 'Do While...Loop'</value>
  </data>
  <data name="SetExplicitVariantReturnTypeQuickFix" xml:space="preserve">
    <value>Restituisci Variant esplicito</value>
  </data>
  <data name="SetObjectVariableQuickFix" xml:space="preserve">
    <value>Usa la parola chiave 'Set'</value>
  </data>
  <data name="SpecifyExplicitPublicModifierQuickFix" xml:space="preserve">
    <value>Specificare esplicitamente il modificatore di accesso pubblico</value>
  </data>
  <data name="SplitMultipleDeclarationsQuickFix" xml:space="preserve">
    <value>Separare più dichiarazioni in più istruzioni</value>
  </data>
  <data name="StaleModuleFailureReason" xml:space="preserve">
    <value>Un modulo interessato è stato modificato dall'ultima analisi.</value>
  </data>
  <data name="SynchronizeAttributesQuickFix" xml:space="preserve">
    <value>Sincronizza attributi/annotazioni nel modulo</value>
  </data>
  <data name="UnhandledOnErrorResumeNextInspectionQuickFix" xml:space="preserve">
    <value>Introdurre la subroutine di gestione degli errori</value>
  </data>
  <data name="UseTypedFunctionQuickFix" xml:space="preserve">
    <value>Cambia '{0}' con '{1}'</value>
  </data>
  <data name="WhiteListIdentifierQuickFix" xml:space="preserve">
    <value>Aggiungi alla lista bianca</value>
  </data>
  <data name="AnnotateEntryPointQuickFix" xml:space="preserve">
    <value>Aggiungi un'annotazione @EntryPoint</value>
  </data>
  <data name="RemoveRedundantOptionStatementQuickFix" xml:space="preserve">
    <value>Rimuovi istruzione '{0}'</value>
  </data>
  <data name="ReplaceQualifierWithMeQuickFix" xml:space="preserve">
    <value>Sostituire il qualificatore con 'Me'</value>
  </data>
</root>