<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EmptyStringLiteralInspection" xml:space="preserve">
    <value>'vbNullString' preferred to empty string literals.</value>
  </data>
  <data name="EncapsulatePublicFieldInspection" xml:space="preserve">
    <value>Public field '{0}' breaks encapsulation.</value>
  </data>
  <data name="MoveFieldCloserToUsageInspection" xml:space="preserve">
    <value>Move module-level variable '{0}' to a smaller scope.</value>
  </data>
  <data name="ProcedureCanBeWrittenAsFunctionInspection" xml:space="preserve">
    <value>Procedure '{0}' can be written as a function.</value>
    <comment>{0} Procedure name</comment>
  </data>
  <data name="IdentifierNameInspection" xml:space="preserve">
    <value>Consider renaming {0} '{1}'.</value>
    <comment>{0} declaration type; {1} identifier name</comment>
  </data>
  <data name="WriteOnlyPropertyInspection" xml:space="preserve">
    <value>Property '{0}' has no getter.</value>
    <comment>{0} Property name</comment>
  </data>
  <data name="SelfAssignedDeclarationInspection" xml:space="preserve">
    <value>Object reference '{0}' is auto-instantiated.</value>
  </data>
  <data name="FunctionReturnValueNotUsedInspection" xml:space="preserve">
    <value>Return value of function '{0}' is never used.</value>
  </data>
  <data name="AssignedByValParameterInspection" xml:space="preserve">
    <value>Parameter '{0}' is passed 'ByVal' and assigned a value.</value>
  </data>
  <data name="IdentifierNotUsedInspection" xml:space="preserve">
    <value>{0} '{1}' is not used.</value>
  </data>
  <data name="ImplicitByRefModifierInspection" xml:space="preserve">
    <value>Parameter '{0}' is implicitly passed by reference.</value>
  </data>
  <data name="ImplicitPublicMemberInspection" xml:space="preserve">
    <value>Member '{0}' is implicitly public.</value>
  </data>
  <data name="ImplicitVariantDeclarationInspection" xml:space="preserve">
    <value>{0} '{1}' is implicitly 'Variant'.</value>
  </data>
  <data name="ImplicitVariantReturnTypeInspection" xml:space="preserve">
    <value>Return type of member '{0}' is implicitly 'Variant'.</value>
  </data>
  <data name="MultilineParameterInspection" xml:space="preserve">
    <value>Parameter '{0}' is specified on multiple lines.</value>
  </data>
  <data name="NonReturningFunctionInspection" xml:space="preserve">
    <value>Return value for member '{0}' is never assigned.</value>
  </data>
  <data name="ObsoleteGlobalInspection" xml:space="preserve">
    <value>{0} '{1}' uses obsolete 'Global' access modifier.</value>
  </data>
  <data name="ParameterCanBeByValInspection" xml:space="preserve">
    <value>Parameter '{0}' can be passed by value.</value>
  </data>
  <data name="ParameterNotUsedInspection" xml:space="preserve">
    <value>Parameter '{0}' is never used.</value>
  </data>
  <data name="ProcedureShouldBeFunctionInspection" xml:space="preserve">
    <value>Procedure '{0}' can be written as a function.</value>
  </data>
  <data name="UnassignedVariableUsageInspection" xml:space="preserve">
    <value>Variable '{0}' is used but not assigned.</value>
  </data>
  <data name="OptionExplicitInspection" xml:space="preserve">
    <value>'Option Explicit' is not specified in '{0}'.</value>
  </data>
  <data name="VariableNotAssignedInspection" xml:space="preserve">
    <value>Variable '{0}' is not assigned.</value>
  </data>
  <data name="ObjectVariableNotSetInspection" xml:space="preserve">
    <value>Object variable '{0}' is assigned without the 'Set' keyword.</value>
    <comment>{0} Variable name</comment>
  </data>
  <data name="DefaultProjectNameInspection" xml:space="preserve">
    <value>Project '{0}' has default name.</value>
  </data>
  <data name="ObsoleteCallStatementInspection" xml:space="preserve">
    <value>Assignment uses obsolete 'Call' modifier.</value>
  </data>
  <data name="ObsoleteCommentSyntaxInspection" xml:space="preserve">
    <value>Comment uses obsolete 'Rem' marker.</value>
  </data>
  <data name="ObsoleteLetStatementInspection" xml:space="preserve">
    <value>Assignment uses obsolete 'Let' modifier.</value>
  </data>
  <data name="ImplicitActiveSheetReferenceInspection" xml:space="preserve">
    <value>Member '{0}' implicitly references 'ActiveSheet'.</value>
  </data>
  <data name="ImplicitActiveWorkbookReferenceInspection" xml:space="preserve">
    <value>Member '{0}' implicitly references 'ActiveWorkbook'.</value>
  </data>
  <data name="MultipleDeclarationsInspection" xml:space="preserve">
    <value>Instruction contains multiple declarations.</value>
  </data>
  <data name="ObsoleteTypeHintInspection" xml:space="preserve">
    <value>{0} of {1} '{2}' uses an obsolete type hint.</value>
  </data>
  <data name="OptionBaseInspection" xml:space="preserve">
    <value>Component '{0}' uses 'Option Base 1'.</value>
  </data>
  <data name="UntypedFunctionUsageInspection" xml:space="preserve">
    <value>Replace function '{0}' with existing typed function.</value>
  </data>
  <data name="VariableTypeNotDeclaredInspection" xml:space="preserve">
    <value>{0} '{1}' is implicitly 'Variant'.</value>
  </data>
  <data name="MissingAnnotationArgumentInspection" xml:space="preserve">
    <value>Expression '{0}' was expected to contain a parameter, but none was specified.</value>
  </data>
  <data name="ModuleScopeDimKeywordInspection" xml:space="preserve">
    <value>Module-level variable '{0}' is declared with the 'Dim' keyword.</value>
  </data>
  <data name="UndeclaredVariableInspection" xml:space="preserve">
    <value>Local variable '{0}' is not declared.</value>
    <comment>{0} variable name</comment>
  </data>
  <data name="AggregateInspection" xml:space="preserve">
    <value>{0} ({1} results).</value>
    <comment>{0} inspection description, {1} result count</comment>
  </data>
  <data name="MemberNotOnInterfaceInspection" xml:space="preserve">
    <value>Member '{0}' was not found on the compile-time interface for type '{1}'.</value>
    <comment>{0} Member used, {1} type being accessed.</comment>
  </data>
  <data name="HostSpecificExpressionInspection" xml:space="preserve">
    <value>Expression '{0}' cannot be validated at compile-time.</value>
  </data>
  <data name="ApplicationWorksheetFunctionInspection" xml:space="preserve">
    <value>Use of late bound 'Application.{0}' member.</value>
    <comment>{0} Member name</comment>
  </data>
  <data name="OptionBaseZeroInspection" xml:space="preserve">
    <value>Component '{0}' uses 'Option Base 0'.</value>
  </data>
  <data name="IllegalAnnotationInspection" xml:space="preserve">
    <value>Annotation '{0}' is illegal in this context.</value>
    <comment>{0} annotation name</comment>
  </data>
  <data name="MissingAttributeInspection" xml:space="preserve">
    <value>Module or member '{0}' has a '{1}' annotation, but no corresponding attribute.</value>
    <comment>{0} module/member; {1} specified annotation</comment>
  </data>
  <data name="EmptyIfBlockInspection" xml:space="preserve">
    <value>'If' block contains no executable statements.</value>
  </data>
  <data name="RedundantOptionInspection" xml:space="preserve">
    <value>'{0}' has no effect.</value>
    <comment>'{0}' the whole ModuleOptionContext text</comment>
  </data>
  <data name="RedundantByRefModifierInspection" xml:space="preserve">
    <value>Parameter '{0}' has a redundant 'ByRef' modifier.</value>
  </data>
  <data name="LineLabelNotUsedInspection" xml:space="preserve">
    <value>Line label '{0}' is not used.</value>
    <comment>{0} line label name</comment>
  </data>
  <data name="EmptyElseBlockInspection" xml:space="preserve">
    <value>'Else' block contains no executable statements.</value>
  </data>
  <data name="IntegerDataTypeInspection" xml:space="preserve">
    <value>{0} '{1}' is declared as 'Integer'.</value>
  </data>
  <data name="StopKeywordInspection" xml:space="preserve">
    <value>'Stop' keyword halts execution.</value>
    <comment>{0} Property name</comment>
  </data>
  <data name="EmptyCaseBlockInspection" xml:space="preserve">
    <value>'Case' block contains no executable statements.</value>
  </data>
  <data name="EmptyDoWhileBlockInspection" xml:space="preserve">
    <value>'Do...While' loop contains no executable statements.</value>
  </data>
  <data name="EmptyForEachBlockInspection" xml:space="preserve">
    <value>'For...Each' loop contains no executable statements.</value>
  </data>
  <data name="EmptyForLoopBlockInspection" xml:space="preserve">
    <value>'For...Next' loop contains no executable statements.</value>
  </data>
  <data name="EmptyWhileWendBlockInspection" xml:space="preserve">
    <value>'While...Wend' loop contains no executable statements.</value>
  </data>
  <data name="ShadowedDeclarationInspection" xml:space="preserve">
    <value>{0} '{1}' hides {2} '{3}'.</value>
  </data>
  <data name="ObsoleteErrorSyntaxInspection" xml:space="preserve">
    <value>A run-time error is raised using the obsolete 'Error' statement.</value>
  </data>
  <data name="BooleanAssignedInIfElseInspection" xml:space="preserve">
    <value>Boolean literal '{0}' assigned in conditional.</value>
  </data>
  <data name="EmptyModuleInspection" xml:space="preserve">
    <value>Module/class '{0}' is empty.</value>
  </data>
  <data name="UnreachableCaseInspection" xml:space="preserve">
    <value>Case clause '{0}' cannot be reached.</value>
  </data>
  <data name="UnreachableCaseInspection_CaseElse" xml:space="preserve">
    <value>'Case Else' statement is unreachable</value>
  </data>
  <data name="UnreachableCaseInspection_TypeMismatch" xml:space="preserve">
    <value>'Case' statement will cause run-time error 13 (type mismatch).</value>
  </data>
  <data name="UnreachableCaseInspection_Unreachable" xml:space="preserve">
    <value>'Case' statement is unreachable</value>
  </data>
  <data name="UnhandledOnErrorResumeNextInspection" xml:space="preserve">
    <value>Errors are ignored but never handled again.</value>
  </data>
  <data name="DefTypeStatementInspection" xml:space="preserve">
    <value>Consider the explicit use of 'As {0}' instead of '{1}'.</value>
  </data>
  <data name="StepOneIsRedundantInspection" xml:space="preserve">
    <value>1 is the default step in a 'For...Next' loop and therefore is redundant.</value>
  </data>
  <data name="StepIsNotSpecifiedInspection" xml:space="preserve">
    <value>'Step' not specified.</value>
  </data>
  <data name="SheetAccessedUsingStringInspection" xml:space="preserve">
    <value>Statically accessible sheet can be referred to by its code name.</value>
  </data>
  <data name="ObsoleteMemberUsageInspection" xml:space="preserve">
    <value>Consider replacing the call to '{0}'. {1}</value>
    <comment>{1} Replacement documentation</comment>
  </data>
  <data name="ObsoleteCallingConventionInspection" xml:space="preserve">
    <value>'{0}' is declared using the obsolete 'CDecl' calling convention.</value>
    <comment>{0} Procedure name</comment>
  </data>
  <data name="UnreachableCaseInspection_InherentlyUnreachable" xml:space="preserve">
    <value>'Case' statement Range Clauses must be expressed '[x] To [y]' where [x] is less than or equal to [y]'</value>
  </data>
  <data name="UnreachableCaseInspection_Overflow" xml:space="preserve">
    <value>'Case' statement will cause run-time error 6 (Overflow)</value>
  </data>
  <data name="DuplicatedAnnotationInspection" xml:space="preserve">
    <value>Annotation '{0}' is duplicated.</value>
  </data>
  <data name="ModuleWithoutFolderInspection" xml:space="preserve">
    <value>Module '{0}' has no '@Folder' annotation</value>
  </data>
  <data name="OnLocalErrorInspection" xml:space="preserve">
    <value>'On Local Error' statement detected.</value>
  </data>
  <data name="IsMissingOnInappropriateArgumentInspection" xml:space="preserve">
    <value>'IsMissing' will always return false with the passed argument.</value>
  </data>
  <data name="IsMissingWithNonArgumentParameterInspection" xml:space="preserve">
    <value>'IsMissing' is passed an expression that is not an argument to the enclosing procedure.</value>
  </data>
  <data name="AssignmentNotUsedInspection" xml:space="preserve">
    <value>An assignment is immediately overridden by another assignment or is never referenced.</value>
  </data>
  <data name="UnderscoreInPublicClassModuleMemberInspection" xml:space="preserve">
    <value>Public member name '{0}' contains an underscore.</value>
  </data>
  <data name="ExcelMemberMayReturnNothingInspection" xml:space="preserve">
    <value>Result of '{0}' call is not tested for 'Nothing'.</value>
    <comment>{0} Member identifier</comment>
  </data>
  <data name="ExcelUdfNameIsValidCellReferenceInspection" xml:space="preserve">
    <value>'{0}' is hidden by a valid Excel cell reference.</value>
    <comment>{0} Function name</comment>
  </data>
  <data name="AttributeValueOutOfSyncInspection" xml:space="preserve">
    <value>The attribute value(s) for attribute {0} ({1}) are out of sync with the {2} annotation. </value>
    <comment>{0} attribute name, {1} attribute values, {2} annotation name</comment>
  </data>
  <data name="MissingMemberAnnotationInspection" xml:space="preserve">
    <value>Member '{0}' has a '{1}' attribute with value(s) '{2}', but no corresponding annotation.</value>
    <comment>{0} member; {1} specified attribute; {2} specified values</comment>
  </data>
  <data name="MissingModuleAnnotationInspection" xml:space="preserve">
    <value>Module '{0}' has a '{1}' attribute with value(s) '{2}', but no corresponding annotation.</value>
    <comment>{0} module; {1} specified attribute; {2} specified values</comment>
  </data>
  <data name="KeywordsUsedAsMemberInspection" xml:space="preserve">
    <value>Keyword used as an identifier for the member '{0}'</value>
    <comment>{0} Member name</comment>
  </data>
  <data name="LineContinuationBetweenKeywordsInspection" xml:space="preserve">
    <value>Line continuation(s) in unexpected places. </value>
  </data>
  <data name="NonBreakingSpaceIdentifierInspection" xml:space="preserve">
    <value>Non-breaking space encountered in identifier '{0}'</value>
    <comment>{0} Identifier</comment>
  </data>
  <data name="ThunderCode_Base" xml:space="preserve">
    <value>{0}
Andrew "ThunderFrame" Jackson would be proud! 
You're seeing this inspection result because there's no way that's real code and you're just pushing the limits of Rubberduck's parsing and resolving capabilities, right? ...RIGHT? 
In memoriam, 1972-2018</value>
    <comment>{0} ThunderCode easter egg inspection description</comment>
  </data>
  <data name="NegativeLineNumberInspection" xml:space="preserve">
    <value>Negative line number encountered</value>
  </data>
  <data name="OnErrorGoToMinusOneInspection" xml:space="preserve">
    <value>On Error GoTo -1 encountered</value>
  </data>
  <data name="ObsoleteWhileWendStatementInspection" xml:space="preserve">
    <value>'While...Wend' conditional loop can be written as a 'Do While...Loop' block.</value>
  </data>
  <data name="SetAssignmentWithIncompatibleObjectTypeInspection" xml:space="preserve">
    <value>To the variable '{0}' of declared type '{1}' a value is set assigned with the incompatible declared type '{2}'.  </value>
    <comment>{0} variable name, {1} variable declared type, {2} rhs declared type</comment>
  </data>
  <data name="EmptyMethodInspection" xml:space="preserve">
    <value>{0} '{1}' contains no executable statements.</value>
    <comment>{0} Method kind, {1} Method name</comment>
  </data>
  <data name="ImplementedInterfaceMemberInspection" xml:space="preserve">
    <value>Interface class module '{2}' contains a concrete implementation for {0} '{1}'.</value>
    <comment>{0} Method kind, {1} Method name, {2} interface class module name</comment>
  </data>
  <data name="ArgumentWithIncompatibleObjectTypeInspection" xml:space="preserve">
    <value>The argument '{2}' of type '{3}' is passed to the parameter '{0}' of the incompatible type '{1}'.</value>
    <comment>{0} parameter name, {1} parameter declared type, {2} argument expression text, {3} argument set type name</comment>
  </data>
  <data name="ValueRequiredInspection" xml:space="preserve">
    <value>In a context that requires a value type, the expression '{0}' of object type '{1}' is used that does not have a suitable default member.</value>
    <comment>{0} expression; {1} type</comment>
  </data>
  <data name="ProcedureRequiredInspection" xml:space="preserve">
    <value>In a context that requires a procedure, the expression '{0}' of object type '{1}' is used that does not have a suitable default member.</value>
    <comment>{0} expression; {1} type</comment>
  </data>
  <data name="DefaultMemberRequiredInspection" xml:space="preserve">
    <value>The expression '{0}' requires a default member access, but the type '{1}' does not have a suitable default member.</value>
    <comment>{0} expression; {1} type</comment>
  </data>
  <data name="UseOfBangNotationInspection" xml:space="preserve">
    <value>The expression '{0}' uses bang notation.</value>
    <comment>{0} expression</comment>
  </data>
  <data name="UseOfRecursiveBangNotationInspection" xml:space="preserve">
    <value>The expression '{0}' uses a recursive bang operator.</value>
    <comment>{0} expression</comment>
  </data>
  <data name="UseOfUnboundBangNotationInspection" xml:space="preserve">
    <value>The expression '{0}' uses an unbound bang operator.</value>
    <comment>{0} expression</comment>
  </data>
  <data name="ObjectWhereProcedureIsRequiredInspection" xml:space="preserve">
    <value>The expression '{0}' is used in a context that requires a procedure, which leads to a call to the default member '{1}'.</value>
    <comment>{0} expression; {1} default member</comment>
  </data>
  <data name="ObjectWhereProcedureIsRequiredInspection_Unbound" xml:space="preserve">
    <value>The expression '{0}' is used in a context that requires a procedure, which leads to a call to a default member that cannot be determined at compile time.</value>
    <comment>{0} expression</comment>
  </data>
  <data name="IndexedDefaultMemberAccessInspection" xml:space="preserve">
    <value>The expression '{0}' contains an indexed default member access to '{1}'.</value>
    <comment>{0} expression; {1} default member</comment>
  </data>
  <data name="IndexedRecursiveDefaultMemberAccessInspection" xml:space="preserve">
    <value>The expression '{0}' contains an indexed recursive default member access to '{1}'.</value>
    <comment>{0} expression; {1} default member</comment>
  </data>
  <data name="IndexedUnboundDefaultMemberAccessInspection" xml:space="preserve">
    <value>The expression '{0}' contains an indexed unbound default member access.</value>
    <comment>{0} expression</comment>
  </data>
  <data name="ImplicitDefaultMemberAccessInspection" xml:space="preserve">
    <value>On the expression '{0}', there is an implicit default member access to '{1}'.</value>
    <comment>{0} expression; {1} default member</comment>
  </data>
  <data name="ImplicitRecursiveDefaultMemberAccessInspection" xml:space="preserve">
    <value>On the expression '{0}', there is an implicit recursive default member access to '{1}'.</value>
    <comment>{0} expression; {1} default member</comment>
  </data>
  <data name="ImplicitUnboundDefaultMemberAccessInspection" xml:space="preserve">
    <value>On the expression '{0}', there is an implicit unbound default member access.</value>
    <comment>{0} expression</comment>
  </data>
</root>