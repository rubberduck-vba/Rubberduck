<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EmptyStringLiteralInspectionQuickFix" xml:space="preserve">
    <value>Remplacer "" par la constante 'vbNullString'</value>
  </data>
  <data name="EncapsulatePublicFieldInspectionQuickFix" xml:space="preserve">
    <value>Encapsuler le champ '{0}' avec une propriété</value>
  </data>
  <data name="IgnoreOnce" xml:space="preserve">
    <value>Ignorer à cet emplacement</value>
  </data>
  <data name="ProcedureShouldBeFunctionInspectionQuickFix" xml:space="preserve">
    <value>Implémenter comme une fonction, et mettre à jour les appels.</value>
  </data>
  <data name="ConvertFunctionToProcedureQuickFix" xml:space="preserve">
    <value>Convertir la fonction en procédure</value>
  </data>
  <data name="DeclareAsExplicitVariantQuickFix" xml:space="preserve">
    <value>Déclarer explicitement comme Variant</value>
  </data>
  <data name="MakeSingleLineParameterQuickFix" xml:space="preserve">
    <value>Déclarer la variable sur une seule ligne</value>
  </data>
  <data name="ObsoleteGlobalInspectionQuickFix" xml:space="preserve">
    <value>Remplacer le modificateur 'Global' par 'Public'</value>
  </data>
  <data name="OptionExplicitQuickFix" xml:space="preserve">
    <value>Spécifier 'Option Explicit'</value>
  </data>
  <data name="PassParameterByReferenceQuickFix" xml:space="preserve">
    <value>Passer le paramètre par référence</value>
  </data>
  <data name="PassParameterByValueQuickFix" xml:space="preserve">
    <value>Passer le paramètre par valeur</value>
  </data>
  <data name="UseTypedFunctionQuickFix" xml:space="preserve">
    <value>Changer '{0}' pour '{1}'</value>
  </data>
  <data name="RemoveCommentQuickFix" xml:space="preserve">
    <value>Supprimer le commentaire</value>
  </data>
  <data name="RemoveObsoleteStatementQuickFix" xml:space="preserve">
    <value>Supprimer l'instruction obsolète</value>
  </data>
  <data name="RemoveTypeHintsQuickFix" xml:space="preserve">
    <value>Supprimer les indicateurs de type</value>
  </data>
  <data name="RemoveUnassignedIdentifierQuickFix" xml:space="preserve">
    <value>Supprimer la variable inutilisée</value>
  </data>
  <data name="RemoveUnassignedVariableUsageQuickFix" xml:space="preserve">
    <value>Supprimer l'utilisation (brise le code)</value>
  </data>
  <data name="RemoveUnusedDeclarationQuickFix" xml:space="preserve">
    <value>Supprimer la déclaration inutilisée</value>
  </data>
  <data name="RemoveUnusedParameterQuickFix" xml:space="preserve">
    <value>Supprimer le paramètre inutilisé</value>
  </data>
  <data name="ReplaceCommentMarkerQuickFix" xml:space="preserve">
    <value>Remplacer 'Rem' par une apostrophe</value>
  </data>
  <data name="SetExplicitVariantReturnTypeQuickFix" xml:space="preserve">
    <value>Retourner une valeur 'Variant' explicite</value>
  </data>
  <data name="SpecifyExplicitPublicModifierQuickFix" xml:space="preserve">
    <value>Spécifier le modificateur 'Public' explicitement</value>
  </data>
  <data name="SplitMultipleDeclarationsQuickFix" xml:space="preserve">
    <value>Séparer les déclarations en plusieurs instructions</value>
  </data>
  <data name="SetObjectVariableQuickFix" xml:space="preserve">
    <value>Utiliser le mot-clé 'Set'</value>
  </data>
  <data name="ChangeDimToPrivateQuickFix" xml:space="preserve">
    <value>Remplacer 'Dim' par 'Private'</value>
  </data>
  <data name="IntroduceLocalVariableQuickFix" xml:space="preserve">
    <value>Introduire une variable locale</value>
  </data>
  <data name="IntroduceGetAccessorQuickFix" xml:space="preserve">
    <value>Ajouter un accesseur 'Property Get'</value>
  </data>
  <data name="ApplicationWorksheetFunctionQuickFix" xml:space="preserve">
    <value>Utiliser Application.WorksheetFunction explicitement.</value>
  </data>
  <data name="WhiteListIdentifierQuickFix" xml:space="preserve">
    <value>Ajouter à la liste blanche</value>
  </data>
  <data name="AssignedByValParameterMakeLocalCopyQuickFix" xml:space="preserve">
    <value>Créer et utiliser une copie locale du paramètre</value>
  </data>
  <data name="SynchronizeAttributesQuickFix" xml:space="preserve">
    <value>Synchroniser les attributs et annotations dans le module</value>
  </data>
  <data name="RedundantByRefModifierQuickFix" xml:space="preserve">
    <value>Supprimer le modificateur 'ByRef'</value>
  </data>
  <data name="ReplaceObsoleteErrorStatementQuickFix" xml:space="preserve">
    <value>Remplacer 'Error' par 'Err.Raise'</value>
  </data>
  <data name="RemoveEmptyElseBlockQuickFix" xml:space="preserve">
    <value>Supprimer le bloc 'Else' vide</value>
  </data>
  <data name="RemoveStopKeywordQuickFix" xml:space="preserve">
    <value>Supprimer l'usage du mot-clé 'Stop'</value>
  </data>
  <data name="RemoveEmptyIfBlockQuickFix" xml:space="preserve">
    <value>Supprimer le bloc conditionnel vide</value>
  </data>
  <data name="ImplicitByRefModifierQuickFix" xml:space="preserve">
    <value>Passer le paramètre par référence explicitement</value>
  </data>
  <data name="IntegerDataTypeQuickFix" xml:space="preserve">
    <value>Changer le type pour 'Long'</value>
  </data>
  <data name="RemoveOptionBaseStatementQuickFix" xml:space="preserve">
    <value>Supprimer l'instruction 'Option Base'</value>
  </data>
  <data name="ReplaceIfElseWithConditionalStatementQuickFix" xml:space="preserve">
    <value>Remplacer le bloc If/Else par une assignation directe</value>
  </data>
  <data name="UnhandledOnErrorResumeNextInspectionQuickFix" xml:space="preserve">
    <value>Introduire une routine de gestion d'erreurs</value>
  </data>
  <data name="RemoveStepOneQuickFix" xml:space="preserve">
    <value>Supprimer le 'Step' redondant</value>
  </data>
  <data name="AddStepOneQuickFix" xml:space="preserve">
    <value>Ajouter une clause 'Step' explicite</value>
  </data>
  <data name="AccessSheetUsingCodeNameQuickFix" xml:space="preserve">
    <value>Utiliser le nom de code pour référer à une feuille statiquement accessible</value>
  </data>
  <data name="InvalidContextTypeInspectionFix" xml:space="preserve">
    <value>Le contexte '{0}' est invalide pour '{1}'.</value>
  </data>
  <data name="IsMissingOnInappropriateArgumentQuickFix" xml:space="preserve">
    <value>Modifier l'appel à la fonction 'IsMissing' pour tester la valeur par défaut.</value>
  </data>
  <data name="RemoveDuplicatedAnnotationQuickFix" xml:space="preserve">
    <value>Supprimer l'annotation dupliquée</value>
  </data>
  <data name="RemoveLocalErrorQuickFix" xml:space="preserve">
    <value>Remplacer 'On Local Error' par 'On Error'</value>
  </data>
  <data name="AddAttributeAnnotationQuickFix" xml:space="preserve">
    <value>Ajouter une annotation</value>
  </data>
  <data name="AddMissingAttributeQuickFix" xml:space="preserve">
    <value>Ajouter l'attribut manquant</value>
  </data>
  <data name="AdjustAttributeAnnotationQuickFix" xml:space="preserve">
    <value>Ajuster l'annotation</value>
  </data>
  <data name="AdjustAttributeValuesQuickFix" xml:space="preserve">
    <value>Ajuster l'attribut</value>
  </data>
  <data name="ApplyQuickFixesFailedMessage" xml:space="preserve">
    <value>Le correctif n'a pu être appliqué.</value>
  </data>
  <data name="ApplyQuickFixFailedCaption" xml:space="preserve">
    <value>Échec de l'application du correctif</value>
  </data>
  <data name="RemoveAnnotationQuickFix" xml:space="preserve">
    <value>Supprimer l'annotation</value>
  </data>
  <data name="RemoveAttributeQuickFix" xml:space="preserve">
    <value>Supprimer l'attribut</value>
  </data>
  <data name="StaleModuleFailureReason" xml:space="preserve">
    <value>Un module affecté a été modifier depuis la dernière analyse.</value>
  </data>
  <data name="ReplaceWhileWendWithDoWhileLoopQuickFix" xml:space="preserve">
    <value>Remplacer 'While...Wend' par 'Do While...Loop'</value>
  </data>
  <data name="ExpandBangNotationQuickFix" xml:space="preserve">
    <value>Rendre explicite le code caché par l'opérateur '!'</value>
  </data>
  <data name="ExpandDefaultMemberQuickFix" xml:space="preserve">
    <value>Rendre explicite l'accès au membre par défaut</value>
  </data>
  <data name="IgnoreInModuleQuickFix" xml:space="preserve">
    <value>Ignorer dans le module</value>
  </data>
  <data name="AnnotateEntryPointQuickFix" xml:space="preserve">
    <value>Annoter avec @EntryPoint</value>
  </data>
  <data name="DeclareAsExplicitTypeQuickFix" xml:space="preserve">
    <value>Déclarer un type explicite</value>
  </data>
  <data name="QualifyWithMeQuickFix" xml:space="preserve">
    <value>Qualifier la référence avec 'Me'.</value>
  </data>
  <data name="RemoveRedundantOptionStatementQuickFix" xml:space="preserve">
    <value>Supprimer l'instruction '{0}'</value>
  </data>
</root>