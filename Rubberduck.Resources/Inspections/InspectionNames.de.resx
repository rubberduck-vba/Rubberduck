<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssignedByValParameterInspection" xml:space="preserve">
    <value>ByVal Parameter ist zugewiesen</value>
  </data>
  <data name="ConstantNotUsedInspection" xml:space="preserve">
    <value>Konstante wird nicht verwendet</value>
  </data>
  <data name="DefaultProjectNameInspection" xml:space="preserve">
    <value>Das Projekt hat den Standard-Projektnamen.</value>
  </data>
  <data name="EmptyStringLiteralInspection" xml:space="preserve">
    <value>Leeres 'String Literal'</value>
  </data>
  <data name="EncapsulatePublicFieldInspection" xml:space="preserve">
    <value>Öffentliches Feld bricht die Kapselung</value>
  </data>
  <data name="ImplicitActiveSheetReferenceInspection" xml:space="preserve">
    <value>Implizite Referenz zum 'ActiveSheet'</value>
  </data>
  <data name="ImplicitActiveWorkbookReferenceInspection" xml:space="preserve">
    <value>Implizite Referenz zum 'ActiveWorkbook'</value>
  </data>
  <data name="ImplicitPublicMemberInspection" xml:space="preserve">
    <value>Implizite öffentliche Methode</value>
  </data>
  <data name="ImplicitVariantReturnTypeInspection" xml:space="preserve">
    <value>Rückgabewert der Methode ist implizit 'Variant'</value>
  </data>
  <data name="MoveFieldCloserToUsageInspection" xml:space="preserve">
    <value>Der Geltungsbereich der Variable ist größer als notwendig.</value>
  </data>
  <data name="MultilineParameterInspection" xml:space="preserve">
    <value>Die Parameterdeklaration ist über mehrere Zeilen verteilt.</value>
  </data>
  <data name="MultipleDeclarationsInspection" xml:space="preserve">
    <value>Anweisung enthält Mehrfachdeklarationen</value>
  </data>
  <data name="NonReturningFunctionInspection" xml:space="preserve">
    <value>Funktion oder Eigenschaft ohne Rückgabewert</value>
  </data>
  <data name="ObsoleteCallStatementInspection" xml:space="preserve">
    <value>Verwendung der veralteten 'Call'-Anweisung</value>
  </data>
  <data name="ObsoleteCommentSyntaxInspection" xml:space="preserve">
    <value>Verwendung der veralteten 'REM'-Anweisung</value>
  </data>
  <data name="ObsoleteGlobalInspection" xml:space="preserve">
    <value>Verwendung der veralteten 'Global'-Zugriffsdeklaration</value>
  </data>
  <data name="ObsoleteLetStatementInspection" xml:space="preserve">
    <value>Verwendung der veralteten 'Let'-Anweisung</value>
  </data>
  <data name="ObsoleteTypeHintInspection" xml:space="preserve">
    <value>Verwendungshinweis für Typ</value>
  </data>
  <data name="OptionBaseInspection" xml:space="preserve">
    <value>'Option Base 1' ist angegeben.</value>
  </data>
  <data name="OptionExplicitInspection" xml:space="preserve">
    <value>'Option Explicit' ist nicht angegeben.</value>
  </data>
  <data name="ParameterCanBeByValInspection" xml:space="preserve">
    <value>Parameter kann als Wert übergeben werden.</value>
  </data>
  <data name="ParameterNotUsedInspection" xml:space="preserve">
    <value>Der Parameter wird nicht genutzt.</value>
  </data>
  <data name="ProcedureNotUsedInspection" xml:space="preserve">
    <value>Die Prozedur wird nicht genutzt.</value>
  </data>
  <data name="UnassignedVariableUsageInspection" xml:space="preserve">
    <value>Variable wird genutzt ohne das ihr ein Wert zugewiesen wurde.</value>
  </data>
  <data name="UntypedFunctionUsageInspection" xml:space="preserve">
    <value>Verwendung einer 'Variant' zurückgebenden String-Funktion</value>
  </data>
  <data name="UseMeaningfulNameInspection" xml:space="preserve">
    <value>Aussagekräftige Namen nutzen</value>
  </data>
  <data name="VariableNotAssignedInspection" xml:space="preserve">
    <value>Der Variable wird kein Wert zugewiesen.</value>
  </data>
  <data name="VariableNotUsedInspection" xml:space="preserve">
    <value>Die Variable wird nicht referenziert.</value>
  </data>
  <data name="VariableTypeNotDeclaredInspection" xml:space="preserve">
    <value>Variable ist implizit 'Variant'</value>
  </data>
  <data name="WriteOnlyPropertyInspection" xml:space="preserve">
    <value>Nur-Schreib Eigenschaft</value>
  </data>
  <data name="ProcedureCanBeWrittenAsFunctionInspection" xml:space="preserve">
    <value>Prozedur kann als Funktion geschrieben werden.</value>
  </data>
  <data name="SelfAssignedDeclarationInspection" xml:space="preserve">
    <value>Objektvariable ist selbstzugewiesen.</value>
  </data>
  <data name="FunctionReturnValueNotUsedInspection" xml:space="preserve">
    <value>Der Rückgabewert der Funktion wird nicht genutzt.</value>
  </data>
  <data name="ObjectVariableNotSetInspection" xml:space="preserve">
    <value>Zuweisung in eine Objektvariable benötigt das 'Set'-Schlüsselwort.</value>
  </data>
  <data name="MissingAnnotationArgumentInspection" xml:space="preserve">
    <value>Fehlender Annotationsparameter</value>
  </data>
  <data name="UndeclaredVariableInspection" xml:space="preserve">
    <value>Nicht deklarierte Variable</value>
  </data>
  <data name="ModuleScopeDimKeywordInspection" xml:space="preserve">
    <value>Verwendung von 'Dim' auf Modulebene</value>
  </data>
  <data name="ApplicationWorksheetFunctionInspection" xml:space="preserve">
    <value>Laufzeitgebundener Aufruf an WorksheetFunction</value>
  </data>
  <data name="HostSpecificExpressionInspection" xml:space="preserve">
    <value>Hostspezifischer geklammerter Ausdruck wird nur zur Laufzeit ausgewertet</value>
  </data>
  <data name="HungarianNotationInspection" xml:space="preserve">
    <value>Variable verwendet 'Ungarische Notation'</value>
  </data>
  <data name="MemberNotOnInterfaceInspection" xml:space="preserve">
    <value>Member existiert auf dem Interface nicht</value>
  </data>
  <data name="OptionBaseZeroInspection" xml:space="preserve">
    <value>'Option Base 0' ist redundant</value>
  </data>
  <data name="LineLabelNotUsedInspection" xml:space="preserve">
    <value>Zeilenbezeichnung wird nicht referenziert</value>
  </data>
  <data name="EmptyIfBlockInspection" xml:space="preserve">
    <value>Leerer 'If'-Block</value>
  </data>
  <data name="RedundantByRefModifierInspection" xml:space="preserve">
    <value>Redundante 'ByRef'-Markierung</value>
  </data>
  <data name="ImplicitByRefModifierInspection" xml:space="preserve">
    <value>Impliziter ByRef Parameter</value>
  </data>
  <data name="IllegalAnnotationInspection" xml:space="preserve">
    <value>Illegale Annotation</value>
  </data>
  <data name="MissingAttributeInspection" xml:space="preserve">
    <value>Fehlendes Attribut</value>
  </data>
  <data name="RedundantOptionInspection" xml:space="preserve">
    <value>Redundante Moduloption</value>
  </data>
  <data name="IntegerDataTypeInspection" xml:space="preserve">
    <value>Verwendung von 16-bit Ganzzahl</value>
  </data>
  <data name="EmptyCaseBlockInspection" xml:space="preserve">
    <value>Leerer 'Case'-Block</value>
  </data>
  <data name="EmptyForLoopBlockInspection" xml:space="preserve">
    <value>Leere 'For…Next'-Schleife</value>
  </data>
  <data name="EmptyForEachBlockInspection" xml:space="preserve">
    <value>Leere 'For Each…Next'-Schleife</value>
  </data>
  <data name="EmptyDoWhileBlockInspection" xml:space="preserve">
    <value>Leere 'Do…While'-Schleife</value>
  </data>
  <data name="EmptyElseBlockInspection" xml:space="preserve">
    <value>Leerer 'Else'-Block</value>
  </data>
  <data name="EmptyWhileWendBlockInspection" xml:space="preserve">
    <value>Leere 'While…Wend'-Schleife</value>
  </data>
  <data name="ShadowedDeclarationInspection" xml:space="preserve">
    <value>Überschattete Deklaration</value>
  </data>
  <data name="StopKeywordInspection" xml:space="preserve">
    <value>'Stop'-Schlüsselwort</value>
  </data>
  <data name="BooleanAssignedInIfElseInspection" xml:space="preserve">
    <value>Boolsche Zeichenkette wird in Bedingung zugewiesen</value>
  </data>
  <data name="EmptyModuleInspection" xml:space="preserve">
    <value>Leeres Modul</value>
  </data>
  <data name="ObsoleteErrorSyntaxInspection" xml:space="preserve">
    <value>Verwendung der veralteten 'Error'-Anweisung</value>
  </data>
  <data name="UnreachableCaseInspection" xml:space="preserve">
    <value>Case-Klausel(n) nicht erreichbar.</value>
  </data>
  <data name="UnhandledOnErrorResumeNextInspection" xml:space="preserve">
    <value>Unbehandeltes 'On Error Resume Next'</value>
  </data>
  <data name="DefTypeStatementInspection" xml:space="preserve">
    <value>Verwendung der 'Def[Type]'-Anweisung</value>
  </data>
  <data name="StepIsNotSpecifiedInspection" xml:space="preserve">
    <value>'Step' in 'For...Next'-Schleife ist nicht angegeben</value>
  </data>
  <data name="StepOneIsRedundantInspection" xml:space="preserve">
    <value>'Step 1' ist in 'For...Next'-Schleife redundant</value>
  </data>
  <data name="SheetAccessedUsingStringInspection" xml:space="preserve">
    <value>Statically accessible sheet accessed using string</value>
  </data>
  <data name="ObsoleteMemberUsageInspection" xml:space="preserve">
    <value>Verwendung eines als '@Obsolete' markierten Members</value>
  </data>
  <data name="ObsoleteCallingConventionInspection" xml:space="preserve">
    <value>Verwendung der 'CDecl' Aufrufkonvention unter Windows </value>
  </data>
  <data name="DuplicatedAnnotationInspection" xml:space="preserve">
    <value>Annotation ist dupliziert</value>
  </data>
  <data name="ModuleWithoutFolderInspection" xml:space="preserve">
    <value>Modul ohne '@Folder'-Annotation</value>
  </data>
  <data name="OnLocalErrorInspection" xml:space="preserve">
    <value>'On Local Error'-Direktive</value>
  </data>
  <data name="IsMissingOnInappropriateArgumentInspection" xml:space="preserve">
    <value>Unpassende Verwendung der 'IsMissing'-Funktion - Parameter ist nicht vom Typ Variant</value>
  </data>
  <data name="IsMissingWithNonArgumentParameterInspection" xml:space="preserve">
    <value>Unpassende Verwendung der 'IsMissing'-Funktion - Lokale Variable kann nie fehlen</value>
  </data>
  <data name="AssignmentNotUsedInspection" xml:space="preserve">
    <value>Zuweisung wird nie gelesen</value>
  </data>
  <data name="UnderscoreInPublicClassModuleMemberInspection" xml:space="preserve">
    <value>Unterstrich im Namen eines öffentlichen Members</value>
  </data>
  <data name="ExcelMemberMayReturnNothingInspection" xml:space="preserve">
    <value>Memberaufruf kann 'Nothing' zurückgeben</value>
  </data>
  <data name="ExcelUdfNameIsValidCellReferenceInspection" xml:space="preserve">
    <value>Funktion wird von EXCEL-Zellreferenz verdeckt</value>
  </data>
  <data name="AttributeValueOutOfSyncInspection" xml:space="preserve">
    <value>Wert stimmt nicht überein zwischen Attribut und Annotation</value>
  </data>
  <data name="MissingMemberAnnotationInspection" xml:space="preserve">
    <value>Fehlende Elementannotation</value>
  </data>
  <data name="MissingModuleAnnotationInspection" xml:space="preserve">
    <value>Fehlende Modulannotation</value>
  </data>
  <data name="SetAssignmentWithIncompatibleObjectTypeInspection" xml:space="preserve">
    <value>Set-Zuweisung mit nicht kompatiblem Objekttyp</value>
  </data>
  <data name="ObsoleteWhileWendStatementInspection" xml:space="preserve">
    <value>Verwendung der veralteten 'While...Wend'-Anweisung</value>
  </data>
  <data name="ArgumentWithIncompatibleObjectTypeInspection" xml:space="preserve">
    <value>Argument mit nicht kompatiblem Objekttyp</value>
  </data>
  <data name="EmptyMethodInspection" xml:space="preserve">
    <value>Lehre Methode</value>
  </data>
  <data name="ImplementedInterfaceMemberInspection" xml:space="preserve">
    <value>Implementierte Methode einer Interface-Klasse</value>
  </data>
  <data name="ValueRequiredInspection" xml:space="preserve">
    <value>Objekt statt Wert verwendet</value>
  </data>
  <data name="ProcedureRequiredInspection" xml:space="preserve">
    <value>Objekt ohne Standardmember statt Prozedur verwendet</value>
  </data>
  <data name="DefaultMemberRequiredInspection" xml:space="preserve">
    <value>Standardmemberzugriff ohne Standardmember</value>
  </data>
  <data name="UseOfBangNotationInspection" xml:space="preserve">
    <value>Verwendung der Ausrufezeichennotation</value>
  </data>
  <data name="UseOfRecursiveBangNotationInspection" xml:space="preserve">
    <value>Verwendung rekursiver Ausrufezeichennotation</value>
  </data>
  <data name="UseOfUnboundBangNotationInspection" xml:space="preserve">
    <value>Verwendung nicht gebundener Ausrufezeichennotation</value>
  </data>
  <data name="ObjectWhereProcedureIsRequiredInspection" xml:space="preserve">
    <value>Objekt an Stell einer Prozedur verwendet</value>
  </data>
  <data name="IndexedDefaultMemberAccessInspection" xml:space="preserve">
    <value>Parametrisierter Zugriff auf einen Standardmember</value>
  </data>
  <data name="IndexedRecursiveDefaultMemberAccessInspection" xml:space="preserve">
    <value>Parametrisierter rekursiver Zugriff auf einen Standardmember</value>
  </data>
  <data name="IndexedUnboundDefaultMemberAccessInspection" xml:space="preserve">
    <value>Parametrisierter nicht gebundener Zugriff auf einen Standardmember</value>
  </data>
  <data name="ImplicitDefaultMemberAccessInspection" xml:space="preserve">
    <value>Impliziter Zugriff auf einen Standardmember</value>
  </data>
  <data name="ImplicitRecursiveDefaultMemberAccessInspection" xml:space="preserve">
    <value>Impliziter rekursiver Zugriff auf einen Standardmember</value>
  </data>
  <data name="ImplicitUnboundDefaultMemberAccessInspection" xml:space="preserve">
    <value>Impliziter nicht gebundener Zugriff auf einen Standardmember</value>
  </data>
  <data name="SuspiciousLetAssignmentInspection" xml:space="preserve">
    <value>Verdächtige Let-Zuweisung</value>
  </data>
</root>