<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EmptyStringLiteralInspectionQuickFix" xml:space="preserve">
    <value>Reemplazar la cadena vacía por la constante 'vbNullString'</value>
  </data>
  <data name="EncapsulatePublicFieldInspectionQuickFix" xml:space="preserve">
    <value>Encapsular el campo '{0}' con una propiedad</value>
  </data>
  <data name="IgnoreOnce" xml:space="preserve">
    <value>Ignorar una vez</value>
  </data>
  <data name="ProcedureShouldBeFunctionInspectionQuickFix" xml:space="preserve">
    <value>Implementar como función y actualizar usos.</value>
  </data>
  <data name="ConvertFunctionToProcedureQuickFix" xml:space="preserve">
    <value>Convertir la función a procedimiento</value>
  </data>
  <data name="DeclareAsExplicitVariantQuickFix" xml:space="preserve">
    <value>Declarar como "Variant" explícita</value>
  </data>
  <data name="ImplicitByRefModifierQuickFix" xml:space="preserve">
    <value>Pasar el parámetro por referencia explícitamente</value>
  </data>
  <data name="MakeSingleLineParameterQuickFix" xml:space="preserve">
    <value>Escribir variable en una linea</value>
  </data>
  <data name="ObsoleteGlobalInspectionQuickFix" xml:space="preserve">
    <value>Reemplazar el modificador de acceso 'Global' con 'Public'</value>
  </data>
  <data name="OptionExplicitQuickFix" xml:space="preserve">
    <value>Especificar 'Option Explicit'</value>
  </data>
  <data name="PassParameterByReferenceQuickFix" xml:space="preserve">
    <value>Pasar el parámetro por referencia</value>
  </data>
  <data name="PassParameterByValueQuickFix" xml:space="preserve">
    <value>Pasar parámetro por valor</value>
  </data>
  <data name="UseTypedFunctionQuickFix" xml:space="preserve">
    <value>Cambia '{0}' a '{1}'</value>
  </data>
  <data name="RemoveCommentQuickFix" xml:space="preserve">
    <value>Eliminar comentario</value>
  </data>
  <data name="RemoveObsoleteStatementQuickFix" xml:space="preserve">
    <value>Eliminar declaración obsoleta</value>
  </data>
  <data name="RemoveTypeHintsQuickFix" xml:space="preserve">
    <value>Eliminar sugerencias de tipo</value>
  </data>
  <data name="RemoveUnassignedIdentifierQuickFix" xml:space="preserve">
    <value>Eliminar variable sin asignar</value>
  </data>
  <data name="RemoveUnassignedVariableUsageQuickFix" xml:space="preserve">
    <value>Eliminar uso (rompe código)</value>
  </data>
  <data name="RemoveUnusedDeclarationQuickFix" xml:space="preserve">
    <value>Eliminar declaración no utilizada</value>
  </data>
  <data name="RemoveUnusedParameterQuickFix" xml:space="preserve">
    <value>Eliminar parámetro no utilizado</value>
  </data>
  <data name="ReplaceCommentMarkerQuickFix" xml:space="preserve">
    <value>Reemplazar el uso 'Rem' con un marcador de comillas simples</value>
  </data>
  <data name="SetExplicitVariantReturnTypeQuickFix" xml:space="preserve">
    <value>Variant explícita de retorno</value>
  </data>
  <data name="SpecifyExplicitPublicModifierQuickFix" xml:space="preserve">
    <value>Especificar explícitamente el modificador de acceso 'Public'</value>
  </data>
  <data name="SplitMultipleDeclarationsQuickFix" xml:space="preserve">
    <value>Separar las declaraciones múltiples en instrucciones múltiples</value>
  </data>
  <data name="InvalidContextTypeInspectionFix" xml:space="preserve">
    <value>El tipo de contexto '{0}' no es válido para {1}.</value>
  </data>
  <data name="SetObjectVariableQuickFix" xml:space="preserve">
    <value>Usar la palabra clave 'Set'</value>
  </data>
  <data name="IntroduceGetAccessorQuickFix" xml:space="preserve">
    <value>Añadir Get a propiedad</value>
  </data>
  <data name="ChangeDimToPrivateQuickFix" xml:space="preserve">
    <value>Reemplazar 'Dim' con 'Private'</value>
  </data>
  <data name="IntroduceLocalVariableQuickFix" xml:space="preserve">
    <value>Introducir variable local</value>
  </data>
  <data name="WhiteListIdentifierQuickFix" xml:space="preserve">
    <value>Añadir a la lista blanca</value>
  </data>
  <data name="ApplicationWorksheetFunctionQuickFix" xml:space="preserve">
    <value>Usar el método de enlace temprano "Application.WorksheetFunction".</value>
  </data>
  <data name="AssignedByValParameterMakeLocalCopyQuickFix" xml:space="preserve">
    <value>Crea y utiliza una copia local del parámetro</value>
  </data>
  <data name="RemoveOptionBaseStatementQuickFix" xml:space="preserve">
    <value>Eliminar la declaración 'Option Base'</value>
  </data>
  <data name="SynchronizeAttributesQuickFix" xml:space="preserve">
    <value>Sincronizar atributos/anotaciones en el módulo</value>
  </data>
  <data name="RemoveEmptyIfBlockQuickFix" xml:space="preserve">
    <value>Eliminar bloque If vací</value>
  </data>
  <data name="RedundantByRefModifierQuickFix" xml:space="preserve">
    <value>Eliminar modificador 'ByRef'</value>
  </data>
  <data name="RemoveEmptyElseBlockQuickFix" xml:space="preserve">
    <value>Eliminar el bloque vacío 'Else'</value>
  </data>
  <data name="IntegerDataTypeQuickFix" xml:space="preserve">
    <value>Cambiar tipo a 'Long'</value>
  </data>
  <data name="RemoveStopKeywordQuickFix" xml:space="preserve">
    <value>Eliminar el uso de la palabra clave 'Stop'</value>
  </data>
  <data name="ReplaceObsoleteErrorStatementQuickFix" xml:space="preserve">
    <value>Reemplazar 'Error' con 'Err.Raise'</value>
  </data>
  <data name="ReplaceIfElseWithConditionalStatementQuickFix" xml:space="preserve">
    <value>Reemplazar If/Else con una sola asignación</value>
  </data>
  <data name="UnhandledOnErrorResumeNextInspectionQuickFix" xml:space="preserve">
    <value>Introducir error en la subrutina de manejo</value>
  </data>
  <data name="RemoveStepOneQuickFix" xml:space="preserve">
    <value>Eliminar la cláusula 'Step' (incremento) redundante</value>
  </data>
  <data name="AddStepOneQuickFix" xml:space="preserve">
    <value>Añadir cláusula 'Step' explícita</value>
  </data>
  <data name="AccessSheetUsingCodeNameQuickFix" xml:space="preserve">
    <value>Consulte la hoja estáticamente accesible por su nombre en clave</value>
  </data>
  <data name="RemoveDuplicatedAnnotationQuickFix" xml:space="preserve">
    <value>Eliminar anotación duplicada</value>
  </data>
  <data name="RemoveLocalErrorQuickFix" xml:space="preserve">
    <value>Reemplazar 'On Local Error' con 'On Error'</value>
  </data>
  <data name="IsMissingOnInappropriateArgumentQuickFix" xml:space="preserve">
    <value>Cambie la llamada 'IsMissing' para probar el valor predeterminado.</value>
  </data>
  <data name="AddMissingAttributeQuickFix" xml:space="preserve">
    <value>Añadir atributo faltante</value>
  </data>
  <data name="AdjustAttributeValuesQuickFix" xml:space="preserve">
    <value>Ajustar valor(es) de atributo</value>
  </data>
  <data name="RemoveAttributeQuickFix" xml:space="preserve">
    <value>Eliminar atributo</value>
  </data>
  <data name="RemoveAnnotationQuickFix" xml:space="preserve">
    <value>Eliminar anotación</value>
  </data>
  <data name="AdjustAttributeAnnotationQuickFix" xml:space="preserve">
    <value>Ajustar anotación de atributo</value>
  </data>
  <data name="AddAttributeAnnotationQuickFix" xml:space="preserve">
    <value>Añadir anotación de atributo</value>
  </data>
  <data name="ApplyQuickFixesFailedMessage" xml:space="preserve">
    <value>Error al aplicar la solución rápida.</value>
  </data>
  <data name="StaleModuleFailureReason" xml:space="preserve">
    <value>Se ha modificado un módulo afectado desde el último análisis.</value>
  </data>
  <data name="ApplyQuickFixFailedCaption" xml:space="preserve">
    <value>Error de aplicación de solución rápida</value>
  </data>
  <data name="IgnoreInModuleQuickFix" xml:space="preserve">
    <value>Ignorar en el módulo</value>
  </data>
  <data name="ExpandDefaultMemberQuickFix" xml:space="preserve">
    <value>Hacer explícito el acceso al miembro default</value>
  </data>
  <data name="ExpandBangNotationQuickFix" xml:space="preserve">
    <value>Reemplazar la notación Bang con acceso explícito</value>
  </data>
  <data name="ReplaceWhileWendWithDoWhileLoopQuickFix" xml:space="preserve">
    <value>Reemplazar 'While...Wend' con 'Do While...Loop'</value>
  </data>
  <data name="RemoveRedundantOptionStatementQuickFix" xml:space="preserve">
    <value>Eliminar la declaración '{0}'</value>
  </data>
</root>