//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rubberduck.Resources.Inspections {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class InspectionNames {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal InspectionNames() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Rubberduck.Resources.Inspections.InspectionNames", typeof(InspectionNames).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Late bound WorksheetFunction call. ähnelt.
        /// </summary>
        public static string ApplicationWorksheetFunctionInspection {
            get {
                return ResourceManager.GetString("ApplicationWorksheetFunctionInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ByVal parameter is assigned ähnelt.
        /// </summary>
        public static string AssignedByValParameterInspection {
            get {
                return ResourceManager.GetString("AssignedByValParameterInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Boolean literal assignment in conditional ähnelt.
        /// </summary>
        public static string BooleanAssignedInIfElseInspection {
            get {
                return ResourceManager.GetString("BooleanAssignedInIfElseInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Constant is not used ähnelt.
        /// </summary>
        public static string ConstantNotUsedInspection {
            get {
                return ResourceManager.GetString("ConstantNotUsedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Project name is not specified ähnelt.
        /// </summary>
        public static string DefaultProjectNameInspection {
            get {
                return ResourceManager.GetString("DefaultProjectNameInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Usage of &apos;Def[Type]&apos; statement ähnelt.
        /// </summary>
        public static string DefTypeStatementInspection {
            get {
                return ResourceManager.GetString("DefTypeStatementInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty &apos;Case&apos; block ähnelt.
        /// </summary>
        public static string EmptyCaseBlockInspection {
            get {
                return ResourceManager.GetString("EmptyCaseBlockInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty &apos;Do...While&apos; Loop ähnelt.
        /// </summary>
        public static string EmptyDoWhileBlockInspection {
            get {
                return ResourceManager.GetString("EmptyDoWhileBlockInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty &apos;Else&apos; block ähnelt.
        /// </summary>
        public static string EmptyElseBlockInspection {
            get {
                return ResourceManager.GetString("EmptyElseBlockInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty &apos;For Each...Next&apos; Loop ähnelt.
        /// </summary>
        public static string EmptyForEachBlockInspection {
            get {
                return ResourceManager.GetString("EmptyForEachBlockInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty &apos;For...Next&apos; Loop ähnelt.
        /// </summary>
        public static string EmptyForLoopBlockInspection {
            get {
                return ResourceManager.GetString("EmptyForLoopBlockInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty conditional branch ähnelt.
        /// </summary>
        public static string EmptyIfBlockInspection {
            get {
                return ResourceManager.GetString("EmptyIfBlockInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty module ähnelt.
        /// </summary>
        public static string EmptyModuleInspection {
            get {
                return ResourceManager.GetString("EmptyModuleInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty string literal ähnelt.
        /// </summary>
        public static string EmptyStringLiteralInspection {
            get {
                return ResourceManager.GetString("EmptyStringLiteralInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty &apos;While...Wend&apos; loop ähnelt.
        /// </summary>
        public static string EmptyWhileWendBlockInspection {
            get {
                return ResourceManager.GetString("EmptyWhileWendBlockInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Public field breaks encapsulation ähnelt.
        /// </summary>
        public static string EncapsulatePublicFieldInspection {
            get {
                return ResourceManager.GetString("EncapsulatePublicFieldInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Function return value is never used ähnelt.
        /// </summary>
        public static string FunctionReturnValueNotUsedInspection {
            get {
                return ResourceManager.GetString("FunctionReturnValueNotUsedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Host-specific bracketed expression is only evaluated at runtime ähnelt.
        /// </summary>
        public static string HostSpecificExpressionInspection {
            get {
                return ResourceManager.GetString("HostSpecificExpressionInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable uses Hungarian notation. ähnelt.
        /// </summary>
        public static string HungarianNotationInspection {
            get {
                return ResourceManager.GetString("HungarianNotationInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Illegal annotation ähnelt.
        /// </summary>
        public static string IllegalAnnotationInspection {
            get {
                return ResourceManager.GetString("IllegalAnnotationInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit reference to ActiveSheet ähnelt.
        /// </summary>
        public static string ImplicitActiveSheetReferenceInspection {
            get {
                return ResourceManager.GetString("ImplicitActiveSheetReferenceInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit reference to ActiveWorkbook ähnelt.
        /// </summary>
        public static string ImplicitActiveWorkbookReferenceInspection {
            get {
                return ResourceManager.GetString("ImplicitActiveWorkbookReferenceInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit ByRef parameter ähnelt.
        /// </summary>
        public static string ImplicitByRefModifierInspection {
            get {
                return ResourceManager.GetString("ImplicitByRefModifierInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit default member assignment ähnelt.
        /// </summary>
        public static string ImplicitDefaultMemberAssignmentInspection {
            get {
                return ResourceManager.GetString("ImplicitDefaultMemberAssignmentInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicitly public member ähnelt.
        /// </summary>
        public static string ImplicitPublicMemberInspection {
            get {
                return ResourceManager.GetString("ImplicitPublicMemberInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Member return type is implicitly &apos;Variant&apos; ähnelt.
        /// </summary>
        public static string ImplicitVariantReturnTypeInspection {
            get {
                return ResourceManager.GetString("ImplicitVariantReturnTypeInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of 16-bit integer type ähnelt.
        /// </summary>
        public static string IntegerDataTypeInspection {
            get {
                return ResourceManager.GetString("IntegerDataTypeInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Line label is not used ähnelt.
        /// </summary>
        public static string LineLabelNotUsedInspection {
            get {
                return ResourceManager.GetString("LineLabelNotUsedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Member not found ähnelt.
        /// </summary>
        public static string MemberNotOnInterfaceInspection {
            get {
                return ResourceManager.GetString("MemberNotOnInterfaceInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Missing annotation parameter ähnelt.
        /// </summary>
        public static string MissingAnnotationArgumentInspection {
            get {
                return ResourceManager.GetString("MissingAnnotationArgumentInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Missing annotation ähnelt.
        /// </summary>
        public static string MissingAnnotationInspection {
            get {
                return ResourceManager.GetString("MissingAnnotationInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Missing attribute ähnelt.
        /// </summary>
        public static string MissingAttributeInspection {
            get {
                return ResourceManager.GetString("MissingAttributeInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of &apos;Dim&apos; keyword at module level ähnelt.
        /// </summary>
        public static string ModuleScopeDimKeywordInspection {
            get {
                return ResourceManager.GetString("ModuleScopeDimKeywordInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scope of variable is broader than it needs to be ähnelt.
        /// </summary>
        public static string MoveFieldCloserToUsageInspection {
            get {
                return ResourceManager.GetString("MoveFieldCloserToUsageInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter declaration is split on multiple lines ähnelt.
        /// </summary>
        public static string MultilineParameterInspection {
            get {
                return ResourceManager.GetString("MultilineParameterInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Multiple declarations in single instruction ähnelt.
        /// </summary>
        public static string MultipleDeclarationsInspection {
            get {
                return ResourceManager.GetString("MultipleDeclarationsInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Module has more than one folder annotation. ähnelt.
        /// </summary>
        public static string MultipleFolderAnnotationsInspection {
            get {
                return ResourceManager.GetString("MultipleFolderAnnotationsInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Non-returning function or property getter ähnelt.
        /// </summary>
        public static string NonReturningFunctionInspection {
            get {
                return ResourceManager.GetString("NonReturningFunctionInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Object variable assignment requires &apos;Set&apos; keyword ähnelt.
        /// </summary>
        public static string ObjectVariableNotSetInspection {
            get {
                return ResourceManager.GetString("ObjectVariableNotSetInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of obsolete &apos;CDecl&apos; calling convention.
        /// </summary>
        public static string ObsoleteCallingConventionInspection {
            get {
                return ResourceManager.GetString("ObsoleteCallingConventionInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of obsolete &apos;Call&apos; statement.
        /// </summary>
        public static string ObsoleteCallStatementInspection {
            get {
                return ResourceManager.GetString("ObsoleteCallStatementInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of obsolete &apos;Rem&apos; statement ähnelt.
        /// </summary>
        public static string ObsoleteCommentSyntaxInspection {
            get {
                return ResourceManager.GetString("ObsoleteCommentSyntaxInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of obsolete &apos;Error&apos; statement ähnelt.
        /// </summary>
        public static string ObsoleteErrorSyntaxInspection {
            get {
                return ResourceManager.GetString("ObsoleteErrorSyntaxInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of obsolete &apos;Global&apos; access modifier ähnelt.
        /// </summary>
        public static string ObsoleteGlobalInspection {
            get {
                return ResourceManager.GetString("ObsoleteGlobalInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of obsolete explicit &apos;Let&apos; statement ähnelt.
        /// </summary>
        public static string ObsoleteLetStatementInspection {
            get {
                return ResourceManager.GetString("ObsoleteLetStatementInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member marked as &apos;@Obsolete&apos; is used.
        /// </summary>
        public static string ObsoleteMemberUsageInspection {
            get {
                return ResourceManager.GetString("ObsoleteMemberUsageInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obsolete Type hint usage.
        /// </summary>
        public static string ObsoleteTypeHintInspection {
            get {
                return ResourceManager.GetString("ObsoleteTypeHintInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Option Base 1&apos; is specified ähnelt.
        /// </summary>
        public static string OptionBaseInspection {
            get {
                return ResourceManager.GetString("OptionBaseInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Option Base 0&apos; is redundant ähnelt.
        /// </summary>
        public static string OptionBaseZeroInspection {
            get {
                return ResourceManager.GetString("OptionBaseZeroInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Option Explicit&apos; is not specified ähnelt.
        /// </summary>
        public static string OptionExplicitInspection {
            get {
                return ResourceManager.GetString("OptionExplicitInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter can be passed by value ähnelt.
        /// </summary>
        public static string ParameterCanBeByValInspection {
            get {
                return ResourceManager.GetString("ParameterCanBeByValInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter is not referred to ähnelt.
        /// </summary>
        public static string ParameterNotUsedInspection {
            get {
                return ResourceManager.GetString("ParameterNotUsedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Procedure can be written as a function ähnelt.
        /// </summary>
        public static string ProcedureCanBeWrittenAsFunctionInspection {
            get {
                return ResourceManager.GetString("ProcedureCanBeWrittenAsFunctionInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Procedure is not referred to ähnelt.
        /// </summary>
        public static string ProcedureNotUsedInspection {
            get {
                return ResourceManager.GetString("ProcedureNotUsedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Redundant &apos;ByRef&apos; modifier ähnelt.
        /// </summary>
        public static string RedundantByRefModifierInspection {
            get {
                return ResourceManager.GetString("RedundantByRefModifierInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Redundant module option ähnelt.
        /// </summary>
        public static string RedundantOptionInspection {
            get {
                return ResourceManager.GetString("RedundantOptionInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Object variable reference is auto-instantiated ähnelt.
        /// </summary>
        public static string SelfAssignedDeclarationInspection {
            get {
                return ResourceManager.GetString("SelfAssignedDeclarationInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Shadowed declaration ähnelt.
        /// </summary>
        public static string ShadowedDeclarationInspection {
            get {
                return ResourceManager.GetString("ShadowedDeclarationInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Statically accessible sheet accessed using string ähnelt.
        /// </summary>
        public static string SheetAccessedUsingStringInspection {
            get {
                return ResourceManager.GetString("SheetAccessedUsingStringInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;For...Next&apos; loop step is not specified ähnelt.
        /// </summary>
        public static string StepIsNotSpecifiedInspection {
            get {
                return ResourceManager.GetString("StepIsNotSpecifiedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;For...Next&apos; loop step 1 is redundant ähnelt.
        /// </summary>
        public static string StepOneIsRedundantInspection {
            get {
                return ResourceManager.GetString("StepOneIsRedundantInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Stop&apos; keyword ähnelt.
        /// </summary>
        public static string StopKeywordInspection {
            get {
                return ResourceManager.GetString("StopKeywordInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable is used but not assigned ähnelt.
        /// </summary>
        public static string UnassignedVariableUsageInspection {
            get {
                return ResourceManager.GetString("UnassignedVariableUsageInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Undeclared Redim variable ähnelt.
        /// </summary>
        public static string UndeclaredRedimVariableInspection {
            get {
                return ResourceManager.GetString("UndeclaredRedimVariableInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Undeclared variable ähnelt.
        /// </summary>
        public static string UndeclaredVariableInspection {
            get {
                return ResourceManager.GetString("UndeclaredVariableInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unhandled &apos;On Error Resume Next&apos; ähnelt.
        /// </summary>
        public static string UnhandledOnErrorResumeNextInspection {
            get {
                return ResourceManager.GetString("UnhandledOnErrorResumeNextInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Case Clause(s) cannot be reached ähnelt.
        /// </summary>
        public static string UnreachableCaseInspection {
            get {
                return ResourceManager.GetString("UnreachableCaseInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of variant-returning string function ähnelt.
        /// </summary>
        public static string UntypedFunctionUsageInspection {
            get {
                return ResourceManager.GetString("UntypedFunctionUsageInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use meaningful names ähnelt.
        /// </summary>
        public static string UseMeaningfulNameInspection {
            get {
                return ResourceManager.GetString("UseMeaningfulNameInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable is not assigned ähnelt.
        /// </summary>
        public static string VariableNotAssignedInspection {
            get {
                return ResourceManager.GetString("VariableNotAssignedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable is not referred to ähnelt.
        /// </summary>
        public static string VariableNotUsedInspection {
            get {
                return ResourceManager.GetString("VariableNotUsedInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicitly &apos;Variant&apos; variable ähnelt.
        /// </summary>
        public static string VariableTypeNotDeclaredInspection {
            get {
                return ResourceManager.GetString("VariableTypeNotDeclaredInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Write-only property ähnelt.
        /// </summary>
        public static string WriteOnlyPropertyInspection {
            get {
                return ResourceManager.GetString("WriteOnlyPropertyInspection", resourceCulture);
            }
        }
    }
}
