//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rubberduck.Refactorings {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class RefactoringsUI {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal RefactoringsUI() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Rubberduck.Refactorings.RefactoringsUI", typeof(RefactoringsUI).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_AddArgumentButtonLabel {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_AddArgumentButtonLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add/Adjust attribute ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_AdjustAttributeLabel {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_AdjustAttributeLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation to Add: ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_AnnotationLabel {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_AnnotationLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation Arguments: ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_ArgumentsLabel {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_ArgumentsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_ArgumentTypeHeader {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_ArgumentTypeHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Value ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_ArgumentValueHeader {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_ArgumentValueHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Annotate Declaration ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_Caption {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Declaration to Annotate: ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_DeclarationLabel {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_DeclarationLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select an annotation (and values) to add to the declaration. ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_Instructions {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_Instructions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_RemoveArgumentButtonLabel {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_RemoveArgumentButtonLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotate Declaration ähnelt.
        /// </summary>
        public static string AnnotateDeclarationDialog_TitleText {
            get {
                return ResourceManager.GetString("AnnotateDeclarationDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments of type &apos;Attribute Name&apos; have to start with &apos;VB_&apos;. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_AttributeNameStart {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_AttributeNameStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments cannot be empty. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_EmptyArgument {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_EmptyArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments of type &apos;Inspection Name&apos; have to be the name of an existing inspection. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_InspectionName {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_InspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments can only contain a single line. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_Newline {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_Newline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments of type &apos;Boolean&apos; have to either be &apos;True&apos; or &apos;False&apos;. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_NotABoolean {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_NotABoolean", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments of type &apos;Number&apos; have to be a valid number in integer or floating point format. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_NotANumber {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_NotANumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments must not contain control characters. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_SpecialCharacters {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_SpecialCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments cannot be longer than {0} characters. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_TooLong {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_TooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Annotation arguments of type &apos;Attribute Name&apos; cannot contain whitespace. ähnelt.
        /// </summary>
        public static string AnnotationArgument_ValidationError_WhitespaceInAttribute {
            get {
                return ResourceManager.GetString("AnnotationArgument_ValidationError_WhitespaceInAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Attribute ähnelt.
        /// </summary>
        public static string AnnotationArgumentType_Attribute {
            get {
                return ResourceManager.GetString("AnnotationArgumentType_Attribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Boolean ähnelt.
        /// </summary>
        public static string AnnotationArgumentType_Boolean {
            get {
                return ResourceManager.GetString("AnnotationArgumentType_Boolean", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inspection Name ähnelt.
        /// </summary>
        public static string AnnotationArgumentType_Inspection {
            get {
                return ResourceManager.GetString("AnnotationArgumentType_Inspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number ähnelt.
        /// </summary>
        public static string AnnotationArgumentType_Number {
            get {
                return ResourceManager.GetString("AnnotationArgumentType_Number", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text ähnelt.
        /// </summary>
        public static string AnnotationArgumentType_Text {
            get {
                return ResourceManager.GetString("AnnotationArgumentType_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} Consider choosing a different name. ähnelt.
        /// </summary>
        public static string AssignedByValDialog_MeaninglessNameFormat {
            get {
                return ResourceManager.GetString("AssignedByValDialog_MeaninglessNameFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; is already accessible to this scope. ähnelt.
        /// </summary>
        public static string AssignedByValDialog_NewNameAlreadyUsedFormat {
            get {
                return ResourceManager.GetString("AssignedByValDialog_NewNameAlreadyUsedFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Assigned ByVal parameter QuickFix - Make Local Copy ähnelt.
        /// </summary>
        public static string AssignedByValParamQFixDialog_Caption {
            get {
                return ResourceManager.GetString("AssignedByValParamQFixDialog_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify a name to use for the local copy of ByVal {0} &apos;{1}&apos;. ähnelt.
        /// </summary>
        public static string AssignedByValParamQFixDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("AssignedByValParamQFixDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Specify Local Copy Variable Name ähnelt.
        /// </summary>
        public static string AssignedByValParamQFixDialog_TitleText {
            get {
                return ResourceManager.GetString("AssignedByValParamQFixDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unable to encapsulate &apos;{0}&apos;. ReDim({0}) statement(s) exist in other modules. ähnelt.
        /// </summary>
        public static string EncapsulateField_ArrayHasExternalRedimFormat {
            get {
                return ResourceManager.GetString("EncapsulateField_ArrayHasExternalRedimFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Encapsulate Field ähnelt.
        /// </summary>
        public static string EncapsulateField_Caption {
            get {
                return ResourceManager.GetString("EncapsulateField_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select one or more fields to encapsulate.  Accept the default values or edit property names. ähnelt.
        /// </summary>
        public static string EncapsulateField_InstructionText {
            get {
                return ResourceManager.GetString("EncapsulateField_InstructionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name conflict ähnelt.
        /// </summary>
        public static string EncapsulateField_NameConflictDetected {
            get {
                return ResourceManager.GetString("EncapsulateField_NameConflictDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter Name: ähnelt.
        /// </summary>
        public static string EncapsulateField_ParameterName {
            get {
                return ResourceManager.GetString("EncapsulateField_ParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Preview: ähnelt.
        /// </summary>
        public static string EncapsulateField_Preview {
            get {
                return ResourceManager.GetString("EncapsulateField_Preview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;&lt;===== Property and declaration changes above this line =====&gt; ähnelt.
        /// </summary>
        public static string EncapsulateField_PreviewMarker {
            get {
                return ResourceManager.GetString("EncapsulateField_PreviewMarker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Creates a property for each UDT Member ähnelt.
        /// </summary>
        public static string EncapsulateField_PrivateUDTPropertyText {
            get {
                return ResourceManager.GetString("EncapsulateField_PrivateUDTPropertyText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Property Name: ähnelt.
        /// </summary>
        public static string EncapsulateField_PropertyName {
            get {
                return ResourceManager.GetString("EncapsulateField_PropertyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Read Only ähnelt.
        /// </summary>
        public static string EncapsulateField_ReadOnlyCheckBoxContent {
            get {
                return ResourceManager.GetString("EncapsulateField_ReadOnlyCheckBoxContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Setter Type: ähnelt.
        /// </summary>
        public static string EncapsulateField_SetterType {
            get {
                return ResourceManager.GetString("EncapsulateField_SetterType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Encapsulate Field ähnelt.
        /// </summary>
        public static string EncapsulateField_TitleText {
            get {
                return ResourceManager.GetString("EncapsulateField_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Wrap Fields in Private Type ähnelt.
        /// </summary>
        public static string EncapsulateField_WrapFieldsInPrivateType {
            get {
                return ResourceManager.GetString("EncapsulateField_WrapFieldsInPrivateType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Extract Interface ähnelt.
        /// </summary>
        public static string ExtractInterface_Caption {
            get {
                return ResourceManager.GetString("ExtractInterface_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implementation Options: ähnelt.
        /// </summary>
        public static string ExtractInterface_ImplementationOptionsGroupBox {
            get {
                return ResourceManager.GetString("ExtractInterface_ImplementationOptionsGroupBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Instancing ähnelt.
        /// </summary>
        public static string ExtractInterface_InstancingGroupBox {
            get {
                return ResourceManager.GetString("ExtractInterface_InstancingGroupBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify interface name and members. ähnelt.
        /// </summary>
        public static string ExtractInterface_InstructionLabel {
            get {
                return ResourceManager.GetString("ExtractInterface_InstructionLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Members ähnelt.
        /// </summary>
        public static string ExtractInterface_MembersGroupBox {
            get {
                return ResourceManager.GetString("ExtractInterface_MembersGroupBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add Empty Implementation ähnelt.
        /// </summary>
        public static string ExtractInterface_OptionAddEmptyImplementation {
            get {
                return ResourceManager.GetString("ExtractInterface_OptionAddEmptyImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Forward Object Member Calls to Interface Members ähnelt.
        /// </summary>
        public static string ExtractInterface_OptionForwardToInterfaceMembers {
            get {
                return ResourceManager.GetString("ExtractInterface_OptionForwardToInterfaceMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Forward Interface Member Calls to Object Members ähnelt.
        /// </summary>
        public static string ExtractInterface_OptionForwardToObjectMembers {
            get {
                return ResourceManager.GetString("ExtractInterface_OptionForwardToObjectMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Replace Members with Interface Members ähnelt.
        /// </summary>
        public static string ExtractInterface_OptionReplaceMembersWithInterfaceMembers {
            get {
                return ResourceManager.GetString("ExtractInterface_OptionReplaceMembersWithInterfaceMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Private ähnelt.
        /// </summary>
        public static string ExtractInterface_Private {
            get {
                return ResourceManager.GetString("ExtractInterface_Private", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Public ähnelt.
        /// </summary>
        public static string ExtractInterface_Public {
            get {
                return ResourceManager.GetString("ExtractInterface_Public", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The implementing class is &apos;Public&apos; mandating the interface be public as well.
        ///If you require a &apos;Private&apos; interface, change the classes instancing to private as well.
        ///A private class can still implement a public interface. ähnelt.
        /// </summary>
        public static string ExtractInterface_PublicInstancingMandatedByPublicClass {
            get {
                return ResourceManager.GetString("ExtractInterface_PublicInstancingMandatedByPublicClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Extract Interface ähnelt.
        /// </summary>
        public static string ExtractInterface_TitleLabel {
            get {
                return ResourceManager.GetString("ExtractInterface_TitleLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Accessibility: ähnelt.
        /// </summary>
        public static string ExtractMethod_AccessibilityLabel {
            get {
                return ResourceManager.GetString("ExtractMethod_AccessibilityLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Extract Method ähnelt.
        /// </summary>
        public static string ExtractMethod_Caption {
            get {
                return ResourceManager.GetString("ExtractMethod_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify method name, return type and/or parameters (if applicable), and other options. ähnelt.
        /// </summary>
        public static string ExtractMethod_InstructionsText {
            get {
                return ResourceManager.GetString("ExtractMethod_InstructionsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The current selection is not valid. ähnelt.
        /// </summary>
        public static string ExtractMethod_InvalidSelectionMessage {
            get {
                return ResourceManager.GetString("ExtractMethod_InvalidSelectionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die (none) ähnelt.
        /// </summary>
        public static string ExtractMethod_OutputNone {
            get {
                return ResourceManager.GetString("ExtractMethod_OutputNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameters: ähnelt.
        /// </summary>
        public static string ExtractMethod_ParametersLabel {
            get {
                return ResourceManager.GetString("ExtractMethod_ParametersLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Preview: ähnelt.
        /// </summary>
        public static string ExtractMethod_PreviewLabel {
            get {
                return ResourceManager.GetString("ExtractMethod_PreviewLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Return: ähnelt.
        /// </summary>
        public static string ExtractMethod_ReturnLabel {
            get {
                return ResourceManager.GetString("ExtractMethod_ReturnLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set ähnelt.
        /// </summary>
        public static string ExtractMethod_SetBoxLabel {
            get {
                return ResourceManager.GetString("ExtractMethod_SetBoxLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Extract method ähnelt.
        /// </summary>
        public static string ExtractMethod_TitleText {
            get {
                return ResourceManager.GetString("ExtractMethod_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Implement Interface ähnelt.
        /// </summary>
        public static string ImplementInterface_Caption {
            get {
                return ResourceManager.GetString("ImplementInterface_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No implements selected. ähnelt.
        /// </summary>
        public static string ImplementInterfaceFailed_NoImplementsStatementSelected {
            get {
                return ResourceManager.GetString("ImplementInterfaceFailed_NoImplementsStatementSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Introduce Field ähnelt.
        /// </summary>
        public static string IntroduceField_Caption {
            get {
                return ResourceManager.GetString("IntroduceField_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The target &apos;{0}&apos; is already a field. ähnelt.
        /// </summary>
        public static string IntroduceFieldFailed_TargetIsAlreadyAField {
            get {
                return ResourceManager.GetString("IntroduceFieldFailed_TargetIsAlreadyAField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; does not start with a letter. ähnelt.
        /// </summary>
        public static string InvalidNameCriteria_DoesNotStartWithLetterFormat {
            get {
                return ResourceManager.GetString("InvalidNameCriteria_DoesNotStartWithLetterFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; exceeds the maximum allowed string length. ähnelt.
        /// </summary>
        public static string InvalidNameCriteria_ExceedsMaximumLengthFormat {
            get {
                return ResourceManager.GetString("InvalidNameCriteria_ExceedsMaximumLengthFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; contains special character(s) other than underscores. ähnelt.
        /// </summary>
        public static string InvalidNameCriteria_InvalidCharactersFormat {
            get {
                return ResourceManager.GetString("InvalidNameCriteria_InvalidCharactersFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die VBA Identifiers cannot be null or zero-length. ähnelt.
        /// </summary>
        public static string InvalidNameCriteria_IsNullOrEmpty {
            get {
                return ResourceManager.GetString("InvalidNameCriteria_IsNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; is a reserved keyword. ähnelt.
        /// </summary>
        public static string InvalidNameCriteria_IsReservedKeywordFormat {
            get {
                return ResourceManager.GetString("InvalidNameCriteria_IsReservedKeywordFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Move Closer To Usage ähnelt.
        /// </summary>
        public static string MoveCloserToUsage_Caption {
            get {
                return ResourceManager.GetString("MoveCloserToUsage_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the new Type of Declaration Statement for &apos;{0}&apos;. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("MoveCloserToUsageDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select Declaration Statement ähnelt.
        /// </summary>
        public static string MoveCloserToUsageDialog_TitleText {
            get {
                return ResourceManager.GetString("MoveCloserToUsageDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid Selection. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_InvalidSelection {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_InvalidSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The method using &apos;{0}&apos; already has the declaration &apos;{1}&apos; of the same name in scope. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_ReferencingMethodHasSameNameDeclarationInScope {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_ReferencingMethodHasSameNameDeclarationInScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; is not used anywhere. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_TargetHasNoReferences {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_TargetHasNoReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; is not defined in the same project it is used. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_TargetIsInDifferentProject {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_TargetIsInDifferentProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; is defined neither in the component component it is used nor in a standard module. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_TargetIsInOtherNonStandardModule {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_TargetIsInOtherNonStandardModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; is a public member of of a class, form or document. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_TargetIsNonPrivateInNonStandardModule {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_TargetIsNonPrivateInNonStandardModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; is built-in. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_TargetIsNotUserDefined {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_TargetIsNotUserDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; has references in multiple methods. ähnelt.
        /// </summary>
        public static string MoveCloserToUsageFailure_TargetIsUsedInMultipleMethods {
            get {
                return ResourceManager.GetString("MoveCloserToUsageFailure_TargetIsUsedInMultipleMethods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify a new parent folder for the subfolder &apos;{0}&apos; of &apos;{1}&apos;. ähnelt.
        /// </summary>
        public static string MoveFolderDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("MoveFolderDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Folder names cannot contain control characters like e.g. new lines. ähnelt.
        /// </summary>
        public static string MoveFolders_ControlCharacter {
            get {
                return ResourceManager.GetString("MoveFolders_ControlCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A folder name cannot be empty. ähnelt.
        /// </summary>
        public static string MoveFolders_EmptyFolderName {
            get {
                return ResourceManager.GetString("MoveFolders_EmptyFolderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The names of individual subfolders cannot be empty. ähnelt.
        /// </summary>
        public static string MoveFolders_EmptySubfolderName {
            get {
                return ResourceManager.GetString("MoveFolders_EmptySubfolderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Several folders with the same name are being moved. This will merge them.
        ///Do you want to proceed? ähnelt.
        /// </summary>
        public static string MoveFolders_SameNameSourceFolders {
            get {
                return ResourceManager.GetString("MoveFolders_SameNameSourceFolders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The target folder &apos;{0}&apos; already contains a subfolder &apos;{1}&apos;. Moving the folder will merge it with the existing folder.
        ///Do you want to proceed? ähnelt.
        /// </summary>
        public static string MoveFolders_SameNameSubfolder {
            get {
                return ResourceManager.GetString("MoveFolders_SameNameSubfolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The target folder &apos;{0}&apos; already contains subfolders {1}. Moving the folders will merge them with the existing folders with corresponding names.
        ///Do you want to proceed? ähnelt.
        /// </summary>
        public static string MoveFolders_SameNameSubfolders {
            get {
                return ResourceManager.GetString("MoveFolders_SameNameSubfolders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Move Folders ähnelt.
        /// </summary>
        public static string MoveFoldersDialog_Caption {
            get {
                return ResourceManager.GetString("MoveFoldersDialog_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify a new parent folder for the folders. ähnelt.
        /// </summary>
        public static string MoveFoldersDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("MoveFoldersDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move Folders ähnelt.
        /// </summary>
        public static string MoveFoldersDialog_TitleText {
            get {
                return ResourceManager.GetString("MoveFoldersDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify new folder for the components. ähnelt.
        /// </summary>
        public static string MoveMultipleToFolderDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("MoveMultipleToFolderDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify a new parent folder for the folder &apos;{0}&apos;. ähnelt.
        /// </summary>
        public static string MoveRootFolderDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("MoveRootFolderDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Move to Folder ähnelt.
        /// </summary>
        public static string MoveToFolderDialog_Caption {
            get {
                return ResourceManager.GetString("MoveToFolderDialog_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Folder: ähnelt.
        /// </summary>
        public static string MoveToFolderDialog_FolderLabelText {
            get {
                return ResourceManager.GetString("MoveToFolderDialog_FolderLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify a new folder for {0} &apos;{1}&apos; in folder &apos;{2}&apos;. ähnelt.
        /// </summary>
        public static string MoveToFolderDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("MoveToFolderDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move to Folder ähnelt.
        /// </summary>
        public static string MoveToFolderDialog_TitleText {
            get {
                return ResourceManager.GetString("MoveToFolderDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Promote to Parameter ähnelt.
        /// </summary>
        public static string PromoteToParameter_Caption {
            get {
                return ResourceManager.GetString("PromoteToParameter_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Method &apos;{0}&apos; implements &apos;{1}.{2}&apos;. Change interface signature? (Will propagate to all implementations.) ähnelt.
        /// </summary>
        public static string PromoteToParameter_PromptIfTargetIsInterface {
            get {
                return ResourceManager.GetString("PromoteToParameter_PromptIfTargetIsInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The target &apos;{0}&apos; is not contained in a method. ähnelt.
        /// </summary>
        public static string PromoteToParameterFailed_TargetNotContainedInMethod {
            get {
                return ResourceManager.GetString("PromoteToParameterFailed_TargetNotContainedInMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Method &apos;{0}&apos; implements &apos;{1}.{2}&apos;. Change interface signature? (Will propagate to all implementations.) ähnelt.
        /// </summary>
        public static string Refactoring_TargetIsInterfaceMemberImplementation {
            get {
                return ResourceManager.GetString("Refactoring_TargetIsInterfaceMemberImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The component &apos;{0}&apos; would have been affected by the refactoring, but its state in Rubberduck&apos;s memory is stale. Please refresh Rubberduck and try again. ähnelt.
        /// </summary>
        public static string RefactoringFailure_AffectedModuleIsStale {
            get {
                return ResourceManager.GetString("RefactoringFailure_AffectedModuleIsStale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The refactoring can only annotate components, members and variables, but the target had type &apos;{0}&apos;. ähnelt.
        /// </summary>
        public static string RefactoringFailure_AnnotateDeclaration_InvalidType {
            get {
                return ResourceManager.GetString("RefactoringFailure_AnnotateDeclaration_InvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Refactoring failed. ähnelt.
        /// </summary>
        public static string RefactoringFailure_BaseMessage {
            get {
                return ResourceManager.GetString("RefactoringFailure_BaseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Declaration type of target &apos;{0}&apos; is &apos;{1}&apos; instead of the expected &apos;{2}&apos;. ähnelt.
        /// </summary>
        public static string RefactoringFailure_InvalidDeclarationType {
            get {
                return ResourceManager.GetString("RefactoringFailure_InvalidDeclarationType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Declaration type of target &apos;{0}&apos; is &apos;{1}&apos; instead of one of the expected &apos;{2}&apos;. ähnelt.
        /// </summary>
        public static string RefactoringFailure_InvalidDeclarationType_multipleValid {
            get {
                return ResourceManager.GetString("RefactoringFailure_InvalidDeclarationType_multipleValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There is no active selection. ähnelt.
        /// </summary>
        public static string RefactoringFailure_NoActiveSelection {
            get {
                return ResourceManager.GetString("RefactoringFailure_NoActiveSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No viable target selected. ähnelt.
        /// </summary>
        public static string RefactoringFailure_NoTargetDeclarationForSelection {
            get {
                return ResourceManager.GetString("RefactoringFailure_NoTargetDeclarationForSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No target has been specified. ähnelt.
        /// </summary>
        public static string RefactoringFailure_NoTargetFolder {
            get {
                return ResourceManager.GetString("RefactoringFailure_NoTargetFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unable to suspend the Parser to perform the refactoring operation. ähnelt.
        /// </summary>
        public static string RefactoringFailure_SuspendParserFailure {
            get {
                return ResourceManager.GetString("RefactoringFailure_SuspendParserFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The target is not user-defined. ähnelt.
        /// </summary>
        public static string RefactoringFailure_TargetNotUserDefined {
            get {
                return ResourceManager.GetString("RefactoringFailure_TargetNotUserDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Target declaration is null. ähnelt.
        /// </summary>
        public static string RefactoringFailure_TargetNull {
            get {
                return ResourceManager.GetString("RefactoringFailure_TargetNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Remove Parameters ähnelt.
        /// </summary>
        public static string RemoveParamsDialog_Caption {
            get {
                return ResourceManager.GetString("RemoveParamsDialog_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select a parameter and double-click it or use buttons to remove or restore it. ähnelt.
        /// </summary>
        public static string RemoveParamsDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("RemoveParamsDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cannot remove last parameter from setter or letter. ähnelt.
        /// </summary>
        public static string RemoveParamsDialog_RemoveIllegalSetterLetterParameter {
            get {
                return ResourceManager.GetString("RemoveParamsDialog_RemoveIllegalSetterLetterParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove parameters ähnelt.
        /// </summary>
        public static string RemoveParamsDialog_TitleText {
            get {
                return ResourceManager.GetString("RemoveParamsDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No parameters in method &apos;{0}&apos;. ähnelt.
        /// </summary>
        public static string RemovePresenter_NoParametersError {
            get {
                return ResourceManager.GetString("RemovePresenter_NoParametersError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rename {0} ähnelt.
        /// </summary>
        public static string Rename_DeclarationType {
            get {
                return ResourceManager.GetString("Rename_DeclarationType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please ensure that exactly 1 control is selected before renaming. ähnelt.
        /// </summary>
        public static string RenameDialog_AmbiguousSelection {
            get {
                return ResourceManager.GetString("RenameDialog_AmbiguousSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} {1} cannot be changed. ähnelt.
        /// </summary>
        public static string RenameDialog_BuiltInNameError {
            get {
                return ResourceManager.GetString("RenameDialog_BuiltInNameError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Rename ähnelt.
        /// </summary>
        public static string RenameDialog_Caption {
            get {
                return ResourceManager.GetString("RenameDialog_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; conflicts with the name of the existing declaration &apos;{1}&apos;. Renaming &apos;{2}&apos; to &apos;{0}&apos; may result in uncompilable  code or a change in logic.
        ///Do you want to proceed with this rename? ähnelt.
        /// </summary>
        public static string RenameDialog_ConflictingNames {
            get {
                return ResourceManager.GetString("RenameDialog_ConflictingNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not rename {0}. ähnelt.
        /// </summary>
        public static string RenameDialog_DefaultRenameError {
            get {
                return ResourceManager.GetString("RenameDialog_DefaultRenameError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die folder ähnelt.
        /// </summary>
        public static string RenameDialog_Folder {
            get {
                return ResourceManager.GetString("RenameDialog_Folder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The folder &apos;{0}&apos; already exists. Renaming &apos;{1}&apos; to &apos;{2}&apos; will lead to a merge with the existing folder.
        ///Do you want to proceed? ähnelt.
        /// </summary>
        public static string RenameDialog_FolderAlreadyExists {
            get {
                return ResourceManager.GetString("RenameDialog_FolderAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Folder: ähnelt.
        /// </summary>
        public static string RenameDialog_FolderLabel {
            get {
                return ResourceManager.GetString("RenameDialog_FolderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Full new folder: ähnelt.
        /// </summary>
        public static string RenameDialog_FullNewFolderLabel {
            get {
                return ResourceManager.GetString("RenameDialog_FullNewFolderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please specify new name for {0} &apos;{1}&apos;. ähnelt.
        /// </summary>
        public static string RenameDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("RenameDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not rename Interface Member {0}. ähnelt.
        /// </summary>
        public static string RenameDialog_InterfaceRenameError {
            get {
                return ResourceManager.GetString("RenameDialog_InterfaceRenameError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die It is not possible to change only the case of an identifier in VBA (language is case-insensitive). ähnelt.
        /// </summary>
        public static string RenameDialog_OnlyCasingDifferent {
            get {
                return ResourceManager.GetString("RenameDialog_OnlyCasingDifferent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rename identifier ähnelt.
        /// </summary>
        public static string RenameDialog_TitleText {
            get {
                return ResourceManager.GetString("RenameDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rename folder ähnelt.
        /// </summary>
        public static string RenameDialog_TitleText_Folder {
            get {
                return ResourceManager.GetString("RenameDialog_TitleText_Folder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Target &apos;{0}&apos; is a standard event handler, which cannot be renamed. ähnelt.
        /// </summary>
        public static string RenameFailure_StandardEventHandler {
            get {
                return ResourceManager.GetString("RenameFailure_StandardEventHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Target control &apos;{0}&apos; not found. ähnelt.
        /// </summary>
        public static string RenameFailure_TargetControlNotFound {
            get {
                return ResourceManager.GetString("RenameFailure_TargetControlNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No code module found for the target module &apos;{0}&apos;. ähnelt.
        /// </summary>
        public static string RenameFailure_TargetModuleWithoutCodeModule {
            get {
                return ResourceManager.GetString("RenameFailure_TargetModuleWithoutCodeModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Method &apos;{0}&apos; is an EventHandler for control &apos;{1}&apos;.  Only the control can be renamed.  Rename &apos;{1}&apos; instead? ähnelt.
        /// </summary>
        public static string RenamePresenter_TargetIsControlEventHandler {
            get {
                return ResourceManager.GetString("RenamePresenter_TargetIsControlEventHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Method &apos;{0}&apos; is an implementation of event &apos;{1}.{2}&apos;.  Rename event &apos;{2}&apos; instead? ähnelt.
        /// </summary>
        public static string RenamePresenter_TargetIsEventHandlerImplementation {
            get {
                return ResourceManager.GetString("RenamePresenter_TargetIsEventHandlerImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Method &apos;{0}&apos; implements &apos;{1}.{2}&apos;. Rename the interface member? ähnelt.
        /// </summary>
        public static string RenamePresenter_TargetIsInterfaceMemberImplementation {
            get {
                return ResourceManager.GetString("RenamePresenter_TargetIsInterfaceMemberImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck - Reorder Parameters ähnelt.
        /// </summary>
        public static string ReorderParamsDialog_Caption {
            get {
                return ResourceManager.GetString("ReorderParamsDialog_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select a parameter and drag it or use buttons to move it up or down. ähnelt.
        /// </summary>
        public static string ReorderParamsDialog_InstructionsLabelText {
            get {
                return ResourceManager.GetString("ReorderParamsDialog_InstructionsLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move down ähnelt.
        /// </summary>
        public static string ReorderParamsDialog_MoveDownButtonText {
            get {
                return ResourceManager.GetString("ReorderParamsDialog_MoveDownButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move up ähnelt.
        /// </summary>
        public static string ReorderParamsDialog_MoveUpButtonText {
            get {
                return ResourceManager.GetString("ReorderParamsDialog_MoveUpButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reorder parameters ähnelt.
        /// </summary>
        public static string ReorderParamsDialog_TitleText {
            get {
                return ResourceManager.GetString("ReorderParamsDialog_TitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Less than two parameters in method &apos;{0}&apos;. ähnelt.
        /// </summary>
        public static string ReorderPresenter_LessThanTwoParametersError {
            get {
                return ResourceManager.GetString("ReorderPresenter_LessThanTwoParametersError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Optional parameters must be specified at the end of the parameter list. ähnelt.
        /// </summary>
        public static string ReorderPresenter_OptionalParametersMustBeLastError {
            get {
                return ResourceManager.GetString("ReorderPresenter_OptionalParametersMustBeLastError", resourceCulture);
            }
        }
    }
}
